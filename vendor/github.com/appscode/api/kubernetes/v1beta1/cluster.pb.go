// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cluster.proto

/*
Package v1beta1 is a generated protocol buffer package.

It is generated from these files:
	cluster.proto
	incident.proto
	loadbalancer.proto
	metadata.proto

It has these top-level messages:
	ClusterSettings
	Cluster
	ClusterDescribeRequest
	ClusterDescribeResponse
	ClusterListRequest
	ClusterListResponse
	InstanceGroup
	ClusterCreateRequest
	ClusterDeleteRequest
	ClusterStartupConfigRequest
	ClusterStartupConfigResponse
	ClusterInstanceByIPRequest
	ClusterInstanceByIPResponse
	ClusterClientConfigRequest
	ClusterClientConfigResponse
	ClusterClientContainerRequest
	ClusterInstance
	ClusterUpdateRequest
	ClusterReconfigureRequest
	Incident
	IncidentListRequest
	IncidentListResponse
	IncidentDescribeRequest
	IncidentDescribeResponse
	IncidentNotifyRequest
	IncidentEventCreateRequest
	ListRequest
	ListResponse
	DescribeRequest
	DescribeResponse
	CreateRequest
	UpdateRequest
	DeleteRequest
	Raw
	LoadBalancer
	Spec
	Status
	LoadBalancerStatus
	LoadBalancerBackend
	LoadBalancerRule
	HTTPLoadBalancerRule
	TCPLoadBalancerRule
	RegionListRequest
	RegionListResponse
	ZoneListRequest
	ZoneListResponse
	BucketListRequest
	BucketListResponse
*/
package v1beta1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/grpc-ecosystem/grpc-gateway/third_party/appscodeapis/appscode/api"
import appscode_dtypes "github.com/appscode/api/dtypes"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ClusterSettings struct {
	LogIndexPrefix string `protobuf:"bytes,1,opt,name=log_index_prefix,json=logIndexPrefix" json:"log_index_prefix,omitempty"`
	// Number of secs logs will be stored in ElasticSearch
	LogStorageLifetime int64 `protobuf:"varint,2,opt,name=log_storage_lifetime,json=logStorageLifetime" json:"log_storage_lifetime,omitempty"`
	// Number of secs logs will be stored in InfluxDB
	MonitoringStorageLifetime int64 `protobuf:"varint,3,opt,name=monitoring_storage_lifetime,json=monitoringStorageLifetime" json:"monitoring_storage_lifetime,omitempty"`
}

func (m *ClusterSettings) Reset()                    { *m = ClusterSettings{} }
func (m *ClusterSettings) String() string            { return proto.CompactTextString(m) }
func (*ClusterSettings) ProtoMessage()               {}
func (*ClusterSettings) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ClusterSettings) GetLogIndexPrefix() string {
	if m != nil {
		return m.LogIndexPrefix
	}
	return ""
}

func (m *ClusterSettings) GetLogStorageLifetime() int64 {
	if m != nil {
		return m.LogStorageLifetime
	}
	return 0
}

func (m *ClusterSettings) GetMonitoringStorageLifetime() int64 {
	if m != nil {
		return m.MonitoringStorageLifetime
	}
	return 0
}

type Cluster struct {
	Uid                  string            `protobuf:"bytes,1,opt,name=uid" json:"uid,omitempty"`
	Name                 string            `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Provider             string            `protobuf:"bytes,3,opt,name=provider" json:"provider,omitempty"`
	Os                   string            `protobuf:"bytes,4,opt,name=os" json:"os,omitempty"`
	Region               string            `protobuf:"bytes,5,opt,name=region" json:"region,omitempty"`
	Zone                 string            `protobuf:"bytes,6,opt,name=zone" json:"zone,omitempty"`
	CreatedAt            int64             `protobuf:"varint,7,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	Links                map[string]string `protobuf:"bytes,8,rep,name=links" json:"links,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	DoNotDelete          bool              `protobuf:"varint,9,opt,name=do_not_delete,json=doNotDelete" json:"do_not_delete,omitempty"`
	Status               string            `protobuf:"bytes,10,opt,name=status" json:"status,omitempty"`
	StatusCause          string            `protobuf:"bytes,11,opt,name=status_cause,json=statusCause" json:"status_cause,omitempty"`
	GceProject           string            `protobuf:"bytes,12,opt,name=gce_project,json=gceProject" json:"gce_project,omitempty"`
	KubeletVersion       string            `protobuf:"bytes,13,opt,name=kubelet_version,json=kubeletVersion" json:"kubelet_version,omitempty"`
	SaltbaseVersion      string            `protobuf:"bytes,14,opt,name=saltbase_version,json=saltbaseVersion" json:"saltbase_version,omitempty"`
	KubeStarterVersion   string            `protobuf:"bytes,15,opt,name=kube_starter_version,json=kubeStarterVersion" json:"kube_starter_version,omitempty"`
	NodeCount            int32             `protobuf:"varint,16,opt,name=node_count,json=nodeCount" json:"node_count,omitempty"`
	ApiServerUrl         string            `protobuf:"bytes,17,opt,name=api_server_url,json=apiServerUrl" json:"api_server_url,omitempty"`
	KubeUser             string            `protobuf:"bytes,18,opt,name=kube_user,json=kubeUser" json:"kube_user,omitempty"`
	KubePassword         string            `protobuf:"bytes,19,opt,name=kube_password,json=kubePassword" json:"kube_password,omitempty"`
	CaCert               string            `protobuf:"bytes,20,opt,name=ca_cert,json=caCert" json:"ca_cert,omitempty"`
	KubeBearerToken      string            `protobuf:"bytes,21,opt,name=kube_bearer_token,json=kubeBearerToken" json:"kube_bearer_token,omitempty"`
	Settings             *ClusterSettings  `protobuf:"bytes,22,opt,name=settings" json:"settings,omitempty"`
	InstanceRootPassword string            `protobuf:"bytes,23,opt,name=instance_root_password,json=instanceRootPassword" json:"instance_root_password,omitempty"`
	Version              string            `protobuf:"bytes,24,opt,name=version" json:"version,omitempty"`
	Sku                  string            `protobuf:"bytes,25,opt,name=sku" json:"sku,omitempty"`
	CreatedBy            string            `protobuf:"bytes,26,opt,name=created_by,json=createdBy" json:"created_by,omitempty"`
	DefaultAccessLevel   string            `protobuf:"bytes,27,opt,name=default_access_level,json=defaultAccessLevel" json:"default_access_level,omitempty"`
}

func (m *Cluster) Reset()                    { *m = Cluster{} }
func (m *Cluster) String() string            { return proto.CompactTextString(m) }
func (*Cluster) ProtoMessage()               {}
func (*Cluster) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Cluster) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *Cluster) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Cluster) GetProvider() string {
	if m != nil {
		return m.Provider
	}
	return ""
}

func (m *Cluster) GetOs() string {
	if m != nil {
		return m.Os
	}
	return ""
}

func (m *Cluster) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *Cluster) GetZone() string {
	if m != nil {
		return m.Zone
	}
	return ""
}

func (m *Cluster) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *Cluster) GetLinks() map[string]string {
	if m != nil {
		return m.Links
	}
	return nil
}

func (m *Cluster) GetDoNotDelete() bool {
	if m != nil {
		return m.DoNotDelete
	}
	return false
}

func (m *Cluster) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Cluster) GetStatusCause() string {
	if m != nil {
		return m.StatusCause
	}
	return ""
}

func (m *Cluster) GetGceProject() string {
	if m != nil {
		return m.GceProject
	}
	return ""
}

func (m *Cluster) GetKubeletVersion() string {
	if m != nil {
		return m.KubeletVersion
	}
	return ""
}

func (m *Cluster) GetSaltbaseVersion() string {
	if m != nil {
		return m.SaltbaseVersion
	}
	return ""
}

func (m *Cluster) GetKubeStarterVersion() string {
	if m != nil {
		return m.KubeStarterVersion
	}
	return ""
}

func (m *Cluster) GetNodeCount() int32 {
	if m != nil {
		return m.NodeCount
	}
	return 0
}

func (m *Cluster) GetApiServerUrl() string {
	if m != nil {
		return m.ApiServerUrl
	}
	return ""
}

func (m *Cluster) GetKubeUser() string {
	if m != nil {
		return m.KubeUser
	}
	return ""
}

func (m *Cluster) GetKubePassword() string {
	if m != nil {
		return m.KubePassword
	}
	return ""
}

func (m *Cluster) GetCaCert() string {
	if m != nil {
		return m.CaCert
	}
	return ""
}

func (m *Cluster) GetKubeBearerToken() string {
	if m != nil {
		return m.KubeBearerToken
	}
	return ""
}

func (m *Cluster) GetSettings() *ClusterSettings {
	if m != nil {
		return m.Settings
	}
	return nil
}

func (m *Cluster) GetInstanceRootPassword() string {
	if m != nil {
		return m.InstanceRootPassword
	}
	return ""
}

func (m *Cluster) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *Cluster) GetSku() string {
	if m != nil {
		return m.Sku
	}
	return ""
}

func (m *Cluster) GetCreatedBy() string {
	if m != nil {
		return m.CreatedBy
	}
	return ""
}

func (m *Cluster) GetDefaultAccessLevel() string {
	if m != nil {
		return m.DefaultAccessLevel
	}
	return ""
}

type ClusterDescribeRequest struct {
	Uid string `protobuf:"bytes,1,opt,name=uid" json:"uid,omitempty"`
}

func (m *ClusterDescribeRequest) Reset()                    { *m = ClusterDescribeRequest{} }
func (m *ClusterDescribeRequest) String() string            { return proto.CompactTextString(m) }
func (*ClusterDescribeRequest) ProtoMessage()               {}
func (*ClusterDescribeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ClusterDescribeRequest) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

type ClusterDescribeResponse struct {
	Cluster      *Cluster                             `protobuf:"bytes,1,opt,name=cluster" json:"cluster,omitempty"`
	Spec         *ClusterDescribeResponse_ClusterSpec `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	OperationUid string                               `protobuf:"bytes,3,opt,name=operation_uid,json=operationUid" json:"operation_uid,omitempty"`
}

func (m *ClusterDescribeResponse) Reset()                    { *m = ClusterDescribeResponse{} }
func (m *ClusterDescribeResponse) String() string            { return proto.CompactTextString(m) }
func (*ClusterDescribeResponse) ProtoMessage()               {}
func (*ClusterDescribeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ClusterDescribeResponse) GetCluster() *Cluster {
	if m != nil {
		return m.Cluster
	}
	return nil
}

func (m *ClusterDescribeResponse) GetSpec() *ClusterDescribeResponse_ClusterSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *ClusterDescribeResponse) GetOperationUid() string {
	if m != nil {
		return m.OperationUid
	}
	return ""
}

type ClusterDescribeResponse_ClusterSpec struct {
	ContainerCount int32 `protobuf:"varint,1,opt,name=container_count,json=containerCount" json:"container_count,omitempty"`
	PodCount       int32 `protobuf:"varint,2,opt,name=pod_count,json=podCount" json:"pod_count,omitempty"`
	ServiceCount   int32 `protobuf:"varint,3,opt,name=service_count,json=serviceCount" json:"service_count,omitempty"`
	RcCount        int32 `protobuf:"varint,4,opt,name=rc_count,json=rcCount" json:"rc_count,omitempty"`
	TotalCpu       int64 `protobuf:"varint,5,opt,name=total_cpu,json=totalCpu" json:"total_cpu,omitempty"`
	TotalMemory    int64 `protobuf:"varint,6,opt,name=total_memory,json=totalMemory" json:"total_memory,omitempty"`
}

func (m *ClusterDescribeResponse_ClusterSpec) Reset()         { *m = ClusterDescribeResponse_ClusterSpec{} }
func (m *ClusterDescribeResponse_ClusterSpec) String() string { return proto.CompactTextString(m) }
func (*ClusterDescribeResponse_ClusterSpec) ProtoMessage()    {}
func (*ClusterDescribeResponse_ClusterSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{3, 0}
}

func (m *ClusterDescribeResponse_ClusterSpec) GetContainerCount() int32 {
	if m != nil {
		return m.ContainerCount
	}
	return 0
}

func (m *ClusterDescribeResponse_ClusterSpec) GetPodCount() int32 {
	if m != nil {
		return m.PodCount
	}
	return 0
}

func (m *ClusterDescribeResponse_ClusterSpec) GetServiceCount() int32 {
	if m != nil {
		return m.ServiceCount
	}
	return 0
}

func (m *ClusterDescribeResponse_ClusterSpec) GetRcCount() int32 {
	if m != nil {
		return m.RcCount
	}
	return 0
}

func (m *ClusterDescribeResponse_ClusterSpec) GetTotalCpu() int64 {
	if m != nil {
		return m.TotalCpu
	}
	return 0
}

func (m *ClusterDescribeResponse_ClusterSpec) GetTotalMemory() int64 {
	if m != nil {
		return m.TotalMemory
	}
	return 0
}

type ClusterListRequest struct {
	Status []string `protobuf:"bytes,1,rep,name=status" json:"status,omitempty"`
}

func (m *ClusterListRequest) Reset()                    { *m = ClusterListRequest{} }
func (m *ClusterListRequest) String() string            { return proto.CompactTextString(m) }
func (*ClusterListRequest) ProtoMessage()               {}
func (*ClusterListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ClusterListRequest) GetStatus() []string {
	if m != nil {
		return m.Status
	}
	return nil
}

type ClusterListResponse struct {
	Clusters []*Cluster `protobuf:"bytes,1,rep,name=clusters" json:"clusters,omitempty"`
}

func (m *ClusterListResponse) Reset()                    { *m = ClusterListResponse{} }
func (m *ClusterListResponse) String() string            { return proto.CompactTextString(m) }
func (*ClusterListResponse) ProtoMessage()               {}
func (*ClusterListResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ClusterListResponse) GetClusters() []*Cluster {
	if m != nil {
		return m.Clusters
	}
	return nil
}

type InstanceGroup struct {
	Sku              string `protobuf:"bytes,1,opt,name=sku" json:"sku,omitempty"`
	Count            int64  `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
	UseSpotInstances bool   `protobuf:"varint,3,opt,name=use_spot_instances,json=useSpotInstances" json:"use_spot_instances,omitempty"`
}

func (m *InstanceGroup) Reset()                    { *m = InstanceGroup{} }
func (m *InstanceGroup) String() string            { return proto.CompactTextString(m) }
func (*InstanceGroup) ProtoMessage()               {}
func (*InstanceGroup) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *InstanceGroup) GetSku() string {
	if m != nil {
		return m.Sku
	}
	return ""
}

func (m *InstanceGroup) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *InstanceGroup) GetUseSpotInstances() bool {
	if m != nil {
		return m.UseSpotInstances
	}
	return false
}

type ClusterCreateRequest struct {
	Name              string           `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Provider          string           `protobuf:"bytes,2,opt,name=provider" json:"provider,omitempty"`
	Zone              string           `protobuf:"bytes,3,opt,name=zone" json:"zone,omitempty"`
	CredentialUid     string           `protobuf:"bytes,4,opt,name=credential_uid,json=credentialUid" json:"credential_uid,omitempty"`
	NodeGroups        []*InstanceGroup `protobuf:"bytes,5,rep,name=node_groups,json=nodeGroups" json:"node_groups,omitempty"`
	KubernetesVersion string           `protobuf:"bytes,6,opt,name=kubernetes_version,json=kubernetesVersion" json:"kubernetes_version,omitempty"`
	DoNotDelete       bool             `protobuf:"varint,7,opt,name=do_not_delete,json=doNotDelete" json:"do_not_delete,omitempty"`
	// Default access level is to allow permission to the cluster
	// when no Role matched for that specif user or group. This can
	// set as
	//   - kubernetes:team-admin
	//   - kubernetes:cluster-admin
	//   - kubernetes:admin
	//   - kubernetes:editor
	//   - kubernetes:viewer
	//   - deny-access
	// If not set this will set ""
	DefaultAccessLevel string `protobuf:"bytes,8,opt,name=default_access_level,json=defaultAccessLevel" json:"default_access_level,omitempty"`
	GceProject         string `protobuf:"bytes,9,opt,name=gce_project,json=gceProject" json:"gce_project,omitempty"`
}

func (m *ClusterCreateRequest) Reset()                    { *m = ClusterCreateRequest{} }
func (m *ClusterCreateRequest) String() string            { return proto.CompactTextString(m) }
func (*ClusterCreateRequest) ProtoMessage()               {}
func (*ClusterCreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ClusterCreateRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ClusterCreateRequest) GetProvider() string {
	if m != nil {
		return m.Provider
	}
	return ""
}

func (m *ClusterCreateRequest) GetZone() string {
	if m != nil {
		return m.Zone
	}
	return ""
}

func (m *ClusterCreateRequest) GetCredentialUid() string {
	if m != nil {
		return m.CredentialUid
	}
	return ""
}

func (m *ClusterCreateRequest) GetNodeGroups() []*InstanceGroup {
	if m != nil {
		return m.NodeGroups
	}
	return nil
}

func (m *ClusterCreateRequest) GetKubernetesVersion() string {
	if m != nil {
		return m.KubernetesVersion
	}
	return ""
}

func (m *ClusterCreateRequest) GetDoNotDelete() bool {
	if m != nil {
		return m.DoNotDelete
	}
	return false
}

func (m *ClusterCreateRequest) GetDefaultAccessLevel() string {
	if m != nil {
		return m.DefaultAccessLevel
	}
	return ""
}

func (m *ClusterCreateRequest) GetGceProject() string {
	if m != nil {
		return m.GceProject
	}
	return ""
}

type ClusterDeleteRequest struct {
	Name                 string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	ReleaseReservedIp    bool   `protobuf:"varint,2,opt,name=release_reserved_ip,json=releaseReservedIp" json:"release_reserved_ip,omitempty"`
	Force                bool   `protobuf:"varint,3,opt,name=force" json:"force,omitempty"`
	KeepLodabalancers    bool   `protobuf:"varint,4,opt,name=keep_lodabalancers,json=keepLodabalancers" json:"keep_lodabalancers,omitempty"`
	DeleteDynamicVolumes bool   `protobuf:"varint,5,opt,name=delete_dynamic_volumes,json=deleteDynamicVolumes" json:"delete_dynamic_volumes,omitempty"`
}

func (m *ClusterDeleteRequest) Reset()                    { *m = ClusterDeleteRequest{} }
func (m *ClusterDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*ClusterDeleteRequest) ProtoMessage()               {}
func (*ClusterDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ClusterDeleteRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ClusterDeleteRequest) GetReleaseReservedIp() bool {
	if m != nil {
		return m.ReleaseReservedIp
	}
	return false
}

func (m *ClusterDeleteRequest) GetForce() bool {
	if m != nil {
		return m.Force
	}
	return false
}

func (m *ClusterDeleteRequest) GetKeepLodabalancers() bool {
	if m != nil {
		return m.KeepLodabalancers
	}
	return false
}

func (m *ClusterDeleteRequest) GetDeleteDynamicVolumes() bool {
	if m != nil {
		return m.DeleteDynamicVolumes
	}
	return false
}

type ClusterStartupConfigRequest struct {
	Uid             string `protobuf:"bytes,1,opt,name=uid" json:"uid,omitempty"`
	Role            string `protobuf:"bytes,2,opt,name=role" json:"role,omitempty"`
	ResourceVersion int64  `protobuf:"varint,3,opt,name=resource_version,json=resourceVersion" json:"resource_version,omitempty"`
}

func (m *ClusterStartupConfigRequest) Reset()                    { *m = ClusterStartupConfigRequest{} }
func (m *ClusterStartupConfigRequest) String() string            { return proto.CompactTextString(m) }
func (*ClusterStartupConfigRequest) ProtoMessage()               {}
func (*ClusterStartupConfigRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *ClusterStartupConfigRequest) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *ClusterStartupConfigRequest) GetRole() string {
	if m != nil {
		return m.Role
	}
	return ""
}

func (m *ClusterStartupConfigRequest) GetResourceVersion() int64 {
	if m != nil {
		return m.ResourceVersion
	}
	return 0
}

type ClusterStartupConfigResponse struct {
	Configuration string `protobuf:"bytes,1,opt,name=configuration" json:"configuration,omitempty"`
	Sku           string `protobuf:"bytes,2,opt,name=sku" json:"sku,omitempty"`
}

func (m *ClusterStartupConfigResponse) Reset()                    { *m = ClusterStartupConfigResponse{} }
func (m *ClusterStartupConfigResponse) String() string            { return proto.CompactTextString(m) }
func (*ClusterStartupConfigResponse) ProtoMessage()               {}
func (*ClusterStartupConfigResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *ClusterStartupConfigResponse) GetConfiguration() string {
	if m != nil {
		return m.Configuration
	}
	return ""
}

func (m *ClusterStartupConfigResponse) GetSku() string {
	if m != nil {
		return m.Sku
	}
	return ""
}

type ClusterInstanceByIPRequest struct {
	Uid        string `protobuf:"bytes,1,opt,name=uid" json:"uid,omitempty"`
	ExternalIp string `protobuf:"bytes,2,opt,name=external_ip,json=externalIp" json:"external_ip,omitempty"`
}

func (m *ClusterInstanceByIPRequest) Reset()                    { *m = ClusterInstanceByIPRequest{} }
func (m *ClusterInstanceByIPRequest) String() string            { return proto.CompactTextString(m) }
func (*ClusterInstanceByIPRequest) ProtoMessage()               {}
func (*ClusterInstanceByIPRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *ClusterInstanceByIPRequest) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *ClusterInstanceByIPRequest) GetExternalIp() string {
	if m != nil {
		return m.ExternalIp
	}
	return ""
}

type ClusterInstanceByIPResponse struct {
	Instance *ClusterInstance `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
}

func (m *ClusterInstanceByIPResponse) Reset()                    { *m = ClusterInstanceByIPResponse{} }
func (m *ClusterInstanceByIPResponse) String() string            { return proto.CompactTextString(m) }
func (*ClusterInstanceByIPResponse) ProtoMessage()               {}
func (*ClusterInstanceByIPResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *ClusterInstanceByIPResponse) GetInstance() *ClusterInstance {
	if m != nil {
		return m.Instance
	}
	return nil
}

type ClusterClientConfigRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *ClusterClientConfigRequest) Reset()                    { *m = ClusterClientConfigRequest{} }
func (m *ClusterClientConfigRequest) String() string            { return proto.CompactTextString(m) }
func (*ClusterClientConfigRequest) ProtoMessage()               {}
func (*ClusterClientConfigRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *ClusterClientConfigRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ClusterClientConfigResponse struct {
	ClusterDomain   string `protobuf:"bytes,1,opt,name=cluster_domain,json=clusterDomain" json:"cluster_domain,omitempty"`
	CaCert          string `protobuf:"bytes,2,opt,name=ca_cert,json=caCert" json:"ca_cert,omitempty"`
	ApiServerUrl    string `protobuf:"bytes,3,opt,name=api_server_url,json=apiServerUrl" json:"api_server_url,omitempty"`
	ClusterUserName string `protobuf:"bytes,4,opt,name=cluster_user_name,json=clusterUserName" json:"cluster_user_name,omitempty"`
	UserCert        string `protobuf:"bytes,5,opt,name=user_cert,json=userCert" json:"user_cert,omitempty"`
	UserKey         string `protobuf:"bytes,6,opt,name=user_key,json=userKey" json:"user_key,omitempty"`
	ContextName     string `protobuf:"bytes,7,opt,name=context_name,json=contextName" json:"context_name,omitempty"`
	UserToken       string `protobuf:"bytes,8,opt,name=user_token,json=userToken" json:"user_token,omitempty"`
	Password        string `protobuf:"bytes,9,opt,name=password" json:"password,omitempty"`
}

func (m *ClusterClientConfigResponse) Reset()                    { *m = ClusterClientConfigResponse{} }
func (m *ClusterClientConfigResponse) String() string            { return proto.CompactTextString(m) }
func (*ClusterClientConfigResponse) ProtoMessage()               {}
func (*ClusterClientConfigResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *ClusterClientConfigResponse) GetClusterDomain() string {
	if m != nil {
		return m.ClusterDomain
	}
	return ""
}

func (m *ClusterClientConfigResponse) GetCaCert() string {
	if m != nil {
		return m.CaCert
	}
	return ""
}

func (m *ClusterClientConfigResponse) GetApiServerUrl() string {
	if m != nil {
		return m.ApiServerUrl
	}
	return ""
}

func (m *ClusterClientConfigResponse) GetClusterUserName() string {
	if m != nil {
		return m.ClusterUserName
	}
	return ""
}

func (m *ClusterClientConfigResponse) GetUserCert() string {
	if m != nil {
		return m.UserCert
	}
	return ""
}

func (m *ClusterClientConfigResponse) GetUserKey() string {
	if m != nil {
		return m.UserKey
	}
	return ""
}

func (m *ClusterClientConfigResponse) GetContextName() string {
	if m != nil {
		return m.ContextName
	}
	return ""
}

func (m *ClusterClientConfigResponse) GetUserToken() string {
	if m != nil {
		return m.UserToken
	}
	return ""
}

func (m *ClusterClientConfigResponse) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type ClusterClientContainerRequest struct {
	Name     string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	DiskName string `protobuf:"bytes,2,opt,name=disk_name,json=diskName" json:"disk_name,omitempty"`
}

func (m *ClusterClientContainerRequest) Reset()                    { *m = ClusterClientContainerRequest{} }
func (m *ClusterClientContainerRequest) String() string            { return proto.CompactTextString(m) }
func (*ClusterClientContainerRequest) ProtoMessage()               {}
func (*ClusterClientContainerRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *ClusterClientContainerRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ClusterClientContainerRequest) GetDiskName() string {
	if m != nil {
		return m.DiskName
	}
	return ""
}

type ClusterInstance struct {
	Uid        string `protobuf:"bytes,1,opt,name=uid" json:"uid,omitempty"`
	ExternalId string `protobuf:"bytes,2,opt,name=external_id,json=externalId" json:"external_id,omitempty"`
	Name       string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	ExternalIp string `protobuf:"bytes,4,opt,name=external_ip,json=externalIp" json:"external_ip,omitempty"`
	InternalIp string `protobuf:"bytes,5,opt,name=internal_ip,json=internalIp" json:"internal_ip,omitempty"`
	Sku        string `protobuf:"bytes,6,opt,name=sku" json:"sku,omitempty"`
}

func (m *ClusterInstance) Reset()                    { *m = ClusterInstance{} }
func (m *ClusterInstance) String() string            { return proto.CompactTextString(m) }
func (*ClusterInstance) ProtoMessage()               {}
func (*ClusterInstance) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *ClusterInstance) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *ClusterInstance) GetExternalId() string {
	if m != nil {
		return m.ExternalId
	}
	return ""
}

func (m *ClusterInstance) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ClusterInstance) GetExternalIp() string {
	if m != nil {
		return m.ExternalIp
	}
	return ""
}

func (m *ClusterInstance) GetInternalIp() string {
	if m != nil {
		return m.InternalIp
	}
	return ""
}

func (m *ClusterInstance) GetSku() string {
	if m != nil {
		return m.Sku
	}
	return ""
}

type ClusterUpdateRequest struct {
	Name        string           `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	DoNotDelete bool             `protobuf:"varint,2,opt,name=do_not_delete,json=doNotDelete" json:"do_not_delete,omitempty"`
	Settings    *ClusterSettings `protobuf:"bytes,3,opt,name=settings" json:"settings,omitempty"`
	// Default access level is to allow permission to the cluster
	// when no Role matched for that specif user or group. This can
	// set as
	//   - kubernetes:team-admin
	//   - kubernetes:cluster-admin
	//   - kubernetes:admin
	//   - kubernetes:editor
	//   - kubernetes:viewer
	//   - deny-access
	DefaultAccessLevel string `protobuf:"bytes,4,opt,name=default_access_level,json=defaultAccessLevel" json:"default_access_level,omitempty"`
}

func (m *ClusterUpdateRequest) Reset()                    { *m = ClusterUpdateRequest{} }
func (m *ClusterUpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*ClusterUpdateRequest) ProtoMessage()               {}
func (*ClusterUpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *ClusterUpdateRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ClusterUpdateRequest) GetDoNotDelete() bool {
	if m != nil {
		return m.DoNotDelete
	}
	return false
}

func (m *ClusterUpdateRequest) GetSettings() *ClusterSettings {
	if m != nil {
		return m.Settings
	}
	return nil
}

func (m *ClusterUpdateRequest) GetDefaultAccessLevel() string {
	if m != nil {
		return m.DefaultAccessLevel
	}
	return ""
}

type ClusterReconfigureRequest struct {
	Name              string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	ApplyToMaster     bool   `protobuf:"varint,2,opt,name=apply_to_master,json=applyToMaster" json:"apply_to_master,omitempty"`
	Sku               string `protobuf:"bytes,3,opt,name=sku" json:"sku,omitempty"`
	Count             int64  `protobuf:"varint,4,opt,name=count" json:"count,omitempty"`
	KubernetesVersion string `protobuf:"bytes,5,opt,name=kubernetes_version,json=kubernetesVersion" json:"kubernetes_version,omitempty"`
}

func (m *ClusterReconfigureRequest) Reset()                    { *m = ClusterReconfigureRequest{} }
func (m *ClusterReconfigureRequest) String() string            { return proto.CompactTextString(m) }
func (*ClusterReconfigureRequest) ProtoMessage()               {}
func (*ClusterReconfigureRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *ClusterReconfigureRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ClusterReconfigureRequest) GetApplyToMaster() bool {
	if m != nil {
		return m.ApplyToMaster
	}
	return false
}

func (m *ClusterReconfigureRequest) GetSku() string {
	if m != nil {
		return m.Sku
	}
	return ""
}

func (m *ClusterReconfigureRequest) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *ClusterReconfigureRequest) GetKubernetesVersion() string {
	if m != nil {
		return m.KubernetesVersion
	}
	return ""
}

func init() {
	proto.RegisterType((*ClusterSettings)(nil), "appscode.kubernetes.v1beta1.ClusterSettings")
	proto.RegisterType((*Cluster)(nil), "appscode.kubernetes.v1beta1.Cluster")
	proto.RegisterType((*ClusterDescribeRequest)(nil), "appscode.kubernetes.v1beta1.ClusterDescribeRequest")
	proto.RegisterType((*ClusterDescribeResponse)(nil), "appscode.kubernetes.v1beta1.ClusterDescribeResponse")
	proto.RegisterType((*ClusterDescribeResponse_ClusterSpec)(nil), "appscode.kubernetes.v1beta1.ClusterDescribeResponse.ClusterSpec")
	proto.RegisterType((*ClusterListRequest)(nil), "appscode.kubernetes.v1beta1.ClusterListRequest")
	proto.RegisterType((*ClusterListResponse)(nil), "appscode.kubernetes.v1beta1.ClusterListResponse")
	proto.RegisterType((*InstanceGroup)(nil), "appscode.kubernetes.v1beta1.InstanceGroup")
	proto.RegisterType((*ClusterCreateRequest)(nil), "appscode.kubernetes.v1beta1.ClusterCreateRequest")
	proto.RegisterType((*ClusterDeleteRequest)(nil), "appscode.kubernetes.v1beta1.ClusterDeleteRequest")
	proto.RegisterType((*ClusterStartupConfigRequest)(nil), "appscode.kubernetes.v1beta1.ClusterStartupConfigRequest")
	proto.RegisterType((*ClusterStartupConfigResponse)(nil), "appscode.kubernetes.v1beta1.ClusterStartupConfigResponse")
	proto.RegisterType((*ClusterInstanceByIPRequest)(nil), "appscode.kubernetes.v1beta1.ClusterInstanceByIPRequest")
	proto.RegisterType((*ClusterInstanceByIPResponse)(nil), "appscode.kubernetes.v1beta1.ClusterInstanceByIPResponse")
	proto.RegisterType((*ClusterClientConfigRequest)(nil), "appscode.kubernetes.v1beta1.ClusterClientConfigRequest")
	proto.RegisterType((*ClusterClientConfigResponse)(nil), "appscode.kubernetes.v1beta1.ClusterClientConfigResponse")
	proto.RegisterType((*ClusterClientContainerRequest)(nil), "appscode.kubernetes.v1beta1.ClusterClientContainerRequest")
	proto.RegisterType((*ClusterInstance)(nil), "appscode.kubernetes.v1beta1.ClusterInstance")
	proto.RegisterType((*ClusterUpdateRequest)(nil), "appscode.kubernetes.v1beta1.ClusterUpdateRequest")
	proto.RegisterType((*ClusterReconfigureRequest)(nil), "appscode.kubernetes.v1beta1.ClusterReconfigureRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Clusters service

type ClustersClient interface {
	List(ctx context.Context, in *ClusterListRequest, opts ...grpc.CallOption) (*ClusterListResponse, error)
	Describe(ctx context.Context, in *ClusterDescribeRequest, opts ...grpc.CallOption) (*ClusterDescribeResponse, error)
	Create(ctx context.Context, in *ClusterCreateRequest, opts ...grpc.CallOption) (*appscode_dtypes.LongRunningResponse, error)
	Update(ctx context.Context, in *ClusterUpdateRequest, opts ...grpc.CallOption) (*appscode_dtypes.VoidResponse, error)
	Reconfigure(ctx context.Context, in *ClusterReconfigureRequest, opts ...grpc.CallOption) (*appscode_dtypes.LongRunningResponse, error)
	Delete(ctx context.Context, in *ClusterDeleteRequest, opts ...grpc.CallOption) (*appscode_dtypes.LongRunningResponse, error)
	ClientConfig(ctx context.Context, in *ClusterClientConfigRequest, opts ...grpc.CallOption) (*ClusterClientConfigResponse, error)
	StartupConfig(ctx context.Context, in *ClusterStartupConfigRequest, opts ...grpc.CallOption) (*ClusterStartupConfigResponse, error)
	InstanceByIP(ctx context.Context, in *ClusterInstanceByIPRequest, opts ...grpc.CallOption) (*ClusterInstanceByIPResponse, error)
}

type clustersClient struct {
	cc *grpc.ClientConn
}

func NewClustersClient(cc *grpc.ClientConn) ClustersClient {
	return &clustersClient{cc}
}

func (c *clustersClient) List(ctx context.Context, in *ClusterListRequest, opts ...grpc.CallOption) (*ClusterListResponse, error) {
	out := new(ClusterListResponse)
	err := grpc.Invoke(ctx, "/appscode.kubernetes.v1beta1.Clusters/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersClient) Describe(ctx context.Context, in *ClusterDescribeRequest, opts ...grpc.CallOption) (*ClusterDescribeResponse, error) {
	out := new(ClusterDescribeResponse)
	err := grpc.Invoke(ctx, "/appscode.kubernetes.v1beta1.Clusters/Describe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersClient) Create(ctx context.Context, in *ClusterCreateRequest, opts ...grpc.CallOption) (*appscode_dtypes.LongRunningResponse, error) {
	out := new(appscode_dtypes.LongRunningResponse)
	err := grpc.Invoke(ctx, "/appscode.kubernetes.v1beta1.Clusters/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersClient) Update(ctx context.Context, in *ClusterUpdateRequest, opts ...grpc.CallOption) (*appscode_dtypes.VoidResponse, error) {
	out := new(appscode_dtypes.VoidResponse)
	err := grpc.Invoke(ctx, "/appscode.kubernetes.v1beta1.Clusters/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersClient) Reconfigure(ctx context.Context, in *ClusterReconfigureRequest, opts ...grpc.CallOption) (*appscode_dtypes.LongRunningResponse, error) {
	out := new(appscode_dtypes.LongRunningResponse)
	err := grpc.Invoke(ctx, "/appscode.kubernetes.v1beta1.Clusters/Reconfigure", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersClient) Delete(ctx context.Context, in *ClusterDeleteRequest, opts ...grpc.CallOption) (*appscode_dtypes.LongRunningResponse, error) {
	out := new(appscode_dtypes.LongRunningResponse)
	err := grpc.Invoke(ctx, "/appscode.kubernetes.v1beta1.Clusters/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersClient) ClientConfig(ctx context.Context, in *ClusterClientConfigRequest, opts ...grpc.CallOption) (*ClusterClientConfigResponse, error) {
	out := new(ClusterClientConfigResponse)
	err := grpc.Invoke(ctx, "/appscode.kubernetes.v1beta1.Clusters/ClientConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersClient) StartupConfig(ctx context.Context, in *ClusterStartupConfigRequest, opts ...grpc.CallOption) (*ClusterStartupConfigResponse, error) {
	out := new(ClusterStartupConfigResponse)
	err := grpc.Invoke(ctx, "/appscode.kubernetes.v1beta1.Clusters/StartupConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clustersClient) InstanceByIP(ctx context.Context, in *ClusterInstanceByIPRequest, opts ...grpc.CallOption) (*ClusterInstanceByIPResponse, error) {
	out := new(ClusterInstanceByIPResponse)
	err := grpc.Invoke(ctx, "/appscode.kubernetes.v1beta1.Clusters/InstanceByIP", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Clusters service

type ClustersServer interface {
	List(context.Context, *ClusterListRequest) (*ClusterListResponse, error)
	Describe(context.Context, *ClusterDescribeRequest) (*ClusterDescribeResponse, error)
	Create(context.Context, *ClusterCreateRequest) (*appscode_dtypes.LongRunningResponse, error)
	Update(context.Context, *ClusterUpdateRequest) (*appscode_dtypes.VoidResponse, error)
	Reconfigure(context.Context, *ClusterReconfigureRequest) (*appscode_dtypes.LongRunningResponse, error)
	Delete(context.Context, *ClusterDeleteRequest) (*appscode_dtypes.LongRunningResponse, error)
	ClientConfig(context.Context, *ClusterClientConfigRequest) (*ClusterClientConfigResponse, error)
	StartupConfig(context.Context, *ClusterStartupConfigRequest) (*ClusterStartupConfigResponse, error)
	InstanceByIP(context.Context, *ClusterInstanceByIPRequest) (*ClusterInstanceByIPResponse, error)
}

func RegisterClustersServer(s *grpc.Server, srv ClustersServer) {
	s.RegisterService(&_Clusters_serviceDesc, srv)
}

func _Clusters_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appscode.kubernetes.v1beta1.Clusters/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServer).List(ctx, req.(*ClusterListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clusters_Describe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterDescribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServer).Describe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appscode.kubernetes.v1beta1.Clusters/Describe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServer).Describe(ctx, req.(*ClusterDescribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clusters_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appscode.kubernetes.v1beta1.Clusters/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServer).Create(ctx, req.(*ClusterCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clusters_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appscode.kubernetes.v1beta1.Clusters/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServer).Update(ctx, req.(*ClusterUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clusters_Reconfigure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterReconfigureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServer).Reconfigure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appscode.kubernetes.v1beta1.Clusters/Reconfigure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServer).Reconfigure(ctx, req.(*ClusterReconfigureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clusters_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appscode.kubernetes.v1beta1.Clusters/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServer).Delete(ctx, req.(*ClusterDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clusters_ClientConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterClientConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServer).ClientConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appscode.kubernetes.v1beta1.Clusters/ClientConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServer).ClientConfig(ctx, req.(*ClusterClientConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clusters_StartupConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterStartupConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServer).StartupConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appscode.kubernetes.v1beta1.Clusters/StartupConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServer).StartupConfig(ctx, req.(*ClusterStartupConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clusters_InstanceByIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterInstanceByIPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClustersServer).InstanceByIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appscode.kubernetes.v1beta1.Clusters/InstanceByIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClustersServer).InstanceByIP(ctx, req.(*ClusterInstanceByIPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Clusters_serviceDesc = grpc.ServiceDesc{
	ServiceName: "appscode.kubernetes.v1beta1.Clusters",
	HandlerType: (*ClustersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _Clusters_List_Handler,
		},
		{
			MethodName: "Describe",
			Handler:    _Clusters_Describe_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Clusters_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Clusters_Update_Handler,
		},
		{
			MethodName: "Reconfigure",
			Handler:    _Clusters_Reconfigure_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Clusters_Delete_Handler,
		},
		{
			MethodName: "ClientConfig",
			Handler:    _Clusters_ClientConfig_Handler,
		},
		{
			MethodName: "StartupConfig",
			Handler:    _Clusters_StartupConfig_Handler,
		},
		{
			MethodName: "InstanceByIP",
			Handler:    _Clusters_InstanceByIP_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cluster.proto",
}

func init() { proto.RegisterFile("cluster.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 2037 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x58, 0x4b, 0x6f, 0x1c, 0x59,
	0xf5, 0x57, 0x75, 0xdb, 0xee, 0xea, 0xd3, 0x6e, 0x3f, 0x6e, 0xfc, 0x4f, 0xca, 0xed, 0xf1, 0x3f,
	0xa6, 0x12, 0xc0, 0x58, 0x89, 0x3b, 0xf6, 0x84, 0x99, 0x30, 0x88, 0x51, 0xc6, 0xf6, 0x30, 0x63,
	0xc6, 0x99, 0x58, 0xe5, 0x38, 0x48, 0xc3, 0xa2, 0x54, 0x5d, 0x75, 0xdd, 0xaa, 0x71, 0xb9, 0x6e,
	0x71, 0xef, 0x2d, 0x93, 0x26, 0xca, 0x66, 0xbe, 0x02, 0x1f, 0x01, 0x21, 0xd0, 0x08, 0x58, 0x20,
	0xc1, 0x82, 0x3d, 0x12, 0x62, 0xc3, 0x62, 0x34, 0x3b, 0x76, 0xf0, 0x11, 0x10, 0x6b, 0x74, 0x5f,
	0x55, 0xd5, 0xee, 0xb6, 0xa7, 0x1d, 0x60, 0xd3, 0xaa, 0x3a, 0xaf, 0x7b, 0xce, 0xb9, 0xe7, 0xf1,
	0xab, 0x86, 0x76, 0x98, 0xe4, 0x8c, 0x63, 0xba, 0x99, 0x51, 0xc2, 0x09, 0x5a, 0x09, 0xb2, 0x8c,
	0x85, 0x24, 0xc2, 0x9b, 0xa7, 0x79, 0x0f, 0xd3, 0x14, 0x73, 0xcc, 0x36, 0xcf, 0xb7, 0x7a, 0x98,
	0x07, 0x5b, 0x9d, 0x37, 0xfa, 0x84, 0xf4, 0x13, 0xdc, 0x0d, 0xb2, 0xb8, 0x1b, 0xa4, 0x29, 0xe1,
	0x01, 0x8f, 0x49, 0xca, 0x94, 0x6a, 0xe7, 0xff, 0x8d, 0xea, 0x25, 0xfc, 0xdb, 0x43, 0xfc, 0x88,
	0x0f, 0x32, 0xcc, 0xba, 0xf2, 0x57, 0x09, 0xb8, 0xbf, 0xb1, 0x60, 0x7e, 0x57, 0x79, 0x73, 0x84,
	0x39, 0x8f, 0xd3, 0x3e, 0x43, 0xeb, 0xb0, 0x90, 0x90, 0xbe, 0x1f, 0xa7, 0x11, 0x7e, 0xe1, 0x67,
	0x14, 0x9f, 0xc4, 0x2f, 0x1c, 0x6b, 0xcd, 0x5a, 0x6f, 0x7a, 0x73, 0x09, 0xe9, 0xef, 0x0b, 0xf2,
	0xa1, 0xa4, 0xa2, 0x07, 0xb0, 0x24, 0x24, 0x19, 0x27, 0x34, 0xe8, 0x63, 0x3f, 0x89, 0x4f, 0x30,
	0x8f, 0xcf, 0xb0, 0x53, 0x5b, 0xb3, 0xd6, 0xeb, 0x1e, 0x4a, 0x48, 0xff, 0x48, 0xb1, 0x0e, 0x34,
	0x07, 0xbd, 0x0b, 0x2b, 0x67, 0x24, 0x8d, 0x39, 0xa1, 0x71, 0x3a, 0x46, 0xb1, 0x2e, 0x15, 0x97,
	0x4b, 0x91, 0x0b, 0xfa, 0xee, 0xbf, 0x1a, 0xd0, 0xd0, 0xfe, 0xa2, 0x05, 0xa8, 0xe7, 0x71, 0xa4,
	0x5d, 0x13, 0x8f, 0x08, 0xc1, 0x54, 0x1a, 0xe8, 0xf3, 0x9b, 0x9e, 0x7c, 0x46, 0x1d, 0xb0, 0x33,
	0x4a, 0xce, 0xe3, 0x08, 0x53, 0x69, 0xbe, 0xe9, 0x15, 0xef, 0x68, 0x0e, 0x6a, 0x84, 0x39, 0x53,
	0x92, 0x5a, 0x23, 0x0c, 0xdd, 0x84, 0x19, 0x8a, 0xfb, 0x31, 0x49, 0x9d, 0x69, 0x49, 0xd3, 0x6f,
	0xc2, 0xee, 0x4f, 0x49, 0x8a, 0x9d, 0x19, 0x65, 0x57, 0x3c, 0xa3, 0x55, 0x80, 0x90, 0xe2, 0x80,
	0xe3, 0xc8, 0x0f, 0xb8, 0xd3, 0x90, 0x8e, 0x37, 0x35, 0xe5, 0x3d, 0x8e, 0xde, 0x87, 0xe9, 0x24,
	0x4e, 0x4f, 0x99, 0x63, 0xaf, 0xd5, 0xd7, 0x5b, 0xdb, 0xdd, 0xcd, 0x2b, 0x2e, 0x79, 0x53, 0x47,
	0xb4, 0x79, 0x20, 0x34, 0xde, 0x4f, 0x39, 0x1d, 0x78, 0x4a, 0x1b, 0xb9, 0xd0, 0x8e, 0x88, 0x9f,
	0x12, 0xee, 0x47, 0x38, 0xc1, 0x1c, 0x3b, 0xcd, 0x35, 0x6b, 0xdd, 0xf6, 0x5a, 0x11, 0xf9, 0x98,
	0xf0, 0x3d, 0x49, 0x12, 0x5e, 0x33, 0x1e, 0xf0, 0x9c, 0x39, 0xa0, 0xbc, 0x56, 0x6f, 0xe8, 0x6b,
	0x30, 0xab, 0x9e, 0xfc, 0x30, 0xc8, 0x19, 0x76, 0x5a, 0x92, 0xdb, 0x52, 0xb4, 0x5d, 0x41, 0x42,
	0xb7, 0xa1, 0xd5, 0x0f, 0xb1, 0x9f, 0x51, 0xf2, 0x29, 0x0e, 0xb9, 0x33, 0x2b, 0x25, 0xa0, 0x1f,
	0xe2, 0x43, 0x45, 0x41, 0xdf, 0x84, 0x79, 0xe1, 0x6f, 0x82, 0xb9, 0x7f, 0x8e, 0x29, 0x13, 0xa9,
	0x69, 0xab, 0x52, 0xd0, 0xe4, 0xe7, 0x8a, 0x8a, 0xbe, 0x05, 0x0b, 0x2c, 0x48, 0x78, 0x2f, 0x60,
	0xb8, 0x90, 0x9c, 0x93, 0x92, 0xf3, 0x86, 0x6e, 0x44, 0x1f, 0xc0, 0x92, 0x50, 0xf6, 0x19, 0x0f,
	0x28, 0xc7, 0xb4, 0x10, 0x9f, 0x97, 0xe2, 0x48, 0xf0, 0x8e, 0x14, 0xcb, 0x68, 0xac, 0x02, 0xa4,
	0x24, 0xc2, 0x7e, 0x48, 0xf2, 0x94, 0x3b, 0x0b, 0x6b, 0xd6, 0xfa, 0xb4, 0xd7, 0x14, 0x94, 0x5d,
	0x41, 0x40, 0x77, 0x61, 0x2e, 0xc8, 0x62, 0x9f, 0x61, 0x7a, 0x8e, 0xa9, 0x9f, 0xd3, 0xc4, 0x59,
	0x94, 0xa6, 0x66, 0x83, 0x2c, 0x3e, 0x92, 0xc4, 0x63, 0x9a, 0xa0, 0x15, 0x68, 0xca, 0x63, 0x73,
	0x86, 0xa9, 0x83, 0x54, 0x25, 0x08, 0xc2, 0x31, 0xc3, 0x14, 0xdd, 0x81, 0xb6, 0x64, 0x66, 0x01,
	0x63, 0x3f, 0x21, 0x34, 0x72, 0x6e, 0x28, 0x0b, 0x82, 0x78, 0xa8, 0x69, 0xe8, 0x16, 0x34, 0xc2,
	0xc0, 0x0f, 0x31, 0xe5, 0xce, 0x92, 0xca, 0x74, 0x18, 0xec, 0x62, 0xca, 0xd1, 0x06, 0x2c, 0x4a,
	0xed, 0x1e, 0x0e, 0x28, 0xa6, 0x3e, 0x27, 0xa7, 0x38, 0x75, 0xfe, 0x4f, 0x45, 0x2f, 0x18, 0x3b,
	0x92, 0xfe, 0x4c, 0x90, 0xd1, 0x87, 0x60, 0x33, 0xdd, 0x69, 0xce, 0xcd, 0x35, 0x6b, 0xbd, 0xb5,
	0x7d, 0x6f, 0x92, 0xda, 0x30, 0xdd, 0xe9, 0x15, 0xda, 0xe8, 0x21, 0xdc, 0x8c, 0x53, 0xc6, 0x83,
	0x34, 0xc4, 0x3e, 0x25, 0x84, 0x97, 0xce, 0xdf, 0x92, 0x47, 0x2f, 0x19, 0xae, 0x47, 0x08, 0x2f,
	0x82, 0x70, 0xa0, 0x61, 0x12, 0xee, 0x48, 0x31, 0xf3, 0x2a, 0xfa, 0x89, 0x9d, 0xe6, 0xce, 0xb2,
	0xea, 0x27, 0x76, 0x9a, 0x57, 0x6b, 0xbc, 0x37, 0x70, 0x3a, 0x92, 0x61, 0x6a, 0x7c, 0x67, 0x20,
	0x2e, 0x32, 0xc2, 0x27, 0x41, 0x9e, 0x70, 0x3f, 0x08, 0x43, 0xcc, 0x98, 0x9f, 0xe0, 0x73, 0x9c,
	0x38, 0x2b, 0xea, 0x22, 0x35, 0xef, 0x3d, 0xc9, 0x3a, 0x10, 0x9c, 0xce, 0x23, 0x80, 0xb2, 0xc6,
	0xc5, 0x81, 0xa7, 0x78, 0x60, 0x1a, 0xf8, 0x14, 0x0f, 0xd0, 0x12, 0x4c, 0x9f, 0x07, 0x49, 0x6e,
	0x3a, 0x58, 0xbd, 0xbc, 0x53, 0x7b, 0x64, 0xb9, 0x1b, 0x70, 0x53, 0x67, 0x62, 0x0f, 0xb3, 0x90,
	0xc6, 0x3d, 0xec, 0xe1, 0x1f, 0xe7, 0x98, 0xf1, 0xd1, 0x31, 0xe0, 0x7e, 0x5e, 0x87, 0x5b, 0x23,
	0xc2, 0x2c, 0x23, 0x29, 0x13, 0x03, 0xa8, 0xa1, 0xa7, 0xaf, 0xd4, 0x68, 0x6d, 0xdf, 0x9d, 0x24,
	0xfb, 0x9e, 0x51, 0x42, 0xcf, 0x60, 0x8a, 0x65, 0x38, 0x94, 0x0e, 0xb6, 0xb6, 0x1f, 0x4f, 0xa2,
	0x7c, 0xd1, 0x87, 0xe2, 0x4a, 0x33, 0x1c, 0x7a, 0xd2, 0x9a, 0x28, 0x3f, 0x92, 0x61, 0x2a, 0x67,
	0xb7, 0x2f, 0xa2, 0x51, 0x93, 0x6a, 0xb6, 0x20, 0x1e, 0xc7, 0x51, 0xe7, 0x0b, 0x0b, 0x5a, 0x15,
	0x55, 0xd1, 0x9b, 0x21, 0x49, 0x79, 0x10, 0xa7, 0x98, 0xea, 0xd6, 0xb0, 0x64, 0x6b, 0xcc, 0x15,
	0x64, 0xd5, 0x1f, 0x2b, 0xd0, 0xcc, 0x48, 0xa4, 0x45, 0x6a, 0x52, 0xc4, 0xce, 0x48, 0xa4, 0x98,
	0x77, 0xa0, 0x2d, 0x1a, 0x27, 0x0e, 0x4d, 0x7b, 0xd5, 0xa5, 0xc0, 0xac, 0x26, 0x2a, 0xa1, 0x65,
	0xb0, 0x69, 0xa8, 0xf9, 0x53, 0x92, 0xdf, 0xa0, 0x61, 0x61, 0x9c, 0x13, 0x1e, 0x24, 0x7e, 0x98,
	0xe5, 0x72, 0x6c, 0xd6, 0x3d, 0x5b, 0x12, 0x76, 0xb3, 0x5c, 0x8c, 0x20, 0xc5, 0x3c, 0xc3, 0x67,
	0x84, 0x0e, 0xe4, 0x00, 0xad, 0x7b, 0x2d, 0x49, 0x7b, 0x22, 0x49, 0xee, 0x3d, 0x40, 0x3a, 0xa8,
	0x83, 0x98, 0x71, 0x73, 0xa9, 0xe5, 0x4c, 0xb3, 0xd6, 0xea, 0xe5, 0x4c, 0x73, 0x7f, 0x08, 0x37,
	0x86, 0xa4, 0xf5, 0xad, 0x3e, 0x06, 0x5b, 0x5f, 0x90, 0x52, 0x98, 0xf4, 0x5a, 0x0b, 0x2d, 0x17,
	0x43, 0x7b, 0x5f, 0xb7, 0xcb, 0x07, 0x94, 0xe4, 0x99, 0xe9, 0x06, 0xab, 0xec, 0x86, 0x25, 0x98,
	0x2e, 0x53, 0x58, 0xf7, 0xd4, 0x0b, 0xba, 0x07, 0x28, 0x67, 0xd8, 0x67, 0x19, 0xe1, 0xbe, 0x69,
	0x38, 0x26, 0x93, 0x68, 0x7b, 0x0b, 0x39, 0xc3, 0x47, 0x19, 0xe1, 0xc6, 0x32, 0x73, 0xff, 0x59,
	0x83, 0x25, 0x7d, 0xf8, 0xae, 0xec, 0x23, 0x13, 0xb0, 0x59, 0x5d, 0xd6, 0x25, 0xab, 0xab, 0x76,
	0x61, 0x75, 0x99, 0x95, 0x54, 0xaf, 0xac, 0xa4, 0xaf, 0xc3, 0x5c, 0x48, 0x71, 0x84, 0x53, 0x1e,
	0x07, 0x89, 0x2c, 0x23, 0xb5, 0xda, 0xda, 0x25, 0xf5, 0x38, 0x8e, 0xd0, 0x47, 0xd0, 0x92, 0xd3,
	0xb4, 0x2f, 0xe2, 0x64, 0xce, 0xb4, 0xcc, 0xd7, 0xc6, 0x95, 0xf9, 0x1a, 0x4a, 0x8d, 0x27, 0x87,
	0xb1, 0x7c, 0x64, 0xe8, 0x3e, 0xa0, 0x52, 0xbe, 0x18, 0xe5, 0x6a, 0x51, 0x2e, 0x96, 0x1c, 0x33,
	0xc9, 0x47, 0xf6, 0x59, 0x63, 0x74, 0x9f, 0x5d, 0x36, 0x56, 0xec, 0xcb, 0xc6, 0xca, 0xc5, 0x35,
	0xd6, 0xbc, 0xb8, 0xc6, 0xdc, 0x2f, 0xad, 0x22, 0xed, 0xea, 0x90, 0xab, 0xd2, 0xbe, 0x09, 0x37,
	0x28, 0x4e, 0xb0, 0xd8, 0x64, 0x14, 0xcb, 0xa5, 0x12, 0xf9, 0x71, 0x26, 0x6f, 0xc0, 0xf6, 0x16,
	0x35, 0xcb, 0xd3, 0x9c, 0xfd, 0x4c, 0xd4, 0xc5, 0x09, 0xa1, 0x21, 0xd6, 0x97, 0xae, 0x5e, 0x64,
	0x62, 0x30, 0xce, 0xfc, 0x84, 0x44, 0x41, 0x2f, 0x48, 0x44, 0xf6, 0xa8, 0xc2, 0x1a, 0xb6, 0xb7,
	0x28, 0x38, 0x07, 0x55, 0x86, 0x18, 0xe6, 0x2a, 0x23, 0x7e, 0x34, 0x48, 0x83, 0xb3, 0x38, 0xf4,
	0xcf, 0x49, 0x92, 0x9f, 0x61, 0x26, 0x7b, 0xca, 0xf6, 0x96, 0x14, 0x77, 0x4f, 0x31, 0x9f, 0x2b,
	0x9e, 0x9b, 0xc2, 0x8a, 0x99, 0x08, 0x62, 0x63, 0xe6, 0xd9, 0x2e, 0x49, 0x4f, 0xe2, 0xfe, 0xa5,
	0xa3, 0x51, 0xc4, 0x4b, 0x49, 0x52, 0x20, 0x24, 0xf1, 0x2c, 0x56, 0x37, 0xc5, 0x8c, 0xe4, 0x34,
	0x2c, 0x57, 0xb7, 0x02, 0x62, 0xf3, 0x86, 0xae, 0xaf, 0xcf, 0x7d, 0x0e, 0x6f, 0x8c, 0x3f, 0x4f,
	0xf7, 0xe1, 0x5d, 0x68, 0x87, 0x92, 0x92, 0xab, 0xb1, 0xa5, 0x8f, 0x1e, 0x26, 0x9a, 0xd6, 0xaa,
	0x15, 0xad, 0xe5, 0x3e, 0x85, 0x8e, 0xb6, 0x6b, 0x2a, 0x6d, 0x67, 0xb0, 0x7f, 0x78, 0x79, 0x18,
	0xb7, 0xa1, 0x85, 0x5f, 0x70, 0x4c, 0xd3, 0x20, 0x31, 0x57, 0xd3, 0xf4, 0xc0, 0x90, 0xf6, 0x33,
	0xb7, 0x5f, 0x24, 0x66, 0xd8, 0xa0, 0xf6, 0xf3, 0x43, 0xb0, 0x4d, 0xaf, 0xea, 0x35, 0x30, 0xd1,
	0x12, 0x36, 0xb6, 0xbc, 0x42, 0xdb, 0x7d, 0x50, 0x78, 0xbe, 0x9b, 0xc4, 0x38, 0xe5, 0xc3, 0x17,
	0x30, 0xa6, 0xbc, 0xdc, 0x3f, 0xd5, 0x0a, 0xdf, 0x86, 0x55, 0xb4, 0x6f, 0xa2, 0x8b, 0x15, 0xdb,
	0x8f, 0xc8, 0x59, 0x10, 0x97, 0x49, 0xd4, 0x05, 0x2c, 0x89, 0x55, 0x30, 0x52, 0x1b, 0x02, 0x23,
	0xa3, 0x68, 0xa8, 0x3e, 0x06, 0x0d, 0x6d, 0xc0, 0xa2, 0x39, 0x45, 0x00, 0x22, 0x5f, 0xba, 0xa9,
	0xc6, 0xc5, 0xbc, 0x66, 0x08, 0x60, 0xf4, 0xb1, 0x68, 0x88, 0x15, 0x68, 0x4a, 0x19, 0x79, 0x98,
	0x42, 0xc6, 0xb6, 0x20, 0xc8, 0xe3, 0x96, 0x41, 0x3e, 0xfb, 0x62, 0x93, 0xab, 0xb6, 0x6f, 0x88,
	0xf7, 0x8f, 0xf0, 0x40, 0x4c, 0x7f, 0xb1, 0x89, 0xf0, 0x0b, 0xae, 0xcc, 0x37, 0x14, 0x00, 0xd5,
	0x34, 0x69, 0x7a, 0x15, 0x40, 0x6a, 0x2b, 0xc8, 0xa4, 0x3a, 0x5c, 0x1e, 0xa6, 0xc0, 0x92, 0x98,
	0x80, 0x06, 0xd4, 0x34, 0xf5, 0x04, 0xd4, 0xef, 0xee, 0x21, 0xac, 0x5e, 0x4c, 0xa3, 0x5a, 0x7a,
	0x57, 0xf5, 0xf6, 0x0a, 0x34, 0xa3, 0x98, 0x9d, 0xfa, 0x95, 0xcf, 0x04, 0x5b, 0x10, 0x84, 0x33,
	0xee, 0xaf, 0xcb, 0x8f, 0x21, 0x73, 0xd3, 0x5f, 0x55, 0x7b, 0xd1, 0x48, 0xed, 0x95, 0x5f, 0x21,
	0xf5, 0xca, 0xb9, 0x17, 0x0a, 0x76, 0xea, 0x62, 0xc1, 0x0a, 0x81, 0x38, 0x2d, 0x05, 0x54, 0x96,
	0xc1, 0x90, 0xf6, 0x8b, 0x7d, 0x34, 0x53, 0x36, 0xcd, 0x5f, 0xca, 0xa1, 0x76, 0x9c, 0x45, 0x5f,
	0xb1, 0x4b, 0x46, 0x06, 0x6f, 0x6d, 0x74, 0xf0, 0x56, 0xa1, 0x69, 0xfd, 0x3f, 0x82, 0xa6, 0x97,
	0x8d, 0xf0, 0xa9, 0xcb, 0x46, 0xb8, 0xfb, 0x5b, 0x0b, 0x96, 0xcd, 0x56, 0xc6, 0x66, 0x5c, 0x5c,
	0x19, 0xd1, 0x37, 0x60, 0x3e, 0xc8, 0xb2, 0x64, 0xe0, 0x73, 0xe2, 0x9f, 0x05, 0x12, 0xd1, 0xa9,
	0x98, 0xda, 0x92, 0xfc, 0x8c, 0x3c, 0x09, 0xcc, 0x67, 0xa2, 0x48, 0x5c, 0x7d, 0xcc, 0x22, 0x9f,
	0xaa, 0x2e, 0xf2, 0xf1, 0x9b, 0x6c, 0xfa, 0x92, 0x4d, 0xb6, 0xfd, 0xf9, 0x3c, 0xd8, 0xda, 0x61,
	0x86, 0x7e, 0x65, 0xc1, 0x94, 0x00, 0x24, 0x68, 0xa2, 0xef, 0xbc, 0x0a, 0xd0, 0xe9, 0x3c, 0x98,
	0x5c, 0x41, 0xcd, 0x07, 0xf7, 0x7b, 0x9f, 0xfd, 0xde, 0xa9, 0xd9, 0xd6, 0x67, 0x5f, 0xfc, 0xe3,
	0x67, 0xb5, 0x2d, 0xd4, 0xed, 0xfa, 0x43, 0xdf, 0xf8, 0xa5, 0x91, 0xae, 0x36, 0xd2, 0x35, 0x18,
	0xa7, 0xfb, 0x29, 0x23, 0x29, 0xfa, 0xa3, 0x05, 0xb6, 0x41, 0xa4, 0xe8, 0xcd, 0xeb, 0xe1, 0x57,
	0xe5, 0xf2, 0xc3, 0xd7, 0x01, 0xbd, 0xee, 0x6e, 0xc5, 0xed, 0xb7, 0xd1, 0xb7, 0xaf, 0xe1, 0xf6,
	0xcb, 0x3c, 0x8e, 0x5e, 0x29, 0xe7, 0x7f, 0x6e, 0xc1, 0x8c, 0xc2, 0x4d, 0x68, 0x6b, 0x12, 0x2f,
	0x86, 0x30, 0x56, 0xa7, 0x82, 0x09, 0xd5, 0x5f, 0x21, 0x9b, 0x07, 0x24, 0xed, 0x7b, 0x79, 0x9a,
	0xc6, 0x69, 0x31, 0x7f, 0xdd, 0xc7, 0x15, 0x47, 0x1f, 0xba, 0xd7, 0xcd, 0xef, 0x3b, 0xd6, 0x86,
	0xf4, 0x52, 0x75, 0xe4, 0x64, 0x5e, 0x0e, 0x75, 0x6f, 0x67, 0x75, 0xc4, 0xcb, 0xe7, 0x24, 0x8e,
	0x0a, 0xf7, 0x3e, 0xa8, 0xb8, 0xf7, 0xdd, 0xce, 0x5b, 0xd7, 0xc9, 0xa3, 0x68, 0x9b, 0x57, 0x85,
	0x97, 0x7f, 0xb6, 0xa0, 0x55, 0x69, 0x35, 0xf4, 0xd6, 0x44, 0x88, 0x79, 0xa4, 0x37, 0x27, 0xcc,
	0xea, 0x8f, 0x2a, 0x6e, 0x3f, 0xed, 0xfc, 0xe0, 0xfa, 0x6e, 0x07, 0xa1, 0xfc, 0x63, 0xab, 0x4b,
	0x4b, 0x0f, 0x8a, 0x50, 0x7e, 0x69, 0xc1, 0x8c, 0x9e, 0x61, 0x5b, 0x93, 0x15, 0x67, 0x05, 0x03,
	0x4e, 0x18, 0xc0, 0x5e, 0x25, 0x80, 0x47, 0x1b, 0xaf, 0x99, 0x77, 0xf4, 0xa5, 0x05, 0xb3, 0xd5,
	0xad, 0x8f, 0xde, 0x9e, 0xa8, 0x8c, 0x47, 0xa1, 0x45, 0xe7, 0xd1, 0xf5, 0x15, 0x75, 0x24, 0x5e,
	0x25, 0x92, 0xef, 0xa3, 0xbd, 0xeb, 0x47, 0x12, 0x4a, 0xab, 0xf7, 0xd5, 0x3d, 0xa8, 0xb8, 0xfe,
	0x5e, 0x83, 0xf6, 0x10, 0x24, 0x44, 0x13, 0xf9, 0x37, 0x0e, 0xb5, 0x76, 0xbe, 0xf3, 0x1a, 0x9a,
	0x3a, 0xb4, 0xbf, 0x59, 0x95, 0xd8, 0xfe, 0x6a, 0xa1, 0xfe, 0xb5, 0xc7, 0x0c, 0x53, 0x76, 0x4d,
	0x70, 0x2f, 0x05, 0x42, 0x7e, 0xd5, 0xd5, 0xdb, 0x80, 0x75, 0x5f, 0x5e, 0x44, 0xca, 0xea, 0x5e,
	0x3f, 0x89, 0x50, 0xef, 0x7f, 0x7f, 0x14, 0xfa, 0x43, 0x0d, 0x66, 0xab, 0x78, 0x76, 0xb2, 0xea,
	0x19, 0x03, 0xa9, 0x27, 0xab, 0x9e, 0x71, 0xd0, 0xd9, 0xfd, 0x5d, 0x35, 0xc5, 0xbf, 0xb0, 0x90,
	0x77, 0xed, 0xb8, 0x0d, 0x76, 0xbe, 0xdf, 0x1b, 0xdc, 0x8f, 0xb3, 0xee, 0xcb, 0x0a, 0x30, 0xd2,
	0xd9, 0x7c, 0x8a, 0x9e, 0xfc, 0x57, 0xad, 0xee, 0xbc, 0x0b, 0x77, 0x42, 0x72, 0x56, 0xc6, 0x1c,
	0x64, 0xf1, 0x98, 0xb8, 0x77, 0x66, 0x75, 0xe0, 0x87, 0x94, 0x70, 0x72, 0x68, 0x7d, 0xd2, 0xd0,
	0x8c, 0xde, 0x8c, 0xfc, 0xb7, 0xfc, 0xcd, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0xbb, 0x3c, 0x0a,
	0x66, 0xba, 0x17, 0x00, 0x00,
}
