syntax = "proto3";

package appscode.certificate.v1beta1;

option go_package = "v1beta1";

option java_multiple_files = true;
option java_outer_classname = "CertificateProto";
option java_package = "com.appscode.api.certificate.v1beta1";

import "google/api/annotations.proto";
import "appscode/api/annotations.proto";
import "appscode/api/dtypes/types.proto";

service Certificates {
  rpc List(CertificateListRequest) returns (CertificateListResponse) {
    option (google.api.http) = {
      get: "/_appscode/api/certificate/v1beta1/certificates/json"
    };
    option (appscode.api.cors) = {
      enable: true
    };
  }

  rpc Describe(CertificateDescribeRequest) returns (CertificateDescribeResponse) {
    option (google.api.http) = {
      get: "/_appscode/api/certificate/v1beta1/certificates/{uid}/json"
    };
    option (appscode.api.cors) = {
      enable: true
    };
  }

  rpc Load(CertificateLoadRequest) returns (dtypes.VoidResponse) {
    option (google.api.http) = {
      put: "/_appscode/api/certificate/v1beta1/certificates/{name}/actions/obtain/json"
      body: "*"
    };
    option (appscode.api.cors) = {
      enable: true
    };
  }

  rpc Delete(CertificateDeleteRequest) returns (dtypes.VoidResponse) {
    option (google.api.http) = {
      delete: "/_appscode/api/certificate/v1beta1/certificates/{uid}/json"
    };
    option (appscode.api.cors) = {
      enable: true
    };
  }

  rpc Deploy(CertificateDeployRequest) returns (dtypes.VoidResponse) {
    option (google.api.http) = {
      put: "/_appscode/api/certificate/v1beta1/certificates/{uid}/actions/deploy/json"
      body: "*"
    };
    option (appscode.api.cors) = {
      enable: true
    };
  }
}

message CertificateListRequest {
}

message CertificateListResponse {
  repeated Certificate certificates = 1;
}

message CertificateDescribeRequest {
  string uid = 1;
}

message CertificateDescribeResponse {
  Certificate certificate = 1;
}

message Certificate {
  string phid = 1;
  string name = 2;
  string common_name = 3;
  string issued_by = 4;
  int64 valid_from = 5;
  int64 expire_date = 6;

  // those feilds will not included into list response.
  // only describe response will include the underlying
  // feilds.
  repeated string sans = 7;
  string cert = 8;
  string key = 9;
  int32 version = 10;
  string serial_number = 11;
}

message CertificateLoadRequest {
  string name = 1;
  string cert_data = 2;
  string key_data = 3;
}

message CertificateDeleteRequest {
  string uid = 1;
}

message CertificateDeployRequest {
  string uid = 1;
  string secret_name = 2;
  string cluster_name = 3;
  string namespace = 4;
}
