syntax = "proto3";

package appscode.credential.v1beta1;

option go_package = "v1beta1";

option java_multiple_files = true;
option java_outer_classname = "CredentialProto";
option java_package = "com.appscode.api.credential.v1beta1";

import "google/api/annotations.proto";
import "appscode/api/annotations.proto";
import "appscode/api/dtypes/types.proto";

service Credentials {
  rpc List(dtypes.VoidRequest) returns (CredentialListResponse) {
    option (google.api.http) = {
      get: "/_appscode/api/cloud/v1beta1/credentials/json"
    };
    option (appscode.api.cors) = {
      enable: true
    };
  }

  rpc Describe(CredentialDescribeRequest) returns (CredentialDescribeResponse) {
    option (google.api.http) = {
      get: "/_appscode/api/cloud/v1beta1/credentials/{name}/json"
    };
    option (appscode.api.cors) = {
      enable: true
    };
  }

  rpc Create(CredentialCreateRequest) returns (dtypes.VoidResponse) {
    option (google.api.http) = {
      post: "/_appscode/api/cloud/v1beta1/credentials/json"
      body: "*"
    };
    option (appscode.api.cors) = {
      enable: true
    };
  }

  rpc Update(CredentialUpdateRequest) returns (dtypes.VoidResponse) {
    option (google.api.http) = {
      put: "/_appscode/api/cloud/v1beta1/credentials/{name}/json"
      body: "*"
    };
    option (appscode.api.cors) = {
      enable: true
    };
  }

  rpc IsAuthorized(CredentialIsAuthorizedRequest) returns (CredentialIsAuthorizedResponse) {
    option (google.api.http) = {
      post: "/_appscode/api/cloud/v1beta1/credentials/{name}/is-authorized/json"
      body: "*"
    };
    option (appscode.api.cors) = {
      enable: true
    };
  }

  rpc Delete(CredentialDeleteRequest) returns (dtypes.VoidResponse) {
    option (google.api.http) = {
      delete: "/_appscode/api/cloud/v1beta1/credentials/{name}/json"
    };
    option (appscode.api.cors) = {
      enable: true
    };
  }
}

message CredentialCreateRequest {
  string name = 1;
  string provider = 2;
  map<string, string> data = 3;
}

message CredentialUpdateRequest {
  string name = 1;
  string provider = 2;
  map<string, string> data = 3;
}

message CredentialIsAuthorizedRequest {
  string name = 1;
  string gce_project = 2;
}

message CredentialIsAuthorizedResponse {
  bool unauthorized = 1;
  string message = 2;
}

message CredentialDeleteRequest {
  string name = 1;
}

message CredentialDescribeRequest {
  string name = 1;
}

message CredentialListResponse {
  repeated Credential credentials = 1;
}

message CredentialDescribeResponse {
  Credential credential = 1;
}

message Credential {
  string name = 1;
  string provider = 2;
  string information = 3;
  int64 modified_at = 4;
}
