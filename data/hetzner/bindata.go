// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package hetzner

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x98\x41\x6f\xe2\x3a\x10\xc7\xef\x7c\x0a\xcb\xa7\xf7\xa4\x12\x61\x13\x87\x96\x6b\x5b\xbd\x77\xe9\xaa\xda\x48\x15\xd2\xaa\x42\x86\x4c\xdb\xa8\xd4\xa1\x8e\x41\x4b\x2b\xbe\xfb\x2a\x81\x12\x62\x42\xe3\x84\xa4\xdb\x48\xb9\xec\x16\x33\x13\xff\xff\x3f\x67\x98\x4c\xde\x3b\x08\x61\xc1\x5f\x00\x0f\x11\x7e\x02\xf5\x26\x40\xe2\xb3\x68\x11\xc4\x32\xc4\x43\xf4\xab\x83\x10\x42\xd8\x83\x65\xbc\x8c\x10\x7e\xe5\xb8\x83\xd0\x7d\x1c\x24\xe1\xd1\x0f\x44\x12\xf7\x1e\xff\x8b\x10\x9e\x05\x53\xae\xfc\x40\x44\x97\xfd\x0f\xe4\x0b\x17\xab\x6d\xfe\x2e\x2b\xfa\xea\xea\x3a\x59\x7d\x0b\x04\x24\x57\xda\xee\x8a\xb7\x1f\xee\xe3\xff\xd7\xbb\x8d\x7d\x11\x2a\x2e\xa6\x30\x56\xab\x39\x64\xec\x0f\xbf\x15\x48\xc1\x67\xe3\xf0\x79\x11\x6d\x74\x3d\xb2\x7b\xc9\x56\x1e\x84\x53\xe9\xcf\x3f\x04\x5e\x81\xe7\x4f\xb9\x02\x0f\xfd\x0c\x02\x85\x5c\x90\x4b\x90\x28\x9d\x12\x7d\xff\x18\xc8\x55\x14\x7f\x13\x08\xf5\x34\x5b\xa1\x24\x6f\x93\xb2\x17\x3d\x8f\x76\xb5\x13\xc7\xfc\x05\x0f\x51\x9f\x26\x0a\xfc\xf0\x19\x0f\x11\xed\xf5\x7a\x1b\x67\x67\xf9\xfa\xbb\xae\x7b\x55\xc2\x43\x3a\xad\x26\x1f\xb6\x99\x8d\xdb\xd1\x05\x29\x68\x21\x9d\x52\x46\xbe\xa3\xc9\x27\xf4\xbc\xf4\x39\x44\x6a\x4a\x9c\xc3\x61\x5a\x5d\x46\x8c\x0f\x82\xd0\xe2\x27\x91\xca\xa9\xc2\x01\x65\x8e\xee\xc0\x36\x3f\x0a\x42\xcb\x9d\xc5\x41\x5e\x5d\x56\xce\x0b\x14\xf7\xff\xab\x89\xf4\xbd\x32\xf5\xad\x67\xfe\xdd\x12\xbf\x1e\xd9\x45\x6f\xac\x74\x4a\x3d\xf2\x8d\x6f\xab\x48\x4c\xb9\x5f\xda\x0a\x6e\xaa\x7c\x1f\xac\x80\x0d\xb7\x84\x07\xb7\x5a\x03\x8e\x7d\x4a\xcb\x23\x6e\xc9\x93\x70\xab\x3f\x8a\x0c\x27\xcc\xd4\x08\x2b\x5e\x11\xac\xe2\x8a\x38\x94\x5f\xa0\x22\x58\xb9\x8a\xd0\xd3\xea\xf1\x61\x5a\x11\xb7\x23\xa7\x78\xc7\x73\xbe\xcf\x31\x44\x62\x4a\xb5\x3b\x3d\xad\x26\x1f\x86\xcd\x2e\xd6\xf3\xe3\xee\x06\xca\xf8\x48\xe7\xd5\x74\x3f\x11\x6a\x64\xe4\x72\x44\x8e\x8f\x14\xcb\xad\xea\x74\x50\x96\xe0\x3b\x5f\xaa\x05\x9f\x1d\x91\x4b\xf4\x47\xbe\xc3\x1f\x21\x43\xb1\xd4\x44\x2c\x3d\x49\x2c\xd5\x1f\x89\x0e\x4b\xd5\x50\x6c\xdf\x44\x6c\xbf\x52\xb1\x07\xf7\x01\x31\xac\xcb\xcb\xcf\x46\xcb\x44\x6d\xde\x30\x59\x4c\x6d\xd6\x04\x63\xa8\x96\x99\xa8\x65\x27\xa9\xd5\x8b\x8c\x64\x3d\xe5\x1b\xca\x75\x4c\xe4\x3a\x27\xc9\x3d\xcf\x7d\xea\x72\x3e\xe4\xee\x5e\x40\x3c\x2f\x26\x20\x05\xa8\xf8\xe5\xc3\x46\x3e\xf6\xe0\x81\x2f\x66\x6a\x1c\x82\x5a\xcc\x77\xcb\x08\x61\x11\x78\x10\x82\xda\x5b\x42\x08\xdf\x5d\x12\x37\x3a\xb8\xed\xca\x7a\x9f\x07\x5e\x82\x0c\xfd\x40\x84\xe3\xc9\x6a\x0c\x62\xb9\x7f\x31\x0f\x96\xa9\xb7\x24\xc9\x25\x93\xbc\xc8\x3b\xb1\x6c\x8b\xed\xac\x66\xf1\x8b\x23\xd0\x3f\x13\x50\xfc\xdf\x74\x20\x9f\xcf\xc3\x94\xda\x78\x35\xf1\xdc\x0d\x37\x20\x33\xb7\xd1\x22\xf9\x4c\xed\xe2\xba\x7c\xaa\x87\x86\x8a\x4b\xd5\x4d\xe1\xc4\x3d\xcb\xb1\xe8\x85\x1e\xf9\x14\x84\xea\x81\x4f\x55\xb8\xb9\x1c\xb3\x1c\xbc\x17\xb0\xd6\x9c\xce\x25\xc4\x7d\x00\x0f\x91\x92\x0b\xe8\x64\xc4\x7d\x46\xce\xc9\x25\xe7\x54\x41\xce\x31\x24\xe7\x34\x85\x1c\xb3\x48\x0e\x39\x66\x91\xd3\xc9\xe9\xdb\x1c\x23\xc7\x2c\xd2\x1c\x72\x34\x97\x1c\xad\x82\x1c\x35\x24\x47\x9b\x43\xae\x9f\x4b\xae\x5f\x05\xb9\xbe\x21\xb9\x7e\x73\xc8\xd9\xb9\xe4\xec\x2a\xc8\xd9\x86\xe4\xec\xe6\x90\xcb\xeb\xad\xac\x8a\xde\xaa\x6f\x73\x9c\x5c\x63\x7a\x2b\xcb\xed\xad\xac\x8a\xde\xaa\x6f\x73\x9c\x5c\x83\x7a\xeb\x20\x97\xdc\xe0\x24\x64\x03\x43\x64\x83\x6a\x91\x0d\x52\xc8\x8a\x41\x19\x58\xbd\x1c\x28\x07\x11\x85\xa0\xe8\xd9\xc7\xa0\x0c\xac\xde\xd7\x40\xd9\xfe\x75\xbf\x9b\x51\x5e\x79\x3b\x0f\xb4\xf3\xc0\x37\x25\xd7\xce\x03\xed\x3c\xf0\xf5\xe4\xda\x79\xa0\x9d\x07\xda\x79\xa0\x29\xe4\xda\x79\xa0\x9d\x07\xda\x79\xe0\xd4\x79\xa0\xf3\xf1\x69\xdd\x59\xff\x09\x00\x00\xff\xff\xa6\xbc\x7a\xa3\xd7\x29\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 10711, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
