// Code generated by go-bindata.
// sources:
// cloud.json
// credential.json
// DO NOT EDIT!

package vultr

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x9c\x5d\x6f\xdb\x36\x14\x86\xef\xf3\x2b\x08\x5d\x6d\x80\x62\x50\x94\xa8\x8f\xdc\x39\x4d\x37\x6c\x58\x86\x61\x09\xb6\x8b\xa1\x08\x18\x9b\x49\x85\x28\x92\x2b\xd1\x5e\xbd\x22\xff\x7d\xb0\x6a\xeb\x83\x12\x25\xd2\x61\xeb\x08\xe0\x4d\x6b\x2b\x92\x0e\xdf\x87\xe4\x7b\xce\x61\xd0\x7e\x39\x03\xc0\x4a\xc9\x33\xb5\x2e\x80\xb5\x59\x27\x2c\xb7\xec\xdd\x25\x9a\x6e\x0a\xeb\x02\xfc\x73\x06\x00\x00\xd6\x92\x6e\xca\xcb\x00\x58\x9f\xc8\xe1\xd3\x2a\xcf\x96\x87\xcf\x59\x4a\xef\xb3\xcf\xd6\x19\x00\x1f\xca\xc7\x73\xfa\x18\x67\x69\xfd\x86\x2f\xe5\x9f\x00\x58\x49\xb6\x20\x2c\xce\xd2\x5d\xb8\xdf\xe9\xbf\xe0\x57\x9a\x17\x74\xbb\x7f\x4d\xf5\xe0\xee\xa7\x4e\x7d\xf1\xbf\x2c\xa5\xf5\xbb\xca\x4b\x8e\xb5\xff\xfc\xa1\xfc\xfb\xc5\x16\x87\x79\xf7\x31\x5e\x90\xc7\xac\x2f\x06\x1a\x8c\x81\xe4\x63\x5c\x91\x24\x21\x45\x5f\x08\x77\x30\x84\x2b\x1f\xe2\x86\x12\xc6\x12\xda\x17\xc3\x1b\x8c\xe1\xc9\xc7\xf8\x2d\x2b\xc0\x3c\x7d\xa4\x09\xed\xd5\x82\x07\xe3\x60\xf9\x38\x73\x96\x90\x94\x91\xbe\x18\xfe\x60\x0c\x5f\x21\xc6\x73\xc1\x68\xbe\x24\xcf\x7d\x51\x82\xc1\x28\x81\x0a\xb1\x74\x99\xa5\x7d\x21\xc2\xc1\x10\xa1\x7c\x88\x9f\x72\x92\x3e\x3d\xac\x73\xd6\x17\x25\x1a\x8c\x12\x29\x2c\xaf\x38\x89\x17\x59\x0a\xfe\x22\x49\x22\xd8\x90\xc3\xbb\xc5\x51\xd8\x2e\x37\xdb\x65\x2a\x08\x32\x2c\xc8\x51\x50\xf4\x07\xc9\xe3\xde\x65\x8c\x86\xf7\x0b\x52\xd8\x30\xb7\xd9\xd3\xb6\xdf\x59\x86\xf7\x0a\x52\xd8\x2c\xd7\x31\x79\x8e\x7b\xad\x65\x98\x95\xab\x34\xfb\xe9\x23\x59\x65\x79\xbf\xbd\xc0\x61\x7f\x81\x5c\x9c\x2a\x0b\xc4\x69\xc1\x48\xba\xa0\x77\x6c\xbb\xa2\x3d\xc9\x80\x7e\x66\x34\x4f\x49\x72\x57\x3c\xad\xcb\xc5\xdc\x30\xcb\x25\x2d\x16\x79\xbc\x3a\x0c\xd0\x81\xc8\x03\xd7\x97\xe0\xcf\xf9\xb5\x8d\x20\xf8\xf9\x12\xdc\xdc\x5c\xd9\x68\x06\x21\xb8\xbd\x04\x97\x7f\xd7\x0f\x2e\x08\xa3\x8f\x59\xbe\x2d\x65\xdd\x5c\x35\x7e\xb0\xda\x05\x71\x6a\x81\xe4\xb9\xf5\x7d\x19\x17\x4f\xd6\x05\x40\xb0\x31\x86\x55\x4e\x77\xef\x5b\x5a\x17\x80\xe5\x6b\xda\xcb\xb1\xa3\xc2\x13\xaa\x40\xd0\x0b\x0f\x2a\x3c\x7c\x50\xe1\xaa\xab\x40\x9c\x0a\xc4\xab\xf0\xf0\x6b\x55\x60\xa1\x0a\x0f\x46\xfe\x41\x45\x54\xcd\x85\xa7\xae\xc2\xe3\x54\x78\xbc\x8a\x08\x72\xcb\xb1\x53\x05\xd8\xcd\x5c\x6a\x37\x93\x9e\xdd\xcc\x4c\x76\x33\x85\xd8\x4d\xa7\xb7\x9b\x9e\x6c\x37\xad\xd3\x6e\xd9\x8e\xdd\x32\x08\xbb\xb5\xcd\xec\xde\xcd\xf0\xda\x09\xf0\x85\x13\x10\x3a\x11\x3a\x4c\x80\x83\xab\x19\xc0\xea\x33\xe0\x73\x33\x10\xf2\x33\xe0\xe0\xef\x3a\x05\x27\x01\x1d\x88\x5d\xc7\x77\xc3\xca\x76\x5c\x58\x91\xf6\xd5\x49\x87\xbc\xef\xf8\x3c\x6a\x17\x1e\x8d\xfa\x2d\xd3\x0d\x85\x74\x5d\x14\xf8\x95\x1d\xfa\x35\x5d\x07\x1e\x61\xeb\xfc\x4a\x76\x3b\x96\xe8\x7f\x0b\xbe\x43\x48\xf5\x41\x74\x20\x14\x52\xf4\x31\x76\x2b\x3b\x0e\x1a\x14\x8f\xb0\x03\xc4\x3b\xb2\xdf\xb1\xe4\x40\x89\xe2\x00\x2b\x8d\x74\x1c\x71\xae\x6a\x59\xa5\x23\xbf\xc4\xae\xde\x5f\xfd\xf2\x6e\x7e\xfb\x7e\x34\xf3\x76\x1d\xd3\x51\x01\x34\x56\x08\x76\xb5\x8a\xd3\x42\xcb\xad\x1a\x62\xd1\xd1\x62\xf9\xe5\xd0\x35\x2d\x09\xb5\x8a\xfa\xc4\x6e\x8c\x3c\x1c\xf8\x3d\xfa\xdc\xa3\xf5\xf1\xa6\x81\x3a\xcb\x5d\xbf\x3e\x49\x3f\x6c\xe8\xf3\x8e\xd6\xc7\x27\x9d\xae\x29\xea\xd6\x17\x8a\xe5\xb5\x4a\xf8\x7d\xd5\x32\xbf\x9d\x8f\x17\xf1\xf3\xdb\xb9\x7a\x15\xaf\x54\xb7\x60\x61\xca\x54\xdd\x9f\x61\x24\x55\xfc\x63\x58\xeb\x1f\x2d\xff\x25\xf4\x77\xe6\x15\x2b\xd9\xb4\x3e\xfd\x91\x38\x51\xb9\x30\xa8\xac\x38\x68\xcc\xff\x68\xe3\xd0\xa3\x9f\x77\x61\xb7\x93\xa6\x4e\x34\xff\x91\x23\xd5\x36\x39\xb0\xb1\x00\x46\x13\xb5\x04\x80\xae\x71\xc1\x13\xad\x00\x04\xc5\x08\xda\x16\x50\x25\xe3\x6f\xd1\xc5\x63\xc9\xc1\x8a\x8f\x1c\x9a\xf3\xe5\x43\x8d\xcd\x7a\x67\xae\x7c\x28\x39\x58\x24\x77\xb2\xa0\xf3\x7c\xa4\x7b\xb2\x20\x3b\x58\x71\x51\xd6\x2a\x54\x10\xd4\xd9\xc0\x76\x2b\x14\x04\x65\x07\x2c\x3e\xb7\x69\x55\x91\x50\xe7\x91\x47\xb7\x7c\x94\x1e\xae\xb8\x50\x6a\xb5\x04\x9e\xe6\xc6\xaa\xdb\x12\x78\xd2\x43\x16\xd7\xae\xad\xda\x47\x6f\xa7\xdd\x2d\x7a\x5c\xe9\x01\x8b\xab\x99\x28\x74\x61\xb5\x86\x43\xcd\x6d\x57\xd4\x59\xc5\xe1\x61\xc8\xd5\xe1\xea\xd3\xfa\x9e\xe6\x29\x65\xe5\xc1\xea\x57\x09\xd6\x92\x3e\x90\x75\xc2\xee\x0a\xca\xd6\xab\xea\x32\x00\x56\x9a\x2d\x69\x41\x59\xe3\x12\x28\x0f\x2a\x2f\x00\xda\x7f\x7f\x69\x12\xb1\x36\x34\x2f\x76\x19\xe3\xee\x7e\x7b\x47\xd3\x4d\xf3\x55\x4b\xba\x69\xe5\x91\xfa\x85\xf5\x73\xe5\x26\x9f\x79\x33\xd8\x48\x24\x3d\x36\xb0\xbb\x03\xfc\x70\x4f\x19\xf9\xb1\x7d\x23\x59\xad\x8a\xd6\x58\xcb\xab\xb5\xe2\xf3\x82\xe6\x1b\x9a\xf7\x87\xe1\xee\x24\x09\xab\xee\x3b\x27\x0b\xfe\xd6\x82\x91\x9c\x9d\xb7\x60\x5a\x70\x86\x66\x4e\xe7\xa5\x1f\xb3\x82\x3d\x90\x05\x2b\xbe\xbe\x0e\xcf\xaa\x5f\x46\x35\xc8\x55\x4a\xfb\x1a\x59\xee\xbe\x21\x72\xce\x28\x39\x47\x07\x39\x47\x92\x9c\x33\x1d\x72\xde\x28\x39\x4f\x07\x39\x4f\x92\x9c\x37\x1d\x72\x78\x94\x1c\xd6\x41\x0e\x4b\x92\xc3\xd3\x21\xe7\x8f\x92\xf3\x75\x90\xf3\x25\xc9\xf9\xd2\xe4\xfc\x19\x8a\x4e\x48\x0e\x8f\xfa\x1c\xd6\xe1\x73\x7c\x18\x11\x39\xac\xe0\x73\x27\x27\x87\x46\xc9\x21\x1d\xe4\x90\x24\x39\x34\x1d\x72\xee\x28\x39\x57\x07\x39\x57\x92\x9c\x3b\x1d\x72\x63\xb9\x15\xeb\xc8\xad\x7c\x18\x31\x39\xf9\xdc\x7a\x72\x72\x63\xb9\x15\xeb\xc8\xad\x7c\x18\x31\x39\xf9\xdc\x7a\x72\x72\x63\xb9\x15\xeb\xc8\xad\x7c\x18\x31\xb9\x09\xe5\xd6\x60\x94\x5c\xf0\x2a\x64\x81\x24\xb2\x40\x2f\xb2\xa0\x85\x4c\x0d\x4a\x30\xda\x92\x76\xee\x50\x82\xc2\x3f\x2d\x82\x12\x28\xf4\xa2\xaf\x82\xb2\xff\x54\xff\x8a\xf5\x13\x31\xdd\xbb\xe9\xde\xdf\x2c\x39\xd3\xbd\x9b\xee\xdd\x74\xef\x53\xa9\x30\x4c\xf7\x6e\xba\x77\xd3\xbd\x4f\x85\x9c\xe9\xde\x4d\xf7\x6e\xba\xf7\xa9\x90\x33\xdd\xbb\xe9\xde\xf7\x9f\xea\xee\xbd\xfc\x37\xb7\xb2\xfd\xbb\xe9\xa5\x4c\x2f\x65\x32\xe5\x54\xfc\xde\x64\x4a\x93\x29\x8f\x4b\x0a\xfb\xff\x7c\xc1\xa4\x05\x93\x16\xde\x26\x39\x73\x50\x64\x0e\x8a\xbe\x3f\x39\x73\x50\x64\x0e\x8a\x4c\xf9\x3b\x15\x72\xa6\xfc\x35\xe5\xaf\x39\x28\x7a\x6d\x4f\x70\x76\xf8\xf6\x72\xf6\xf2\x7f\x00\x00\x00\xff\xff\x63\xda\x56\xe1\xdb\x4d\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 19931, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _credentialJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xcd\x41\xaa\xc3\x30\x0c\x04\xd0\xbd\x4f\x31\x68\xfd\x4f\x90\x73\x7c\xba\x29\xa1\x38\x44\x29\x6e\x1c\x3b\xd8\x72\x68\x09\xb9\x7b\x91\xba\x28\xa5\xdd\x08\xf1\x66\x60\x76\x07\xd0\x5a\xf2\x16\x46\x2e\xd4\x81\xb6\x16\xa5\xd0\x9f\xf2\x18\xea\x1a\xfd\x43\xf5\xf4\xa5\x97\x29\x97\xc5\x8b\x86\x53\xe0\x38\xbe\x42\x7b\x2b\x75\x38\x3b\x00\xd8\xed\x02\x74\xab\x39\x69\x55\xf2\xcc\xc9\xaa\xc6\xc9\x2f\xfc\x83\xa3\x1f\x38\xaa\xff\x7f\x7a\x48\x6b\xb3\x45\xe1\xbb\x90\xe9\xe1\x80\xde\xa6\xc5\x5f\xdf\xc3\x34\xb7\x81\x4b\x62\xe1\xaa\xbd\xde\x1d\xee\x19\x00\x00\xff\xff\xb0\x36\xf4\x54\xea\x00\x00\x00")

func credentialJsonBytes() ([]byte, error) {
	return bindataRead(
		_credentialJson,
		"credential.json",
	)
}

func credentialJson() (*asset, error) {
	bytes, err := credentialJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "credential.json", size: 234, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json":      cloudJson,
	"credential.json": credentialJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json":      {cloudJson, map[string]*bintree{}},
	"credential.json": {credentialJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
