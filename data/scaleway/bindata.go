// Code generated by go-bindata.
// sources:
// cloud.json
// credential.json
// DO NOT EDIT!

package scaleway

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x9a\x5f\x6f\xf2\x36\x14\xc6\xef\xf9\x14\x47\xb9\xda\x24\x88\x12\x93\x3f\x8c\xbb\x95\x6a\xef\xcd\xde\x69\x12\xd2\x34\x69\xaa\x90\x49\x4e\xdb\xa8\x21\x49\x6d\xc3\xca\x2a\xbe\xfb\xe4\x14\x08\x98\x84\x04\x88\xde\x36\x92\x6f\xda\xc4\x3a\xf6\x79\xfc\x93\x7d\x4e\x1e\xb5\xef\x3d\x00\x23\xa1\x0b\x34\xc6\x60\xf0\x80\xc6\xf8\x2f\x5d\x1b\x7d\x39\x8a\xc9\x8a\x1b\x63\xf8\xa7\x07\x00\x60\x84\xb8\xca\x87\x01\x8c\x57\xba\x7b\xca\x58\x1a\xee\x9e\xd3\x04\xe7\xe9\x9b\xd1\x03\x78\xc8\xa7\x33\x7c\x8a\xd2\xa4\x58\xe1\x3d\xff\x09\x60\xc4\x69\x40\x45\x94\x26\x32\xe3\x9f\x94\x45\xbc\x0f\xbf\x31\x9a\x04\xb8\x5d\x69\x3f\x57\x06\x64\x94\xd9\xc5\xf8\x7f\x69\x82\xc5\x8a\x1f\x12\x64\xc0\xf6\xf5\x21\xff\xbd\xe9\x57\xe7\xfb\x75\xc1\x05\xb2\x90\x2e\xfa\xf0\x07\x8a\x67\x64\x31\x4d\x42\x5e\x96\x98\x2e\xf8\xf9\xc4\x79\xc0\x71\xe2\xfd\xde\xa3\x84\x0b\xb9\xa3\x99\x58\x67\x58\x82\x00\xdf\x04\xb2\x84\xc6\x33\xfe\xb2\x94\xc9\xfe\x9a\xd8\xd3\x22\x59\x88\x3c\x60\x51\xb6\xd3\x4c\xe0\x6d\xe4\x81\xe7\xcc\x23\x01\x93\x94\x21\xef\x03\xf9\x76\x07\x0b\x5c\xa4\x6c\x5d\xcc\x0a\xa8\xc0\x27\x39\x32\x06\x63\x12\xa7\xcb\x10\xa6\xc8\x56\xc8\x0e\x76\x17\x64\x32\x1b\x29\x76\x4b\x17\x47\xef\x61\xc4\x5f\x8c\x31\xb8\x56\x29\xc7\x12\xd1\xdf\x2b\x45\x3b\xa7\xa2\x9d\x5b\x44\x3b\x8a\x68\x47\x15\x6d\x5b\x8d\x55\xff\x5e\xa9\xda\x3b\x55\x3d\xba\x45\xb5\xa7\xa8\x1e\xa9\xaa\x49\x43\xd5\x7f\x7b\xce\xc0\xb3\xbe\xdd\x55\x2a\xb7\xad\x53\xe9\x72\xc2\xf5\xda\x6d\x4b\x11\xef\x59\xaa\x7a\xff\x02\xf5\x36\x39\x2b\xbf\xe4\x90\xe7\x33\x6e\xd0\xaf\x9e\x73\x9b\x9c\x6c\xc0\xb6\x1a\xee\x60\x42\xaa\xef\xa7\x03\xf7\x18\x46\x52\x57\x78\xf9\xf1\xb9\xa3\x0c\xbf\xa3\xa0\x71\xdd\x81\x3f\x39\x3a\x0d\x6f\xe9\x84\x54\x5f\xd2\xd1\x39\xe5\xb6\x77\xad\xf4\x91\x0a\xde\xbb\x5a\x7b\xf5\x55\x3d\xab\x7d\x58\x14\xc8\x3e\x10\x57\x9e\xa3\xfb\x88\x61\x20\x60\x3a\xbd\xbf\x71\x37\xc3\xca\x7a\xb9\x2f\xff\x2f\xcb\x39\xb2\x04\x45\x5e\xfa\xdf\x77\xfd\xf3\x91\x2e\x63\x31\xe3\x28\x96\xd9\x7e\x58\x36\xdf\x34\x44\x8e\xe2\x60\x08\xb6\x0d\x61\x0c\x64\x3b\xb2\x39\xc4\x65\xc8\xd3\x2e\x5b\xeb\x6c\xbe\x9e\x61\xb2\x3a\x5c\x4c\x76\xe9\xc3\x2e\x55\x2c\x59\xcc\xcb\xef\x9b\xe9\x98\xee\x7e\xa7\xa5\x37\x52\x46\xc0\x4f\x73\x14\xf4\xe7\xe3\x40\x9a\x65\xfc\x48\x6d\x3e\x5a\xec\x79\xc0\xf3\x0b\x59\x9e\x46\x89\xa4\xb1\xd8\xc7\x0d\x68\xa0\x86\x72\x41\x99\x18\x1c\xe1\x34\x2c\x93\x98\xb6\xa5\x46\x3e\xa7\x5c\x3c\xd2\x40\xf0\x8f\xe5\x5c\xd3\x33\x0e\x02\x36\xca\x4e\x33\x86\xf9\xc9\x31\xc6\x20\xd8\x12\x7b\x25\x71\xe7\xc8\x79\xb5\xe4\xbc\x36\xc8\x79\x0d\xc9\x79\x8d\xc9\x79\x26\xf9\xe5\x13\xc9\xb9\xa6\x5d\x43\xce\x35\xed\xdb\xc9\xa9\x69\xaa\xc8\xb9\xa6\xdd\x1d\x72\xa4\x96\x1c\x69\x83\x1c\x69\x48\x8e\x74\x87\xdc\xb0\x96\xdc\xb0\x0d\x72\xc3\x86\xe4\x86\xdd\x21\xe7\xd4\x92\x73\xda\x20\xe7\x34\x24\xe7\x74\x87\x5c\x5d\x6f\x75\xdb\xe8\xad\x6a\x9a\x6a\x72\xcd\x7b\xeb\xa7\x93\xab\xeb\xad\x6e\x1b\xbd\x55\x4d\x53\x4d\xae\x43\xbd\xd5\xaf\x25\xe7\xdf\x84\xcc\x6f\x88\xcc\x6f\x17\x99\x7f\x84\xec\x32\x28\xbe\x69\xd5\x40\x39\x89\xb8\x08\x8a\x3a\xbb\x0a\x8a\x6f\x5a\x3f\x06\xca\xf6\xe9\x61\x6f\x51\x5e\xa9\xf6\x03\xda\x0f\x7c\xd9\x9a\xa5\xfd\x80\xf6\x03\xda\x0f\x74\x85\x9c\xf6\x03\xda\x0f\x68\x3f\xd0\x15\x72\xda\x0f\x68\x3f\x70\xe2\x07\xf2\xbf\xd8\x6b\x47\xa0\xeb\xfd\x57\xad\x5a\xba\xde\xeb\x7a\x7f\x5d\x69\xdb\xfe\x03\x92\x2e\x6e\xda\xb4\x7f\xd5\x2b\xaa\x4d\xbb\x36\xed\xda\xb4\x77\x85\x9c\xfe\x88\xd3\x1f\x71\xfa\x23\xae\x15\x64\xda\xb4\x5f\xf1\x65\xdb\xdb\xbd\x6d\x7a\x9b\xff\x03\x00\x00\xff\xff\x0e\x80\x84\xd4\xa8\x2f\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 12200, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _credentialJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\xcf\x41\x8a\xc3\x30\x0c\x05\xd0\xbd\x4f\x21\xb4\xce\x09\x72\x89\x59\xcc\xec\x86\x50\x94\x46\x09\x6e\x1c\x3b\xd8\x4a\xdb\x34\xe4\xee\xc5\x2a\xb4\xb4\xb8\x1b\x63\xfe\x93\xf9\xd6\x66\x00\x70\x8e\xe1\x6c\x3b\x8e\x58\x03\xa6\x23\x39\xbe\xd0\x8a\x55\x96\xce\xa6\xd9\xd1\x9a\xe1\xb7\x04\x87\x3e\xc4\x89\x24\x7b\x6f\xd9\x75\x0f\xd4\x6b\xc2\x1a\xfe\x0d\x00\xc0\xa6\x27\x00\x9e\x52\xf0\x79\x34\xc4\x81\xbc\xbd\x91\xd8\xe0\xf5\x85\xaa\xa7\x89\xbf\xab\xa3\x96\x5d\xe6\x9f\x22\x5b\x3f\x2f\xfa\x0d\xe1\xab\xa0\xa6\x7b\x55\x6e\x97\x30\x72\xa1\xf6\x23\x7e\xf6\xfd\xbd\xe7\xa5\x22\x03\xd0\xe8\xe2\x42\xc3\x6b\x6d\x1c\x97\x96\xa3\x67\xe1\x94\xe7\x1a\xb3\x9b\x7b\x00\x00\x00\xff\xff\x67\xf5\xb8\x16\x6e\x01\x00\x00")

func credentialJsonBytes() ([]byte, error) {
	return bindataRead(
		_credentialJson,
		"credential.json",
	)
}

func credentialJson() (*asset, error) {
	bytes, err := credentialJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "credential.json", size: 366, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json":      cloudJson,
	"credential.json": credentialJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json":      {cloudJson, map[string]*bintree{}},
	"credential.json": {credentialJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
