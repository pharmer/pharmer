// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package aliyun

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x9c\x51\x8f\x9b\x38\x17\x86\xef\xe7\x57\x58\x5c\xb5\x52\x82\x0a\x49\x26\xfd\xe6\xae\xed\xa7\x6d\xbb\xd2\x6e\xb5\xea\x6e\x6f\x56\xd5\xc8\x21\x6e\xc2\x0e\x18\x06\x4c\x76\x32\xd5\xfc\xf7\x15\x24\x93\x80\x31\xf1\xb1\xe3\x41\x30\xc3\xcd\x56\xeb\xbc\xc1\xe6\x79\x8f\x39\xc7\x36\x99\x9f\x17\x08\x59\x14\x87\xc4\xba\x42\x16\x0e\xfc\x6d\x46\xad\x51\xde\x46\xe8\x26\xb5\xae\xd0\xdf\x17\x08\x21\x64\x2d\xc9\xa6\x68\x46\xc8\xba\xc5\xd6\x05\x42\xdf\x0b\x51\x42\x56\x7e\x44\x8f\xba\x9f\xc5\x7f\x11\xb2\x82\xc8\xc3\xcc\x8f\x68\x7e\xd5\x4f\x98\xae\xee\xd7\x51\x36\x42\x1f\xd6\x3e\xc5\xfb\xeb\x1c\xbe\x9d\x4b\x3c\x3a\x5e\xef\x55\xc7\x8f\xef\x23\x4a\x8e\x97\x2e\x9a\xca\xba\x7d\xeb\xf7\xe2\xdf\x87\x51\x73\xff\x7f\xf8\x74\xb5\xc4\xd1\xe9\xee\x6f\x77\x22\x59\xef\x7b\xd9\x78\x01\xef\xfe\x3d\xf1\xff\xf1\xe9\xea\x74\xf7\x8b\x9d\x48\xd6\xfd\x5e\x36\x3e\x5e\xa6\xda\xbe\x68\x68\xf7\xe0\xc3\xfd\x14\xd1\xd5\x4d\x54\x1e\x4a\xd5\xa6\xda\xc7\x0d\x36\xed\x75\x2a\xa4\xbe\xae\x09\xbd\x5f\x13\x7a\x1a\x55\xba\x57\xc9\x46\xf0\xa8\xab\xc1\x3a\x7c\xa0\x32\x34\x3f\xf0\xbd\x88\xa2\x6f\x38\x08\xc8\x76\x84\xfe\xfa\xfa\x4e\x34\xbc\x2c\x1d\xff\x4b\x52\x36\x76\x4e\x0e\xee\xa0\xaa\x0e\xed\xd8\xac\x30\xb0\x6f\x7e\xb2\xf2\xa9\x8f\x4f\x0d\x89\x60\xc8\x90\x76\xaa\x31\x56\x81\x42\x57\x38\x8e\x12\x22\xea\x17\xc7\xe3\x34\xca\xd8\x1a\xd0\x79\x55\x5a\x85\xc2\x7d\xa6\x14\x4d\x98\xae\xd6\xd8\x97\x45\xd3\x4e\x25\x8f\xa6\x9d\x4e\x10\x4d\xfb\x0f\xf8\xb9\x77\xf8\x40\x61\xf2\xfd\x3f\x5b\x94\x87\x72\x1c\x69\x48\x20\x2e\x1e\x54\x2a\x2e\xfe\x19\xdd\x6c\xa3\x11\xfa\x15\xc7\x98\x36\x18\x49\xa3\x04\x6a\x64\x49\xaa\x14\x4a\xdb\x25\xcd\xe7\xd5\xbb\x2c\x65\x09\x0e\x7c\xa1\x5d\x95\x58\x70\xe1\x21\xe5\xaa\x8c\xe4\x97\x04\xd3\x9b\x1f\x59\xc2\x46\xe8\x23\x49\x42\x4c\xb7\xa2\xa1\x90\x6c\xec\x11\x9a\x0f\x55\x82\xa4\x2c\xac\x0d\xe3\x90\x47\x7d\x9a\x32\x4c\x3d\x72\xcd\xb6\x31\x11\xa4\x53\x72\xc7\x48\x42\x71\x70\x9d\xde\x64\x45\xf7\x5e\x6a\x7b\x8e\x1d\xe0\x64\x55\x9a\x7c\x4b\x92\x7a\x89\x1f\x3f\xde\x89\x58\xe4\x61\x46\x56\x51\xb2\xcd\x15\x1f\x09\x25\x49\x71\xe7\xe8\x33\x7a\xf5\xf9\x0b\xfa\x12\x33\x3f\xf4\xef\xc9\xf2\x75\xe9\x0b\x71\xde\xe5\xdb\x23\x04\x1c\x5a\x57\xc8\xb9\xe4\xa8\x9c\x9c\xd3\xe2\xb4\xc4\xb5\xd6\x52\x0b\x12\x66\x66\x24\xce\x02\x48\xf4\xa8\x2b\x3f\x55\x4f\x87\x40\x03\xe1\x34\xc4\x41\x20\x23\xcc\x89\x9a\x09\xff\x9e\xff\xa3\x42\xf9\xed\x69\xc8\x8d\x28\x25\xcc\xd4\x49\xb8\x90\x58\xab\x89\x34\x63\xad\x1c\x5b\x05\x86\x89\xfb\x02\x82\xcd\xb5\x43\xb2\xf4\xb3\x50\xc6\x98\x57\x9d\x11\x6e\x35\xd0\xb2\x59\xdd\x66\xc0\xdd\x81\x22\x8e\x57\x99\x0a\xb9\xcb\xa9\x26\x89\xce\x05\x16\x99\xd8\x13\x00\x4b\x91\xac\x0c\xf3\x37\x12\x46\xc9\x16\xe5\x09\x0a\x91\x89\x3c\x92\x5c\xc9\xb3\x4b\x67\xce\xf2\x4b\x44\x2d\xe2\x5c\xbd\xd7\x6c\x44\xbd\xe6\x7a\x1a\x77\x40\xde\x68\x3b\x33\x6d\xe1\x59\xfa\x3c\x7d\x01\x3c\x8e\x05\x2a\xb8\x33\x6e\x0b\x25\xd5\xf3\x74\x46\x5e\x95\x51\xf7\x54\x55\x26\x79\x96\xa9\x15\x61\x83\x2d\x8f\xb6\xc0\xb2\x8c\x7e\x92\xe1\xab\x63\x59\x8e\x1e\x9c\xd9\x31\x9f\xda\x2e\xc4\x1a\x81\xac\xd1\x9b\xa9\x01\x6f\x44\xbb\x0a\xb5\xa5\x3b\x80\x6d\x65\x2d\xae\x43\x67\x0a\xa3\x53\x93\xc1\xe9\x68\x95\x47\x9d\xe1\x03\xa2\xa3\xcd\x46\x23\x0d\x76\x86\x0c\x2c\x70\xf4\xe3\x46\xa3\x78\xeb\x06\x9b\xd0\x81\x94\x4f\x02\x95\xe6\xfa\x8d\x07\xf5\x12\xb6\xa7\x42\x07\x12\x7f\x02\x95\xa1\x2d\xc0\x97\xb0\x2b\x13\x82\x76\x65\x04\x2a\x83\x9b\x80\x32\xce\xad\x6d\xca\x84\xa0\x4d\x19\x81\xca\x50\xc0\x3d\x41\xbd\x67\x1c\x11\x85\x15\x5b\x42\x5d\x19\xd3\x7b\x1c\x60\xea\x91\xe5\x2e\x33\x84\x54\x5a\x70\xf5\x27\x35\x50\x58\xc5\x25\xd4\x29\x21\x52\xde\xd4\xeb\x14\xa3\xb7\x40\x46\x35\x9d\x12\xa3\x49\xad\xfc\xea\x4d\x65\x9a\xdf\x3c\x0c\xd1\x39\x80\x78\x3e\x7d\xa2\x23\xdf\x27\x11\xa8\xd4\xa6\x18\x47\xa7\x4f\x13\x0c\x38\xbf\xce\x9a\x5e\x1a\x75\x69\x37\x00\x51\x07\x74\x6a\x20\x92\xd5\xb3\x7d\xb0\xe3\x43\x1d\xe9\x13\x7a\xd8\x9d\x86\xba\x33\x87\xb9\x53\x93\x29\xb8\x53\xcb\x0d\xc3\x86\x1b\xd4\x1d\x90\x37\xfa\xce\xf0\x8f\x95\x61\x8b\x1a\xe8\x0b\x60\x31\x27\x50\x29\x38\xc3\x4f\x99\x61\xc6\x00\x9d\x01\x9c\xe9\x00\xde\xb4\x69\xce\x34\x9c\x2f\x43\x9e\x01\xfa\xc2\xfc\xf2\x1b\x70\x62\x5b\xaa\x9a\x33\x5c\x71\x06\x57\x60\xae\xc0\x92\xff\x19\xb9\xbf\x8d\xf7\xfd\x9e\xa3\x35\x2e\xac\x6c\x16\xc8\x9a\xcd\x71\x4d\x6c\x6c\x0c\xee\x14\xd8\x41\x65\xb3\x40\xa6\xe0\x8e\xd6\x96\xca\x60\x4f\xc1\x1d\x64\x8e\xbe\x35\x6d\x1c\x13\x3d\x4f\x63\x20\x85\x33\xe4\x14\xa4\xd1\x1a\xf5\x7d\xb6\xc1\x19\xd1\x7b\x4e\xca\x2f\x43\xc9\x72\xcd\xb0\xa0\xd1\xf3\x05\x96\x68\xce\xc8\x33\x6d\x9c\xc7\x3e\x47\x6b\x60\x27\x74\xb2\x03\xba\xaa\x39\xd2\xe3\xb9\xfe\x6c\xfc\xc2\x4e\xe7\x64\x87\x73\x12\x3c\x3a\x1b\xbf\x9d\xe1\x03\x39\x99\x93\x1d\xcc\x49\xf8\xe8\x6c\xbd\x76\x86\x0f\x88\x8e\x3e\x1b\xf5\x2d\xb6\xce\x90\x01\xe4\xea\x93\xe7\x71\xb2\x59\xc5\x91\xe9\xd1\x9c\x82\x4d\xa9\x33\x66\x94\xfa\x96\x79\x37\xd8\xa4\x90\xc3\x84\xba\xe8\x9c\x5f\x85\xa9\x91\x6a\xed\xdd\x9a\x14\xb4\x7d\x2f\x50\xe9\xfe\x26\xec\xc9\x2b\xdf\x27\x20\x24\x7f\xc2\xd4\x45\x86\xf8\x98\x2f\x3f\x8d\xf3\x71\x41\xa5\x9f\x48\x76\xc6\x7c\x52\x7d\xc1\xb9\x4d\x1c\x20\x18\x66\xde\xe6\x6b\xe1\x64\xac\x6b\x6f\x8f\xa6\x90\xd5\x79\x5d\x64\x30\xd6\xba\xf2\xea\x68\x0a\x5a\x0f\x0b\x54\x86\x82\xed\x09\x76\x93\x3a\x17\x6c\x90\x5f\x92\xd6\x45\x86\x5e\xb8\x7f\x19\x80\x21\xf5\xc7\xe9\x9f\x84\x2a\xce\x67\x1e\xb3\xee\xaf\xd2\x4d\xcf\x67\x06\xa9\x34\xea\x22\x83\x55\xa9\xe4\xa8\xb8\x35\x12\x77\x06\x96\x75\x1f\xa2\x30\xc6\x1e\xdb\x2d\x5d\xee\xe4\xeb\x3a\xf9\x31\x79\x0b\x6b\x97\xc3\x1f\xaf\xb9\xc9\x16\x24\xa1\x84\x15\x7f\xb8\x66\xc7\xca\x5a\x92\x1f\x38\x0b\xd8\x75\x4a\x58\x16\x1f\x9a\x11\xb2\x68\xb4\x24\x29\x61\xa5\x26\x84\xac\x6f\x1f\x9c\xaf\xf9\x43\x7b\xdf\xf2\x50\x86\x6f\x6d\x48\x92\xe6\xf7\x78\xbd\xd8\x5e\x13\xba\x29\x5f\x6c\x49\x36\x95\x3b\x3f\x5e\xf2\xf8\xbd\x9c\xaf\x63\x4f\xed\xcb\xd2\x6d\xd5\x3d\x2a\x14\xe8\xd5\x82\x30\xfc\xba\x2a\xc4\x71\x9c\x56\x46\x5b\xb4\x1e\xef\x79\x9c\x92\x64\x43\x12\x71\x37\x9c\x12\x07\xec\xa0\x1b\x63\x8f\x97\xa6\x0c\x27\x6c\x5c\xc1\x69\xbd\xb1\x2f\x6d\xf7\x7f\xbc\x72\x1d\xa5\xec\x07\xf6\x58\xba\xbb\xdc\xcc\xbe\xb4\x4a\x82\x07\xee\x4e\xe3\x84\xe4\xd1\xb6\xb4\xae\x10\x4b\x32\x72\x21\xd0\x35\x93\x9b\xd9\x8e\x84\xdc\xcc\x76\xce\x27\xc7\x77\xd3\x44\x6e\x66\x3b\xfd\x21\xe7\x4a\xc9\xb9\x26\xc8\xb9\x40\x72\x6e\x7f\xc8\x4d\xa4\xe4\x26\x26\xc8\x4d\x80\xe4\x26\xfd\x21\x37\x95\x92\x9b\x9a\x20\x37\x05\x92\x9b\xf6\x87\xdc\x4c\x4a\x6e\x66\x82\xdc\x0c\x48\x6e\xd6\x1f\x72\xb2\xdc\x3a\x33\x91\x5b\xf9\x6e\x9a\xc9\xf5\x28\xb7\xce\xa5\xe4\xe6\x67\x21\x9b\x03\x91\xcd\xcd\x22\x9b\x57\x90\xa9\x41\x99\xdb\x6f\x24\x50\x6a\x0a\x25\x28\xfc\xb7\x9b\xa0\xcc\xed\x37\xed\x40\x79\x2c\xab\x0f\x45\xfd\x2d\x1e\xaa\xda\xa1\xaa\xed\x2c\xb9\xa1\xaa\x1d\xaa\xda\xa1\xaa\xed\x0b\xb9\xa1\xaa\x1d\xaa\xda\xa1\xaa\x35\x82\x6c\xa8\x6a\x35\xaa\xda\x8b\xc7\xff\x7b\xb8\x78\xf8\x2f\x00\x00\xff\xff\x61\x51\x04\x03\x6d\x64\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 25709, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
