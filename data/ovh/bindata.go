// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package ovh

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x98\x4f\x6f\xe2\x38\x14\xc0\xef\x7c\x0a\xcb\xa7\x5d\xa9\x44\xd8\x49\x08\xdb\x5b\xcb\xcc\xc2\x61\xff\xa0\x89\x76\xf6\xb0\xaa\x90\x01\x4f\x89\x4a\x1d\xc6\x76\xa2\xed\x8c\xf8\xee\x2b\x67\xda\x04\x1c\x92\x38\xc4\xaa\x16\x29\x97\x99\xa9\xe7\xe1\xf7\xcb\xcf\xef\x39\x8f\x7e\x1f\x00\x00\x19\x79\xa6\xf0\x16\xc0\x38\xdd\xc2\x1b\xb5\x40\x59\x2a\xe0\x2d\xf8\x67\x00\x00\x00\xf0\x2b\xc9\x56\x01\x80\x1b\x9a\xc2\x01\x00\x0f\x59\x10\xa7\x8f\x51\xcc\x8a\xb8\xef\xd9\x9f\x00\xc0\x5d\xbc\x26\x32\x8a\x99\xda\xf2\x9e\x92\x64\x4b\x38\x8b\x23\x71\x03\xa6\x84\x91\xcd\xdb\x66\xf9\x0e\x2a\xec\x8f\x98\xcb\x2d\xb8\x7b\xa6\x3c\x5a\x1f\x05\x7c\x8b\x19\x2d\x12\x64\x4b\xf7\xf3\x10\xc1\xd7\x1f\x1f\xb2\xbf\x0f\x37\xd5\xe9\x67\x9c\xa4\x74\x17\x31\x2a\x6e\xc0\xaf\x9c\xb0\x35\x3d\x97\xfd\x6f\x2a\x24\xe5\x0c\x7c\x4c\x78\xbc\xa7\xb5\xe9\x67\x9f\xee\x5a\xa4\x0f\x25\x27\x62\x15\x27\xfc\xb1\x2e\xfd\x94\x32\xc9\xc9\xce\x24\x7d\x78\x3f\xd3\xd3\xe7\xe7\x11\x31\x21\x55\x8a\xa5\x7c\xd9\xd3\x33\xc7\x42\xff\x55\x0f\x49\x76\x4b\xf1\x94\xa8\xb4\x9f\x17\x21\x98\xfe\xf6\xe7\x5f\x1f\x00\x2a\x72\x6e\xa8\x58\xf3\x68\xff\xf6\x00\x08\xa4\xd3\x98\x2b\x7b\xae\x83\x66\xdb\x6f\x45\xe0\x9a\x48\xfa\x18\xf3\x97\x7c\xa7\x5d\x9c\x6c\x8e\xfe\x7b\xaf\x72\xa0\xe2\x69\xc9\x33\xbc\x05\xb8\xc8\x13\x89\x27\xb5\xe0\x9f\x75\x58\x8d\x8a\x2b\x51\x71\x37\x54\xac\xa1\x7a\x3a\xaa\x3f\x6a\x89\xea\x56\xa2\x7a\xdd\x50\x3d\x0d\x75\xa2\xa3\xa2\x91\x39\x6b\x18\x9a\x9d\x3f\x76\xbc\x5a\xd2\x30\xfc\xd0\xfa\xf4\x51\x3b\xcc\xea\xb3\xb7\x8a\x59\x3a\x79\xdc\x0e\xb3\xfa\xdc\x71\x17\x4c\xbd\x40\x4b\xa7\xee\xb5\x2d\xd0\x4f\x77\xbf\x5b\x39\xfa\xac\x48\xd5\x6e\x4d\x66\xc7\x9d\xdb\x5f\x21\x9b\x5c\x01\x17\x23\xeb\x96\x51\xa9\x68\x5b\xdf\x03\x8a\xd9\xe4\x2e\xb8\x98\x59\xbf\x0f\x70\xa9\x82\x4d\x2f\x84\x8f\xb3\x61\x60\x64\xd7\xad\x24\x5d\x24\xab\x5d\xb4\x7e\x85\x0d\x29\x4f\x29\x17\x4d\x92\x83\x72\xc7\x19\xf3\x22\xdf\x48\x6d\x37\x60\xdd\x30\xf2\xcb\xcd\x67\x4c\xec\x8e\x2a\x89\x27\xd6\x88\x27\x1a\xb1\x3b\xd2\x89\x27\xe6\xc4\xe3\x6a\x62\x34\xb6\x86\x8c\xc6\xfa\x75\x51\x62\x46\xe3\x16\x85\x81\xab\xa9\x5d\x7b\xb5\xec\x96\x6f\x8c\xcb\xb1\xe7\x66\xfd\x57\x37\x35\xbc\x6b\xff\xcd\x0d\xfb\xaf\x2b\xb0\xbd\xfe\x9b\x1b\xf6\x5f\x57\x62\x7b\xfd\x37\x37\xed\xbf\xae\xc8\x36\xfb\x6f\x6e\xdc\x7f\x5d\xa9\xad\xf6\x5f\xb8\xa8\xab\x0e\xb3\xf1\xe2\x92\x06\x2c\x57\x87\x69\x07\x86\x8b\xba\xea\x30\x1b\x2e\x2e\xe9\xc0\x72\x6d\x98\x76\x60\xb8\xa8\x2d\x8d\x89\x35\x64\xbd\x05\xcf\x14\x86\x69\x0f\x86\x8b\x21\xf6\x0c\x5f\x82\x76\xa1\xb1\x57\x53\xcd\xf9\x57\xff\xa7\x64\x45\x39\xa3\x32\xfb\xda\xff\xe3\x29\xe0\x86\x7e\x21\xc9\x4e\x2e\x05\x95\xc9\x3e\x5f\x06\x00\xb2\x78\x43\x05\x95\x47\x4b\x00\xc0\xcf\x53\x14\xaa\x74\xaf\x2b\x87\x63\x2d\x50\x81\x46\x31\x13\xcb\xd5\xcb\x92\xb2\xf4\x78\xb3\x0d\x4d\x4f\x7e\x43\x51\x6c\x59\x7c\x2e\x53\xe4\x78\xce\x38\x7f\xd8\xb3\x12\x55\x04\xf8\x69\x45\x25\xf9\xf9\x34\x90\xec\xf7\xe2\x84\x36\x5b\x2d\x9e\x79\x28\x32\x97\xe7\xd3\x68\x91\x64\x27\xf3\xb8\x21\x59\xeb\xa1\x42\x12\x2e\x87\x27\x3a\xe1\xc8\x19\x3b\xf8\x17\x3d\x72\x1b\x0b\xf9\x85\xac\xa5\xf8\xb1\x9d\xef\x8c\xe1\x51\xc0\x41\x7b\xd2\x3d\xa7\xaa\x12\x36\xf0\x16\x48\x9e\xd0\xc1\x99\xb8\x6a\x73\xbe\x83\x1a\xcc\xf9\x0e\xea\x6e\x4e\x4f\x53\x65\xce\x77\xd0\xf5\x98\xc3\x8d\xe6\xb0\x0d\x73\xd8\xd0\x1c\xbe\x1e\x73\x6e\xa3\x39\xd7\x86\x39\xd7\xd0\x9c\x7b\x3d\xe6\xbc\x46\x73\x9e\x0d\x73\x9e\xa1\x39\xef\x7a\xcc\xf9\x8d\xe6\x7c\x1b\xe6\x7c\x43\x73\xfe\xf5\x98\x6b\x7a\xb7\xfa\x36\xde\xad\x7a\x9a\x6a\x73\x57\xf4\x6e\x0d\x1a\xcd\x05\x9d\x94\x05\x86\xca\x02\xbb\xca\x82\x13\x65\xed\xa4\x04\xce\xa8\x41\x4a\x29\xa2\x95\x14\xfd\xd3\x55\x52\x02\x67\xf4\x3e\x52\x5e\xff\xf5\x90\x8f\xda\x5f\x49\x3f\xd5\xf6\x53\xed\xff\xd6\x5c\x3f\xd5\xf6\x53\x6d\x3f\xd5\x5e\x8b\xb9\x7e\xaa\xed\xa7\xda\x7e\xaa\xb5\xa2\xac\x9f\x6a\x2f\x98\x6a\x07\x6f\x3f\x1d\x06\x87\xff\x02\x00\x00\xff\xff\xb0\xfe\x5e\x41\xf0\x27\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 10224, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
