// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package rackspace

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x98\xed\x6e\xda\xbe\x17\xc7\xdf\x73\x15\x47\x79\xd5\x49\x90\x25\xce\x03\xd0\x77\x88\xb2\xae\x5a\x29\x55\x69\xbb\x4d\x7f\x55\x95\x0b\x1e\x8d\x9a\x3a\x59\x62\xd0\x9f\x4e\xbd\xa5\x5d\xc4\xae\xec\xa7\xf0\x14\x70\x70\x62\x43\x34\x0d\x89\x37\x5b\x71\x4e\x7c\x3e\xdf\xaf\x8f\x9d\x93\xfc\xaa\x00\x68\x14\xbf\x12\xed\x14\xb4\x08\x0f\x5e\xe2\x10\x0f\x88\x56\x4d\x86\x09\x9d\xc4\xda\x29\xfc\xaf\x02\x00\xa0\xfd\xc4\xb3\x51\x00\x6d\x48\x26\x5a\x05\xe0\x61\x16\x14\x91\x91\x17\xd0\x34\xee\xd7\xec\x5f\x00\xcd\x0f\x06\x98\x79\x01\x4d\x26\x3e\xc3\xbe\x8f\xe3\xda\xa7\x20\x62\xf0\x35\x88\xd8\x73\x15\x6e\xbf\x55\xe1\xae\xdf\x5a\xcc\xb9\x9a\x68\x16\xfd\xe9\x6b\x3a\xfc\x16\x50\x92\xce\x3e\x1b\x4a\xae\x2f\x7e\x3d\xcc\xfe\x7f\xaf\x8a\x53\xb7\x9f\xbd\x01\x1e\x05\xc2\x64\xbd\x9b\xb3\xdc\x64\xc9\x75\xe9\x64\x57\x89\x36\x12\x51\xb8\xf7\xa2\x91\x47\x3d\x2c\x4c\x7b\xd1\xca\x4f\x9b\x5c\x97\x4e\xdb\x9f\x0e\x29\x99\x56\xa1\x35\x8e\x59\x84\x7d\x0f\x6f\xcb\xd8\xff\x9e\x9f\x31\xb9\x2e\x9d\xf1\x73\x40\x47\xf0\x25\xa0\xa3\x6d\x99\x3e\x7f\x39\xcf\xcd\x94\x5c\xdf\xcc\xb4\xaa\x26\x8f\xc6\x0c\xd3\x01\x79\x64\xd3\x90\x6c\x29\x2a\xf2\x7f\x46\x22\x8a\xfd\xc7\xf8\x65\x9c\xa4\x3a\xef\x5c\x75\x6e\x5a\x97\x66\xcd\x4c\x33\x0e\x49\x3c\x88\xbc\x70\x89\x7a\x4e\x28\x89\xb0\x0f\x1b\x31\x03\xcc\xc8\x28\x88\xa6\xeb\x01\xd7\xe3\x28\x0c\x62\x92\xac\x1d\x1b\x63\x1f\xfa\x24\x9a\x90\x28\xbd\x67\x32\x08\x93\x9c\x66\xaa\x18\xbf\x6e\xfc\x1e\x7a\xf1\x8b\x76\x0a\xc8\xd8\x6a\x9f\x10\x1d\x49\xa0\xa3\x52\xd0\x11\x87\x8e\x78\x74\xd3\x55\x64\xb7\x25\xd8\xed\x52\xd8\x6d\x8e\xdd\xe6\xd9\x1b\x8a\xe8\x0d\x09\xf4\x46\x29\xe8\x0d\x0e\xbd\xb1\xab\xed\xed\x5e\xf7\xfa\xee\xb6\x93\x67\x7b\x3b\x78\x0d\xc7\x8c\x88\x6d\x5f\x06\xf4\x42\xe6\xbd\x7a\x6f\x64\xa8\x5a\x34\x96\x5e\x77\xd4\x68\xc5\x4e\xa7\xb4\x02\xa7\x95\x69\xf9\x32\xa9\xeb\x8a\xb0\xa6\x23\x41\xbb\x1e\xb4\x17\x2e\x5f\x1a\xa6\x22\xad\x65\x48\xd0\xae\x07\xed\x45\x6b\xba\x7c\x2d\x28\xd6\xad\x2b\x83\xeb\x96\x85\x6b\xf1\xa5\x2b\xb9\xcd\x2e\x3e\xf6\x72\xeb\xe0\xe2\x63\x2f\xa7\x06\x92\xab\x3b\x97\xab\xe9\x64\xce\x86\xa6\x02\x74\x4e\x39\xcc\xa1\x45\xa5\xa0\x04\xcd\x17\xad\x65\xf0\xd0\x96\xad\x00\x9d\x53\x14\x73\x68\x51\x41\x28\x41\x67\x6a\xd7\xcd\x50\xbb\x2a\xd4\xcd\x22\xea\x66\x19\xd4\x88\x2f\x90\x66\x86\xba\xa9\x42\x6d\xa2\x22\xec\x8d\x88\x9d\xb9\x33\x5b\xcf\x44\x19\x70\xd3\x35\xe4\xc8\xbb\x9d\x6e\xef\xe6\x7b\xee\x96\xec\x92\xd7\x20\x9a\xe6\xec\xca\x45\xc0\xce\x4f\x3d\xc9\x83\x79\x89\x9a\xb3\x11\x57\xa8\xa2\xbd\xa8\x8a\xca\x97\x88\xe4\xa1\xbc\x44\xcd\xd9\x7e\x2b\x54\xd1\x0e\x54\x45\xe5\x4f\x0e\xc9\x03\x79\x55\x00\x39\xd5\x9b\x56\x80\xa8\x80\x55\x61\x33\x27\x86\x29\xd9\xd9\x2f\x71\x91\x2d\x81\xbb\x11\xb4\x0f\x6e\x66\xcb\x21\xc9\x83\xa1\x77\xd5\xed\xdc\xb6\x2e\x61\xd1\x19\xc3\xf5\xdd\xcd\x75\xaf\xdf\x81\x09\x82\x7e\xb7\x75\x79\x29\xd4\xd0\xf7\xe8\xc8\x27\x70\x41\x19\xf1\xff\xfc\x86\x6f\x24\xa0\x7f\x7e\x43\xc7\xa9\x21\x17\x19\x30\xb1\xe0\xc4\x85\x76\x10\x91\x2a\x20\xdd\x3e\x7f\x7e\xfb\xb0\x5d\x68\x8f\x76\x09\xc3\x3e\xb4\xfd\x60\x3c\x5c\xa8\x8b\xe1\x7e\xfd\x95\x67\x26\x30\xd3\x7c\x64\x5e\x5f\x1a\x92\x07\x4a\x8e\xe2\x6e\xe7\xec\xe2\xae\x2b\x94\x7c\x96\x2c\xc0\xdf\x12\x6c\x66\xfa\x97\x2d\x2f\x3d\x7b\x2b\xbe\x6c\xdd\x9c\x77\xfe\x51\xc1\x26\xca\xbc\x2b\xa9\x2a\x4e\x1e\x5b\x13\xf1\xd7\x01\xa1\xbe\x86\x91\x98\x73\x62\x1a\xbb\x0b\xe4\x53\x2f\x44\x1a\xc5\x22\x2d\xa4\xae\x51\xfc\x19\x41\xa8\xd1\x9d\xaf\xe1\x9a\x46\x77\x27\x8d\x99\x85\x44\x12\x1a\x55\x8f\xa7\xf9\xa9\xba\xd3\x5a\x5a\xf3\xb5\x74\x77\x97\xb9\x38\x8c\xb3\xab\xc9\x1f\x4a\x8e\x99\x39\x95\x14\x17\x73\xf1\xb2\x54\x52\xd1\x36\x54\x95\x2e\xdf\xb2\x24\x0a\x37\x7b\x00\x2f\xa5\xae\xbe\xe7\xbd\x8c\x9f\x48\x44\x09\x9b\x7d\xcb\x9b\x4b\xd7\x86\xe4\x07\x1e\xfb\xec\x31\x26\x6c\x1c\xae\x86\x01\x34\x1a\x0c\x49\x4c\xd8\xda\x10\x80\x76\xdf\x36\xfb\x49\xb5\x2c\x46\xde\xd7\xbd\xd4\x12\x62\x2f\xa0\xf1\xe3\xd3\xf4\x91\xd0\xc9\xfa\x64\x43\x32\xd9\xf8\xea\x98\x4e\x99\xde\x97\xb8\x60\xea\xb6\xee\xae\xa4\x6e\x73\x7b\x16\x01\x27\x4f\x84\xe1\x0f\x9b\x81\x38\x0c\xe3\x0d\xda\xd9\x68\xaa\xb9\x16\xcf\x1f\xd5\x5b\xd3\x70\x91\xd8\x67\xab\xb8\x1a\x1e\xf0\xa1\x31\xc3\x11\xab\x6d\xd8\xa9\x19\xba\xab\xa3\x26\x1f\xf9\x1c\xc4\xec\x07\x1e\xb0\x78\x3e\x9d\xa3\xbb\xda\x5a\xc0\x3b\xa7\x34\x8c\x48\x52\x13\x43\xed\x14\x58\x34\x26\x95\x2d\x71\x62\xe7\x1c\xdd\x2c\x70\xce\xd1\xcd\xfd\x9d\xe3\xd3\x88\x9c\x73\x74\xf3\x70\x9c\x43\x85\xce\xa1\x32\x9c\x43\x92\xce\xa1\xc3\x71\xce\x2a\x74\xce\x2a\xc3\x39\x4b\xd2\x39\xeb\x70\x9c\xb3\x0b\x9d\xb3\xcb\x70\xce\x96\x74\xce\x3e\x1c\xe7\x9c\x42\xe7\x9c\x32\x9c\x73\x24\x9d\x73\x0e\xc7\xb9\xa2\x67\xab\x53\xc6\xb3\x95\x4f\x23\x76\xee\x80\x9e\xad\xf5\x42\xe7\xea\x7b\x59\x56\x97\xb4\xac\x5e\xae\x65\xf5\x0d\xcb\xd4\x4c\xa9\xeb\x46\x81\x29\x99\x08\x25\x53\xf8\xbb\x45\xa6\xd4\x75\xe3\xef\x98\xb2\xf8\xeb\x61\xd5\x68\xff\xc4\xc7\xae\xf6\xd8\xd5\xfe\xb3\xce\x1d\xbb\xda\x63\x57\x7b\xec\x6a\x0f\xc5\xb9\x63\x57\x7b\xec\x6a\x8f\x5d\x6d\x29\x96\x1d\xbb\xda\x1d\xba\xda\xca\xf2\xd7\x7b\xe5\xfd\xbf\x00\x00\x00\xff\xff\xbd\x65\x48\xb9\x89\x2c\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 11401, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": &bintree{cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

