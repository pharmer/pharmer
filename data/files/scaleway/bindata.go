// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package scaleway

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x96\x5f\x4f\xe3\x3a\x13\xc6\xef\xf9\x14\x56\xae\x43\x37\x09\xd9\x2c\xe2\x2e\xb4\xbb\xa8\x7a\x0b\xf4\xa5\x88\x3d\x7f\xb4\x5a\x4d\x9d\xa1\xf5\xa9\x63\xe7\xd8\x4e\xd9\x82\xf8\xee\x47\x76\xda\x26\x6d\x93\x22\x96\x1b\x50\xe3\xc7\x33\xbf\xb1\x1f\x7b\xfc\x72\x42\x88\x27\x20\x47\xef\x82\x78\x9a\x02\xc7\x27\x58\x79\xbe\xfd\x8a\x62\xe9\x5d\x90\xbf\x4f\x08\x21\xc4\xcb\x70\xe9\xbe\x12\xe2\xfd\x0b\xde\x09\x21\x3f\x9c\x46\xe1\x8c\x49\xa1\xb7\xba\x17\xf7\x97\x10\x8f\x4b\x0a\x86\x49\x61\xc3\x8e\x41\x31\xed\x93\x6f\x0a\x04\xc5\x75\x94\xed\x5c\x2b\x28\x40\x85\xf5\xf7\x67\x29\xb0\x8e\xe8\x3e\x39\xc1\xfa\xe7\x0f\xf7\xff\xd5\xef\xce\x97\xe6\xda\xa0\xca\x20\xf7\xc9\x0d\x9a\x39\x2a\x0e\x22\xd3\x6d\x89\x21\xd7\xc7\x13\x3b\xc1\x6e\xe2\x6d\xed\x4c\x68\x63\x2b\xba\x5f\x15\xd8\xb2\x02\x7a\x51\xda\x14\x0f\xfd\x70\x52\xa7\xc8\x50\x53\xc5\x8a\x0d\x69\x44\x7e\x9d\x27\x24\x89\xa7\xcc\x90\xbe\x54\xa8\x7d\x12\x5d\x5d\x92\x1c\x73\xa9\x56\xf5\x2c\x0a\x06\x67\xf6\xcb\x05\xf1\xfa\x5c\x96\x19\x99\xa0\x5a\xa2\x6a\xd4\x44\x0b\x9b\x2d\xaa\x6b\x84\x7c\xe7\x77\xc6\xf4\xc2\xbb\x20\x9f\x83\xd6\xd5\xab\x59\xaf\x3b\x59\xe3\x43\xd6\xf8\x23\xac\xf1\x1e\x6b\xbc\xcf\x1a\x06\x6f\xc1\x8e\x3a\x61\x93\x43\xd8\xf3\x8f\xc0\x26\x7b\xb0\xe7\xfb\xb0\xd1\x71\xd8\x3f\x92\xf8\x34\x09\xae\x2e\x3b\x81\xc3\xe0\x90\xd8\x4e\xf8\x7d\xe4\x30\xd8\x63\x4e\x82\x7d\xe8\x2f\x6f\x43\x87\xd1\x51\xea\x16\x03\xbb\x19\x1f\xc0\xde\xf7\x70\x18\x1d\x70\x87\xc1\x71\xf0\x7e\xd4\x7d\xe4\x62\x32\xc0\x8c\x59\x9c\xec\xfd\x1e\xb9\x04\x85\xd7\x68\x80\xbf\x65\xe6\x03\x7f\x1c\x3f\x78\xfd\xa8\xfb\xdc\x9d\x1f\x03\x0e\x93\xdf\x25\x3e\xdf\x5f\xe6\xe4\xbd\xc8\xdd\xa7\xef\x28\xf2\x59\x7d\xc3\xf9\x24\xfa\x6c\xcd\x32\x60\x0a\xa9\x21\x93\xc9\xe0\x83\x45\x9c\x75\x5e\x78\xdb\x5b\x9b\x2a\xcc\x50\x18\x06\xbc\xe5\xce\x2e\x94\x5c\xb2\x0c\x95\x4d\x3a\x69\x36\xc3\x4d\xc8\x82\xc3\xea\x9b\x54\x39\x18\x2b\x79\x64\xc8\xb3\x7a\x1c\x84\x90\xc6\x75\x21\x1b\xfa\xa5\xd1\xbe\xe6\xa0\x72\x54\x3d\x28\x0a\x4d\x65\x86\x3d\x2a\xf3\x4f\x94\x97\xb6\x4d\x9d\xd6\x40\x36\xe4\xa6\xd9\xbc\x6e\xa3\xba\x24\xbb\x6d\xa9\x0e\x5d\xb5\x69\x2a\xc5\x23\x9b\x39\xe8\x7e\x3a\xfa\xfa\x3d\xfd\xf3\xe7\xed\xdd\x55\x7a\x33\xfc\x2b\xbd\x1f\xde\xde\x6c\x09\xab\x78\x52\xe5\xcd\x66\xff\x53\xaa\x19\x08\xf6\x5c\xb5\xcf\x1d\xe9\x3f\xba\xda\xcf\x6e\x05\x87\x29\x3a\xee\xdb\x4e\x09\x13\x45\xe9\x56\xcb\xe0\x2f\xe3\x6d\x47\x5e\xfd\xf7\x94\x73\x7f\xfb\xbf\xaf\x6f\xd5\x61\xe4\x02\x3b\x0a\x68\x19\xda\x92\xdf\x1f\x8e\x6d\x91\x0b\xd0\xfa\x49\xaa\xac\x81\xdd\xf1\x18\x58\x94\x53\x54\x02\x0d\xea\x07\x54\xba\xfd\x4d\xb4\xac\x46\xdc\xc5\xd9\xfb\xd2\x8b\xbb\xaf\xd5\xdd\xd1\xea\x21\xd6\xf0\x93\x7d\x8c\x5d\x10\xa3\x4a\x3c\x70\x4b\x86\x8f\x50\x72\x33\x29\x90\xee\xce\x59\xdb\x6d\x58\xdc\x81\x98\x61\xd5\x72\x7a\x51\x1c\xf7\x82\x5e\xf0\x29\x4c\x1a\x0b\xe0\x69\x54\x4b\x46\xb1\xdf\x36\x23\x68\xd1\x03\x77\xaf\x2f\xbc\x91\x19\xf6\x59\xa6\xf4\x1a\xae\x21\x41\x01\x53\xbe\x89\x78\x2d\x05\x33\x52\x31\xe1\xf6\x78\x73\x28\xbc\x2e\xf9\x48\xce\x66\x95\xb6\x35\xa8\xcd\xda\x29\xe1\xd5\xc0\x00\xb5\x61\x62\xfb\x40\xdc\xa4\x3c\x45\x0e\xda\x30\xaa\x11\x14\x9d\xef\x00\x34\x07\xd6\xd1\xef\xb0\xe0\x8c\x82\xad\x2e\x6c\x48\x33\xa1\xab\x56\x36\x1c\x37\xd6\x28\x0c\xbc\x5d\xcd\x40\xe6\xc0\x5c\xf6\xf5\x4e\xf4\xec\xa2\xf1\x9d\x75\xcc\x72\xa6\xad\x43\xfa\x52\x18\x25\x9d\x3b\x6f\x20\x47\x5d\x00\xc5\x11\x7b\x44\xba\xa2\x1c\xfd\x11\xcb\x99\x71\x7b\xa2\xfc\x49\xb5\x55\x29\xa5\xb2\x14\xc6\x1f\x5b\x87\x69\x83\xc2\x3c\x48\x5e\xe6\x38\xb2\x26\xf7\x07\x6b\x4f\x18\xa9\x60\x86\x7d\x0e\x5a\xfb\x77\xa8\x65\xa9\x28\xfe\xbf\x94\x06\x9a\x10\x39\xb4\xd9\x24\x71\xdb\x1e\xc5\x4d\xa5\x40\xf3\x24\xd5\x62\xdc\xb8\x33\x1f\x39\x08\x81\xbc\x73\x2b\x53\x8e\xca\x74\x6d\xba\xb4\x2b\xeb\x65\x38\x65\x20\xda\xf2\x48\xce\xe8\xaa\x99\x4d\x48\xd1\xe2\x9a\xef\x38\x9d\x4b\xb9\x70\xc7\x3a\x2d\xcd\x5c\x74\x19\xe7\x6e\x0a\xd4\x0a\x9e\xbb\x04\xe9\x78\xa8\xdd\xce\x5e\x82\x66\x34\x2d\x33\x66\x3a\xa5\xeb\x7a\x52\x63\x18\x3d\x14\x15\x92\xf3\x09\x47\x2c\x86\xc2\xa0\x5a\xba\xab\xfe\xac\xd5\xc9\xe3\x72\xca\x19\x75\x56\x6a\x9e\xef\xfa\xb6\x39\x79\xfd\x2f\x00\x00\xff\xff\xa9\xee\xa4\x62\xb3\x0d\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 3507, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
