// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package scaleway

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x96\x5f\x53\xdb\x3a\x13\xc6\xef\xf9\x14\x1a\x5f\xbb\xa9\xed\xba\x2e\xc3\x9d\x49\x5a\x86\x79\x03\xe4\x25\x0c\x3d\x7f\xa6\xd3\xd9\x48\x4b\xd0\x89\x2c\xf9\x48\x72\x68\x60\xf8\xee\x67\x24\x87\xd8\x49\xec\x30\x94\x1b\x98\x48\x8f\x77\x7f\x2b\x3d\xd2\xea\xe9\x88\x90\x40\x42\x81\xc1\x09\x09\x0c\x05\x81\x0f\xb0\x0a\x42\x37\x8a\x72\x19\x9c\x90\xbf\x8f\x08\x21\x24\x60\xb8\xf4\xa3\x84\x04\xff\x42\x70\x44\xc8\x0f\xaf\xd1\x38\xe7\x4a\x9a\x8d\xee\xc9\xff\x25\x24\x10\x8a\x82\xe5\x4a\xba\xb0\x13\xd0\xdc\x84\xe4\x9b\x06\x49\x71\x1d\x65\xf3\xad\x13\x94\xa0\xe3\x66\xfc\x51\x49\x6c\x22\xfa\x21\x2f\x58\xff\xfc\xe1\xff\x3f\x87\xfd\xf9\xf2\xc2\x58\xd4\x0c\x8a\x90\x5c\xa2\xbd\x47\x2d\x40\x32\xd3\x95\x18\x0a\x73\x38\xb1\x17\x6c\x27\xde\xd4\xce\xa5\xb1\xae\xa2\x9b\x55\x89\x1d\x2b\x60\x16\x95\x4b\x71\x3b\x8c\xa7\x4d\x0a\x86\x86\x6a\x5e\xbe\x90\x26\xe4\xd7\x71\x46\xb2\x74\xc6\x2d\x19\x2a\x8d\x26\x24\xc9\xd9\x29\x29\xb0\x50\x7a\xd5\x7c\x45\xc1\xe2\xdc\x8d\x9c\x90\x60\x28\x54\xc5\xc8\x14\xf5\x12\x75\xab\x26\x5a\xba\x6c\x49\x53\x23\x14\x5b\xbf\x19\x37\x8b\xe0\x84\x7c\x8e\x3a\x57\xaf\x61\xbd\xe8\x65\x4d\xf7\x59\xd3\xf7\xb0\xa6\x3b\xac\xe9\x2e\x6b\x1c\xbd\x06\x3b\xee\x85\xcd\xf6\x61\x8f\xdf\x03\x9b\xed\xc0\x1e\xef\xc2\x26\x87\x61\xff\xc8\xd2\x0f\x59\x74\x76\xda\x0b\x1c\x47\xfb\xc4\xee\x83\xdf\x47\x8e\xa3\x1d\xe6\x2c\xda\x85\xfe\xf2\x3a\x74\x9c\x1c\xa4\xee\x30\xb0\xff\xe2\x1d\xd8\xbb\x1e\x8e\x93\x3d\xee\x38\x3a\x0c\x3e\x4c\xfa\x8f\x5c\x4a\x46\xc8\xb8\xc3\x61\x6f\xf7\xc8\x29\x68\xbc\x40\x0b\xe2\x35\x33\xef\xf9\xe3\xf0\xc1\x1b\x26\xfd\xe7\xee\xf8\x10\x70\x9c\xfd\x2e\xf1\xf1\xee\x32\x67\x6f\x45\xee\x3f\x7d\x07\x91\x3f\x35\x37\x5c\x48\x92\xcf\xce\x2c\x23\xae\x91\x5a\x32\x9d\x8e\xde\x59\xc4\xa7\xde\x0b\x6f\x73\x6b\x53\x8d\x0c\xa5\xe5\x20\x3a\xee\xec\x52\xab\x25\x67\xa8\x5d\xd2\x69\xbb\x19\xbe\x84\x2c\x05\xac\xbe\x29\x5d\x80\x75\x92\x3b\x8e\x82\x35\xf3\x20\xa5\xb2\xbe\x0b\xb9\xd0\x4f\xad\xf6\x75\x0f\xba\x40\x3d\x80\xb2\x34\x54\x31\x1c\x50\x55\x7c\xa4\xa2\x72\x6d\xea\x43\x03\xe4\x42\xbe\x34\x9b\xe7\x4d\x54\x9f\x64\xbb\x2d\x35\xa1\xeb\x36\x4d\x95\xbc\xe3\x73\x0f\x3d\xcc\xc7\x5f\xbf\xe7\x7f\xfe\xbc\xba\x3e\xcb\x2f\xcf\xff\xca\x6f\xce\xaf\x2e\x37\x84\x75\x3c\xa5\x8b\x76\xb3\xff\xa9\xf4\x1c\x24\x7f\xac\xdb\xe7\x96\xf4\x1f\x53\xef\x67\xbf\x42\xc0\x0c\x3d\xf7\x55\xaf\x84\xcb\xb2\xf2\xab\x65\xf1\x97\x0d\x36\x33\xcf\xe1\x5b\xca\xb9\xb9\xfa\xdf\xd7\xd7\xea\xb0\x6a\x81\x3d\x05\x74\x4c\x6d\xc8\x6f\xf6\xe7\x36\xc8\x25\x18\xf3\xa0\x34\x6b\x61\xf7\x3c\x06\x16\xd5\x0c\xb5\x44\x8b\xe6\x16\xb5\xe9\x7e\x13\x2d\xeb\x19\x7f\x71\x0e\xbe\x0c\xd2\xfe\x6b\x75\x7b\xb6\x7e\x88\xb5\xfc\xe4\x1e\x63\x27\xc4\xea\x0a\xf7\xdc\xc2\xf0\x0e\x2a\x61\xa7\x25\xd2\x1d\x0f\x2a\x36\xad\x66\x12\x6d\xdd\x6d\x06\x49\x9a\x0e\xa2\x41\xf4\x31\xce\x5a\xb5\x07\x06\xf5\x92\x53\xdc\x52\x46\x1d\x3a\x10\xfe\xc1\x85\x97\x8a\xe1\x90\x33\x6d\xd6\x3c\x2d\x09\x4a\x98\x09\x1c\xd6\x2e\xbf\x50\x92\x5b\xa5\xb9\xf4\xdb\xfa\x72\x0e\x82\x3e\xf9\x58\xcd\xe7\xb5\xb6\x33\xa8\xcb\xda\x2b\x11\xf5\xc4\x08\x8d\xe5\x72\xf3\x26\x7c\x49\xf9\x01\x05\x18\xcb\xa9\x41\xd0\xf4\x7e\x0b\xa0\x3d\xb1\x8e\x7e\x8d\xa5\xe0\x14\x5c\x75\x71\x4b\xca\xa4\xa9\xbb\xd7\xf9\xa4\xb5\x46\x71\x14\x6c\x6b\x46\xaa\x00\xee\xb3\xaf\xcf\xfa\xc0\x2d\x9a\xd8\x5a\x47\x56\x70\xe3\x4c\x31\x54\xd2\x6a\xe5\x0d\x79\x09\x05\x9a\x12\x28\x8e\xf9\x1d\xd2\x15\x15\x18\x8e\x79\xc1\xed\x35\xc8\x39\xea\x70\x5a\x6f\x51\x4e\xa9\xaa\xa4\x0d\x27\xce\x54\xc6\xa2\xb4\xb7\x4a\x54\x05\x8e\x9d\xaf\xc3\xd1\xda\x06\x56\x69\x98\xe3\x50\x80\x31\xe1\x35\x1a\x55\x69\x8a\xff\xaf\x94\x85\x36\x44\x01\x0e\x6e\xc7\x1d\x99\xdf\xf5\x24\x6d\x0b\x25\xda\x07\xa5\x17\x93\xd6\x2d\x79\x27\x40\x4a\x14\xbd\x3b\x99\x0b\xd4\xb6\x6f\xcf\x95\x5b\xd8\x80\xe1\x8c\x83\xec\xca\xa3\x04\xa7\xab\x76\x36\xa9\x64\x87\x69\xbe\xe3\xec\x5e\xa9\x85\x3f\xc8\x79\x65\xef\x65\x9f\x6f\xae\x67\x40\x9d\xe0\xb1\x4f\x90\x4f\xce\x8d\xdf\xd8\x53\x30\x9c\xe6\x15\xe3\xb6\x57\xba\xae\x27\xb7\x96\xd3\x7d\x51\xa9\x84\x98\x0a\xc4\xf2\x5c\x5a\xd4\x4b\x7f\xb9\x7f\xea\x34\xf2\xa4\x9a\x09\x4e\xbd\x93\xda\x27\xba\xb9\x5f\x8e\x9e\xff\x0b\x00\x00\xff\xff\x0e\x82\x24\xe9\xa5\x0d\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 3493, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
