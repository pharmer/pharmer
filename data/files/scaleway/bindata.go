// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package scaleway

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x96\xdf\x4f\xe3\x38\x10\xc7\xdf\xf9\x2b\xac\x3c\x87\x6e\x12\xba\xb9\x8a\xb7\xd0\xee\x22\x74\x05\x7a\x14\xb1\xf7\x43\xab\xd5\xd4\x1e\x8a\xaf\x8e\x9d\xb3\x9d\xb2\x05\xf1\xbf\x9f\xec\x94\x26\x6d\x93\x22\x96\x17\x50\xed\x6f\x66\x3e\x63\x7f\xed\xf1\xf3\x11\x21\x81\x84\x1c\x83\x53\x12\x18\x0a\x02\x1f\x61\x15\x84\x6e\x14\xe5\x32\x38\x25\xff\x1c\x11\x42\x48\xc0\x70\xe9\x47\x09\x09\xfe\x83\xe0\x88\x90\xef\x5e\xa3\x71\xce\x95\x34\x1b\xdd\xb3\xff\x4b\x48\x20\x14\x05\xcb\x95\x74\x61\x27\xa0\xb9\x09\xc9\x57\x0d\x92\xe2\x3a\xca\xe6\x5b\x27\x28\x40\xc7\xf5\xf8\x93\x92\x58\x47\xf4\x43\x5e\xb0\xfe\xf9\xdd\xff\x7f\x09\xbb\xf3\x65\xb9\xb1\xa8\x19\xe4\x21\xb9\x42\xfb\x80\x5a\x80\x64\xa6\x2d\x31\xe4\xe6\x70\x62\x2f\xd8\x4e\xbc\xa9\x9d\x4b\x63\x5d\x45\xb7\xab\x02\x5b\x56\xc0\x2c\x4a\x97\xe2\x6e\x18\x4f\xeb\x14\x0c\x0d\xd5\xbc\x78\x25\x4d\xc8\xcf\x41\x4a\xd2\xfe\x8c\x5b\x32\x54\x1a\x4d\x48\x92\xf3\x33\x92\x63\xae\xf4\xaa\xfe\x8a\x82\xc5\xb9\x1b\x39\x25\xc1\x50\xa8\x92\x91\x29\xea\x25\xea\x46\x4d\xb4\x70\xd9\x92\xba\x46\xc8\xb7\x7e\x33\x6e\x16\xc1\x29\xf9\x1c\xb5\xae\x5e\xcd\x7a\xd9\xc9\xda\xdf\x67\xed\x7f\x84\xb5\xbf\xc3\xda\xdf\x65\x8d\xa3\xb7\x60\xc7\x9d\xb0\xe9\x3e\xec\xe0\x23\xb0\xe9\x0e\xec\x60\x17\x36\x39\x0c\xfb\x67\xda\x3f\x4e\xa3\xf3\xb3\x4e\xe0\x38\xda\x27\x76\x1f\xfc\x3a\x72\x1c\xed\x30\xa7\xd1\x2e\xf4\x6f\x6f\x43\xc7\xc9\x41\xea\x16\x03\xfb\x2f\x3e\x80\xbd\xeb\xe1\x38\xd9\xe3\x8e\xa3\xc3\xe0\xc3\xa4\xfb\xc8\xf5\xc9\x08\x19\x77\x38\xec\xfd\x1e\x39\x03\x8d\x97\x68\x41\xbc\x65\xe6\x3d\x7f\x1c\x3e\x78\xc3\xa4\xfb\xdc\x0d\x0e\x01\xc7\xe9\xaf\x12\x0f\x76\x97\x39\x7d\x2f\x72\xf7\xe9\x3b\x88\x7c\x52\xdf\x70\x21\x49\x3e\x3b\xb3\x8c\xb8\x46\x6a\xc9\x74\x3a\xfa\x60\x11\x27\x9d\x17\xde\xe6\xd6\xa6\x1a\x19\x4a\xcb\x41\xb4\xdc\xd9\x85\x56\x4b\xce\x50\xbb\xa4\xd3\x66\x33\x7c\x0d\x59\x08\x58\x7d\x55\x3a\x07\xeb\x24\xf7\x1c\x05\xab\xe7\x41\x4a\x65\x7d\x17\x72\xa1\x9f\x1b\xed\xeb\x01\x74\x8e\xba\x07\x45\x61\xa8\x62\xd8\xa3\x2a\xff\x44\x45\xe9\xda\xd4\x71\x0d\xe4\x42\xbe\x36\x9b\x97\x4d\x54\x9f\x64\xbb\x2d\xd5\xa1\xab\x36\x4d\x95\xbc\xe7\x73\x0f\x3d\xcc\xc6\x5f\xbe\x65\x7f\xfd\xb8\xbe\x39\xcf\xae\x2e\xfe\xce\x6e\x2f\xae\xaf\x36\x84\x55\x3c\xa5\xf3\x66\xb3\xff\xa1\xf4\x1c\x24\x7f\xaa\xda\xe7\x96\xf4\x5f\x53\xed\x67\xb7\x42\xc0\x0c\x3d\xf7\x75\xa7\x84\xcb\xa2\xf4\xab\x65\xf1\xa7\x0d\x36\x33\x2f\xe1\x7b\xca\xb9\xbd\xfe\xfd\xcb\x5b\x75\x58\xb5\xc0\x8e\x02\x5a\xa6\x36\xe4\xb7\xfb\x73\x1b\xe4\x02\x8c\x79\x54\x9a\x35\xb0\x3b\x1e\x03\x8b\x72\x86\x5a\xa2\x45\x73\x87\xda\xb4\xbf\x89\x96\xd5\x8c\xbf\x38\x7b\x83\x5e\xd4\x7d\xad\x6e\xcf\x56\x0f\xb1\x86\x9f\xdc\x63\xec\x94\x58\x5d\xe2\x9e\x5b\x18\xde\x43\x29\xec\xb4\x40\xba\xe3\x41\xc5\xa6\xe5\x4c\xa2\xad\xba\x4d\x2f\xe9\xf7\x7b\x51\x2f\xfa\x14\xa7\x8d\xda\x03\x83\x7a\xc9\x29\x6e\x29\xa3\x16\x1d\x08\xff\xe0\xc2\x2b\xc5\x70\xc8\x99\x36\x6b\x9e\x86\x04\x25\xcc\x04\x0e\x2b\x97\x5f\x2a\xc9\xad\xd2\x5c\xfa\x6d\x7d\x3d\x07\x41\x97\x7c\xac\xe6\xf3\x4a\xdb\x1a\xd4\x65\xed\x94\x88\x6a\x62\x84\xc6\x72\xb9\x79\x13\xbe\xa6\x3c\x46\x01\xc6\x72\x6a\x10\x34\x7d\xd8\x02\x68\x4e\xac\xa3\xdf\x60\x21\x38\x05\x57\x5d\xdc\x90\x32\x69\xaa\xee\x75\x31\x69\xac\x51\x1c\x05\xdb\x9a\x91\xca\x81\xfb\xec\xeb\xb3\xde\x73\x8b\x26\xb6\xd6\x91\xe5\xdc\x38\x53\x0c\x95\xb4\x5a\x79\x43\x5e\x41\x8e\xa6\x00\x8a\x63\x7e\x8f\x74\x45\x05\x86\x63\x9e\x73\x7b\x03\x72\x8e\x3a\x9c\x56\x5b\x94\x51\xaa\x4a\x69\xc3\x89\x33\x95\xb1\x28\xed\x9d\x12\x65\x8e\x63\xe7\xeb\x70\xb4\xb6\x81\x55\x1a\xe6\x38\x14\x60\x4c\x78\x83\x46\x95\x9a\xe2\x1f\xa5\xb2\xd0\x84\xc8\xc1\xc1\xed\xb8\x23\xf5\xbb\x9e\xf4\x9b\x42\x89\xf6\x51\xe9\xc5\xa4\x71\x4b\xde\x0b\x90\x12\x45\xe7\x4e\x66\x02\xb5\xed\xda\x73\xe5\x16\x36\x60\x38\xe3\x20\xdb\xf2\x28\xc1\xe9\xaa\x99\x4d\x2a\xd9\x62\x9a\x6f\x38\x7b\x50\x6a\xe1\x0f\x72\x56\xda\x07\xd9\xe5\x9b\x9b\x19\x50\x27\x78\xea\x12\x64\x93\x0b\xe3\x37\xf6\x0c\x0c\xa7\x59\xc9\xb8\xed\x94\xae\xeb\xc9\xac\xe5\x74\x5f\x54\x28\x21\xa6\x02\xb1\xb8\x90\x16\xf5\xd2\x5f\xee\x27\xad\x46\x9e\x94\x33\xc1\xa9\x77\x52\xf3\x44\xd7\xf7\xcb\xd1\xcb\xff\x01\x00\x00\xff\xff\x3f\x39\x92\x68\xa5\x0d\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 3493, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
