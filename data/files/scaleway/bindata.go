// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package scaleway

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x98\xdf\x53\xe2\x30\x10\xc7\xdf\xf9\x2b\x32\x7d\x46\x8e\x96\xda\x63\x78\x43\x46\x1d\xe7\x54\x6e\x94\xb9\x9f\xe3\x38\x6b\xb3\x62\x8f\x36\xa9\x49\x40\xd1\xe1\x7f\xbf\x69\x84\xb6\x94\x52\xae\x78\xf1\x45\x21\xd9\xee\x7e\xbe\xdb\xdd\xb4\xcb\x6b\x83\x10\x8b\x41\x84\x56\x8f\x58\xd2\x87\x10\x9f\x60\x6e\x35\x93\x55\x64\x33\x69\xf5\xc8\xef\x06\x21\x84\x58\x14\x67\x7a\x99\x10\xeb\x11\x56\x9f\x62\xc1\xa9\xd5\x20\xe4\x46\x5f\x20\x70\x1c\x70\x96\x5d\xf3\xaa\xff\x12\x62\x85\xdc\x07\x15\x70\x96\xc4\xe8\x47\x52\xa1\xa0\x10\x35\xc9\x25\xaa\x07\x14\x21\x30\x2a\x97\x0e\x53\x27\x89\x25\x44\xd2\xce\xd6\x5f\x38\xc3\xcc\xb5\x5e\xd2\x06\xcb\xaf\x37\xfa\xff\xa2\xb9\x3d\xf0\x57\x10\x81\x6c\x92\x13\x01\xcc\xc7\xb2\x78\x31\x88\xea\x78\xda\x60\x3d\x5e\xaa\x3d\x60\x52\x25\x8e\x47\xf3\x18\x4b\x32\x20\x27\x53\x2d\xfe\xea\xc2\x73\x0f\x6c\xa7\x7b\x7a\x94\x45\xa2\x28\x7d\x11\xc4\x2b\x4e\x10\x91\xe7\x66\xbb\x7e\x9c\x5c\xe9\xb9\x19\x30\x44\x56\x8f\xd8\x4e\x77\x67\x6a\x9a\x95\xe8\xcd\x2a\x42\xaf\x2e\xa0\xed\x15\x01\x3d\x83\x7c\x4e\x5d\xbc\x62\xfa\x1c\x83\x70\x9d\xda\x74\x1d\xa7\x80\xd7\x31\xc9\xe7\xd6\x2e\xbe\x02\x9d\x6b\x10\xce\xab\x4d\xe7\x76\x0b\x78\x9e\x49\xbe\xda\x9d\x5b\xa4\x33\xd3\xb6\x03\xbb\x8a\xea\x5d\xdd\xf0\xef\x0c\xce\xf9\x56\x88\xe7\xae\x77\xbb\x96\x1b\x50\x38\xe6\x62\x9e\xec\x1d\x81\xc0\x0b\x54\x10\xee\x4a\x5d\xae\x2b\x68\x20\x27\x56\x8f\x1c\xb6\xcd\x64\xd3\xb9\x30\xab\x24\x77\x38\x9a\x56\x72\xfd\x7f\x95\x14\x4b\xa7\xfb\x41\x42\xbe\x0d\xec\xfd\xaa\x6b\x10\xf2\x29\x25\xd7\x28\x66\x28\xe4\xae\x93\x6d\x43\x8d\xd3\x36\x26\x67\xbf\x12\xab\x94\x53\xbc\x39\x6e\x51\x8e\x6d\x4e\xce\x7e\x75\x56\x29\xa7\xf8\x54\xfc\xa8\xf6\xff\xa1\xdf\xd1\xda\x15\x27\xfd\xde\x92\xec\xa2\x26\xdb\x69\x97\xdc\x24\x83\xba\x0e\xeb\xc8\x2a\x6d\x12\xfb\xd0\x18\x5d\xa7\x56\xd2\xcb\x1f\x12\xe6\x72\xe7\x99\x29\x89\x76\xf1\xfd\x65\xa3\x22\x3e\xbf\xbb\x20\xd2\x39\xc5\x17\x48\x91\xa9\x00\xc2\x92\x29\x25\x16\x7c\x16\x50\x14\x09\xf3\x75\x7e\x16\x5c\xc1\xc4\x21\xcc\x4f\xb8\x88\x40\x25\x26\xf7\x01\x86\x34\xdb\x07\xc6\xb8\xd2\xe3\x56\xe2\xfa\x35\xc7\xf3\x00\x22\x42\xd1\x82\x38\x96\x3e\xa7\xd8\xf2\x79\xf4\xc9\x0f\xa7\xc9\x20\x78\x90\x01\x25\x2e\x57\xd8\x8b\xd4\xab\x0e\xb2\x2e\x38\x73\xfd\x36\xa5\xfa\x9c\xdd\x07\x63\x0d\x3d\xe8\x9f\x1f\x7f\xef\xff\xbc\x1d\x5e\x9d\xf6\x2f\xcf\x7e\xf5\x47\x67\xc3\xcb\x5c\x6a\x12\x7f\x5c\x44\xf9\x59\xf7\x96\x8b\x31\xb0\xe0\xe5\x6d\x4e\x5c\x33\xfd\x23\xdf\x6e\xed\x76\x8b\x10\xee\x50\x73\x0f\xb7\x9a\x04\x2c\x9e\xea\x6c\x29\x7c\x56\x56\xba\xb3\x68\xd6\x91\x33\x1a\x7e\x39\xde\xa5\x43\xf1\x09\x6e\x11\x50\xb2\x95\x92\x8f\x36\xf7\x52\xe4\x18\xa4\x7c\xe2\x82\xe6\xb0\xb7\x94\xd5\x64\x7a\x87\x82\xa1\x2a\x9b\x7d\x93\xa2\x5f\x36\x89\xdd\xea\xb6\xda\x59\xc5\x2c\x7f\x61\xc8\x95\x0a\xc5\x99\xd5\x23\x4a\x4c\x31\x5f\xcf\x82\xd3\xcd\xd5\x47\x58\xae\x35\xf2\x68\x1a\xa9\xb1\xf8\x1b\x00\x00\xff\xff\x69\x05\x74\x6b\xd7\x10\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 4311, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
