// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package scaleway

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x96\x4b\x4f\xe3\x30\x10\x80\xef\xfd\x15\xa3\x9c\x43\x37\x09\x21\x5b\xf5\x56\xca\x43\x68\x81\xae\xb6\xd5\x3e\x85\x90\x89\x87\xe2\x6d\x62\x67\x6d\xb7\x50\x50\xff\xfb\xca\x29\x4d\xd2\xbc\xaa\xd2\x0b\x90\xf1\x3c\xbe\x31\xe3\x99\x79\xeb\x00\x58\x9c\xc4\x68\xf5\xc1\x52\x21\x89\xf0\x99\x2c\x2d\xdb\x48\x91\x2f\x94\xd5\x87\x3f\x1d\x00\x00\x8b\xe2\x22\x15\x03\x58\xff\xc8\xe6\xaf\x44\x0a\x6a\x75\x00\xee\x52\x03\x89\x53\x26\x78\x6e\xf3\x96\xfe\x04\xb0\x22\x11\x12\xcd\x04\x37\x31\xbe\x12\xc9\x94\x0d\x17\x92\xf0\x10\xdf\xfd\x64\xb6\x46\x21\x21\xd2\xcd\xe5\xaf\x82\x63\xee\x71\x1d\xd4\x28\xbc\x7f\xde\xa5\xbf\x57\x76\x73\xbc\x41\xac\x34\x4a\x4a\x62\x1b\x6e\x51\x3f\xa1\x8c\x08\xa7\xaa\x2e\x30\x89\x55\x7b\xe0\x54\x61\x3b\x70\x96\x3b\xe3\x4a\x9b\x8c\x26\xcb\x04\x6b\x6e\x40\xcd\xe6\x26\xc4\xf7\xa1\x3b\xce\x43\x50\x54\xa1\x64\xc9\x86\xd4\x83\x97\x5e\x00\x81\xff\xc0\x34\x0c\x85\x44\x65\x83\x77\x79\x0a\x31\xc6\x42\x2e\x73\xab\x90\x68\x9c\x1a\x49\x1f\xac\x61\x24\xe6\x14\xc6\x28\x17\x28\x0b\x39\x85\x89\x89\xe6\xe5\x39\x92\x78\xeb\x9b\x32\x35\xb3\xfa\x70\xe2\xd4\xde\x5e\xce\x7a\xd3\xc8\xea\x57\x59\xfd\x43\x58\xfd\x12\xab\x5f\x66\x75\x9d\x5d\xb0\xd7\x8d\xb0\x41\x15\xb6\x77\x08\x6c\x50\x82\xed\x95\x61\xbd\x76\xd8\x9f\x81\x7f\x14\x38\x97\xa7\x8d\xc0\xae\x53\x25\x36\x06\x1f\x47\x76\x9d\x12\x73\xe0\x94\xa1\x3f\xef\x86\x76\xbd\x56\xea\x9a\x02\x4e\x2d\x0e\xc0\x2e\xd7\xb0\xeb\x55\xb8\x5d\xa7\x1d\x7c\xe8\x35\x3f\x39\x1f\xce\x90\x32\x83\x43\xf7\xaf\x91\x53\x22\xf1\x06\x35\x89\x76\x15\x73\xa5\x3e\xda\x1f\xde\xd0\x6b\x7e\x77\xbd\x36\x60\x37\xf8\x28\x71\xaf\x7c\xcd\xc1\xbe\xc8\xcd\xaf\xaf\x15\xf9\x38\xef\x70\x36\x78\x27\xa6\x58\xce\x98\xc4\x50\xc3\x78\x7c\x76\x60\x12\xc7\x8d\x0d\x2f\xeb\xda\xa1\x44\x8a\x5c\x33\x12\xd5\xf4\xec\x44\x8a\x05\xa3\x28\x4d\xd0\x71\x71\x32\x6e\x5c\x26\x11\x59\x5e\x08\x19\x13\x6d\x54\x1e\x19\x46\x34\x3f\x27\x9c\x0b\x9d\x4e\x21\xe3\xfa\xad\x30\xbe\x9e\x88\x8c\x51\x76\x49\x92\xa8\x50\x50\xec\x86\x22\xfe\x14\x46\x73\x33\xa6\x8e\x72\x20\xe3\x72\x33\x6c\x56\x99\xd7\x34\xc8\xf6\x58\xca\x5d\xaf\x67\x76\x28\xf8\x23\x9b\xa6\xd0\xc3\xc1\xf5\xf9\x8f\xc1\xaf\xfb\xd1\xb7\xcb\xc1\xed\xd5\xef\xc1\xe4\x6a\x74\x9b\x11\xae\xfd\x09\x19\x17\x27\xff\xbd\x90\x53\xc2\xd9\xeb\x7a\x7c\x6e\xa9\xfe\x55\xeb\xff\x67\xb3\x46\x44\x1e\x30\xe5\x1e\x35\xaa\x30\x9e\xcc\xd3\xdb\xd2\xf8\xa2\xad\xec\x64\x65\xef\x93\xce\x64\xf4\xe5\x7c\x57\x1e\x5a\xcc\xb0\x21\x81\x9a\xa3\x8c\x7c\x52\x3d\xcb\x90\x13\xa2\xd4\xb3\x90\xb4\x80\xdd\xb0\x0c\xcc\xe6\x0f\x28\x39\xea\xba\x4d\xc0\xb4\xb9\x4d\xc3\xec\xf6\xba\x4e\x73\x3b\xdd\x3e\x7d\xdf\xc6\x0a\x85\x64\x36\xb2\x3e\x68\x39\xc7\x9c\xd7\xec\x66\x15\x59\xba\xa5\xad\xa5\x9d\x22\x78\x0a\xdc\x59\xfd\x0f\x00\x00\xff\xff\x2e\xd1\xe6\x25\x03\x0a\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 2563, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
