// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package scaleway

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x96\x5b\x4f\xeb\x3e\x0c\xc0\xdf\xf7\x29\xac\x3e\x97\xfd\xdb\x52\xca\xb4\xb7\x31\x2e\x42\x7f\x60\x47\x67\xd3\xb9\x0a\xa1\xd0\x9a\x91\xb3\x36\xe9\x49\xb2\xc1\x40\xfb\xee\x47\xc9\x58\xaf\x6b\xa7\xb1\x97\x56\x8d\x1d\xfb\x67\xd7\xb1\xf3\xde\x01\xb0\x18\x49\xd0\xea\x83\x25\x43\x12\xe3\x0b\x59\x5a\xb6\x5e\x45\xb6\xb0\xfa\xf0\xbb\x03\x00\x60\x45\xb8\x30\xab\x00\xd6\x5f\x62\x75\x00\xee\x8d\x8e\xc0\x29\xe5\x4c\x66\x7a\xef\xe6\x09\x60\xc5\x3c\x24\x8a\x72\xa6\xcd\x7e\x21\x82\x4a\x1b\x2e\x05\x61\x21\x7e\x58\xc9\xf6\x6a\x85\x94\x08\x37\x5f\x7f\xe3\x0c\x73\x8b\x66\xc9\x28\x7c\x7c\xde\x9b\xf7\xca\x6e\xf6\x37\x48\xa4\x42\x11\x91\xc4\x86\x3b\x54\xcf\x28\x62\xc2\x22\xb9\xcd\x31\x49\x64\xbb\x63\xa3\x50\x76\x9c\xc5\x4e\x99\x54\x3a\xa2\xc9\x32\xc5\x2d\x19\x90\xb3\xb9\x76\xf1\x6d\xe8\x8e\x73\x17\x11\xca\x50\xd0\x74\x43\xea\xc1\x6b\x2f\x80\xc0\x7f\xa4\x0a\x86\x5c\xa0\xb4\xc1\xbb\x3a\x83\x04\x13\x2e\x96\xf9\xae\x90\x28\x9c\xea\x95\x3e\x58\xc3\x98\xcf\x23\x18\xa3\x58\xa0\x28\xc4\x14\xa6\xda\x9b\x97\xc7\x48\x92\xd2\x77\x44\xe5\xcc\xea\xc3\x89\xb3\x35\x7b\x39\xeb\x6d\x23\xab\x5f\x67\xf5\x0f\x61\xf5\x2b\xac\x7e\x95\xd5\x75\x76\xc1\xde\x34\xc2\x06\x75\xd8\xde\x21\xb0\x41\x05\xb6\x57\x85\xf5\xda\x61\x7f\x04\xfe\x51\xe0\x5c\x9d\x35\x02\xbb\x4e\x9d\x58\x6f\xf8\x3c\xb2\xeb\x54\x98\x03\xa7\x0a\x7d\xba\x1b\xda\xf5\x5a\xa9\xb7\x14\xb0\xd9\x71\x00\x76\xb5\x86\x5d\xaf\xc6\xed\x3a\xed\xe0\x43\xaf\xf9\xc8\xf9\x70\x8e\x11\xd5\x38\xd1\xfe\x35\x72\x46\x04\xde\xa2\x22\xf1\xae\x62\xae\xd5\x47\xfb\xc1\x1b\x7a\xcd\xe7\xae\xd7\x06\xec\x06\x9f\x25\xee\x55\xd3\x1c\xec\x8b\xdc\x7c\xfa\x5a\x91\x8f\xf3\x0e\x67\x83\x77\xa2\x8b\xe5\x9c\x0a\x0c\x15\x8c\xc7\xe7\x07\x06\x71\xdc\xd8\xf0\xb2\xae\x1d\x0a\x8c\x90\x29\x4a\xe2\x2d\x3d\x3b\x15\x7c\x41\x23\x14\xda\xe9\xb8\x38\x0c\x37\x26\xd3\x98\x2c\x2f\xb9\x48\x88\xd2\x2a\x4f\x14\xe3\x28\x97\x13\xc6\xb8\x32\x53\x48\x9b\x7e\x2f\x8c\xaf\x67\x22\x12\x14\x5d\x92\xa6\x32\xe4\x11\x76\x43\x9e\xfc\x17\xc6\x73\x3d\xa6\x8e\x72\x20\x6d\x72\x33\x6c\x56\x99\x55\xe3\xa4\x3c\x96\x72\xd3\xeb\x31\x1d\x72\xf6\x44\xa7\x06\x7a\x38\xb8\xb9\xf8\x3e\xf8\xf9\x30\xfa\x7a\x35\xb8\xbb\xfe\x35\x98\x5c\x8f\xee\x32\xc2\xb5\x3d\x2e\x92\xe2\xb0\x7f\xe0\x62\x4a\x18\x7d\x5b\x8f\xcf\x92\xea\x1f\xb9\xfe\x9f\xcd\x1a\x31\x79\x44\xc3\x3d\x6a\x54\xa1\x2c\x9d\x9b\x6c\x29\x7c\x55\x56\x26\x59\xd9\xfb\x84\x33\x19\xfd\x7f\xb1\x2b\x0e\xc5\x67\xd8\x10\xc0\x16\x51\x46\x3e\xa9\xcb\x32\xe4\x94\x48\xf9\xc2\x45\x54\xc0\x2e\x5f\x06\x00\x20\xab\xac\xd9\xfc\x11\x05\x43\x85\xf9\xdf\xb7\x74\x87\x2b\x5d\x90\x8a\xd1\x6e\xa4\xa6\x93\x76\x4f\xbb\x7e\x81\xa2\xd6\x69\xab\xf2\xf5\xed\xac\x94\x3a\x7d\x47\xeb\x83\x12\x73\xac\xe1\xae\xdf\x1a\x7a\xd5\x59\xfd\x0b\x00\x00\xff\xff\x03\x4c\x93\x1b\xf4\x09\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 2548, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
