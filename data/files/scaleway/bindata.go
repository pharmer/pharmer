// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package scaleway

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x96\xdb\x6e\xe2\x3c\x10\x80\xef\x79\x8a\x51\xae\x29\x3f\x49\xd3\x14\x71\x47\xe9\x41\xd5\xdf\x96\xd5\x82\xf6\xa8\xaa\x72\xe3\x29\xf5\x92\xd8\x59\xdb\xd0\xd2\x8a\x77\x5f\xd9\x40\x42\x8e\xa8\xe5\x26\x51\x3c\xa7\x6f\x9c\xf1\x8c\xdf\x5b\x00\x0e\x27\x31\x3a\x7d\x70\x54\x48\x22\x7c\x21\x4b\xa7\x6d\x56\x91\x2f\x9c\x3e\xfc\x6e\x01\x00\x38\x14\x17\x76\x15\xc0\xf9\x4b\x9c\x16\xc0\xbd\xd5\x91\x38\x65\x82\xab\x54\xef\xdd\x3e\x01\x9c\x48\x84\x44\x33\xc1\x8d\xdb\x2f\x44\x32\xd5\x86\x4b\x49\x78\x88\x1b\x2f\xa9\xad\x51\x48\x88\x74\xb3\xf5\x37\xc1\x31\xf3\x68\x97\xac\xc2\xe6\xf3\xde\xbe\x57\xed\xfa\x78\x83\x58\x69\x94\x94\xc4\x6d\xb8\x43\xfd\x8c\x32\x22\x9c\xaa\xaa\xc0\x24\x56\xcd\x81\xad\x42\x3e\x70\x9a\x3b\xe3\x4a\x9b\x8c\x26\xcb\x04\x2b\x76\x40\xcd\xe6\x26\xc4\xb7\xa1\x3b\xce\x42\x50\x54\xa1\x64\xc9\x96\xd4\x83\xd7\x5e\x00\x81\xff\xc8\x34\x0c\x85\x44\xd5\x06\xef\xea\x0c\x62\x8c\x85\x5c\x66\x56\x21\xd1\x38\x35\x2b\x7d\x70\x86\x91\x98\x53\x18\xa3\x5c\xa0\xdc\xc9\x29\x4c\x4c\x34\x2f\xcb\x91\xc4\xb9\x6f\xca\xd4\xcc\xe9\xc3\x49\xb7\x72\xf7\x32\xd6\xdb\x5a\x56\xbf\xcc\xea\x1f\xc2\xea\x17\x58\xfd\x22\xab\xdb\xdd\x07\x7b\x53\x0b\x1b\x94\x61\x7b\x87\xc0\x06\x05\xd8\x5e\x11\xd6\x6b\x86\xfd\x11\xf8\x47\x41\xf7\xea\xac\x16\xd8\xed\x96\x89\x8d\xc1\xe7\x91\xdd\x6e\x81\x39\xe8\x16\xa1\x4f\xf7\x43\xbb\x5e\x23\x75\x45\x01\x5b\x8b\x03\xb0\x8b\x35\xec\x7a\x25\x6e\xb7\xdb\x0c\x3e\xf4\xea\x8f\x9c\x0f\xe7\x48\x99\xc1\xa1\x1f\xaf\x91\x33\x22\xf1\x16\x35\x89\xf6\x15\x73\xa9\x3e\x9a\x0f\xde\xd0\xab\x3f\x77\xbd\x26\x60\x37\xf8\x2c\x71\xaf\xb8\xcd\xc1\x47\x91\xeb\x4f\x5f\x23\xf2\x71\xd6\xe1\xda\xe0\x9d\x98\x62\x39\x67\x12\x43\x0d\xe3\xf1\xf9\x81\x49\x1c\xd7\x36\xbc\xb4\x6b\x87\x12\x29\x72\xcd\x48\x54\xd1\xb3\x13\x29\x16\x8c\xa2\x34\x41\xc7\xbb\xc3\x70\xeb\x32\x89\xc8\xf2\x52\xc8\x98\x68\xa3\xf2\xc4\x30\xa2\x99\x9c\x70\x2e\xb4\x9d\x42\xc6\xf5\xfb\xce\xf8\x7a\x26\x32\x46\xd9\x21\x49\xa2\x42\x41\xb1\x13\x8a\xf8\xbf\x30\x9a\x9b\x31\x75\x94\x01\x19\x97\xdb\x61\xb3\x4a\xbd\xda\x20\xf9\xb1\x94\xb9\x5e\x8f\xe9\x50\xf0\x27\x36\xb5\xd0\xc3\xc1\xcd\xc5\xf7\xc1\xcf\x87\xd1\xd7\xab\xc1\xdd\xf5\xaf\xc1\xe4\x7a\x74\x97\x12\xae\xfd\x09\x19\xef\x0e\xfb\x07\x21\xa7\x84\xb3\xb7\xf5\xf8\xcc\xa9\xfe\x51\xeb\xff\x59\xaf\x11\x91\x47\xb4\xdc\xa3\x5a\x15\xc6\x93\xb9\xdd\x2d\x8d\xaf\xda\x49\x25\xab\xf6\x47\xd2\x99\x8c\xfe\xbf\xd8\x97\x87\x16\x33\xac\x49\xa0\x42\x94\x92\x4f\xca\xb2\x14\x39\x21\x4a\xbd\x08\x49\x77\xb0\xf3\x97\x01\x00\x48\x2b\x6b\x36\x7f\x44\xc9\x51\x63\xf6\xf7\x1d\xd3\xe1\x72\x17\xa4\xdd\x6c\xb7\x52\xdb\x49\x3b\xa7\x1d\x7f\x87\xa2\xd4\x69\x8b\x72\x2d\x44\x94\x2f\xb3\x0d\x02\xa1\x71\x66\x50\xb5\xdd\x9b\x8b\x5d\xce\xd0\x5c\xef\xfa\xa0\xe5\x1c\x4b\x99\xae\xdf\x26\xdf\x55\x6b\xf5\x2f\x00\x00\xff\xff\x12\xdf\xa7\x34\x2f\x0a\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 2607, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
