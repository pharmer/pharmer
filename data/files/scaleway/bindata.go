// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package scaleway

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x98\xdf\x53\xea\x3a\x10\xc7\xdf\xf9\x2b\x32\x7d\x46\x2e\x2d\xb5\x97\xcb\x1b\x32\xea\x38\x57\xe5\x8c\x32\xe7\xe7\x38\x4e\x6c\x56\xec\xa1\x4d\x6a\x12\x50\x74\xf8\xdf\xcf\x24\x42\x5b\x42\x29\x16\x4f\x7c\xf1\xc7\x66\xbb\xfb\xf9\x6e\x77\x4b\x97\xd7\x06\x42\x0e\xc5\x09\x38\x3d\xe4\x88\x10\xc7\xf0\x84\xe7\x4e\x53\x59\x81\xce\x84\xd3\x43\xbf\x1a\x08\x21\xe4\x10\x98\x69\x33\x42\xce\x23\x5e\xfd\x95\x72\x46\x9c\x06\x42\x37\xfa\x02\x0e\xe3\x88\xd1\xfc\x9a\x57\xfd\x13\x21\x27\x66\x21\x96\x11\xa3\x2a\x47\x3f\x11\x12\x38\xc1\x49\x13\x5d\x82\x7c\x00\x1e\x63\x4a\xc4\x32\x60\x16\x44\x79\xe2\x44\xb8\xb9\xfd\x85\x51\xc8\x43\x6b\x93\x76\x58\xfe\x7b\xa3\x7f\x2f\x9a\xdb\x13\x7f\xc1\x3c\x12\x4d\x74\xc2\x31\x0d\xa1\x2c\x5f\x8a\x79\x75\x3e\xed\xb0\x9e\x2f\xd3\x1e\x51\x21\x55\xe0\xd1\x3c\x85\x92\x0a\x88\xc9\x54\x8b\xbf\xba\x08\xfc\x03\xd7\xeb\x9e\x1e\xe5\x99\x08\x88\x90\x47\xe9\x8a\x13\xf3\x24\xf0\xf3\xd3\x30\x55\x57\x06\x7e\x0e\x8c\x13\xa7\x87\x5c\xaf\xbb\xb3\x34\xcd\x4a\xf4\x66\x15\x61\x50\x17\xd0\x0d\x4c\xc0\xc0\x22\x9f\x57\x17\xcf\x2c\x9f\x67\x11\xae\x53\x9b\xae\xe3\x19\x78\x1d\x9b\x7c\x7e\xed\xe6\x33\xe8\x7c\x8b\x70\x41\x6d\x3a\xbf\x6b\xe0\x05\x36\xf9\x6a\x4f\xae\x49\x67\x67\x6c\x07\x6e\x15\xd5\x87\xa6\xe1\xfd\x0c\xde\xf9\x56\x88\xe7\x6e\x70\xbb\x56\x1b\x2c\x61\xcc\xf8\x5c\x9d\x1d\x61\x0e\x17\x20\x71\xbc\xab\x74\x85\xa9\x20\x91\x98\x38\x3d\x74\xd8\xb6\x53\x4d\xef\xc2\xae\x92\xc2\xc3\xd1\xb6\x92\xeb\xbf\xab\xc4\x6c\x9d\xee\x27\x09\xf9\x3a\x70\xf7\xeb\xae\x41\xcc\xa6\x04\x5d\x03\x9f\x01\x17\xbb\x9e\x6c\x1b\x6a\xbc\xb6\x35\x39\xfb\xb5\x58\xa5\x1c\xf3\xe6\xf8\xa6\x1c\xd7\x9e\x9c\xfd\xfa\xac\x52\x8e\xf9\xa9\xf8\x59\xe3\xff\x5d\xbf\xa3\xb5\x2b\x9e\xf4\x7b\x4b\x72\x4d\x4d\xae\xd7\x2e\xb9\x49\x16\x75\x1d\xd6\x91\x55\x3a\x24\xee\xa1\x35\xba\x4e\xad\xa2\x97\x7f\x48\xd8\xab\x5d\x60\xa7\x25\xda\xe6\xfb\xcb\x46\x47\xfc\xfb\xe1\x86\xc8\xf6\x94\x90\x03\x01\x2a\x23\x1c\x97\x6c\x29\x29\x67\xb3\x88\x00\x57\xcc\xd7\xc5\x5d\x70\x05\x93\xc6\x78\x7e\xc2\x78\x82\xa5\x72\xb9\x8f\x20\x26\xf9\x39\xa6\x94\x49\xbd\x6e\xa9\xd0\xaf\x05\x9e\x07\xcc\x13\xe0\x2d\x9c\xa6\x22\x64\x04\x5a\x21\x4b\xfe\x09\xe3\xa9\x5a\x04\x0f\x72\x20\x15\x72\x85\xbd\xc8\xa2\xea\x24\xeb\x82\xf3\xd0\x6f\x5b\x6a\xc8\xe8\x7d\x34\xd6\xd0\x83\xfe\xf9\xf1\xb7\xfe\x8f\xdb\xe1\xd5\x69\xff\xf2\xec\x67\x7f\x74\x36\xbc\x2c\x94\x46\xc5\x63\x3c\x29\xee\xba\xb7\x8c\x8f\x31\x8d\x5e\xde\xf6\xc4\x35\xd7\xdf\xe2\xed\xd6\x6e\xf7\x88\xf1\x1d\x68\xee\xe1\x56\x97\x88\xa6\x53\x5d\x2d\x09\xcf\xd2\xc9\x4e\x16\xcd\x3a\x72\x46\xc3\xff\x8f\x77\xe9\x90\x6c\x02\x5b\x04\x94\x1c\x65\xe4\xa3\xcd\xb3\x0c\x39\xc5\x42\x3c\x31\x4e\x0a\xd8\x5b\xda\x6a\x32\xbd\x03\x4e\x41\x96\xed\xbe\xaa\xe9\x97\x43\xe2\xb6\xba\xad\x76\xde\x31\xcb\x6f\x18\x0a\xad\x42\x60\xe6\xf4\x90\xe4\x53\x28\xf6\x33\x67\x64\xd3\xfa\x88\x97\xb6\x46\x11\xcd\x1c\xdf\xb5\xe4\xff\xbd\x27\xf9\x3d\x8e\x45\x49\x76\xd3\xac\xd3\x6b\xe3\x7a\x7e\x55\x92\xc6\xe2\x4f\x00\x00\x00\xff\xff\x11\xd1\x1f\x6a\x57\x11\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 4439, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
