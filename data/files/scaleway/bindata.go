// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package scaleway

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x96\x6d\x4f\xe3\x3e\x0c\xc0\xdf\xef\x53\x58\x7d\x3d\xf6\x6f\x4b\xe9\x7f\xda\xbb\x31\x1e\x84\x0e\xd8\xe9\x36\x71\x4f\x42\x28\x34\x66\xe4\xd6\x26\xbd\x24\x1b\x0c\xb4\xef\x7e\x4a\x06\x6d\xd7\xa7\x09\xf6\x06\x54\xdb\xb1\x7f\xce\x1c\xdb\xaf\x1d\x00\x87\x93\x04\x9d\x01\x38\x2a\x22\x31\x3e\x91\x95\xd3\x35\x52\xe4\x4b\x67\x00\xbf\x3b\x00\x00\x0e\xc5\xa5\x95\x02\x38\x7f\x89\xd3\x01\xb8\xb5\x36\x12\x67\x4c\x70\x95\xd9\xbd\xda\xbf\x00\x4e\x2c\x22\xa2\x99\xe0\xc6\xed\x57\x22\x99\xea\xc2\x99\x24\x3c\xc2\x37\x2f\xd9\x59\x63\x90\x12\xe9\xe5\xf2\x17\xc1\x31\xf7\x68\x45\xd6\xe0\xed\xf3\xd6\xfe\x5f\x77\x9b\xe3\x0d\x13\xa5\x51\x52\x92\x74\xe1\x1a\xf5\x23\xca\x98\x70\xaa\xea\x02\x93\x44\xb5\x07\xb6\x06\xdb\x81\xb3\xdc\x19\x57\xda\x64\x34\x5d\xa5\x58\x73\x03\x6a\xbe\x30\x21\x6e\x46\xde\x24\x0f\x41\x51\x45\x92\xa5\xef\xa4\x3e\x3c\xf7\x43\x08\x83\x7b\xa6\x61\x24\x24\xaa\x2e\xf8\xe7\xc7\x90\x60\x22\xe4\x2a\x3f\x15\x11\x8d\x33\x23\x19\x80\x33\x8a\xc5\x82\xc2\x04\xe5\x12\x65\x21\xa7\x28\x35\xd1\xfc\x3c\x47\x92\x6c\x7d\x53\xa6\xe6\xce\x00\x8e\xdc\xda\xdb\xcb\x59\xaf\x1a\x59\x83\x2a\x6b\xb0\x0f\x6b\x50\x62\x0d\xca\xac\x9e\xbb\x0b\xf6\xb2\x11\x36\xac\xc2\xf6\xf7\x81\x0d\x4b\xb0\xfd\x32\xac\xdf\x0e\xfb\x23\x0c\x0e\x42\xf7\xfc\xb8\x11\xd8\x73\xab\xc4\xe6\xc0\xe7\x91\x3d\xb7\xc4\x1c\xba\x65\xe8\xff\x77\x43\x7b\x7e\x2b\x75\x4d\x01\xdb\x13\x7b\x60\x97\x6b\xd8\xf3\x2b\xdc\x9e\xdb\x0e\x3e\xf2\x9b\x9f\x5c\x00\x27\x48\x99\xc1\xa1\x1f\xaf\x91\x63\x22\xf1\x0a\x35\x89\x77\x15\x73\xa5\x3e\xda\x1f\xde\xc8\x6f\x7e\x77\xfd\x36\x60\x2f\xfc\x2c\x71\xbf\x7c\xcd\xe1\x47\x91\x9b\x5f\x5f\x2b\xf2\x61\xde\xe1\xba\xe0\x1f\x99\x62\x39\x61\x12\x23\x0d\x93\xc9\xc9\x9e\x49\x1c\x36\x36\xbc\xac\x6b\x47\x12\x29\x72\xcd\x48\x5c\xd3\xb3\x53\x29\x96\x8c\xa2\x34\x41\x27\xc5\x61\xf8\xee\x32\x8d\xc9\xea\x4c\xc8\x84\x68\x63\xf2\xc0\x30\xa6\xb9\x9e\x70\x2e\xb4\x9d\x42\xc6\xf5\x6b\x61\x7c\x3d\x12\x99\xa0\xec\x91\x34\x55\x91\xa0\xd8\x8b\x44\xf2\x5f\x14\x2f\xcc\x98\x3a\xc8\x81\x8c\xcb\xf7\x61\xb3\xce\xbc\xda\x20\xdb\x63\x29\x77\xbd\x19\xd3\x91\xe0\x0f\x6c\x66\xa1\x47\xc3\xcb\xd3\xef\xc3\x9f\x77\xe3\x6f\xe7\xc3\xeb\x8b\x5f\xc3\xe9\xc5\xf8\x3a\x23\xdc\xf8\x13\x32\x29\x0e\xfb\x3b\x21\x67\x84\xb3\x97\xcd\xf8\xdc\x32\xfd\xa3\x36\xbf\x67\xb3\x45\x4c\xee\xd1\x72\x8f\x1b\x4d\x18\x4f\x17\xf6\xb6\x34\x3e\x6b\x27\xd3\xac\xbb\x1f\x49\x67\x3a\xfe\x72\xba\x2b\x0f\x2d\xe6\xd8\x90\x40\x8d\x2a\x23\x9f\x56\x75\x19\x72\x4a\x94\x7a\x12\x92\x16\xb0\x1b\x96\x81\xf9\xe2\x1e\x25\x47\x8d\xea\x06\xa5\xaa\xdf\x89\x96\x1b\x8d\x6d\x9c\xbd\x7e\xcf\x6d\x6e\xab\xdb\xda\xcd\x22\x56\xa8\x27\xb3\x8c\x0d\x40\xcb\x05\xe6\xd8\x66\x2d\xab\xc8\x52\x29\xe8\x9b\xb4\x53\xe4\xb7\xdc\x9d\xf5\xbf\x00\x00\x00\xff\xff\x00\xaf\x9c\x2a\xfd\x09\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 2557, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
