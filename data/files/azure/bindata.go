// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package azure

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x9b\x5d\x73\x9b\x38\x14\x86\xef\xf3\x2b\x34\xbe\x6e\xb2\x06\x7f\x36\x77\xae\x3f\xd8\x6c\x3a\x49\x37\x38\xed\xec\xee\x74\x3c\x0a\x56\x5c\x6a\x22\x79\x25\x91\x34\xed\xf4\xbf\xef\x80\x1d\xec\x00\x82\x17\x42\xb6\x37\x6d\xc6\x12\x3a\x8f\x74\xce\x7b\xce\x31\x86\x1f\x47\x84\xb4\x38\xbd\x63\xad\x53\xd2\xa2\xdf\x43\xc9\x5a\x6f\xa2\x8f\x18\xbf\x6f\x9d\x92\x7f\x8e\x08\x21\xa4\xb5\x64\xf7\xf1\xa7\x84\xb4\xfe\xa5\xad\x23\x42\x3e\xc7\x73\x24\x5b\xf9\x82\xab\x64\xde\x8f\xf8\x5f\x42\x5a\x81\xf0\xa8\xf6\x05\x8f\xd6\xfc\xe8\xcb\x95\xcf\x7d\xba\x5b\x20\xb9\x2c\x1a\x9b\x52\xa5\xc9\xb5\xbb\x1f\xfa\x2e\x38\xdb\xaf\x17\x7f\xc4\xa8\xd2\xa1\x6a\xed\x3e\xf8\x1c\xff\xff\xf3\xcd\x8b\xec\x11\x1b\xb0\x68\xe3\x26\xcf\xc4\x43\xae\xb9\x31\xe3\x5a\xd2\xa0\x6c\x87\xde\x76\x5a\x95\x4d\x9e\x05\x81\xcf\x85\xaf\xf2\xac\x5e\x08\xa9\xbf\x10\xd0\x36\x8f\x26\xd7\x00\x98\xb3\x6f\x34\xd7\xba\x2b\x42\xdc\xba\x8a\x26\xd7\xb0\xfe\x89\x29\x9d\x6b\x63\xcf\x61\x9c\x92\x83\xf1\xc0\x94\xae\x41\x31\xa6\x81\x7f\x2b\xa4\x21\xd6\x62\x00\xc0\x70\xe5\x7d\x3f\x8f\xdf\x8c\xc1\x92\xe0\xde\x9a\xac\x10\xdc\x7f\x86\xec\x86\x79\x64\xec\xeb\xc7\xdc\x18\xa7\x9c\x2e\x29\x89\x94\x55\x1c\xe4\xf1\xbc\x48\x5a\x15\x82\x4c\x48\xc1\xb5\x28\x30\xbb\x73\x30\x60\x79\xe7\x5f\xdc\xb8\x4b\x05\xf9\x40\xc3\x40\x10\x57\x53\xcd\xf2\x20\xde\x49\xfa\xdd\x0f\x48\x1c\xf2\x85\x08\x37\xf1\xc4\x38\xda\x2b\x68\x5c\xb2\x80\xf2\xa5\x59\xe2\xd3\x50\x8a\x0d\x2b\x97\x37\xdb\xce\x83\x0d\x5f\x30\xfd\x85\xc9\xc8\x76\xae\xc2\xe3\x38\x03\x6c\x47\x91\x56\xd5\xf4\x98\xca\xa5\x7f\x7b\x9b\x67\xf6\xfa\x9c\x44\x96\x0b\x4d\x86\xeb\xc8\x28\x6e\xee\xbd\xe0\x4b\xc1\x0d\xd6\xca\xdd\x1a\xae\x2b\xba\xd4\xf5\xf9\x8a\x6e\x84\xcc\x8d\xa6\xd8\x5e\x24\x10\x32\x52\x87\x29\xc5\x94\x37\xa3\xa9\x34\x9a\x09\x9b\xff\x5d\xf0\x15\x39\x17\x7c\x65\xac\x8d\xa5\x96\xab\x1b\xbd\x60\x0f\xdb\xa3\x24\x9f\x68\xc0\x72\x23\x6a\x14\xaa\x48\x9b\x3e\x90\x46\xe8\xd3\xd4\x6a\x99\xe4\xa3\xef\x69\x21\xf3\x13\xf5\xde\x7a\xe2\x01\x0c\x21\xf1\x42\x95\x8c\xb6\x7e\x14\x6f\x88\x4b\x7d\x4d\xef\x72\x69\xfe\xa0\x1b\xca\xcb\xcf\xe1\x6b\x34\xad\x9a\xed\x4b\x45\xd7\x05\x26\x4b\xc5\x15\x9b\xcc\xd1\x57\xd2\x0e\xfa\x5c\x69\xca\x3d\x36\x7f\xdc\xb0\x9c\xa6\x50\xad\xc3\x38\xcc\x35\xe5\x4b\x2a\x97\x8b\x51\x7b\x6f\x6e\xc9\x94\x27\xfd\x4d\xa2\x93\xbc\x39\x1e\xd5\x6c\x25\xe4\x63\xec\xb3\x63\xc5\xa4\x7f\x18\x4d\xde\x26\x5a\xdd\xda\x6f\x8f\xde\xb5\x4e\x49\xfb\x64\xd0\x1f\xee\xad\xf8\x6a\xdd\x3a\x25\x76\x3b\xf7\xac\x32\x7c\x16\xc0\x67\xbd\x8c\xcf\x3a\x19\xf4\xd2\x78\x03\x10\xcf\x06\xf0\xec\x6a\x78\x76\x0a\xaf\x73\x92\xa1\xb3\x3a\x3d\x0c\xaf\x03\xe0\x75\xaa\xe1\x75\x53\x78\x83\x8c\x67\x87\x20\x5c\x17\x80\xeb\x56\x83\x1b\xa6\x5d\xdb\x4d\xd3\xf5\xdb\x20\x5d\x0f\xa0\xeb\xbd\xcc\xb3\x59\x3a\xd8\xb1\x7d\x80\xae\xff\x32\xc7\xda\x59\xcd\xa2\x9e\x1d\x00\x74\x83\x97\x79\xb6\xd7\xaf\xed\xd9\x21\x40\x37\x2c\xa6\x23\xc7\xc4\x13\x77\x9b\x50\xb3\x63\x9f\x6b\xc6\x95\x7f\xcf\xc8\x53\xea\xad\xc1\xde\x19\xda\x18\xfb\x5b\x80\xfd\x6d\x93\xec\x56\x3f\x1d\xb4\x96\x5d\x9b\xde\x42\xaa\x8d\x55\x52\x6e\x7e\xd9\xd9\x5b\x50\x2d\x2a\x29\x46\xbf\xee\xf4\x27\x00\xfe\xc4\x40\x3f\x01\x4b\x69\x4e\xad\xea\x61\x95\x74\x02\x54\xd2\x89\xa1\x92\x9a\xe8\xd2\xf9\x36\x53\xaa\xac\x36\x08\x07\xd4\xd1\x89\xa1\x8e\x9a\xe0\xd2\xe9\x36\x5b\x0c\x6c\x94\x0e\x28\xa4\x13\x43\x21\x35\xd1\xa5\x65\x93\x2d\x06\x5d\x94\x0e\x91\xcd\xc4\x24\x1b\xd4\xb5\x39\xa5\x14\xe6\x43\x22\xcf\xaa\x18\x7a\x40\x31\x85\xf9\x90\xe0\xb3\x2a\x46\x5f\x79\x5a\xc4\xfd\x8b\x84\x9f\x55\x31\xfe\x90\xc4\x37\x84\x09\x17\xf7\x90\x8f\x9f\x4d\x7b\x46\x79\x6f\xff\x0f\x09\x10\xa3\xb4\x6b\x50\x36\x98\x08\x31\xc8\x4e\x0d\xc8\x26\x13\x22\x46\xd9\xad\x41\xd9\x60\x62\xec\x61\x94\xbd\x3a\x61\x99\x96\x4f\x56\xdf\xb8\x7a\x50\xf9\xd4\xd1\x4f\xa3\x79\x1c\xe4\xac\xa3\xa0\x46\xf3\x39\xc8\x59\x47\x44\x8d\xe6\x75\x90\xb3\x8e\x8c\x9a\xcd\xef\xa0\x92\xac\x3a\x52\xb2\xdb\x99\x10\x6d\xe7\xc4\x28\x88\xea\x22\xcd\x90\x6b\x6a\x86\xdc\xfa\x55\x68\x00\xf2\x21\xe7\xe8\x9a\x0e\xd1\xc4\x57\x5e\x7f\xba\x20\x1e\xd2\x0b\xb9\xa6\x5e\xc8\x84\x07\x54\x9e\x21\xc8\x87\xf4\x42\xae\xa9\x17\x32\xf1\x95\xd7\x9c\x5e\x1f\x0d\x3f\x2c\xfe\xaa\x06\x60\x79\x1a\x87\x4f\x10\x6a\xc7\x5d\x63\x3f\x8e\xfa\xf8\x25\x67\x08\x05\xa1\xb1\x23\x47\xbd\x9c\x4d\xdd\x96\x05\x7e\xd3\x77\xa1\x9e\xdc\x35\x36\xe5\xc6\x3c\x03\x64\x6d\xdb\x46\xb5\x0c\xf6\x15\x6e\x41\x5f\xe1\xbe\xa4\x31\x87\x53\x22\xc8\x59\xd0\x57\x98\x39\x1b\x4c\x8d\x20\x66\x41\x5b\x61\xc6\x6c\x32\x45\x82\x9c\x05\x6d\x85\x99\xb3\xc1\x54\x09\x36\x15\x6e\x41\x53\x51\x10\x9e\xe5\x0d\x7a\x05\xb5\xc3\x4a\xaa\x25\xa5\x46\x93\x3b\x4a\x5a\x4b\x4c\x8d\x26\x79\x94\xb4\x96\x9e\x9a\x4d\xf6\x28\x6a\x2d\x49\x35\x9c\xf4\x51\x59\x15\x35\xeb\x05\xb1\x0a\x74\xeb\xf6\x10\x6b\xd6\x67\x40\xaf\x34\x33\x74\x4a\x33\xb0\x2c\x65\x4e\xd2\xc2\x02\x74\x06\x9c\xe1\xcc\x70\x7c\x26\xb6\xb4\xce\x33\x32\xef\x60\x11\x39\x03\x9a\x8f\x99\xa1\xf5\x30\xb1\xa5\x95\x9d\x11\x76\x1f\x0b\xc0\x19\xf0\xe3\xdf\xcc\xf0\xe3\x9f\x89\x2d\xf3\xa3\x73\x56\xcb\x60\x82\x9c\x59\xc0\xef\xba\xcf\x26\x41\x31\x97\x16\x70\x27\xab\x5f\x30\x2f\xce\x2c\x85\x00\x2a\x03\xa0\xaa\xab\x0a\xd0\xb9\x36\x42\x67\x57\xa5\x2b\xd5\x05\xe8\xdc\x2e\x42\xd7\xad\x4a\x57\xaa\x0c\x34\xa3\x0c\x11\xbc\x61\x55\xbc\x72\x71\xa0\x59\xc5\xea\x43\xb1\xd7\xaf\x1c\x7c\xe5\xf2\x00\x93\x8b\x03\x14\x0c\xc7\x50\x30\x1c\x30\xf8\xb2\x2d\x4d\x67\x08\xd2\x01\x25\xc3\x31\x94\x0c\x13\x5d\x3a\xf8\xb2\x6d\xcc\xa0\x8f\xa9\xc3\x01\xbe\x54\x3b\x86\xaf\xd4\x26\xba\x4c\xec\x65\x1b\x17\xab\xd7\xc1\xe4\xe1\x00\x45\xcd\x31\x14\x35\x13\x5f\x26\xf2\x6c\x3b\x5b\x73\xdb\x03\x4c\x1f\x0e\xf0\xc0\x92\x63\x78\x60\xc9\x04\xd8\xc9\xa4\xbe\x6e\xb6\xf0\x5a\x5d\x30\xfe\x90\x7b\x9f\x8e\xe9\xde\xa7\x83\xde\x7a\xaa\xdd\xf3\x3b\xc8\xbd\x4f\xc7\x74\xef\xd3\xc8\x57\x2e\x91\x1e\xd8\x1d\x38\xc8\xdd\x4f\xc7\x74\xf7\xd3\x08\x88\xa8\xa4\x0d\x9f\x21\x22\x13\xd3\x0d\x50\x23\x22\x22\x14\x1b\xfd\xc2\xe4\xb8\x88\x52\x5c\x93\x54\x4c\x8c\x88\x56\xba\xc9\xf7\xa4\xe4\x79\x5d\x4f\xb2\x25\xe3\xda\xa7\x41\xce\xd3\xba\x1b\x29\xee\xfd\x25\x93\x91\xe1\x51\xf2\x5a\xd8\xd3\x8a\x9b\x80\x3e\xce\x84\xbc\xa3\x3a\x1a\xbf\xf5\x59\x70\xf0\x9e\x02\xe5\x5c\xe8\xf8\xb1\xe3\x68\xdd\xa7\x15\xa3\x35\xbf\x50\x79\xc7\xe4\x09\xdd\x6c\x94\x27\x96\xec\xc4\x13\x77\xbf\x79\x41\xa8\x34\x93\xc7\x7b\x9a\x68\xc9\x64\x35\xd3\x65\x4b\xae\xd2\x97\xec\xae\xf8\x99\x80\xc4\x5c\xcf\x9f\x62\xde\xd3\x6c\xdf\x71\xf3\x04\xbf\xf5\x57\xf1\x26\xff\xbe\xbe\x9a\x2e\xe6\xd3\x8b\xd1\xc5\x7c\x71\x36\x39\x00\x88\x56\x12\x32\x3a\xd7\xed\x0b\x72\x0b\xcd\x38\xe5\x7a\xe1\x2f\x9f\x4f\xfa\xaa\xb6\x9e\xdc\x0e\xa7\x97\x08\xe8\x0d\x8b\x39\xe7\xf1\x30\x39\x4b\x5d\xed\xf3\x4d\xa8\xb7\x97\x7f\x4b\x1e\xb1\x3e\xd8\x4d\x39\xbb\x7b\xfd\xce\x1d\x5f\x9d\x7d\x98\x9f\x5d\x5e\x94\xec\x40\x85\x37\x49\xf0\x19\xf7\x71\x38\xc9\xb8\x1b\xf7\x60\xd2\x2b\xec\x69\xfc\xfe\x6c\x5a\xea\x0f\x2f\xf0\x59\x81\x3f\xb6\xc3\xc6\x1d\x8c\xe3\xe1\xd7\x63\x77\xa7\xe3\xab\xe9\x1c\xe0\x57\xcc\x93\x4c\x17\xed\xc1\xcd\x99\x91\xde\x47\xde\x9c\x64\x2f\x1b\xaa\xd4\x83\x90\xcb\x83\xfd\xec\xfe\xca\x7f\x7f\x20\x93\x05\x5c\x2d\x24\x5d\xbd\x5a\x32\x50\xdb\xe5\x5f\x43\xd9\xee\xfc\xf2\x6a\xe4\x4c\x17\xa3\xf1\xf8\xf2\xfa\xa2\xd0\x1f\x3b\x8a\x05\xf5\x3c\x11\x72\x83\x47\x72\x07\x13\x67\xc4\x87\x45\x76\xa7\x45\x46\x79\x73\x1b\x10\xfc\x6e\x4b\xe7\xd3\xbf\x90\xed\xac\xd9\x63\xfe\x56\x32\x03\xc5\xdb\x20\xe7\xe9\xf9\x78\x7c\x25\xc5\x67\x1d\xde\x30\xc9\x99\x66\xea\x23\x93\x2a\xff\x35\xe2\xfb\xed\x48\xb4\xb0\x75\x32\x3c\x31\x3f\xc1\x9b\x1a\xdd\xbe\xbb\x7c\x10\x6b\x4b\x16\x7d\xa0\x65\xc8\x8e\x0e\xa9\x62\x9a\xa3\x9f\xff\x05\x00\x00\xff\xff\x70\x6e\xf9\x79\x03\x3d\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 15619, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
