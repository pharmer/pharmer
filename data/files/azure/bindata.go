// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package azure

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x9b\xdd\x72\x9b\x4c\x12\x86\xcf\x7d\x15\x53\x3a\x8e\xbd\x02\xfd\x7e\x3e\x53\xf4\xc3\x7a\x9d\xb2\xb3\x46\x4e\x6a\x77\x2b\xa5\x1a\xc3\x58\x21\x92\x67\x94\x01\xe4\x38\xa9\xdc\xfb\x16\x48\x46\x32\xd0\xf0\x82\xf1\x97\x93\xc4\x05\xc3\xf4\x33\xd3\xfd\x76\x37\x08\x7e\x9d\x30\xd6\x92\xfc\x41\xb4\xce\x59\x8b\xff\x0c\xb5\x68\xbd\x8b\x0e\x09\xb9\xf5\x5b\xe7\xec\x7f\x27\x8c\x31\xd6\x72\xc5\x36\x3e\xcc\x58\xeb\x3b\x7f\xfe\x6b\xa3\x95\xdb\x3a\x61\xec\x4b\x7c\x81\x16\x4b\x4f\xc9\xc3\x35\xbf\xe2\x7f\x19\x6b\xad\x95\xc3\x03\x4f\xc9\xc8\xc0\x27\x4f\x2f\x3d\xe9\x3d\x4f\x91\x5c\x16\x9d\x9b\x72\x3f\x60\xb7\xf6\xe1\xd4\x4f\x25\xc5\x61\xbe\xf8\x90\xe0\x7e\x10\xfa\xad\xfd\x81\x2f\xf1\xff\xbf\xdf\xbd\xca\x1e\x33\x01\x8b\x26\x6e\xf2\x42\x3d\xe6\x9a\x1b\x0b\x19\x68\xbe\x2e\x5b\xa1\xb3\x1b\x56\x65\x91\x17\xeb\xb5\x27\x95\xe7\xe7\x59\xbd\x52\x3a\xf8\xca\x40\xdb\x32\x1a\x5c\x03\x60\x2e\x7e\xf0\x5c\xeb\xb6\x0a\x71\xeb\x7e\x34\xb8\x86\xf5\xcf\xc2\x0f\x72\x6d\x1c\x38\xc8\x21\x39\x18\x8f\xc2\x0f\x6a\x50\x8c\xf9\xda\xbb\x57\x9a\x88\xb5\x18\x00\x30\x5c\x79\xdd\x2f\xe3\x37\x63\xb0\x24\xb8\x77\x26\x2b\x04\xf7\xbf\x43\x71\x27\x1c\x36\xf6\x82\xa7\xdc\x18\xe7\x92\xbb\x9c\x45\xca\x2a\x0e\xf2\x78\x5c\x24\xad\x0a\x41\xa6\xb4\x92\x81\x2a\x30\xbb\x77\x30\x60\x79\xef\x5f\xdc\xb8\xcd\x15\xfb\xc8\xc3\xb5\x62\x76\xc0\x03\x91\x07\xf1\x5e\xf3\x9f\xde\x9a\xc5\x21\x5f\x88\x70\x17\x0f\x8c\xa3\xbd\x82\xc6\xb5\x58\x73\xe9\xd2\x12\x9f\x86\x5a\x6d\x44\xb9\xbc\xc5\x6e\x1c\x6c\xf8\x4a\x04\x5f\x85\x8e\x6c\xe7\x2a\x3c\x8e\x33\xc0\x76\x14\x69\x55\x4d\x8f\xb9\x76\xbd\xfb\xfb\x3c\xb3\xb7\x97\x2c\xb2\x5c\x68\x32\x5c\x45\x46\x71\x73\x1f\x94\x74\x95\x24\xac\x95\xbb\x35\x5c\x55\x74\xa9\xed\xc9\x25\xdf\x28\x9d\x1b\x4d\xb1\xbd\x48\x20\x6c\xe4\x1f\xa7\x14\x2a\x6f\x46\x43\x79\x34\x12\x36\xff\x4f\x25\x97\xec\x52\xc9\x25\x59\x1b\x4b\x2d\x57\x37\x7a\x25\x1e\x77\x5b\xc9\x3e\xf3\xb5\xc8\x8d\xa8\x51\xe8\x47\xda\xf4\x80\x34\xc2\x9f\x87\x56\xcb\x24\x9f\x3c\x27\x50\x3a\x3f\x51\x1f\xac\x27\x1e\xc0\x10\x12\x2f\x54\xc9\x68\xab\x27\xf5\x8e\xd9\xdc\x0b\xf8\x43\x2e\xcd\xbf\xf8\x86\xcb\xf2\x7d\xf8\x16\x0d\xab\x66\xfb\xda\xe7\xab\x02\x93\xa5\xe2\x8a\x4d\xe6\xe8\x2b\x69\x07\x3d\xe9\x07\x5c\x3a\x62\xfe\xb4\x11\x39\x4d\xa1\xbf\x0a\xe3\x30\x0f\xb8\x74\xb9\x76\x17\xa3\xf6\xc1\x9c\x2b\x7c\x47\x7b\x9b\x44\x27\x79\x63\x1c\x1e\x88\xa5\xd2\x4f\xb1\xcf\x4e\x7d\xa1\xbd\xe3\x68\x72\x36\xd1\xec\xc6\x61\x79\xfc\xa1\x75\xce\xda\x67\x83\xfe\xf0\x60\xc5\xf3\x57\xad\x73\x66\xb6\x73\xf7\x2a\xc3\x67\x00\x7c\xc6\xeb\xf8\x8c\xb3\x41\x2f\x8d\x37\x00\xf1\x4c\x00\xcf\xac\x86\x67\xa6\xf0\x3a\x67\x19\x3a\xa3\xd3\xc3\xf0\x3a\x00\x5e\xa7\x1a\x5e\x37\x85\x37\xc8\x78\x76\x08\xc2\x75\x01\xb8\x6e\x35\xb8\x61\xda\xb5\xdd\x34\x5d\xbf\x0d\xd2\xf5\x00\xba\xde\xeb\x3c\x9b\xa5\x83\x1d\xdb\x07\xe8\xfa\xaf\x73\xac\x99\xd5\x2c\xea\xd9\x01\x40\x37\x78\x9d\x67\x7b\xfd\xda\x9e\x1d\x02\x74\xc3\x62\x3a\x76\xca\x1c\xf5\xb0\x09\x03\x71\xea\xc9\x40\x48\xdf\xdb\x0a\xf6\x9c\x7a\x6b\xb0\x77\x86\x26\xc6\xfe\x17\xc0\xfe\x57\x93\xec\x46\x3f\x1d\xb4\x86\x59\x9b\xde\x40\xaa\x8d\x51\x52\x6e\xfe\xd8\xde\x1b\x50\x2d\x2a\x29\x46\x7f\x6e\xf7\x27\x00\xfe\x84\xa0\x9f\x80\xa5\x34\xa7\x56\xf5\xb0\x4a\x3a\x01\x2a\xe9\x84\xa8\xa4\x14\x5d\x3a\xdf\x66\x4a\x95\xd1\x06\xe1\x80\x3a\x3a\x21\xea\x28\x05\x97\x4e\xb7\xd9\x62\x60\xa2\x74\x40\x21\x9d\x10\x85\x94\xa2\x4b\xcb\x26\x5b\x0c\xba\x28\x1d\x22\x9b\x09\x25\x1b\xd4\xb5\x39\xa5\x14\xe6\x43\x22\xcf\xa8\x18\x7a\x40\x31\x85\xf9\x90\xe0\x33\x2a\x46\x5f\x79\x5a\xc4\xfd\x8b\x84\x9f\x51\x31\xfe\x90\xc4\x37\x84\x09\x17\x5b\xc8\xc7\x2f\x86\xbd\xa0\xdc\x9a\x7f\x43\x02\xc4\x28\xcd\x1a\x94\x0d\x26\x42\x0c\xb2\x53\x03\xb2\xc9\x84\x88\x51\x76\x6b\x50\x36\x98\x18\x7b\x18\x65\xaf\x4e\x58\xa6\xe5\x93\xd5\x37\xae\x1e\x54\x3e\x75\xf4\xd3\x68\x1e\x07\x39\xeb\x28\xa8\xd1\x7c\x0e\x72\xd6\x11\x51\xa3\x79\x1d\xe4\xac\x23\xa3\x66\xf3\x3b\xa8\x24\xa3\x8e\x94\xcc\x76\x26\x44\xdb\x39\x31\x0a\xa2\xda\x48\x33\x64\x53\xcd\x90\x5d\xbf\x0a\x0d\x40\x3e\x64\x1f\x6d\x6a\x13\x29\xbe\xf2\xfa\xd3\x05\xf1\x90\x5e\xc8\xa6\x7a\x21\x0a\x0f\xa8\x3c\x43\x90\x0f\xe9\x85\x6c\xaa\x17\xa2\xf8\xca\x6b\x4e\xaf\x8f\x86\x1f\x16\x7f\x55\x03\xb0\x3c\x8d\xc3\x3b\x08\xb5\xe3\x36\xd9\x8f\xa3\x3e\x7e\xcd\x1e\x42\x41\x48\x76\xe4\xa8\x97\xb3\xa9\xdb\x30\xc0\x3b\x7d\x1b\xea\xc9\x6d\xb2\x29\x27\xf3\x0c\x90\xb5\x4d\x13\xd5\x32\xd8\x57\xd8\x05\x7d\x85\xfd\x9a\xc6\x1c\x4e\x89\x20\x67\x41\x5f\x41\x73\x36\x98\x1a\x41\xcc\x82\xb6\x82\xc6\x6c\x32\x45\x82\x9c\x05\x6d\x05\xcd\xd9\x60\xaa\x04\x9b\x0a\xbb\xa0\xa9\x28\x08\xcf\xf2\x06\xbd\x82\xda\x61\x25\xd5\x92\x52\xa3\xc9\x1d\x25\xad\x25\xa6\x46\x93\x3c\x4a\x5a\x4b\x4f\xcd\x26\x7b\x14\xb5\x96\xa4\x1a\x4e\xfa\xa8\xac\x8a\x9a\xf5\x82\x58\x05\xba\x75\x73\x88\x35\xeb\x33\xa0\x57\x9a\x11\x9d\xd2\x0c\x2c\x4b\x99\x9d\x34\xb0\x00\x9d\x01\x7b\x38\x23\xb6\x8f\x62\x4b\xeb\x3c\x23\xf3\x0e\x16\x91\x33\xa0\xf9\x98\x11\xad\x07\xc5\x96\x56\x76\x46\xd8\x7d\x2c\x00\x67\xc0\x8f\x7f\x33\xe2\xc7\x3f\x8a\x2d\xf3\xa3\x73\x56\xcb\x60\x82\x9c\x19\xc0\xef\xba\x2f\x06\x41\x31\x97\x16\x70\x27\xab\x5f\x30\x2f\xce\x0c\x1f\x01\xf4\x09\x40\xbf\xae\x2a\x40\xe7\x9a\x08\x9d\x59\x95\xae\x54\x17\xa0\x73\xbb\x08\x5d\xb7\x2a\x5d\xa9\x32\xd0\x8c\x32\x44\xf0\x86\x55\xf1\xca\xc5\x81\x66\x15\xa3\x0f\xc5\x5e\xbf\x72\xf0\x95\xcb\x03\x4c\x2e\x16\x50\x30\x2c\xa2\x60\x58\x60\xf0\x65\x5b\x9a\xce\x10\xa4\x03\x4a\x86\x45\x94\x0c\x8a\x2e\x1d\x7c\xd9\x36\x66\xd0\xc7\xd4\x61\x01\x37\xd5\x16\x71\x4b\x4d\xd1\x65\x62\x2f\xdb\xb8\x18\xbd\x0e\x26\x0f\x0b\x28\x6a\x16\x51\xd4\x28\xbe\x4c\xe4\x99\x66\xb6\xe6\xb6\x07\x98\x3e\x2c\xe0\x85\x25\x8b\x78\x61\x89\x02\xec\x64\x52\x5f\x37\x5b\x78\x8d\x2e\x18\x7f\xc8\xb3\x4f\x8b\x7a\xf6\x69\xa1\x8f\x9e\x6a\xf7\xfc\x16\xf2\xec\xd3\xa2\x9e\x7d\x92\x7c\xe5\x12\xe9\x81\xdd\x81\x85\x3c\xfd\xb4\xa8\xa7\x9f\x24\x20\xa2\x92\x36\xbc\x87\x88\x4c\xa8\x07\xa0\x24\x22\x22\x14\x13\xbd\x61\xb2\x6c\x44\x29\x36\x25\x15\x8a\x11\xd1\x4a\x37\xb9\x4f\x4a\xde\xd7\x75\xb4\x70\x85\x0c\x3c\xbe\xce\x79\x5b\x77\xa3\xd5\xd6\x73\x85\x8e\x0c\x8f\x92\x6f\xc4\x9e\x67\xdc\xac\xf9\xd3\x4c\xe9\x07\x1e\x44\xe7\xef\x3d\xb1\x3e\xfa\x4e\x81\x4b\xa9\x82\xf8\xb5\xe3\x68\xde\xe7\x19\xa3\x39\xbf\x72\xfd\x20\xf4\x19\xdf\x6c\x7c\x47\xb9\xe2\xcc\x51\x0f\xff\x70\xd6\xa1\x1f\x08\x7d\x7a\xa0\x89\xa6\x4c\x66\xa3\x2e\x73\xa5\x9f\xbe\x64\x7f\xc5\xef\x04\x24\xe6\x7a\xf9\x16\xf3\x81\x66\xf7\xc1\x9b\xa3\xe4\xbd\xb7\x8c\x17\xf9\xdf\xdb\x9b\xe9\x62\x3e\xbd\x1a\x5d\xcd\x17\x17\x93\x23\x80\x68\x26\xa5\xa3\x7d\xdd\x7d\x2d\xb7\x08\x84\xe4\x32\x58\x78\xee\xcb\x41\xdf\xfc\x9d\x27\x77\xa7\xd3\x53\xac\xf9\x9d\x88\x39\xe7\xf1\x69\x76\x91\xba\xda\x93\x9b\x30\xd8\x5d\xfe\x23\x79\xc5\xfa\x68\x35\xe5\xec\xf6\xed\x7b\x7b\x7c\x73\xf1\x71\x7e\x71\x7d\x55\xb2\x02\x3f\xbc\x4b\x82\x8f\x5c\xc7\xf1\x20\x72\x35\xf6\xd1\xa0\x37\x58\xd3\xf8\xc3\xc5\xb4\xd4\x1f\xce\xda\x13\x05\xfe\xd8\x9d\x26\x57\x30\x8e\x4f\xbf\x1d\xbb\x3d\x1d\xdf\x4c\xe7\x00\xbf\x2f\x1c\x2d\x82\xa2\x35\xd8\x39\x23\xd2\xeb\xc8\x1b\x93\xac\x65\xc3\x7d\xff\x51\x69\xf7\x68\x3d\xfb\xbf\xf2\xbf\x1f\xc8\x64\x01\x3b\x50\x9a\x2f\xdf\x2c\x19\xf8\xbb\xe9\xdf\x42\xd9\xf6\xfc\xfa\x66\x64\x4d\x17\xa3\xf1\xf8\xfa\xf6\xaa\xd0\x1f\x7b\x8a\x05\x77\x1c\x15\x4a\xc2\x23\xb9\x27\x13\x67\xc4\x9b\xc5\xf6\xbb\xc5\x46\x79\x63\x1b\x10\xfc\x7e\x49\x97\xd3\xff\x20\xcb\x59\x89\xa7\xfc\xa5\x64\x4e\x14\x2f\x83\x5d\xa6\xc7\xe3\xf1\x95\x14\x9f\x55\x78\x27\xb4\x14\x41\xde\x97\x22\x5b\xa1\xfd\x7d\x55\x34\xce\x86\x67\xf4\x9b\xbb\xa9\xb3\xfb\x0f\x98\x8f\x82\xcc\x15\xdb\xd6\x39\x0b\x74\x28\x8e\xea\xc9\x77\x9e\x3d\x16\x7f\xd8\xbc\x3b\x7a\x72\x0c\x1e\x03\x9f\xfc\xfe\x7f\x00\x00\x00\xff\xff\xd6\x6e\x4c\xd8\x33\x3d\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 15667, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
