// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package azure

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x9b\x4d\x73\x9b\x48\x13\xc7\xef\xfe\x14\x53\x9c\x13\x97\x40\xe8\x25\xbe\xf9\xb1\x22\x9e\x6c\xb6\xb2\xbb\x45\x5e\x0e\x5b\xa9\xd4\x58\x1a\x3b\x13\xe1\x19\x2d\x0c\x4e\x9c\x54\xbe\xfb\x16\x48\x46\x16\x33\x0d\x7f\x10\xb5\xb9\xc4\x0a\xd3\x52\xff\x98\xee\x7f\x77\x0b\xc1\x8f\x33\xc6\x3c\xc5\xef\x84\x77\xc1\x3c\xfe\x3d\x4f\x85\xf7\xac\x38\x24\xd4\xbd\x77\xc1\xfe\x3e\x63\x8c\x31\x6f\x2d\xee\xcb\xa3\x8c\x79\xff\x70\xef\x8c\xb1\x8f\xa5\x4d\x2a\x6e\xa5\x56\x59\x65\xf7\xa3\xfc\x97\x31\x2f\xd1\x2b\x6e\xa4\x56\xc5\x67\xbe\x97\xe9\xad\x54\x92\xef\x3f\xa0\x7a\x5b\xb1\xf6\x92\x67\x86\xbd\x8b\x0f\x4b\xdf\xb5\x12\x87\xcf\x2b\x0f\x09\x9e\x99\x3c\xf3\xf6\x07\x3e\x96\x7f\x7f\x3e\x3b\xc9\x1f\x0b\x00\x8f\x01\xee\xf2\x95\xfe\xea\x74\x77\x25\x94\x49\x79\xd2\x76\x86\xab\x9d\x59\x97\x93\x7c\x95\x24\x52\x69\x99\xb9\xbc\xbe\xd1\xa9\xf9\xcc\x40\xdf\xaa\x30\xee\x01\xf0\x56\x7c\xe3\x4e\xef\xb1\xce\x71\xef\x59\x61\xdc\xc3\xfb\x07\x91\x19\xa7\x8f\x03\x07\x69\xe2\xc0\xf8\x2a\x32\xd3\x83\xe2\x8a\x27\xf2\x46\xa7\x44\xae\x95\x00\x80\xe3\xce\xe7\x7d\x9c\xbf\x96\xc3\x96\xe4\xde\xb9\xec\x90\xdc\x7f\xe5\xe2\x5a\xac\xd8\x95\x34\x0f\xce\x1c\xe7\x8a\xaf\x39\x2b\x94\xd5\x9c\xe4\xa5\x5d\x21\xad\x0e\x49\xa6\x53\xad\x8c\x6e\x70\xbb\x0f\x30\xe0\x79\x1f\x5f\xdc\x79\xcc\x35\xfb\x93\xe7\x89\x66\xb1\xe1\x46\xb8\x20\xfe\x97\xf2\xef\x32\x61\x65\xca\x37\x22\x5c\x97\x86\x65\xb6\x77\xd0\x78\x2a\x12\xae\xd6\xb4\xc4\x5f\xe6\xa9\xde\x8a\x76\x79\x8b\x9d\x1d\xec\xf8\x8d\x30\x9f\x45\x5a\xf8\x76\x2a\xbc\xcc\x33\xc0\x77\x91\x69\x5d\x5d\x5f\xf1\x74\x2d\x6f\x6e\x5c\x6e\xdf\xbd\x66\x85\xe7\x46\x97\xf9\xa6\x70\x8a\xbb\xfb\x5d\xab\xb5\x56\x84\xb7\xf6\xb0\xe6\x9b\x8e\x21\x8d\xa5\xba\xe5\x5b\x9d\x3a\xb3\xa9\xf4\x57\x08\x84\x5d\x66\x4f\x4b\x0a\x55\x37\x0b\x53\x5e\x58\xc2\xee\xff\xaf\xd5\x2d\x7b\xad\xd5\x2d\xd9\x1b\x5b\x3d\x77\x77\xfa\x46\x7c\xdd\x6d\x25\xfb\xc0\x13\xe1\xcc\xa8\xcb\x3c\x2b\xb4\x29\x81\x32\xc2\x1f\x4d\xbb\x55\x92\xf7\x72\x65\x74\xea\x2e\xd4\x07\xef\x55\x04\x30\x84\x2a\x0a\x5d\x2a\xda\xe6\x41\x3f\x63\x31\x97\x86\xdf\x39\x69\x7e\xe3\x5b\xae\xda\xf7\xe1\x4b\x61\xd6\xcd\xf7\x1f\x19\xdf\x34\xb8\x6c\x15\x57\xe9\xd2\xa1\xaf\x6a\x1c\x94\x2a\x33\x5c\xad\xc4\xdb\x87\xad\x70\x0c\x85\xd9\x26\x2f\xd3\xdc\x70\xb5\xe6\xe9\xfa\xd3\xe5\xe8\xe0\x6e\x2d\xb2\x55\x2a\xb7\x95\x4e\x5c\x36\x2b\x6e\xc4\xad\x4e\x1f\xca\x98\x3d\xcf\x44\x2a\x9f\x66\xd3\x6a\x5b\x7c\xba\x7f\x38\x3d\x7e\xe7\x5d\xb0\xd1\xf9\x6c\x3a\x3f\x78\x91\xd9\xc6\xbb\x60\xc1\xc8\xb9\x57\x16\x9f\x0f\xf0\xf9\xa7\xf1\xf9\xe7\xb3\x49\x1d\x6f\x06\xe2\x05\x00\x5e\xd0\x0d\x2f\xa8\xe1\x8d\xcf\x2d\x3a\x7f\x3c\xc1\xf0\xc6\x00\xde\xb8\x1b\x5e\x58\xc3\x9b\x59\x91\x9d\x83\x70\x21\x00\x17\x76\x83\x9b\xd7\x43\x1b\xd6\xe9\xa6\x23\x90\x6e\x02\xd0\x4d\x4e\x8b\xac\x4d\x07\x07\x76\x0a\xd0\x4d\x4f\x0b\x6c\x60\x6b\x16\x8d\xec\x0c\xa0\x9b\x9d\x16\xd9\xc9\xb4\x77\x64\xe7\x00\xdd\xbc\x99\x8e\x3d\x67\x2b\x7d\xb7\xcd\x8d\x78\x2e\x95\x11\x2a\x93\xf7\x82\x3d\x96\xde\x1e\xec\xe3\x79\x80\xb1\xbf\x00\xd8\x5f\x0c\xc9\xee\x4f\xeb\x49\xeb\x07\xbd\xe9\x7d\xa4\xdb\xf8\x2d\xed\xe6\x97\xed\xbd\x0f\xf5\xa2\x96\x66\xf4\xeb\x76\x7f\x01\xe0\x2f\x08\xfa\x05\xd8\x4a\x1d\xbd\x6a\x82\x75\xd2\x05\xd0\x49\x17\x44\x27\xa5\xe8\xea\xf5\xd6\x6a\x55\xfe\x08\x84\x03\xfa\xe8\x82\xe8\xa3\x14\x5c\xbd\xdc\xda\xcd\x20\x40\xe9\x80\x46\xba\x20\x1a\x29\x45\x57\x97\x8d\xdd\x0c\x42\x94\x0e\x91\xcd\x82\x92\x0d\x1a\x5a\x47\x2b\x85\xf9\x90\xcc\xf3\x3b\xa6\x1e\xd0\x4c\x61\x3e\x24\xf9\xfc\x8e\xd9\xd7\x5e\x16\xf1\xf8\x22\xe9\xe7\x77\xcc\x3f\xa4\xf0\xcd\x61\xc2\x4f\xf7\x50\x8c\x8f\xcc\x8e\x28\xef\x83\xff\xa0\x00\x62\x94\x41\x0f\xca\x01\x0b\x21\x06\x39\xee\x01\x39\x64\x41\xc4\x28\xc3\x1e\x94\x03\x16\xc6\x09\x46\x39\xe9\x93\x96\x75\xf9\xd8\xfa\xc6\xd5\x83\xca\xa7\x8f\x7e\x06\xad\xe3\x20\x67\x1f\x05\x0d\x5a\xcf\x41\xce\x3e\x22\x1a\xb4\xae\x83\x9c\x7d\x64\x34\x6c\x7d\x07\x95\xe4\xf7\x91\x52\x30\xb2\x52\x74\xe4\xc8\x51\x10\x35\x46\x86\xa1\x98\x1a\x86\xe2\xfe\x5d\x68\x06\xf2\x21\xfb\x18\x53\x9b\x48\xf1\xb5\xf7\x9f\x10\xc4\x43\x66\xa1\x98\x9a\x85\x28\x3c\xa0\xf3\xcc\x41\x3e\x64\x16\x8a\xa9\x59\x88\xe2\x6b\xef\x39\x93\x29\x9a\x7e\x58\xfe\x75\x4d\xc0\xf6\x32\x0e\xef\x20\x34\x8e\xc7\xe4\x3c\x8e\xc6\xf8\x94\x3d\x84\x92\x90\x9c\xc8\xd1\x28\xdb\xa5\xdb\xf7\xc1\x6f\xfa\x31\x34\x93\xc7\xe4\x50\x4e\xd6\x19\xa0\x6a\x07\x01\xaa\x65\x70\xae\x88\x1b\xe6\x8a\xf8\x94\xc1\x1c\x2e\x89\x20\x67\xc3\x5c\x41\x73\x0e\x58\x1a\x41\xcc\x86\xb1\x82\xc6\x1c\xb2\x44\x82\x9c\x0d\x63\x05\xcd\x39\x60\xa9\x04\x87\x8a\xb8\x61\xa8\x68\x48\xcf\xf6\x01\xbd\x83\xda\x61\x25\xf5\x92\xd2\xa0\xc5\x1d\x25\xed\x25\xa6\x41\x8b\x3c\x4a\xda\x4b\x4f\xc3\x16\x7b\x14\xb5\x97\xa4\x06\x2e\xfa\xa8\xac\x9a\x86\xf5\x86\x5c\x05\xa6\xf5\x60\x8e\x0d\xeb\x4b\x60\x56\x5a\x12\x93\xd2\x12\x6c\x4b\xd6\x4e\xfa\x58\x82\x2e\x81\x3d\x5c\x12\xdb\x47\xb1\xd5\x75\x6e\xc9\x7c\x8c\x65\xe4\x12\x18\x3e\x96\xc4\xe8\x41\xb1\xd5\x95\x6d\x09\x7b\x8a\x25\xe0\x12\xf8\xf1\x6f\x49\xfc\xf8\x47\xb1\x59\x3f\x3a\xdb\x5a\x06\x0b\xe4\xd2\x07\x7e\xd7\x3d\x32\x82\x72\xae\x2e\xe0\xb1\xad\x5f\xb0\x2e\x2e\xfd\x0c\x01\xcc\x08\xc0\xac\xaf\x2a\xc0\xe0\x06\x08\x5d\xd0\x95\xae\x55\x17\x60\x70\x43\x84\x2e\xec\x4a\xd7\xaa\x0c\xb4\xa2\xcc\x11\xbc\x79\x57\xbc\x76\x71\xa0\x55\xc5\x9f\x42\xb9\x37\xed\x9c\x7c\xed\xf2\x00\x8b\x4b\x04\x34\x8c\x88\x68\x18\x11\x98\x7c\xf6\x48\x33\x9e\x83\x74\x40\xcb\x88\x88\x96\x41\xd1\xd5\x93\xcf\x1e\x63\x66\x53\x4c\x1d\x11\xf0\xa5\x3a\x22\xbe\x52\x53\x74\x56\xee\xd9\x83\x8b\x3f\x19\x63\xf2\x88\x80\xa6\x16\x11\x4d\x8d\xe2\xb3\x32\x2f\x08\xec\x9e\x3b\x9a\x61\xfa\x88\x80\x1b\x96\x22\xe2\x86\x25\x0a\x70\x6c\x95\xbe\xd0\x6e\xbc\x7e\x08\xe6\x1f\x72\xed\x33\xa2\xae\x7d\x46\xe8\xa5\xa7\xde\x33\x7f\x84\x5c\xfb\x8c\xa8\x6b\x9f\x24\x5f\xbb\x44\x26\xe0\x74\x10\x21\x57\x3f\x23\xea\xea\x27\x09\x88\xa8\x64\x04\xef\x21\x22\x13\xea\x02\x28\x89\x88\x08\x25\x40\xbf\x30\x45\x31\xa2\x94\x98\x92\x0a\xc5\x88\x68\x25\xac\xbe\x27\x55\xf7\xeb\xae\x52\xb1\x16\xca\x48\x9e\x38\xee\xd6\x35\x0f\xdb\xf2\x91\xb0\xcb\xea\x91\xb0\xc7\x4f\xdb\x26\xfc\x61\xa9\xd3\x3b\x6e\x8a\xf5\x1b\x29\x92\x27\xcf\x28\x94\xff\x3d\xbe\x71\xf8\x47\xf5\x8a\x31\xef\x4b\xb6\x3b\x5b\x23\x14\x57\xe6\x93\x3c\xbc\xb5\x5c\x7e\x7c\x10\x8d\x58\x4e\xf8\xb5\x48\xbc\xf2\xf1\xa3\x62\x9d\xbd\xaa\xad\x4b\xb5\xcd\xcd\xee\xfd\xdf\xaa\xdb\x94\xab\xb0\x90\x30\x59\x7e\x5d\x85\x82\x44\x6a\x34\xaa\xc0\xe2\x27\x56\x43\xe1\xad\x12\x29\x1a\xf6\x8a\x58\xae\x90\xae\xca\xf5\x81\x61\x32\xb1\x4a\x85\x69\x04\x72\x99\xd4\xa1\x62\x87\x0d\x05\xb6\x7f\x55\xbf\xeb\x7c\x93\x5f\x8b\x54\x09\x53\xde\x72\xbe\x43\xf6\xee\x45\x9a\x1d\x3d\x99\xf8\xf4\x64\x1e\x57\x0b\x17\xfe\xf9\xec\x3c\x7c\xe2\xbe\x2e\x4a\x6b\xdd\x68\x9d\x1c\x1c\xed\x0f\x16\x08\x7c\x7d\x77\x78\x83\x6b\x37\xf7\x4f\x54\x1e\xbd\x71\x2d\x8a\x43\x26\xcd\x85\x75\x9a\xbb\xbf\xc5\xc9\xfe\x3c\xfb\xf9\x6f\x00\x00\x00\xff\xff\xfb\xef\x19\xff\xa5\x39\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 14757, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
