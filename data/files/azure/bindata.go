// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package azure

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x9b\x5d\x73\x9b\x38\x17\xc7\xef\xf3\x29\x34\xbe\x6e\xf2\x18\xfc\xda\xdc\xb9\x7e\xe1\xc9\xa6\x93\x74\x83\xd3\xce\xee\x4e\xc7\xa3\x80\xe2\x52\x3b\x92\x2b\x89\xa4\x69\xa7\xdf\x7d\x07\xec\x60\x07\x10\xfc\x21\x64\x7b\xd3\x66\x40\xe8\xfc\xa4\x73\xfe\xe7\x1c\x30\xfc\x3c\x22\xa4\xc5\xe9\x1d\x6b\x9d\x92\x16\xfd\x11\x4a\xd6\x7a\x13\x1d\x62\xfc\xbe\x75\x4a\xfe\x39\x22\x84\x90\x96\xcf\xee\xe3\xa3\x84\xb4\xbe\xd1\xa7\xbf\x36\x52\xf8\xad\x23\x42\x3e\xc7\xe3\x25\x5b\x06\x82\xab\xe4\x9a\x9f\xf1\xbf\x84\xb4\xd6\xc2\xa3\x3a\x10\x3c\x9a\xff\x63\x20\x97\x01\x0f\x9e\xa6\x48\x2e\x8b\xce\x4d\xa9\xd2\xe4\xda\xdd\x9f\xfa\x21\x38\xdb\xcf\x17\x1f\x62\x54\xe9\x50\xb5\x76\x07\x3e\xc7\xff\xff\x7a\xf3\x22\x7b\xc4\x06\x2c\xda\xb8\xc9\x33\xf1\x90\x6b\x6e\xcc\xb8\x96\x74\x5d\xb6\x42\x6f\x3b\xac\xca\x22\xcf\xd6\xeb\x80\x8b\x40\xe5\x59\xbd\x10\x52\x7f\x21\xa0\x6d\x1e\x0d\xae\x01\x30\x67\xdf\x69\xae\x75\x57\x84\xb8\x75\x15\x0d\xae\x61\xfd\x13\x53\x3a\xd7\xc6\x9e\xc3\x38\x24\x07\xe3\x81\x29\x5d\x83\x62\x4c\xd7\xc1\xad\x90\x86\x58\x8b\x01\x00\xc3\x95\xd7\xfd\x3c\x7e\x33\x06\x4b\x82\x7b\x6b\xb2\x42\x70\xff\x19\xb2\x1b\xe6\x91\x71\xa0\x1f\x73\x63\x9c\x72\xea\x53\x12\x29\xab\x38\xc8\xe3\x71\x91\xb4\x2a\x04\x99\x90\x82\x6b\x51\x60\x76\xe7\x60\xc0\xf2\xce\xbf\xb8\x71\x97\x0a\xf2\x81\x86\x6b\x41\x5c\x4d\x35\xcb\x83\x78\x27\xe9\x8f\x60\x4d\xe2\x90\x2f\x44\xb8\x89\x07\xc6\xd1\x5e\x41\xe3\x92\xad\x29\xf7\xcd\x12\x9f\x86\x52\x6c\x58\xb9\xbc\xd9\x76\x1c\x6c\xf8\x82\xe9\x2f\x4c\x46\xb6\x73\x15\x1e\xc7\x19\x60\x3b\x8a\xb4\xaa\xa6\xc7\x54\xfa\xc1\xed\x6d\x9e\xd9\xeb\x73\x12\x59\x2e\x34\x19\xae\x22\xa3\xb8\xb9\xf7\x82\xfb\x82\x1b\xac\x95\xbb\x35\x5c\x55\x74\xa9\x1b\xf0\x25\xdd\x08\x99\x1b\x4d\xb1\xbd\x48\x20\x64\xa4\x0e\x53\x8a\x29\x6f\x46\x43\x69\x34\x12\x36\xff\x7f\xc1\x97\xe4\x5c\xf0\xa5\xb1\x36\x96\x5a\xae\x6e\xf4\x82\x3d\x6c\xb7\x92\x7c\xa2\x6b\x96\x1b\x51\xa3\x50\x45\xda\x0c\x80\x34\x42\x9f\x86\x56\xcb\x24\x1f\x03\x4f\x0b\x99\x9f\xa8\xf7\xd6\x13\x0f\x60\x08\x89\x17\xaa\x64\xb4\xd5\xa3\x78\x43\x5c\x1a\x68\x7a\x97\x4b\xf3\x07\xdd\x50\x5e\xbe\x0f\x5f\xa3\x61\xd5\x6c\x5f\x2a\xba\x2a\x30\x59\x2a\xae\xd8\x64\x8e\xbe\x92\x76\x30\xe0\x4a\x53\xee\xb1\xf9\xe3\x86\xe5\x34\x85\x6a\x15\xc6\x61\xae\x29\xf7\xa9\xf4\x17\xa3\xf6\xde\x9c\xcf\x94\x27\x83\x4d\xa2\x93\xbc\x31\x1e\xd5\x6c\x29\xe4\x63\xec\xb3\x63\xc5\x64\x70\x18\x4d\xde\x26\x9a\xdd\xda\x2f\x8f\xde\xb5\x4e\x49\xfb\x64\xd0\x1f\xee\xad\x04\x6a\xd5\x3a\x25\x76\x3b\x77\xaf\x32\x7c\x16\xc0\x67\xbd\x8c\xcf\x3a\x19\xf4\xd2\x78\x03\x10\xcf\x06\xf0\xec\x6a\x78\x76\x0a\xaf\x73\x92\xa1\xb3\x3a\x3d\x0c\xaf\x03\xe0\x75\xaa\xe1\x75\x53\x78\x83\x8c\x67\x87\x20\x5c\x17\x80\xeb\x56\x83\x1b\xa6\x5d\xdb\x4d\xd3\xf5\xdb\x20\x5d\x0f\xa0\xeb\xbd\xcc\xb3\x59\x3a\xd8\xb1\x7d\x80\xae\xff\x32\xc7\xda\x59\xcd\xa2\x9e\x1d\x00\x74\x83\x97\x79\xb6\xd7\xaf\xed\xd9\x21\x40\x37\x2c\xa6\x23\xc7\xc4\x13\x77\x9b\x50\xb3\xe3\x80\x6b\xc6\x55\x70\xcf\xc8\x53\xea\xad\xc1\xde\x19\xda\x18\xfb\x5b\x80\xfd\x6d\x93\xec\x56\x3f\x1d\xb4\x96\x5d\x9b\xde\x42\xaa\x8d\x55\x52\x6e\x7e\xdb\xde\x5b\x50\x2d\x2a\x29\x46\xbf\x6f\xf7\x27\x00\xfe\xc4\x40\x3f\x01\x4b\x69\x4e\xad\xea\x61\x95\x74\x02\x54\xd2\x89\xa1\x92\x9a\xe8\xd2\xf9\x36\x53\xaa\xac\x36\x08\x07\xd4\xd1\x89\xa1\x8e\x9a\xe0\xd2\xe9\x36\x5b\x0c\x6c\x94\x0e\x28\xa4\x13\x43\x21\x35\xd1\xa5\x65\x93\x2d\x06\x5d\x94\x0e\x91\xcd\xc4\x24\x1b\xd4\xb5\x39\xa5\x14\xe6\x43\x22\xcf\xaa\x18\x7a\x40\x31\x85\xf9\x90\xe0\xb3\x2a\x46\x5f\x79\x5a\xc4\xfd\x8b\x84\x9f\x55\x31\xfe\x90\xc4\x37\x84\x09\x17\xf7\x90\x8f\x9f\x0d\x7b\x46\x79\x6f\xff\x07\x09\x10\xa3\xb4\x6b\x50\x36\x98\x08\x31\xc8\x4e\x0d\xc8\x26\x13\x22\x46\xd9\xad\x41\xd9\x60\x62\xec\x61\x94\xbd\x3a\x61\x99\x96\x4f\x56\xdf\xb8\x7a\x50\xf9\xd4\xd1\x4f\xa3\x79\x1c\xe4\xac\xa3\xa0\x46\xf3\x39\xc8\x59\x47\x44\x8d\xe6\x75\x90\xb3\x8e\x8c\x9a\xcd\xef\xa0\x92\xac\x3a\x52\xb2\xdb\x99\x10\x6d\xe7\xc4\x28\x88\xea\x22\xcd\x90\x6b\x6a\x86\xdc\xfa\x55\x68\x00\xf2\x21\xfb\xe8\x9a\x36\xd1\xc4\x57\x5e\x7f\xba\x20\x1e\xd2\x0b\xb9\xa6\x5e\xc8\x84\x07\x54\x9e\x21\xc8\x87\xf4\x42\xae\xa9\x17\x32\xf1\x95\xd7\x9c\x5e\x1f\x0d\x3f\x2c\xfe\xaa\x06\x60\x79\x1a\x87\x77\x10\x6a\xc7\x5d\x63\x3f\x8e\xfa\xf8\x25\x7b\x08\x05\xa1\xb1\x23\x47\xbd\x9c\x4d\xdd\x96\x05\xde\xe9\xbb\x50\x4f\xee\x1a\x9b\x72\x63\x9e\x01\xb2\xb6\x6d\xa3\x5a\x06\xfb\x0a\xb7\xa0\xaf\x70\x5f\xd2\x98\xc3\x29\x11\xe4\x2c\xe8\x2b\xcc\x9c\x0d\xa6\x46\x10\xb3\xa0\xad\x30\x63\x36\x99\x22\x41\xce\x82\xb6\xc2\xcc\xd9\x60\xaa\x04\x9b\x0a\xb7\xa0\xa9\x28\x08\xcf\xf2\x06\xbd\x82\xda\x61\x25\xd5\x92\x52\xa3\xc9\x1d\x25\xad\x25\xa6\x46\x93\x3c\x4a\x5a\x4b\x4f\xcd\x26\x7b\x14\xb5\x96\xa4\x1a\x4e\xfa\xa8\xac\x8a\x9a\xf5\x82\x58\x05\xba\x75\x7b\x88\x35\xeb\x33\xa0\x57\x9a\x19\x3a\xa5\x19\x58\x96\x32\x3b\x69\x61\x01\x3a\x03\xf6\x70\x66\xd8\x3e\x13\x5b\x5a\xe7\x19\x99\x77\xb0\x88\x9c\x01\xcd\xc7\xcc\xd0\x7a\x98\xd8\xd2\xca\xce\x08\xbb\x8f\x05\xe0\x0c\xf8\xf1\x6f\x66\xf8\xf1\xcf\xc4\x96\xf9\xd1\x39\xab\x65\x30\x41\xce\x2c\xe0\x77\xdd\x67\x83\xa0\x98\x4b\x0b\xb8\x93\xd5\x2f\x98\x17\x67\x96\x42\x00\x95\x01\x50\xd5\x55\x05\xe8\x5c\x1b\xa1\xb3\xab\xd2\x95\xea\x02\x74\x6e\x17\xa1\xeb\x56\xa5\x2b\x55\x06\x9a\x51\x86\x08\xde\xb0\x2a\x5e\xb9\x38\xd0\xac\x62\xf5\xa1\xd8\xeb\x57\x0e\xbe\x72\x79\x80\xc9\xc5\x01\x0a\x86\x63\x28\x18\x0e\x18\x7c\xd9\x96\xa6\x33\x04\xe9\x80\x92\xe1\x18\x4a\x86\x89\x2e\x1d\x7c\xd9\x36\x66\xd0\xc7\xd4\xe1\x00\x37\xd5\x8e\xe1\x96\xda\x44\x97\x89\xbd\x6c\xe3\x62\xf5\x3a\x98\x3c\x1c\xa0\xa8\x39\x86\xa2\x66\xe2\xcb\x44\x9e\x6d\x67\x6b\x6e\x7b\x80\xe9\xc3\x01\x5e\x58\x72\x0c\x2f\x2c\x99\x00\x3b\x99\xd4\xd7\xcd\x16\x5e\xab\x0b\xc6\x1f\xf2\xec\xd3\x31\x3d\xfb\x74\xd0\x47\x4f\xb5\x7b\x7e\x07\x79\xf6\xe9\x98\x9e\x7d\x1a\xf9\xca\x25\xd2\x03\xbb\x03\x07\x79\xfa\xe9\x98\x9e\x7e\x1a\x01\x11\x95\xb4\xe1\x3d\x44\x64\x62\x7a\x00\x6a\x44\x44\x84\x62\xa3\x37\x4c\x8e\x8b\x28\xc5\x35\x49\xc5\xc4\x88\x68\xa5\x9b\xdc\x27\x25\xef\xeb\x7a\x92\xf9\x8c\xeb\x80\xae\x73\xde\xd6\xdd\x48\x71\x1f\xf8\x4c\x46\x86\x47\xc9\x27\x62\x4f\x33\x6e\xd6\xf4\x71\x26\xe4\x1d\xd5\xd1\xf9\xdb\x80\xad\x0f\xbe\x53\xa0\x9c\x0b\x1d\xbf\x76\x1c\xcd\xfb\x34\x63\x34\xe7\x17\x2a\xef\x98\x3c\xa1\x9b\x8d\xf2\x84\xcf\x4e\x3c\x71\xf7\x3f\x6f\x1d\x2a\xcd\xe4\xf1\x9e\x26\x9a\x32\x99\xcd\x74\x99\xcf\x55\xfa\x92\xdd\x15\xbf\x12\x90\x98\xeb\xf9\x5b\xcc\x7b\x9a\xed\xf7\x6e\x9e\xe0\xb7\xc1\x32\x5e\xe4\xdf\xd7\x57\xd3\xc5\x7c\x7a\x31\xba\x98\x2f\xce\x26\x07\x00\xd1\x4c\x42\x46\xfb\xba\xfd\x58\x6e\xa1\x19\xa7\x5c\x2f\x02\xff\xf9\xa0\xaf\x6a\xeb\xc9\xed\xe9\xf4\x14\x6b\x7a\xc3\x62\xce\x79\x7c\x9a\x9c\xa5\xae\x0e\xf8\x26\xd4\xdb\xcb\xbf\x27\xaf\x58\x1f\xac\xa6\x9c\xdd\xbd\x7e\xe7\x8e\xaf\xce\x3e\xcc\xcf\x2e\x2f\x4a\x56\xa0\xc2\x9b\x24\xf8\x8c\xeb\x38\x1c\x64\x5c\x8d\x7b\x30\xe8\x15\xd6\x34\x7e\x7f\x36\x2d\xf5\x87\xb7\x0e\x58\x81\x3f\xb6\xa7\x8d\x2b\x18\xc7\xa7\x5f\x8f\xdd\x9d\x8e\xaf\xa6\x73\x80\x5f\x31\x4f\x32\x5d\xb4\x06\x37\x67\x44\x7a\x1d\x79\x63\x92\xb5\x6c\xa8\x52\x0f\x42\xfa\x07\xeb\xd9\xfd\x95\xff\xfd\x40\x26\x0b\xb8\x5a\x48\xba\x7c\xb5\x64\xa0\xb6\xd3\xbf\x86\xb2\xdd\xf9\xe5\xd5\xc8\x99\x2e\x46\xe3\xf1\xe5\xf5\x45\xa1\x3f\x76\x14\x0b\xea\x79\x22\xe4\x06\x8f\xe4\x9e\x4c\x9c\x11\x6f\x16\xd9\xed\x16\x19\xe5\x8d\x6d\x40\xf0\xbb\x25\x9d\x4f\xff\x42\x96\xb3\x62\x8f\xf9\x4b\xc9\x9c\x28\x5e\x06\x39\x4f\x8f\xc7\xe3\x2b\x29\x3e\xab\xf0\x86\x49\xce\x34\x53\x1f\x99\x54\xf9\x9f\x11\xdf\x6f\xcf\x44\x13\x5b\x27\xc3\x13\xf3\x1b\xbc\xa9\xb3\xdb\xef\x98\x0f\x62\xcd\x67\xd1\x01\x2d\x43\x76\x50\x56\xbe\xd1\xec\xb1\xf8\xfb\xe6\xed\xd1\xa3\x43\xfe\x98\xfb\xe8\xd7\xbf\x01\x00\x00\xff\xff\x0e\x99\xe1\x66\x39\x3d\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 15673, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
