// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package azure

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x9b\x6f\x73\xe2\x38\xf2\xc7\x9f\xcf\xab\x50\xf1\x38\x61\xb1\xf9\xbb\xf3\x8c\x81\xc0\x8f\xdf\xe4\x32\xd9\x38\x99\xa9\xbb\xab\xad\x94\xb0\x3b\x44\x8b\x91\x38\x49\x26\x9b\xd9\x9a\xf7\x7e\x25\x9b\x80\xb1\x2d\xbb\xed\x30\xb7\x4f\x76\xa7\x70\xa3\xfe\x48\xdd\xdf\xee\xc6\xb1\xff\xfa\x40\x48\x8b\xd3\x0d\xb4\x3e\x92\x16\xfd\x1e\x49\x68\x5d\x98\x8f\x80\xef\x5a\x1f\xc9\xbf\x3f\x10\x42\x48\x2b\x80\x5d\xfc\x29\x21\xad\xff\xd0\xd6\x07\x42\x7e\x8f\x6d\x24\xac\x98\xe0\xea\x60\xf7\x57\xfc\x5f\x42\x5a\xa1\xf0\xa9\x66\x82\x9b\x35\xbf\x32\xb9\x62\x9c\xd1\xfd\x02\x87\xaf\x99\x6b\x57\x54\x69\xf2\xe0\x1d\x2f\x7d\x17\x1c\x8e\xeb\xc5\x1f\x01\x55\x3a\x52\xad\xfd\x07\xbf\xc7\xff\xff\x71\xf1\x2e\x7f\xc4\x45\x78\x74\xf1\x2e\x17\xe2\xa5\xd0\xdd\x04\xb8\x96\x34\xac\xda\xa1\x9f\x98\xd5\xd9\xe4\x22\x0c\x19\x17\x4c\x15\x79\xbd\x11\x52\x3f\x13\xa4\x6f\x6e\x8c\x1b\x00\xdc\xc3\x9f\xb4\xd0\xbb\x27\x22\xbc\x77\x65\x8c\x1b\x78\xff\x06\x4a\x17\xfa\x38\x72\x58\x4d\x0a\x30\x5e\x40\xe9\x06\x14\x13\x1a\xb2\x27\x21\x2d\xb9\x16\x03\x20\x1c\xd7\xde\xf7\x69\xfe\xe6\x1c\x56\x24\x77\xe2\xb2\x46\x72\xff\x16\xc1\x12\x7c\x32\x61\xfa\xb5\x30\xc7\x29\xa7\x01\x25\x46\x59\xe5\x49\x1e\xdb\x19\x69\xd5\x48\x32\x21\x05\xd7\xa2\xc4\xed\x3e\xc0\x08\xcf\xfb\xf8\xe2\x9d\x7b\x54\x90\x5b\x1a\x85\x82\x78\x9a\x6a\x28\x82\xf8\x24\xe9\x77\x16\x92\x38\xe5\x4b\x11\x96\xb1\x61\x9c\xed\x35\x34\x2e\x21\xa4\x3c\xb0\x4b\xfc\x2a\x92\x62\x0b\xd5\xf2\x86\xc4\x0e\xed\xf8\x06\xf4\x33\x48\xe3\xbb\x50\xe1\x71\x9e\x21\x7c\x9b\x4c\xab\xeb\x7a\x42\x65\xc0\x9e\x9e\x8a\xdc\x3e\x7c\x26\xc6\x73\xa9\xcb\x68\x6d\x9c\xe2\xdd\x5d\x0b\x1e\x08\x6e\xf1\x56\x1d\xd6\x68\x5d\x33\xa4\x1e\xe3\x2b\xba\x15\xb2\x30\x9b\x62\x7f\x46\x20\x64\xac\xd2\x25\xc5\x56\x37\x8d\x29\x35\x96\x68\xf7\xff\x27\xf8\x8a\x7c\x16\x7c\x65\xed\x8d\x95\x9e\xeb\x3b\xbd\x81\x97\xe4\x28\xc9\x37\x1a\x42\x61\x46\x8d\x23\x65\xb4\xc9\x10\x65\x84\xbe\x99\xd6\xab\x24\x5f\x99\xaf\x85\x2c\x2e\xd4\x47\xef\x87\x08\xe0\x10\x0e\x51\xa8\x53\xd1\xd6\xaf\xe2\x82\x78\x94\x69\xba\x29\xa4\xf9\x7f\xba\xa5\xbc\xfa\x1c\xfe\x30\x66\xf5\x7c\x7f\x51\x74\x5d\xe2\xb2\x52\x5c\xb1\xcb\x02\x7d\x1d\xc6\x41\xc6\x95\xa6\xdc\x87\xfb\xd7\x2d\x14\x0c\x85\x6a\x1d\xc5\x69\xae\x29\x0f\xa8\x0c\x1e\xc7\x9d\xa3\xbb\x00\x94\x2f\xd9\xf6\xa0\x93\x22\x1b\x9f\x6a\x58\x09\xf9\x1a\xc7\xec\x52\x81\x64\xe9\x6c\xf2\xb7\x66\x75\xe7\xb8\x3d\xba\x69\x7d\x24\x9d\xf6\x70\x30\x3a\x7a\x61\x6a\xdd\xfa\x48\xdc\x4e\xe1\x59\xe5\xf8\x1c\x04\x9f\xf3\x3e\x3e\xa7\x3d\xec\x67\xf1\x86\x48\x3c\x17\x81\xe7\xd6\xc3\x73\x33\x78\xdd\x76\x8e\xce\xe9\xf6\x71\x78\x5d\x04\x5e\xb7\x1e\x5e\x2f\x83\x37\xcc\x45\x76\x84\x84\xeb\x21\xe0\x7a\xf5\xe0\x46\xd9\xd0\xf6\xb2\x74\x83\x0e\x92\xae\x8f\xa0\xeb\xbf\x2f\xb2\x79\x3a\x74\x60\x07\x08\xba\xc1\xfb\x02\xeb\xe6\x35\x8b\x8d\xec\x10\x41\x37\x7c\x5f\x64\xfb\x83\xc6\x91\x1d\x21\xe8\x46\xe5\x74\xe4\x92\xf8\x62\xb3\x8d\x34\x5c\x32\xae\x81\x2b\xb6\x03\xf2\x56\x7a\x1b\xb0\x77\x47\x2e\x8e\xfd\x57\x04\xfb\xaf\xe7\x64\x77\x06\xd9\xa4\x75\xdc\xc6\xf4\x0e\xa6\xdb\x38\x15\xed\xe6\x6f\x3b\x7b\x07\xd5\x8b\x2a\x9a\xd1\xdf\x77\xfa\x53\x04\xfe\xd4\x42\x3f\x45\xb6\xd2\x82\x5e\xd5\xc7\x75\xd2\x29\xa2\x93\x4e\x2d\x9d\xd4\x46\x97\xad\xb7\xb9\x56\xe5\x74\x90\x70\x88\x3e\x3a\xb5\xf4\x51\x1b\x5c\xb6\xdc\xe6\x9b\x81\x8b\xa5\x43\x34\xd2\xa9\xa5\x91\xda\xe8\xb2\xb2\xc9\x37\x83\x1e\x96\x0e\x23\x9b\xa9\x4d\x36\xd8\xd0\x16\xb4\x52\x34\x1f\x26\xf3\x9c\x9a\xa9\x87\x68\xa6\x68\x3e\x4c\xf2\x39\x35\xb3\xaf\xba\x2c\xe2\xe3\x8b\x49\x3f\xa7\x66\xfe\x61\x0a\xdf\x08\x4d\xf8\xb8\x43\xc5\xf8\xc4\xec\x84\x72\xe7\xfe\x0f\x0a\x20\x8e\xd2\x6d\x40\x79\xc6\x42\x88\x83\xec\x36\x80\x3c\x67\x41\xc4\x51\xf6\x1a\x50\x9e\xb1\x30\xf6\x71\x94\xfd\x26\x69\x99\x95\x4f\x5e\xdf\x78\xf5\x60\xe5\xd3\x44\x3f\x67\xad\xe3\x48\xce\x26\x0a\x3a\x6b\x3d\x47\x72\x36\x11\xd1\x59\xeb\x3a\x92\xb3\x89\x8c\xce\x5b\xdf\x91\x4a\x72\x9a\x48\xc9\xed\xe4\x52\xb4\x53\x90\xa3\x48\x54\x0f\x33\x0c\x79\xb6\x61\xc8\x6b\xde\x85\x86\x48\x3e\xcc\x39\x7a\xb6\x43\xb4\xf1\x55\xf7\x9f\x1e\x12\x0f\x33\x0b\x79\xb6\x59\xc8\x86\x87\xe8\x3c\x23\x24\x1f\x66\x16\xf2\x6c\xb3\x90\x8d\xaf\xba\xe7\xf4\x07\xd8\xf4\xc3\xe5\x5f\xdd\x04\xac\x2e\xe3\xe8\x13\x44\x8d\xe3\x9e\x75\x1e\xc7\xc6\xf8\x3d\x67\x88\x4a\x42\xeb\x44\x8e\x8d\x72\xbe\x74\x3b\x0e\xf2\x97\xbe\x87\x9a\xc9\x3d\xeb\x50\x6e\xad\x33\x88\xaa\xed\xba\x58\x2d\x23\xe7\x0a\xaf\x64\xae\xf0\xde\x33\x98\xa3\x4b\x22\x92\xb3\x64\xae\xb0\x73\x9e\xb1\x34\x22\x31\x4b\xc6\x0a\x3b\xe6\x39\x4b\x24\x92\xb3\x64\xac\xb0\x73\x9e\xb1\x54\x22\x87\x0a\xaf\x64\xa8\x28\x49\xcf\xea\x01\xbd\x86\xda\xd1\x4a\x6a\x24\xa5\xb3\x16\x77\x2c\x69\x23\x31\x9d\xb5\xc8\x63\x49\x1b\xe9\xe9\xbc\xc5\x1e\x8b\xda\x48\x52\x67\x2e\xfa\x58\x59\x95\x0d\xeb\x25\xb9\x8a\x98\xd6\xdd\x11\x6e\x58\x9f\x21\x66\xa5\x99\x65\x52\x9a\x21\xdb\x52\xee\x24\x1d\x5c\x82\xce\x10\x67\x38\xb3\x1c\x9f\x8d\x2d\xab\xf3\x9c\xcc\xbb\xb8\x8c\x9c\x21\x86\x8f\x99\x65\xf4\xb0\xb1\x65\x95\x9d\x13\xf6\x00\x97\x80\x33\xc4\x1f\xff\x66\x96\x3f\xfe\xd9\xd8\x72\x7f\x74\xce\x6b\x19\x59\x20\x67\x0e\xe2\xef\xba\x27\x46\xa8\x9c\xcb\x0a\xb8\x9b\xd7\x2f\xb2\x2e\xce\x1c\x85\x01\x54\x16\x40\xd5\x54\x15\xc8\xe0\xba\x18\x3a\xb7\x2e\x5d\xa5\x2e\x90\xc1\xed\x61\xe8\x7a\x75\xe9\x2a\x95\x81\xad\x28\x23\x0c\xde\xa8\x2e\x5e\xb5\x38\xb0\x55\xc5\x19\xa0\x72\x6f\x50\x3b\xf9\xaa\xe5\x81\x2c\x2e\x73\x44\xc3\x98\x5b\x1a\xc6\x1c\x99\x7c\xf9\x91\xa6\x3b\x42\xd2\x21\x5a\xc6\xdc\xd2\x32\x6c\x74\xd9\xe4\xcb\x8f\x31\xc3\x01\x4e\x1d\x73\xc4\x8f\xea\xb9\xe5\x27\xb5\x8d\x2e\x97\x7b\xf9\xc1\xc5\xe9\x77\x71\xf2\x98\x23\x9a\xda\xdc\xd2\xd4\x6c\x7c\xb9\xcc\x73\xdd\x7c\xcf\xed\x0c\x71\xfa\x98\x23\x1e\x58\x9a\x5b\x1e\x58\xb2\x01\x76\x73\xa5\xaf\x97\x6f\xbc\x4e\x0f\x99\x7f\x98\x7b\x9f\x73\xdb\xbd\xcf\x39\xf6\xd6\x53\xe3\x99\x7f\x8e\xb9\xf7\x39\xb7\xdd\xfb\xb4\xf2\x55\x4b\xa4\x8f\x9c\x0e\xe6\x98\xbb\x9f\x73\xdb\xdd\x4f\x2b\x20\x46\x25\x1d\xf4\x19\x62\x64\x62\xbb\x01\x6a\x45\xc4\x08\xc5\xc5\xfe\x60\x9a\x7b\x18\xa5\x78\x36\xa9\xd8\x18\x31\x5a\xe9\x1d\x7e\x27\x1d\x9e\xd7\xf5\x25\x04\xc0\x35\xa3\x61\xc1\xd3\xba\x5b\x29\x76\x2c\x00\x69\x1c\x8f\x0f\xaf\x85\xbd\xad\xb8\x0d\xe9\xeb\x4c\xc8\x0d\xd5\xe6\xfa\x13\x83\x30\xf5\x9e\x02\xe5\x5c\xe8\xf8\xb1\x63\xb3\xee\xdb\x8a\x66\xcd\x67\x2a\x37\x20\xdb\x74\xbb\x55\xbe\x08\xa0\xed\x8b\xcd\x2f\x7e\x18\x29\x0d\xf2\xf2\x48\x63\x96\x3c\xac\x66\xfb\x5a\xc0\x55\xf6\x2b\xfb\x6f\xfc\x38\x80\xc4\x5c\xa7\x4f\x31\x1f\x69\x92\x77\xdc\x7c\xc1\x9f\xd8\x2a\xde\xe4\xbf\x1e\xee\xae\x1e\xef\xaf\x6e\xc6\x37\xf7\x8f\x8b\x69\x0a\xc0\xac\x24\xa4\x39\xd7\xe4\x05\xb9\x47\x0d\x9c\x72\xfd\xc8\x82\x53\xa3\x3f\x54\x12\xc9\xe4\x72\x76\x89\x90\x2e\x21\xe6\xbc\x8f\x2f\x93\x45\xe6\xdb\x8c\x6f\x23\x9d\x7c\xfd\xcf\xc3\x23\xd6\xa9\xdd\x54\xb3\x7b\x0f\x9f\xbc\xc9\xdd\xe2\xf6\x7e\xf1\xe5\xa6\x62\x07\x2a\x5a\x1e\x92\xcf\xba\x8f\xb4\x91\x75\x37\x5e\xca\xe8\x27\xec\x69\x72\xbd\xb8\xaa\x8c\x87\x1f\x32\x28\x89\x47\x72\xd9\xba\x83\x49\x7c\xf9\xe7\xb1\x7b\x57\x93\xbb\xab\x7b\x04\xbf\x02\x5f\x82\x2e\xdb\x83\x57\x60\x91\xdd\x47\x91\xcd\x61\x2f\x5b\xaa\xd4\x8b\x90\x41\x6a\x3f\xfb\x7f\x15\xbf\x3f\x90\xab\x02\x9e\x16\x92\xae\x7e\x5a\x31\x50\xc9\xf2\x3f\x43\xd9\xde\xfd\x97\xbb\xf1\xfc\xea\x71\x3c\x99\x7c\x79\xb8\x29\x8d\xc7\x9e\xe2\x91\xfa\xbe\x88\xb8\x25\x22\x85\x17\x0f\xc1\x88\x0f\x8b\xec\x4f\x8b\x8c\x8b\x6c\xcf\x20\xf8\xfd\x96\x3e\x5f\xfd\x13\xb3\x9d\x35\xbc\x16\x6f\x25\x77\xa1\x7c\x1b\xe4\x73\xd6\x1e\x9f\x5f\x87\xe6\xb3\x8e\x96\x20\x39\x68\x50\x5f\x41\xaa\xe2\xd7\x88\x77\xc9\x15\xb3\xb0\xd3\x1e\xb6\xed\xfd\x3d\x73\x35\x79\x77\x39\x95\x6b\x01\x98\x0f\xb4\x8c\x20\x97\x49\x01\x3c\xd1\x28\xd4\xde\x16\xfc\x4c\x7e\x8a\xc0\x8b\x96\x1c\xe2\x7d\x39\x9d\xb6\xdb\xeb\xb5\x3b\xed\xce\x2f\xa9\x5b\x20\xa6\xc3\x83\xdc\x31\x1f\x4e\x2c\x3b\x05\x76\x34\x8c\x5f\xc5\x81\x1b\x11\xc0\x84\x05\x52\xed\x79\x52\x26\xc0\xe9\x32\x84\x49\xd2\x0e\xff\x21\x38\xd3\x42\x32\x1e\x87\xfb\x4d\x23\x2d\x9b\xf9\xb5\x58\xad\x12\xdb\xc2\x45\x8d\x57\xab\x49\x98\x5c\x98\x82\xd2\x8c\x1f\xde\x16\x7a\x73\x79\x09\x21\x55\x9a\xf9\x0a\xa8\xf4\x9f\x4f\x00\xd2\x17\xf6\xab\xdf\xc1\x36\x64\x3e\x55\xe9\x1b\x2b\xe6\x90\xb9\xf2\x40\xee\x40\x2e\x6e\x53\x67\x94\x7a\xda\x3a\xb1\x99\x8a\x0d\x65\xfb\x72\x17\x6f\xab\x6d\x0e\x2d\x3c\x39\xc7\x60\xc3\x94\x49\x8a\x89\xe0\x5a\x8a\x38\x49\x6f\xe8\x06\xd4\x96\xfa\x70\xcd\x9e\xc0\x7f\xf5\x43\xb8\xb8\x66\x1b\xa6\xef\x28\x5f\x81\xbc\xf0\x92\x10\xed\x93\xf7\xe2\xd6\x24\x95\xd2\xc0\xf5\x57\x11\x46\x1b\xb8\x36\xb9\x7e\x31\xdd\xa7\x41\x92\xe9\x93\x90\x2a\x75\x71\x07\x4a\x44\xd2\x87\xdf\x22\xa1\x69\x1a\x62\x43\x0d\x5c\x26\x3b\x06\x71\xd4\xdd\x5e\xda\x90\x83\x7e\x11\x72\x7d\x9b\xaa\xa2\x4f\x21\xe5\x1c\x42\x6b\x24\xc7\x21\x48\x6d\x8b\xb9\x30\x07\xdb\x0a\x60\xc9\x28\x2f\xf2\x23\x42\xe6\xbf\xa6\xbd\x71\xc1\x0b\x92\xe6\x1b\x2c\x9f\x85\x58\xdf\x8b\x35\xf0\x71\xa4\x9f\xb9\x2d\x6f\xee\x96\xd4\x37\x06\xdf\x6d\x06\xe3\xdb\x85\x8a\x03\xfb\x89\x2a\xe6\x8f\xa3\x80\x69\xab\xe9\x7e\x3f\x63\xad\x99\x9f\x37\xda\x8a\x30\xf4\x42\x80\xed\x82\x6b\x90\xbb\xb8\xf0\x77\x0b\x13\xf9\x36\x5a\x86\xcc\x8f\x33\x29\xad\xe8\x63\x7d\xf9\xf0\xe3\xbf\x01\x00\x00\xff\xff\x88\xfa\xd5\x16\xd5\x40\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 16597, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
