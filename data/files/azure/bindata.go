// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package azure

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x9b\x5d\x73\xe2\x38\xd6\xc7\xef\xfb\x53\xb8\xb8\x4e\x18\x6c\x5e\xa7\xef\x68\x08\x3c\x3c\xc9\x92\x4c\x4c\xba\x6b\x77\x6b\x2a\x25\xec\x13\xa2\xc1\x48\x5e\x49\x26\x93\x9e\xea\xef\xbe\x25\x9b\x80\x63\x5b\xf6\xb1\x43\xef\xdc\xcc\x74\xe1\x83\xce\x4f\x3a\xff\xf3\x82\x63\xff\xf5\xc9\xb2\x5a\x8c\xec\xa0\xf5\xd9\x6a\x91\xef\x91\x80\xd6\x85\xfe\x08\xd8\xbe\xf5\xd9\xfa\xf7\x27\xcb\xb2\xac\x96\x0f\xfb\xf8\x53\xcb\x6a\xfd\x87\xb4\x3e\x59\xd6\xef\xb1\x8d\x80\x0d\xe5\x4c\x1e\xed\xfe\x8a\xff\x6b\x59\xad\x80\x7b\x44\x51\xce\xf4\x9a\x5f\xa9\xd8\x50\x46\xc9\x61\x81\xe3\xd7\xf4\xb5\x2b\x22\x95\xf5\xe0\x9e\x2e\x7d\xe7\x0c\x4e\xeb\xc5\x1f\x01\x91\x2a\x92\xad\xc3\x07\xbf\xc7\xff\xff\x71\xf1\x21\x7f\x96\x83\xf0\xe8\xe0\x5d\x2e\xf8\x4b\xa1\xbb\x09\x30\x25\x48\x50\xb5\x43\x2f\x31\xab\xb3\xc9\x45\x10\x50\xc6\xa9\x2c\xf2\xba\xe4\x42\x3d\x5b\x48\xdf\x4c\x1b\x37\x00\x58\xc1\x9f\xa4\xd0\xbb\xcb\x23\xbc\x77\xa9\x8d\x1b\x78\xff\x06\x52\x15\xfa\x38\x71\x18\x4d\x0a\x30\x5e\x40\xaa\x06\x14\x13\x12\xd0\x27\x2e\x0c\x5a\x8b\x01\x10\x8e\x6b\xef\xfb\xbd\x7e\x73\x0e\x2b\xc4\x9d\xb8\xac\x21\xee\xdf\x22\x58\x83\x67\x4d\xa8\x7a\x2d\xd4\x38\x61\xc4\x27\x96\xce\xac\x72\x91\xc7\x76\x3a\xb5\x6a\x88\x8c\x0b\xce\x14\x2f\x71\x7b\x08\x30\xc2\xf3\x21\xbe\x78\xe7\x2e\xe1\xd6\x1d\x89\x02\x6e\xb9\x8a\x28\x28\x82\xf8\x22\xc8\x77\x1a\x58\xb1\xe4\x4b\x11\xd6\xb1\x61\xac\xf6\x1a\x39\x2e\x20\x20\xcc\x37\xa7\xf8\x55\x24\x78\x08\xd5\xe9\x0d\x89\x1d\xda\xf1\x12\xd4\x33\x08\xed\xbb\x30\xc3\x63\x9d\x21\x7c\x6b\xa5\xd5\x75\x3d\x21\xc2\xa7\x4f\x4f\x45\x6e\x1f\xae\x2d\xed\xb9\xd4\x65\xb4\xd5\x4e\xf1\xee\x6e\x38\xf3\x39\x33\x78\xab\x0e\x6b\xb4\xad\x19\x52\x97\xb2\x0d\x09\xb9\x28\x54\x53\xec\x4f\x27\x88\x35\x96\xe9\x92\x62\xaa\x9b\xda\x94\x68\x4b\xb4\xfb\xff\xe3\x6c\x63\x5d\x73\xb6\x31\xf6\xc6\x4a\xcf\xf5\x9d\x2e\xe1\x25\x39\x4a\xeb\x1b\x09\xa0\x50\x51\xe3\x48\xea\xdc\xa4\x88\x32\x42\xde\x4c\xeb\x55\x92\xaf\xd4\x53\x5c\x14\x17\xea\x93\xf7\x63\x04\x70\x08\xc7\x28\xd4\xa9\x68\xdb\x57\x7e\x61\xb9\x84\x2a\xb2\x2b\xa4\xf9\x7f\x12\x12\x56\x7d\x0e\x7f\x68\xb3\x7a\xbe\x6f\x25\xd9\x96\xb8\xac\x4c\xae\xd8\x65\x41\x7e\x1d\xc7\x41\xca\xa4\x22\xcc\x83\xd5\x6b\x08\x05\x43\xa1\xdc\x46\xb1\xcc\x15\x61\x3e\x11\xfe\xe3\xb8\x73\x72\xe7\x83\xf4\x04\x0d\x8f\x79\x52\x64\xe3\x11\x05\x1b\x2e\x5e\xe3\x98\x5d\x4a\x10\x34\xad\x26\x2f\xd4\xab\xdb\xa7\xed\x91\x5d\xeb\xb3\xd5\x69\x0f\x07\xa3\x93\x17\x2a\xb7\xad\xcf\x96\xd3\x29\x3c\xab\x1c\x9f\x8d\xe0\xb3\x3f\xc6\x67\xb7\x87\xfd\x2c\xde\x10\x89\xe7\x20\xf0\x9c\x7a\x78\x4e\x06\xaf\xdb\xce\xd1\xd9\xdd\x3e\x0e\xaf\x8b\xc0\xeb\xd6\xc3\xeb\x65\xf0\x86\xb9\xc8\x8e\x90\x70\x3d\x04\x5c\xaf\x1e\xdc\x28\x1b\xda\x5e\x96\x6e\xd0\x41\xd2\xf5\x11\x74\xfd\x8f\x45\x36\x4f\x87\x0e\xec\x00\x41\x37\xf8\x58\x60\x9d\x7c\xce\x62\x23\x3b\x44\xd0\x0d\x3f\x16\xd9\xfe\xa0\x71\x64\x47\x08\xba\x51\x39\x9d\x75\x69\x79\x7c\x17\x46\x0a\x2e\x29\x53\xc0\x24\xdd\x83\xf5\x56\x7a\x1b\xb0\x77\x47\x0e\x8e\xfd\x57\x04\xfb\xaf\xe7\x64\xb7\x07\x59\xd1\xda\x4e\x63\x7a\x1b\xd3\x6d\xec\x8a\x76\xf3\xb7\x9d\xbd\x8d\xea\x45\x15\xcd\xe8\xef\x3b\xfd\x29\x02\x7f\x6a\xa0\x9f\x22\x5b\x69\x41\xaf\xea\xe3\x3a\xe9\x14\xd1\x49\xa7\x86\x4e\x6a\xa2\xcb\xd6\xdb\x5c\xab\xb2\x3b\x48\x38\x44\x1f\x9d\x1a\xfa\xa8\x09\x2e\x5b\x6e\xf3\xcd\xc0\xc1\xd2\x21\x1a\xe9\xd4\xd0\x48\x4d\x74\xd9\xb4\xc9\x37\x83\x1e\x96\x0e\x93\x36\x53\x53\xda\x60\x43\x5b\xd0\x4a\xd1\x7c\x18\xe5\xd9\x35\xa5\x87\x68\xa6\x68\x3e\x8c\xf8\xec\x9a\xea\xab\x2e\x8b\xf8\xf8\x62\xe4\x67\xd7\xd4\x1f\xa6\xf0\x8d\xd0\x84\x8f\x7b\x54\x8c\xdf\x99\xbd\xa3\xdc\x3b\xff\x83\x02\x88\xa3\x74\x1a\x50\x9e\xb1\x10\xe2\x20\xbb\x0d\x20\xcf\x59\x10\x71\x94\xbd\x06\x94\x67\x2c\x8c\x7d\x1c\x65\xbf\x89\x2c\xb3\xe9\x93\xcf\x6f\x7c\xf6\x60\xd3\xa7\x49\xfe\x9c\xb5\x8e\x23\x39\x9b\x64\xd0\x59\xeb\x39\x92\xb3\x49\x12\x9d\xb5\xae\x23\x39\x9b\xa4\xd1\x79\xeb\x3b\x32\x93\xec\x26\xa9\xe4\x74\x72\x12\xed\x14\x68\x14\x89\xea\x62\x86\x21\xd7\x34\x0c\xb9\xcd\xbb\xd0\x10\xc9\x87\x39\x47\xd7\x74\x88\x26\xbe\xea\xfe\xd3\x43\xe2\x61\x66\x21\xd7\x34\x0b\x99\xf0\x10\x9d\x67\x84\xe4\xc3\xcc\x42\xae\x69\x16\x32\xf1\x55\xf7\x9c\xfe\x00\x2b\x3f\x9c\xfe\xea\x0a\xb0\xba\x8c\xa3\x4f\x10\x35\x8e\xbb\xc6\x79\x1c\x1b\xe3\x8f\x9c\x21\x4a\x84\xc6\x89\x1c\x1b\xe5\x7c\xe9\xb6\x6d\xe4\x2f\x7d\x17\x35\x93\xbb\xc6\xa1\xdc\x58\x67\x10\x55\xdb\x71\xb0\xb9\x8c\x9c\x2b\xdc\x92\xb9\xc2\xfd\xc8\x60\x8e\x2e\x89\x48\xce\x92\xb9\xc2\xcc\x79\xc6\xd2\x88\xc4\x2c\x19\x2b\xcc\x98\xe7\x2c\x91\x48\xce\x92\xb1\xc2\xcc\x79\xc6\x52\x89\x1c\x2a\xdc\x92\xa1\xa2\x44\x9e\xd5\x03\x7a\x8d\x6c\x47\x67\x52\xa3\x54\x3a\x6b\x71\xc7\x92\x36\x4a\xa6\xb3\x16\x79\x2c\x69\xa3\x7c\x3a\x6f\xb1\xc7\xa2\x36\x4a\xa9\x33\x17\x7d\x6c\x5a\x95\x0d\xeb\x25\x5a\x45\x4c\xeb\xce\x08\x37\xac\xcf\x10\xb3\xd2\xcc\x30\x29\xcd\x90\x6d\x29\x77\x92\x36\x4e\xa0\x33\xc4\x19\xce\x0c\xc7\x67\x62\xcb\xe6\x79\x2e\xcd\xbb\x38\x45\xce\x10\xc3\xc7\xcc\x30\x7a\x98\xd8\xb2\x99\x9d\x4b\xec\x01\x4e\x80\x33\xc4\x1f\xff\x66\x86\x3f\xfe\x99\xd8\x72\x7f\x74\xce\xe7\x32\xb2\x40\xce\x6c\xc4\xdf\x75\xdf\x19\xa1\x34\x97\x4d\xe0\x6e\x3e\x7f\x91\x75\x71\x66\x4b\x0c\xa0\x34\x00\xca\xa6\x59\x81\x0c\xae\x83\xa1\x73\xea\xd2\x55\xe6\x05\x32\xb8\x3d\x0c\x5d\xaf\x2e\x5d\x65\x66\x60\x2b\xca\x08\x83\x37\xaa\x8b\x57\x9d\x1c\xd8\xaa\x62\x0f\x50\xda\x1b\xd4\x16\x5f\x75\x7a\x20\x8b\xcb\x1c\xd1\x30\xe6\x86\x86\x31\x47\x8a\x2f\x3f\xd2\x74\x47\x48\x3a\x44\xcb\x98\x1b\x5a\x86\x89\x2e\x2b\xbe\xfc\x18\x33\x1c\xe0\xb2\x63\x8e\xf8\x51\x3d\x37\xfc\xa4\x36\xd1\xe5\xb4\x97\x1f\x5c\xec\x7e\x17\x97\x1e\x73\x44\x53\x9b\x1b\x9a\x9a\x89\x2f\xa7\x3c\xc7\xc9\xf7\xdc\xce\x10\x97\x1f\x73\xc4\x03\x4b\x73\xc3\x03\x4b\x26\xc0\x6e\xae\xf4\xf5\xf2\x8d\xd7\xee\x21\xf5\x87\xb9\xf7\x39\x37\xdd\xfb\x9c\x63\x6f\x3d\x35\x9e\xf9\xe7\x98\x7b\x9f\x73\xd3\xbd\x4f\x23\x5f\x75\x8a\xf4\x91\xd3\xc1\x1c\x73\xf7\x73\x6e\xba\xfb\x69\x04\xc4\x64\x49\x07\x7d\x86\x98\x34\x31\xdd\x00\x35\x22\x62\x12\xc5\xc1\xfe\x60\x9a\xbb\x98\x4c\x71\x4d\xa9\x62\x62\xc4\xe4\x4a\xef\xf8\x3b\xe9\xf8\xbc\xae\x27\xc0\x07\xa6\x28\x09\x0a\x9e\xd6\x0d\x05\xdf\x53\x1f\x84\x76\x3c\x3e\xbe\x16\xf6\xb6\x62\x18\x90\xd7\x19\x17\x3b\xa2\xf4\xf5\x27\x0a\x41\xea\x3d\x05\xc2\x18\x57\xf1\x63\xc7\x7a\xdd\xb7\x15\xf5\x9a\xcf\x44\xec\x40\xb4\x49\x18\x4a\x8f\xfb\xd0\xf6\xf8\xee\x17\x2f\x88\xa4\x02\x71\x79\xa2\xd1\x4b\x1e\x57\x33\x7d\xcd\x67\x32\xfb\x95\xc3\x37\x7e\x1c\x41\x62\xae\xf7\x4f\x31\x9f\x68\x92\x77\xdc\x3c\xce\x9e\xe8\x26\xde\xe4\xbf\x1e\xee\xaf\x1e\x57\x57\xcb\xf1\x72\xf5\xb8\x98\xa6\x00\xf4\x4a\x5c\xe8\x73\x4d\x5e\x90\x7b\x54\xc0\x08\x53\x8f\xd4\x7f\x6f\xf4\x87\x4c\x22\x99\x5c\xce\x2e\x11\x90\x35\xc4\x9c\xab\xf8\xb2\xb5\xc8\x7c\x9b\xb2\x30\x52\xc9\xd7\xff\x3c\x3e\x62\x9d\xda\x4d\x35\xbb\xfb\xf0\xc5\x9d\xdc\x2f\xee\x56\x8b\xdb\x65\xc5\x0e\x64\xb4\x3e\x8a\xcf\xb8\x8f\xb4\x91\x71\x37\x6e\xca\xe8\x27\xec\x69\x72\xb3\xb8\xaa\x8c\x87\x17\x50\x28\x89\x47\x72\xd9\xb8\x83\x49\x7c\xf9\xe7\xb1\xbb\x57\x93\xfb\xab\x15\x82\x5f\x82\x27\x40\x95\xed\xc1\x2d\xb0\xc8\xee\xa3\xc8\xe6\xb8\x97\x90\x48\xf9\xc2\x85\x9f\xda\xcf\xe1\x5f\xc5\xef\x0f\xe4\xaa\x80\xab\xb8\x20\x9b\x9f\x56\x0c\x64\xb2\xfc\xcf\xc8\x6c\x77\x75\x7b\x3f\x9e\x5f\x3d\x8e\x27\x93\xdb\x87\x65\x69\x3c\x0e\x14\x8f\xc4\xf3\x78\xc4\x0c\x11\x29\xbc\x78\x0c\x46\x7c\x58\xd6\xe1\xb4\xac\x71\x91\xed\x19\x12\xfe\xb0\xa5\xeb\xab\x7f\x62\xb6\xb3\x85\xd7\xe2\xad\xe4\x2e\x94\x6f\xc3\xba\xce\xda\xe3\xf5\x75\x6c\x3e\xdb\x68\x0d\x82\x81\x02\xf9\x15\x84\x2c\x7e\x8d\x78\x9f\x5c\xd1\x0b\xdb\xed\x61\xdb\xdc\xdf\x33\x57\x93\x77\x97\x53\x5a\xf3\x41\x7f\xa0\x44\x04\x39\x25\xf9\xf0\x44\xa2\x40\xb9\x21\x78\xef\xbf\x73\xe8\x4b\x8b\xf0\x9e\xb0\x4d\xfc\x76\xb4\xdd\x69\x3b\xbd\x5e\xbb\xd3\xee\xfc\x92\xba\x0f\xa2\xdb\x3c\x88\x3d\xf5\x60\x52\xf4\x8d\x4e\x81\x3d\x09\xe2\xf7\x72\x60\xc9\x7d\x98\x50\x5f\xc8\x03\x5c\xca\x04\x18\x59\x07\x6f\x2b\xfe\x83\x33\xaa\xb8\xa0\x2c\x8e\xfd\x5b\xc2\xb4\x4c\xe6\x37\x7c\xb3\x49\x6c\x0b\x17\xd5\x5e\x8d\x26\x41\x72\x61\x0a\x52\x51\x76\x7c\x75\xe8\xcd\xe5\x25\x04\x44\x2a\xea\x49\x20\xc2\x7b\x7e\x07\x90\xbe\x70\x58\xfd\x1e\xc2\x80\x7a\x44\xa6\xef\xb2\xe8\x13\x67\xd2\x05\xb1\xd7\x07\x95\x3a\xa3\xd4\xa3\xd7\x89\xcd\x94\xef\x08\x4d\xe4\xd9\xd6\xc7\x15\xbc\x3b\x41\x7f\x47\xa5\xd6\xc6\x84\x33\x25\x78\xac\xd5\x25\xd9\x81\x0c\x89\x07\x37\xf4\x09\xbc\x57\x2f\x80\x8b\x1b\xba\xa3\x2a\x8e\x86\xb8\x70\x93\x20\x1d\x34\x7c\x71\xa7\xb5\x25\x15\x30\xf5\x95\x07\xd1\x0e\x6e\xb4\xe4\x2f\xa6\x07\x35\x24\x82\x9f\x04\x44\xca\x8b\x7b\x90\x3c\x12\x1e\xfc\x16\x71\x45\xd2\x10\x3b\x52\x24\x90\x41\x1c\x70\xa7\x97\xb6\x64\xa0\x5e\xb8\xd8\xde\xa5\xaa\xa9\xd6\xff\xe5\x53\x40\x18\x83\xc0\x18\xc9\x71\x00\x42\x99\x62\xce\xf5\xc1\xb6\x7c\x58\x53\xc2\x8a\x9c\xf1\x80\x7a\xaf\x69\x97\x8c\xb3\x02\xd1\x7c\x83\xf5\x33\xe7\xdb\x15\xdf\x02\x1b\x47\xea\x99\x99\x74\x73\xbf\x26\x9e\x36\xf8\x9e\x37\x70\x6f\x67\xab\x9b\xdb\xc9\xf5\xc3\xdd\xe3\xdd\x78\xb9\x98\x98\x96\x18\xdf\x2d\x64\x1c\xfa\x2f\x44\x52\x6f\x1c\xf9\x54\x19\x4d\x0f\x3b\x1e\x2b\x45\xbd\xbc\x51\xc8\x83\xc0\x0d\x00\xc2\x05\x53\x20\xf6\x71\x9f\xe8\x16\x4a\xfd\x2e\x5a\x07\xd4\x5b\xdc\x65\x0a\xc0\xa9\x1c\x7d\xfa\xf1\xdf\x00\x00\x00\xff\xff\x46\x38\xc2\xb1\x04\x41\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 16644, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
