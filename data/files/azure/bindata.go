// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package azure

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x9b\x5d\x73\x9b\xba\x16\x86\xef\xf3\x2b\x34\xbe\x6e\x72\x0c\xfe\x6c\xee\x5c\x7f\x70\x72\xd2\x49\x7a\x82\xd3\xce\xde\x7b\x3a\x1e\x05\x14\x97\x1a\x4b\xde\x42\x24\x4d\x3b\xf9\xef\x7b\xc0\x0e\xb6\x01\xc1\x0b\x21\xbb\x37\x4d\xc7\x12\x5a\x8f\xb4\xd6\xbb\xd6\x32\x86\x5f\x27\x84\xb4\x38\x5d\xb3\xd6\x39\x69\xd1\x9f\xa1\x64\xad\x77\xd1\x47\x8c\x3f\xb4\xce\xc9\x5f\x27\x84\x10\xd2\x72\xd9\x43\xfc\x29\x21\xad\xbf\x69\xeb\x84\x90\xaf\xf1\x1c\xc9\x96\x9e\xe0\x41\x32\xef\x57\xfc\x2f\x21\x2d\x5f\x38\x54\x79\x82\x47\x6b\x7e\xf6\xe4\xd2\xe3\x1e\xdd\x2d\x90\x5c\x16\x8d\x4d\x69\xa0\xc8\xad\xbd\x1f\xfa\x29\x38\xdb\xaf\x17\x7f\xc4\x68\xa0\xc2\xa0\xb5\xfb\xe0\x6b\xfc\xf7\xf9\xdd\xab\xec\x11\x13\xb0\x68\xe2\x26\x2f\xc4\x63\xae\xb9\x31\xe3\x4a\x52\xbf\x6c\x87\xce\x76\x5a\x95\x4d\x5e\xf8\xbe\xc7\x85\x17\xe4\x59\xbd\x12\x52\x7d\x23\xa0\x6d\x1e\x4d\xae\x01\x30\x67\x3f\x68\xae\x75\x5b\x84\xb8\xf5\x20\x9a\x5c\xc3\xfa\x17\x16\xa8\x5c\x1b\x7b\x0e\xed\x94\x1c\x8c\x47\x16\xa8\x1a\x14\x63\xea\x7b\xf7\x42\x6a\x62\x2d\x06\x00\x0c\x57\xde\xf7\x71\xfc\x66\x0c\x96\x04\xf7\xd6\x64\x85\xe0\xfe\x7f\xc8\xee\x98\x43\xc6\x9e\x7a\xca\x8d\x71\xca\xa9\x4b\x49\xa4\xac\xe2\x20\x8f\xe7\x45\xd2\xaa\x10\x64\x42\x0a\xae\x44\x81\xd9\x9d\x83\x01\xcb\x3b\xff\xe2\xc6\x6d\x2a\xc8\x27\x1a\xfa\x82\xd8\x8a\x2a\x96\x07\xf1\x41\xd2\x9f\x9e\x4f\xe2\x90\x2f\x44\xb8\x8b\x27\xc6\xd1\x5e\x41\xe3\x92\xf9\x94\xbb\x7a\x89\x4f\x43\x29\x36\xac\x5c\xde\x6c\x3b\x0f\x36\x7c\xc5\xd4\x37\x26\x23\xdb\xb9\x0a\x8f\xe3\x0c\xb0\x1d\x45\x5a\x55\xd3\x63\x2a\x5d\xef\xfe\x3e\xcf\xec\xed\x25\x89\x2c\x17\x9a\x0c\x57\x91\x51\xdc\xdc\x47\xc1\x5d\xc1\x35\xd6\xca\xdd\x1a\xae\x2a\xba\xd4\xf6\xf8\x92\x6e\x84\xcc\x8d\xa6\xd8\x5e\x24\x10\x32\x0a\x0e\x53\x8a\x2e\x6f\x46\x53\x69\x34\x13\x36\xff\x5f\xc1\x97\xe4\x52\xf0\xa5\xb6\x36\x96\x5a\xae\x6e\xf4\x8a\x3d\x6e\x8f\x92\x7c\xa1\x3e\xcb\x8d\xa8\x51\x18\x44\xda\xf4\x80\x34\x42\x5f\xa6\x56\xcb\x24\x9f\x3d\x47\x09\x99\x9f\xa8\xf7\xd6\x13\x0f\x60\x08\x89\x17\xaa\x64\xb4\xd5\x93\x78\x47\x6c\xea\x29\xba\xce\xa5\xf9\x1f\xdd\x50\x5e\x7e\x0e\xdf\xa3\x69\xd5\x6c\x5f\x07\x74\x55\x60\xb2\x54\x5c\xb1\xc9\x1c\x7d\x25\xed\xa0\xc7\x03\x45\xb9\xc3\xe6\x4f\x1b\x96\xd3\x14\x06\xab\x30\x0e\x73\x45\xb9\x4b\xa5\xbb\x18\xb5\xf7\xe6\x5c\x16\x38\xd2\xdb\x24\x3a\xc9\x9b\xe3\x50\xc5\x96\x42\x3e\xc5\x3e\x3b\x0d\x98\xf4\x0e\xa3\xc9\xd9\x44\xab\x1b\xfb\xed\xd1\x75\xeb\x9c\xb4\xcf\x06\xfd\xe1\xde\x8a\x17\xac\x5a\xe7\xc4\x6c\xe7\x9e\x55\x86\xcf\x00\xf8\x8c\xd7\xf1\x19\x67\x83\x5e\x1a\x6f\x00\xe2\x99\x00\x9e\x59\x0d\xcf\x4c\xe1\x75\xce\x32\x74\x46\xa7\x87\xe1\x75\x00\xbc\x4e\x35\xbc\x6e\x0a\x6f\x90\xf1\xec\x10\x84\xeb\x02\x70\xdd\x6a\x70\xc3\xb4\x6b\xbb\x69\xba\x7e\x1b\xa4\xeb\x01\x74\xbd\xd7\x79\x36\x4b\x07\x3b\xb6\x0f\xd0\xf5\x5f\xe7\x58\x33\xab\x59\xd4\xb3\x03\x80\x6e\xf0\x3a\xcf\xf6\xfa\xb5\x3d\x3b\x04\xe8\x86\xc5\x74\xe4\x94\x38\x62\xbd\x09\x15\x3b\xf5\xb8\x62\x3c\xf0\x1e\x18\x79\x49\xbd\x35\xd8\x3b\x43\x13\x63\x7f\x0f\xb0\xbf\x6f\x92\xdd\xe8\xa7\x83\xd6\x30\x6b\xd3\x1b\x48\xb5\x31\x4a\xca\xcd\x6f\x3b\x7b\x03\xaa\x45\x25\xc5\xe8\xf7\x9d\xfe\x04\xc0\x9f\x68\xe8\x27\x60\x29\xcd\xa9\x55\x3d\xac\x92\x4e\x80\x4a\x3a\xd1\x54\x52\x1d\x5d\x3a\xdf\x66\x4a\x95\xd1\x06\xe1\x80\x3a\x3a\xd1\xd4\x51\x1d\x5c\x3a\xdd\x66\x8b\x81\x89\xd2\x01\x85\x74\xa2\x29\xa4\x3a\xba\xb4\x6c\xb2\xc5\xa0\x8b\xd2\x21\xb2\x99\xe8\x64\x83\xba\x36\xa7\x94\xc2\x7c\x48\xe4\x19\x15\x43\x0f\x28\xa6\x30\x1f\x12\x7c\x46\xc5\xe8\x2b\x4f\x8b\xb8\x7f\x91\xf0\x33\x2a\xc6\x1f\x92\xf8\x86\x30\xe1\xe2\x01\xf2\xf1\xd1\xb4\x23\xca\x07\xf3\x5f\x48\x80\x18\xa5\x59\x83\xb2\xc1\x44\x88\x41\x76\x6a\x40\x36\x99\x10\x31\xca\x6e\x0d\xca\x06\x13\x63\x0f\xa3\xec\xd5\x09\xcb\xb4\x7c\xb2\xfa\xc6\xd5\x83\xca\xa7\x8e\x7e\x1a\xcd\xe3\x20\x67\x1d\x05\x35\x9a\xcf\x41\xce\x3a\x22\x6a\x34\xaf\x83\x9c\x75\x64\xd4\x6c\x7e\x07\x95\x64\xd4\x91\x92\xd9\xce\x84\x68\x3b\x27\x46\x41\x54\x1b\x69\x86\x6c\x5d\x33\x64\xd7\xaf\x42\x03\x90\x0f\x39\x47\x5b\x77\x88\x3a\xbe\xf2\xfa\xd3\x05\xf1\x90\x5e\xc8\xd6\xf5\x42\x3a\x3c\xa0\xf2\x0c\x41\x3e\xa4\x17\xb2\x75\xbd\x90\x8e\xaf\xbc\xe6\xf4\xfa\x68\xf8\x61\xf1\x57\x35\x00\xcb\xd3\x38\x7c\x82\x50\x3b\x6e\x6b\xfb\x71\xd4\xc7\xaf\x39\x43\x28\x08\xb5\x1d\x39\xea\xe5\x6c\xea\x36\x0c\xf0\x9b\xbe\x0d\xf5\xe4\xb6\xb6\x29\xd7\xe6\x19\x20\x6b\x9b\x26\xaa\x65\xb0\xaf\xb0\x0b\xfa\x0a\xfb\x35\x8d\x39\x9c\x12\x41\xce\x82\xbe\x42\xcf\xd9\x60\x6a\x04\x31\x0b\xda\x0a\x3d\x66\x93\x29\x12\xe4\x2c\x68\x2b\xf4\x9c\x0d\xa6\x4a\xb0\xa9\xb0\x0b\x9a\x8a\x82\xf0\x2c\x6f\xd0\x2b\xa8\x1d\x56\x52\x2d\x29\x35\x9a\xdc\x51\xd2\x5a\x62\x6a\x34\xc9\xa3\xa4\xb5\xf4\xd4\x6c\xb2\x47\x51\x6b\x49\xaa\xe1\xa4\x8f\xca\xaa\xa8\x59\x2f\x88\x55\xa0\x5b\x37\x87\x58\xb3\x3e\x03\x7a\xa5\x99\xa6\x53\x9a\x81\x65\x29\x73\x92\x06\x16\xa0\x33\xe0\x0c\x67\x9a\xe3\xd3\xb1\xa5\x75\x9e\x91\x79\x07\x8b\xc8\x19\xd0\x7c\xcc\x34\xad\x87\x8e\x2d\xad\xec\x8c\xb0\xfb\x58\x00\xce\x80\x1f\xff\x66\x9a\x1f\xff\x74\x6c\x99\x1f\x9d\xb3\x5a\x06\x13\xe4\xcc\x00\x7e\xd7\x3d\x9a\x04\xc5\x5c\x5a\xc0\x9d\xac\x7e\xc1\xbc\x38\x33\x02\x04\x30\xd0\x00\x06\x75\x55\x01\x3a\xd7\x44\xe8\xcc\xaa\x74\xa5\xba\x00\x9d\xdb\x45\xe8\xba\x55\xe9\x4a\x95\x81\x66\x94\x21\x82\x37\xac\x8a\x57\x2e\x0e\x34\xab\x18\x7d\x28\xf6\xfa\x95\x83\xaf\x5c\x1e\x60\x72\xb1\x80\x82\x61\x69\x0a\x86\x05\x06\x5f\xb6\xa5\xe9\x0c\x41\x3a\xa0\x64\x58\x9a\x92\xa1\xa3\x4b\x07\x5f\xb6\x8d\x19\xf4\x31\x75\x58\xc0\x97\x6a\x4b\xf3\x95\x5a\x47\x97\x89\xbd\x6c\xe3\x62\xf4\x3a\x98\x3c\x2c\xa0\xa8\x59\x9a\xa2\xa6\xe3\xcb\x44\x9e\x69\x66\x6b\x6e\x7b\x80\xe9\xc3\x02\x1e\x58\xb2\x34\x0f\x2c\xe9\x00\x3b\x99\xd4\xd7\xcd\x16\x5e\xa3\x0b\xc6\x1f\x72\xef\xd3\xd2\xdd\xfb\xb4\xd0\x5b\x4f\xb5\x7b\x7e\x0b\xb9\xf7\x69\xe9\xee\x7d\x6a\xf9\xca\x25\xd2\x03\xbb\x03\x0b\xb9\xfb\x69\xe9\xee\x7e\x6a\x01\x11\x95\xb4\xe1\x33\x44\x64\xa2\xbb\x01\xaa\x45\x44\x84\x62\xa2\x5f\x98\x2c\x1b\x51\x8a\xad\x93\x8a\x8e\x11\xd1\x4a\x37\xf9\x9e\x94\x3c\xaf\xeb\x48\xe6\x32\xae\x3c\xea\xe7\x3c\xad\xbb\x91\xe2\xc1\x73\x99\x8c\x0c\x8f\x92\xd7\xc2\x5e\x56\xdc\xf8\xf4\x69\x26\xe4\x9a\xaa\x68\xfc\xde\x63\xfe\xc1\x7b\x0a\x94\x73\xa1\xe2\xc7\x8e\xa3\x75\x5f\x56\x8c\xd6\xfc\x46\xe5\x9a\xc9\x33\xba\xd9\x04\x8e\x70\xd9\x99\x23\xd6\xff\x71\xfc\x30\x50\x4c\x9e\xee\x69\xa2\x25\x93\xd5\x74\x97\xb9\x3c\x48\x5f\xb2\xbb\xe2\x39\x01\x89\xb9\x8e\x9f\x62\xde\xd3\x6c\xdf\x71\x73\x04\xbf\xf7\x96\xf1\x26\xff\xbc\xbd\x99\x2e\xe6\xd3\xab\xd1\xd5\x7c\x71\x31\x39\x00\x88\x56\x12\x32\x3a\xd7\xed\x0b\x72\x0b\xc5\x38\xe5\x6a\xe1\xb9\xc7\x93\xbe\x07\x5b\x4f\x6e\x87\xd3\x4b\xf8\xf4\x8e\xc5\x9c\xf3\x78\x98\x5c\xa4\xae\xf6\xf8\x26\x54\xdb\xcb\x7f\x24\x8f\x58\x1f\xec\xa6\x9c\xdd\xbe\xfd\x60\x8f\x6f\x2e\x3e\xcd\x2f\xae\xaf\x4a\x76\x10\x84\x77\x49\xf0\x69\xf7\x71\x38\x49\xbb\x1b\xfb\x60\xd2\x1b\xec\x69\xfc\xf1\x62\x5a\xea\x0f\xc7\xf7\x58\x81\x3f\xb6\xc3\xda\x1d\x8c\xe3\xe1\xb7\x63\xb7\xa7\xe3\x9b\xe9\x1c\xe0\x0f\x98\x23\x99\x2a\xda\x83\x9d\x33\x23\xbd\x8f\xbc\x39\xc9\x5e\x36\x34\x08\x1e\x85\x74\x0f\xf6\xb3\xfb\x5f\xfe\xfb\x03\x99\x2c\x60\x2b\x21\xe9\xf2\xcd\x92\x41\xb0\x5d\xfe\x2d\x94\x6d\xcf\xaf\x6f\x46\xd6\x74\x31\x1a\x8f\xaf\x6f\xaf\x0a\xfd\xb1\xa3\x58\x50\xc7\x11\x21\xd7\x78\x24\x77\x30\x71\x46\x7c\x58\x64\x77\x5a\x64\x94\x37\xb7\x01\xc1\xef\xb6\x74\x39\xfd\x03\xd9\xce\x8a\x3d\xe5\x6f\x25\x33\x50\xbc\x0d\x72\x99\x9e\x8f\xc7\x57\x52\x7c\x56\xe1\x1d\x93\x9c\x29\xb6\x0f\x8b\xd6\x03\x93\xc1\xd1\x0b\xc5\x87\x47\xf0\x32\x1a\x99\x31\xce\x06\x67\xdd\xc3\x12\x91\xaa\xa5\x99\x71\x25\x84\x7f\x1c\x7f\x3b\x04\xea\xae\xf7\x17\xe4\xf9\x60\xf7\x22\xf4\xd1\x85\x2e\x8b\x3e\x52\x32\x64\x99\x6d\x6e\xff\x46\x9b\x7d\x3e\x79\xfe\x27\x00\x00\xff\xff\x04\xdc\x59\xa0\x5c\x3d\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 15708, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
