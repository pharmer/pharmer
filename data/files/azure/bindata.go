// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package azure

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x9b\x6f\x73\xa3\x38\xf2\xc7\x9f\xcf\xab\x50\xf9\x71\xe2\x35\xf8\xef\xce\x33\x8f\x1d\xf3\xf3\x6f\x72\x99\x6c\x48\x66\xea\xee\x6a\x2b\x25\x43\xc7\xd1\x1a\x4b\x9c\x24\x9c\xcd\x6c\xcd\x7b\xbf\x02\x1c\x1b\x03\x82\x86\x78\x6e\x9f\xec\x4e\x99\xb6\xfa\x23\x75\x7f\xbb\xdb\x04\xfe\xfa\x40\x48\x87\xd3\x2d\x74\x3e\x92\x0e\xfd\x1e\x49\xe8\x5c\xc4\x1f\x01\xdf\x75\x3e\x92\x7f\x7f\x20\x84\x90\x8e\x0f\xbb\xe4\x53\x42\x3a\xff\xa1\x9d\x0f\x84\xfc\x9e\xd8\x48\x58\x33\xc1\xd5\xc1\xee\xaf\xe4\xbf\x84\x74\x02\xe1\x51\xcd\x04\x8f\xd7\xfc\xca\xe4\x9a\x71\x46\xf7\x0b\x1c\xbe\x16\x5f\xbb\xa2\x4a\x93\x07\xf7\x78\xe9\xbb\xe0\x70\x5c\x2f\xf9\x08\xa8\xd2\x91\xea\xec\x3f\xf8\x3d\xf9\xff\x8f\x8b\x77\xf9\x23\x36\xc2\xa3\x8d\x77\xb9\x14\x2f\xa5\xee\x66\xc0\xb5\xa4\x41\xdd\x0e\xbd\xd4\xac\xc9\x26\x97\x41\xc0\xb8\x60\xaa\xcc\xeb\x8d\x90\xfa\x99\x20\x7d\xf3\xd8\xb8\x05\xc0\x3d\xfc\x49\x4b\xbd\xbb\x22\xc2\x7b\x57\xb1\x71\x0b\xef\xdf\x40\xe9\x52\x1f\x47\x0e\xa3\x49\x09\xc6\x0b\x28\xdd\x82\x62\x46\x03\xf6\x24\xa4\x21\xd7\x12\x00\x84\xe3\xc6\xfb\x3e\xcd\xdf\x82\xc3\x9a\xe4\x4e\x5d\x36\x48\xee\xdf\x22\x58\x81\x47\x66\x4c\xbf\x96\xe6\x38\xe5\xd4\xa7\x24\x56\x56\x75\x92\x27\x76\xb1\xb4\x1a\x24\x99\x90\x82\x6b\x51\xe1\x76\x1f\x60\x84\xe7\x7d\x7c\xf1\xce\x5d\x2a\xc8\x2d\x8d\x02\x41\x5c\x4d\x35\x94\x41\x7c\x92\xf4\x3b\x0b\x48\x92\xf2\x95\x08\xab\xc4\x30\xc9\xf6\x06\x1a\x97\x10\x50\xee\x9b\x25\x7e\x15\x49\x11\x42\xbd\xbc\x21\xb5\x43\x3b\xbe\x01\xfd\x0c\x32\xf6\x5d\xaa\xf0\x24\xcf\x10\xbe\xe3\x4c\x6b\xea\x7a\x46\xa5\xcf\x9e\x9e\xca\xdc\x3e\x7c\x26\xb1\xe7\x4a\x97\xd1\x26\x76\x8a\x77\x77\x2d\xb8\x2f\xb8\xc1\x5b\x7d\x58\xa3\x4d\xc3\x90\xba\x8c\xaf\x69\x28\x64\x69\x36\x25\xfe\x62\x81\x90\xa9\xca\x96\x14\x53\xdd\x8c\x4d\x69\x6c\x89\x76\xff\x7f\x82\xaf\xc9\x67\xc1\xd7\xc6\xde\x58\xeb\xb9\xb9\xd3\x1b\x78\x49\x8f\x92\x7c\xa3\x01\x94\x66\xd4\x34\x52\xb1\x36\x19\xa2\x8c\xd0\x37\xd3\x66\x95\xe4\x2b\xf3\xb4\x90\xe5\x85\xfa\xe8\xfd\x10\x01\x1c\xc2\x21\x0a\x4d\x2a\xda\xe6\x55\x5c\x10\x97\x32\x4d\xb7\xa5\x34\xff\x4f\x43\xca\xeb\xcf\xe1\x8f\xd8\xac\x99\xef\x2f\x8a\x6e\x2a\x5c\xd6\x8a\x2b\x71\x59\xa2\xaf\xc3\x38\xc8\xb8\xd2\x94\x7b\x70\xff\x1a\x42\xc9\x50\xa8\x36\x51\x92\xe6\x9a\x72\x9f\x4a\xff\x71\xda\x3b\xba\xf3\x41\x79\x92\x85\x07\x9d\x94\xd9\x78\x54\xc3\x5a\xc8\xd7\x24\x66\x97\x0a\x24\xcb\x66\x93\x17\xc6\xab\x5b\xc7\xed\xd1\x6d\xe7\x23\xe9\x75\xc7\xa3\xc9\xd1\x0b\x53\x9b\xce\x47\x62\xf7\x4a\xcf\xaa\xc0\x67\x21\xf8\xac\xf7\xf1\x59\xdd\xf1\x30\x8f\x37\x46\xe2\xd9\x08\x3c\xbb\x19\x9e\x9d\xc3\xeb\x77\x0b\x74\x56\x7f\x88\xc3\xeb\x23\xf0\xfa\xcd\xf0\x06\x39\xbc\x71\x21\xb2\x13\x24\xdc\x00\x01\x37\x68\x06\x37\xc9\x87\x76\x90\xa7\x1b\xf5\x90\x74\x43\x04\xdd\xf0\x7d\x91\x2d\xd2\xa1\x03\x3b\x42\xd0\x8d\xde\x17\x58\xbb\xa8\x59\x6c\x64\xc7\x08\xba\xf1\xfb\x22\x3b\x1c\xb5\x8e\xec\x04\x41\x37\xa9\xa6\x23\x97\xc4\x13\xdb\x30\xd2\x70\xc9\xb8\x06\xae\xd8\x0e\xc8\x5b\xe9\x6d\xc1\xde\x9f\xd8\x38\xf6\x5f\x11\xec\xbf\x9e\x93\xdd\x1a\xe5\x93\xd6\xb2\x5b\xd3\x5b\x98\x6e\x63\xd5\xb4\x9b\xbf\xed\xec\x2d\x54\x2f\xaa\x69\x46\x7f\xdf\xe9\xcf\x11\xf8\x73\x03\xfd\x1c\xd9\x4a\x4b\x7a\xd5\x10\xd7\x49\xe7\x88\x4e\x3a\x37\x74\x52\x13\x5d\xbe\xde\x16\x5a\x95\xd5\x43\xc2\x21\xfa\xe8\xdc\xd0\x47\x4d\x70\xf9\x72\x5b\x6c\x06\x36\x96\x0e\xd1\x48\xe7\x86\x46\x6a\xa2\xcb\xcb\xa6\xd8\x0c\x06\x58\x3a\x8c\x6c\xe6\x26\xd9\x60\x43\x5b\xd2\x4a\xd1\x7c\x98\xcc\xb3\x1a\xa6\x1e\xa2\x99\xa2\xf9\x30\xc9\x67\x35\xcc\xbe\xfa\xb2\x88\x8f\x2f\x26\xfd\xac\x86\xf9\x87\x29\x7c\x13\x34\xe1\xe3\x0e\x15\xe3\x13\xb3\x13\xca\x9d\xfd\x3f\x28\x80\x38\x4a\xbb\x05\xe5\x19\x0b\x21\x0e\xb2\xdf\x02\xf2\x9c\x05\x11\x47\x39\x68\x41\x79\xc6\xc2\x38\xc4\x51\x0e\xdb\xa4\x65\x5e\x3e\x45\x7d\xe3\xd5\x83\x95\x4f\x1b\xfd\x9c\xb5\x8e\x23\x39\xdb\x28\xe8\xac\xf5\x1c\xc9\xd9\x46\x44\x67\xad\xeb\x48\xce\x36\x32\x3a\x6f\x7d\x47\x2a\xc9\x6a\x23\x25\xbb\x57\x48\xd1\x5e\x49\x8e\x22\x51\x5d\xcc\x30\xe4\x9a\x86\x21\xb7\x7d\x17\x1a\x23\xf9\x30\xe7\xe8\x9a\x0e\xd1\xc4\x57\xdf\x7f\x06\x48\x3c\xcc\x2c\xe4\x9a\x66\x21\x13\x1e\xa2\xf3\x4c\x90\x7c\x98\x59\xc8\x35\xcd\x42\x26\xbe\xfa\x9e\x33\x1c\x61\xd3\x0f\x97\x7f\x4d\x13\xb0\xbe\x8c\xa3\x4f\x10\x35\x8e\xbb\xc6\x79\x1c\x1b\xe3\xf7\x9c\x21\x2a\x09\x8d\x13\x39\x36\xca\xc5\xd2\x6d\x59\xc8\x5f\xfa\x2e\x6a\x26\x77\x8d\x43\xb9\xb1\xce\x20\xaa\xb6\x6d\x63\xb5\x8c\x9c\x2b\xdc\x8a\xb9\xc2\x7d\xcf\x60\x8e\x2e\x89\x48\xce\x8a\xb9\xc2\xcc\x79\xc6\xd2\x88\xc4\xac\x18\x2b\xcc\x98\xe7\x2c\x91\x48\xce\x8a\xb1\xc2\xcc\x79\xc6\x52\x89\x1c\x2a\xdc\x8a\xa1\xa2\x22\x3d\xeb\x07\xf4\x06\x6a\x47\x2b\xa9\x95\x94\xce\x5a\xdc\xb1\xa4\xad\xc4\x74\xd6\x22\x8f\x25\x6d\xa5\xa7\xf3\x16\x7b\x2c\x6a\x2b\x49\x9d\xb9\xe8\x63\x65\x55\x35\xac\x57\xe4\x2a\x62\x5a\xb7\x27\xb8\x61\x7d\x81\x98\x95\x16\x86\x49\x69\x81\x6c\x4b\x85\x93\xb4\x70\x09\xba\x40\x9c\xe1\xc2\x70\x7c\x26\xb6\xbc\xce\x0b\x32\xef\xe3\x32\x72\x81\x18\x3e\x16\x86\xd1\xc3\xc4\x96\x57\x76\x41\xd8\x23\x5c\x02\x2e\x10\x7f\xfc\x5b\x18\xfe\xf8\x67\x62\x2b\xfc\xd1\xb9\xa8\x65\x64\x81\x5c\x58\x88\xbf\xeb\x9e\x18\xa1\x72\x2e\x2f\xe0\x7e\x51\xbf\xc8\xba\xb8\xb0\x14\x06\x50\x19\x00\x55\x5b\x55\x20\x83\x6b\x63\xe8\xec\xa6\x74\xb5\xba\x40\x06\x77\x80\xa1\x1b\x34\xa5\xab\x55\x06\xb6\xa2\x4c\x30\x78\x93\xa6\x78\xf5\xe2\xc0\x56\x15\x6b\x84\xca\xbd\x51\xe3\xe4\xab\x97\x07\xb2\xb8\x38\x88\x86\xe1\x18\x1a\x86\x83\x4c\xbe\xe2\x48\xd3\x9f\x20\xe9\x10\x2d\xc3\x31\xb4\x0c\x13\x5d\x3e\xf9\x8a\x63\xcc\x78\x84\x53\x87\x83\xf8\x51\xed\x18\x7e\x52\x9b\xe8\x0a\xb9\x57\x1c\x5c\xac\x61\x1f\x27\x0f\x07\xd1\xd4\x1c\x43\x53\x33\xf1\x15\x32\xcf\xb6\x8b\x3d\xb7\x37\xc6\xe9\xc3\x41\x3c\xb0\xe4\x18\x1e\x58\x32\x01\xf6\x0b\xa5\x6f\x50\x6c\xbc\xd6\x00\x99\x7f\x98\x7b\x9f\x8e\xe9\xde\xa7\x83\xbd\xf5\xd4\x7a\xe6\x77\x30\xf7\x3e\x1d\xd3\xbd\x4f\x23\x5f\xbd\x44\x86\xc8\xe9\xc0\xc1\xdc\xfd\x74\x4c\x77\x3f\x8d\x80\x18\x95\xf4\xd0\x67\x88\x91\x89\xe9\x06\xa8\x11\x11\x23\x14\x1b\xfb\x83\xc9\x71\x31\x4a\x71\x4d\x52\x31\x31\x62\xb4\x32\x38\xfc\x4e\x3a\x3c\xaf\xeb\x49\xf0\x81\x6b\x46\x83\x92\xa7\x75\x43\x29\x76\xcc\x07\x19\x3b\x9e\x1e\x5e\x0b\x7b\x5b\x31\x0c\xe8\xeb\x42\xc8\x2d\xd5\xf1\xf5\x27\x06\x41\xe6\x3d\x05\xca\xb9\xd0\xc9\x63\xc7\xf1\xba\x6f\x2b\xc6\x6b\x3e\x53\xb9\x05\xd9\xa5\x61\xa8\x3c\xe1\x43\xd7\x13\xdb\x5f\xbc\x20\x52\x1a\xe4\xe5\x91\x26\x5e\xf2\xb0\x9a\xe9\x6b\x3e\x57\xf9\xaf\xec\xbf\xf1\xe3\x00\x92\x70\x9d\x3e\xc5\x7c\xa4\x49\xdf\x71\xf3\x04\x7f\x62\xeb\x64\x93\xff\x7a\xb8\xbb\x7a\xbc\xbf\xba\x99\xde\xdc\x3f\x2e\xe7\x19\x80\x78\x25\x21\xe3\x73\x4d\x5f\x90\x7b\xd4\xc0\x29\xd7\x8f\xcc\x3f\x35\xfa\x43\xa5\x91\x4c\x2f\xe7\x97\x08\xe8\x0a\x12\xce\xfb\xe4\x32\x59\xe6\xbe\xcd\x78\x18\xe9\xf4\xeb\x7f\x1e\x1e\xb1\xce\xec\xa6\x9e\xdd\x7d\xf8\xe4\xce\xee\x96\xb7\xf7\xcb\x2f\x37\x35\x3b\x50\xd1\xea\x90\x7c\xc6\x7d\x64\x8d\x8c\xbb\x71\x33\x46\x3f\x61\x4f\xb3\xeb\xe5\x55\x6d\x3c\xbc\x80\x41\x45\x3c\xd2\xcb\xc6\x1d\xcc\x92\xcb\x3f\x8f\xdd\xbd\x9a\xdd\x5d\xdd\x23\xf8\x15\x78\x12\x74\xd5\x1e\xdc\x12\x8b\xfc\x3e\xca\x6c\x0e\x7b\x09\xa9\x52\x2f\x42\xfa\x99\xfd\xec\xff\x55\xfe\xfe\x40\xa1\x0a\xb8\x5a\x48\xba\xfe\x69\xc5\x40\xa5\xcb\xff\x0c\x65\xbb\xf7\x5f\xee\xa6\xce\xd5\xe3\x74\x36\xfb\xf2\x70\x53\x19\x8f\x3d\xc5\x23\xf5\x3c\x11\x71\x43\x44\x4a\x2f\x1e\x82\x91\x1c\x16\xd9\x9f\x16\x99\x96\xd9\x9e\x41\xf0\xfb\x2d\x7d\xbe\xfa\x27\x66\x3b\x1b\x78\x2d\xdf\x4a\xe1\x42\xf5\x36\xc8\xe7\xbc\x3d\x3e\xbf\x0e\xcd\x67\x13\xad\x40\x72\xd0\xa0\xbe\x82\x54\xe5\xaf\x11\xef\xd2\x2b\xf1\xc2\x56\x77\xdc\x35\xf7\xf7\xdc\xd5\xf4\xdd\xe5\x4c\xae\xf9\x10\x7f\xa0\x65\x04\x85\x4c\xf2\xe1\x89\x46\x81\x76\x43\xf0\x4e\xbf\xb3\xef\x4b\xcb\xf0\x8e\xf2\x75\xf2\x76\xb4\xd5\xeb\xda\x83\x41\xb7\xd7\xed\xfd\x92\xb9\x0f\x12\xb7\x79\x90\x3b\xe6\xc1\xac\xec\x1b\xbd\x12\x7b\x1a\x24\xef\xe5\xc0\x8d\xf0\x61\xc6\x7c\xa9\xf6\x70\x19\x13\xe0\x74\x15\xbc\xad\xf8\x0f\xc1\x99\x16\x92\xf1\x24\xf6\x6f\x82\xe9\x98\xcc\xaf\xc5\x7a\x9d\xda\x96\x2e\x1a\x7b\x35\x9a\x04\xe9\x85\x39\x28\xcd\xf8\xe1\xd5\xa1\x37\x97\x97\x10\x50\xa5\x99\xa7\x80\x4a\xef\xf9\x04\x20\x7b\x61\xbf\xfa\x1d\x84\x01\xf3\xa8\xca\xde\x65\x89\x4f\x9c\x2b\x17\xe4\x0e\xe4\xf2\x36\x73\x46\x99\x47\xaf\x53\x9b\xb9\xd8\x52\xb6\xaf\x7d\xc9\xb6\xba\xf1\xa1\x05\x27\xe7\xe8\x6f\x99\x8a\x33\x64\x26\xb8\x96\x22\xc9\xd8\x1b\xba\x05\x15\x52\x0f\xae\xd9\x13\x78\xaf\x5e\x00\x17\xd7\x6c\xcb\x74\x12\x13\x79\xe1\xa6\xa1\xda\x67\xf2\xc5\x6d\x9c\x61\x4a\x03\xd7\x5f\x45\x10\x6d\xe1\x3a\x4e\xfc\x8b\xf9\x3e\x27\xd2\xb4\x9f\x05\x54\xa9\x8b\x3b\x50\x22\x92\x1e\xfc\x16\x09\x4d\xb3\x10\x5b\x5a\x96\x26\xa3\x24\xec\xf6\x20\x6b\xc9\x41\xbf\x08\xb9\xb9\xcd\xd4\xd4\xa7\x80\x72\x0e\x81\x31\x94\xd3\x00\xa4\x36\x05\x5d\xc4\x27\xdb\xf1\x61\xc5\x28\x2f\xf3\x23\x02\xe6\xbd\x66\xbd\x71\xc1\x4b\xb2\xe6\x1b\xac\x9e\x85\xd8\xdc\x8b\x0d\xf0\x69\xa4\x9f\xb9\x29\x71\xee\x56\xd4\x8b\x0d\xbe\x9b\x0c\xa6\xb7\x4b\x95\x44\xf6\x13\x55\xcc\x9b\x46\x3e\xd3\x46\xd3\xfd\x7e\xa6\x5a\x33\xaf\x68\x14\x8a\x20\x70\x03\x80\x70\xc9\x35\xc8\x5d\xd2\x06\xfa\xa5\x99\x7c\x1b\xad\x02\xe6\x25\xa9\x94\xd5\xf7\xb1\xda\x7c\xf8\xf1\xdf\x00\x00\x00\xff\xff\xc5\xd4\xf1\x3c\xe3\x40\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 16611, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
