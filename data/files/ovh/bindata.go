// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package ovh

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x98\xdf\x6f\xe2\x38\x10\xc7\xdf\xfb\x57\x58\x79\x06\x8e\x04\xca\xa2\xbe\x51\xca\xc2\x49\xb7\x6d\x54\xb7\xb7\x0f\xa7\x55\xe5\x26\xb3\x25\xd7\x60\x67\x6d\x27\x77\xdd\x15\xff\xfb\xc9\x01\x12\x70\x7e\x19\x12\xdd\x4b\x49\x3d\xce\xcc\xc7\x33\xf3\x55\xe4\xf9\x75\x85\x90\x45\xc9\x06\xac\x1b\x64\xb1\x64\x6d\xf5\xd4\x02\xd0\x44\x58\x37\xe8\xaf\x2b\x84\x10\xb2\x7c\x48\xd2\x65\x84\xac\x1f\xe4\xf0\x14\x71\xe6\x5b\x57\x08\x7d\x4b\x5f\xe0\xf0\x16\x30\x9a\xbf\xf3\x2b\xfd\x8b\x90\x15\x32\x8f\xc8\x80\x51\xe5\xfe\x16\x48\xbc\x26\x9c\xb2\x40\xf4\xd0\x9c\x50\xe2\x1f\xbc\x65\x1e\xd4\xb6\x7b\xc6\xe5\x1a\xcd\x36\xc0\x03\xef\x68\xc3\x4f\x46\x21\x0f\x90\x2e\xdd\xae\xb0\x6d\xed\xff\xfd\x96\xfe\x6e\x7b\xd5\xe1\x97\x9c\x24\x10\x06\x14\x44\x0f\x7d\xe6\x84\x7a\x50\x16\xfd\x2b\x08\x09\x9c\xa2\x45\xcc\x59\x04\xb5\xe1\x97\x8f\xb3\x33\xc2\x63\xc9\x89\x78\x65\x31\x7f\xab\x0b\x3f\x07\x2a\x39\x09\x4d\xc2\xe3\xdb\xa5\x1e\x3e\xab\x47\x40\x85\x54\x21\x9e\x3e\x22\x28\xa9\x8a\x78\x8f\x55\xb0\x24\x12\x7d\x21\xfc\xbe\x9d\xc7\xf1\x41\x78\x3c\x88\x0e\xd0\x36\x4a\xe6\x8c\xab\x8c\x8d\x06\xf6\x72\xfd\x33\xdf\xe8\x11\x09\x6f\x8c\x7f\xa8\x5d\x7f\xba\x18\xcd\x43\x16\xfb\x47\xe6\x48\x45\xb0\xf3\x13\x92\x8d\x75\x83\x9c\x3c\x4e\x20\xde\xd5\xc2\x75\x69\xde\x34\x3e\xa7\x92\xcf\x69\xc7\xe7\x68\x7c\x63\x9d\xef\x7a\x68\xc2\x37\xaa\xe4\x1b\xb7\xe3\x1b\x6b\x7c\x53\x9d\xcf\x1e\xd6\x02\x2a\xc7\x18\xdf\x21\x93\x02\x3b\x83\x71\x2d\x20\xc6\x77\x67\x97\xd7\x36\xa2\xab\x2e\x6f\xa7\x74\x85\xe2\x3a\x46\x74\xd5\xc5\x75\xda\xd0\xe9\xad\x57\x28\xed\xb8\x91\x6e\xfe\xc7\xc3\xf3\x1d\x7a\x9c\x7d\xe9\xa4\xbe\x69\x03\x2a\x6f\x4d\x79\x9c\x9c\x27\xe2\x53\x52\x13\x29\x5f\x4c\xaa\xe7\xd4\x2e\x34\x64\xbd\x9e\x4f\x51\x4d\x54\x7d\x31\xaa\xae\x6c\xa7\xd0\x9d\x0d\xd2\x5e\x2c\xfb\x9f\x8c\x72\x39\xaa\x04\x74\xe3\xd7\x30\xf0\xf6\x8c\x18\x78\x02\x5c\x34\xa5\xf4\x53\x51\x44\x4d\x98\xf6\xb5\x51\x22\xdb\x71\xea\xf9\xb4\xaf\x8b\x7a\x6a\x02\x1d\x0d\x2b\x41\xa7\x9d\x81\x4e\x35\xd0\xd1\x50\x07\x9d\x36\x82\x4e\xaa\x41\xed\x49\x67\xa4\xf6\x44\x17\x7e\x01\xd5\x9e\x34\x57\xdf\xa9\x86\x1d\x75\xd7\xa7\xa3\xa2\xf6\xcf\xa6\x5d\x99\x49\xaa\xee\x4b\xfe\x7f\x48\x6a\x65\x28\xa9\xb6\x9c\xad\x25\xb5\x32\x94\x54\x5b\xd0\xd6\x92\x5a\x99\x4a\xaa\x2d\x69\x07\x92\x5a\x19\x4b\xaa\x2d\x6c\x17\x92\xc2\x6e\x5d\x0b\x98\x7d\xf2\x2f\xd1\x54\xb1\x05\x1a\x44\x85\xdd\xba\x16\x30\xfb\xe0\x5f\x22\xaa\x62\x03\x34\x88\x0a\xbb\xb5\xf5\x9f\x76\x46\xaa\xab\xaa\xa4\xfa\x0d\xb2\xc2\x6e\xdf\x19\x1b\x7e\xaa\xba\x65\x75\xc6\x35\x9d\x9a\x5d\x92\x3d\x0e\x3e\x50\x19\x90\xb0\xe4\x8a\x1c\x71\x96\x04\x3e\x70\x85\xf0\xb0\x9f\x8b\x1c\xfc\x45\x21\xf9\xf8\xcc\xf8\x86\x48\x65\xfd\x1e\x40\x78\x74\x73\x23\x94\x32\x99\xde\xfa\x95\xd7\x83\x3f\xe5\x71\x4d\xf8\x06\xf8\x80\x44\x91\xf0\x98\x0f\x03\x8f\x6d\x7e\xf3\xc2\x58\x48\xe0\xfd\x9c\x45\xb9\x3c\x5c\xeb\xb7\x99\xd7\x34\xc8\xe9\x00\x20\x77\xbd\x9b\xd8\x78\x8c\x7e\x0f\xde\x52\x5e\xfc\xf2\x8c\x17\x8f\xf7\xb3\x2f\x8b\x8c\x6b\xe7\x85\xf1\x4d\x3a\xe8\x11\x2f\xb1\x00\x9e\xce\x7d\x4e\x36\xfc\x2d\x76\xb5\x29\xb7\x86\xe4\x15\x52\xbe\xe7\x52\x73\x40\xa3\x38\xcd\x88\x84\x7f\xa5\x95\x59\xb6\x3d\x33\x64\x77\x86\xf1\xd7\x87\xc7\xbb\x4a\xe4\x88\x08\xf1\x0f\xe3\x7e\x39\x72\xb9\x35\x43\x76\x4b\xcd\x19\x72\xf6\xf6\xd9\xd8\x4f\x8b\xfb\xd9\xfd\xd3\xcb\xef\xd5\xdc\x12\x28\xa1\xf2\x25\xa8\x00\xdf\x99\xf5\xf7\x33\xf0\xa7\xd4\x8c\x74\x7b\x55\xb2\xf7\x4f\xfa\x40\xe8\x3d\x7e\x05\x4e\x41\x42\xde\x94\x96\x52\xd2\xc9\xd4\xee\xf8\xa4\x07\x6b\xaa\xd4\xc1\x74\x30\x3c\x0a\x5f\x50\xb2\x6e\xdf\xcf\x0f\x4f\xf2\xe6\x43\x62\xdd\x20\xc9\x63\x38\x39\xc7\x0f\x52\xb6\x9a\x4e\x17\x77\xeb\x85\xa3\xed\x7e\xd5\x01\xb7\x57\xdb\xff\x02\x00\x00\xff\xff\xc5\x5a\x02\x3b\xc0\x14\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 5312, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
