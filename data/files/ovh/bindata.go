// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package ovh

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x98\xdf\x6f\xe2\x38\x10\xc7\xdf\xfb\x57\x58\x79\x06\x8e\x04\xca\xa2\xbe\x51\xca\xc2\x49\xb7\x2d\xaa\xdb\xdb\x87\xd3\xaa\x72\x93\xd9\x92\x6b\xb0\x23\xdb\xc9\x5d\xb7\xe2\x7f\x3f\xd9\x94\x04\x9c\x5f\xa6\x89\xee\xa5\x29\x1e\x67\xe6\x93\x99\xf9\xca\xf2\xbc\x5f\x20\xe4\x50\xb2\x05\xe7\x0a\x39\x2c\xdd\x38\x3d\xb5\x00\x34\x75\xae\xd0\x5f\x17\x08\x21\xe4\x04\x90\x3a\x17\x08\xfd\xd0\x16\x0e\x2f\x21\xa3\x22\xb3\xbe\xeb\xbf\x08\x39\x11\xf3\x89\x0c\x19\x55\x7e\xae\x81\x24\x1b\xc2\x29\x0b\x45\x0f\xcd\x09\x25\x01\xd1\x7e\xf5\xc6\xbd\x07\xb5\xed\x96\x71\xb9\x41\xb3\x2d\xf0\xd0\x3f\xda\xf0\x8b\x51\xc8\x03\xe8\xa5\xeb\x15\x76\x9d\x8f\x9f\x3f\xf4\x73\xd7\xab\x0e\xbf\xe4\x24\x85\x28\xa4\x20\x7a\xe8\x2b\x27\xd4\x87\xb2\xe8\xdf\x41\x48\xe0\x14\x2d\x12\xce\x62\xa8\x0d\xbf\xbc\x9f\x9d\x11\x1e\x4b\x4e\xc4\x33\x4b\xf8\x4b\x5d\xf8\x39\x50\xc9\x49\x64\x13\x1e\x5f\x2f\xcd\xf0\x59\x3d\x42\x2a\xa4\x0a\xf1\xf0\x16\x43\x49\x55\xc4\x6b\xa2\x82\xa5\xb1\xe8\x0b\x11\xf4\xdd\x3c\x4e\x00\xc2\xe7\x61\x7c\x80\x76\x51\x3a\x67\x5c\x65\x6c\x34\x70\x97\x9b\x5f\xf9\x46\x9f\x48\x78\x61\xfc\x4d\xed\xfa\x73\x8d\xd1\x3c\x62\x49\x70\x64\x8e\x55\x04\x37\xff\x42\xb2\x75\xae\x90\x97\xc7\x09\xc5\xab\x5a\xb8\x2c\xcd\x9b\xc1\xe7\x55\xf2\x79\xed\xf8\x3c\x83\x6f\x6c\xf2\x5d\x0e\x6d\xf8\x46\x95\x7c\xe3\x76\x7c\x63\x83\x6f\x6a\xf2\xb9\xc3\x5a\x40\xe5\x18\xe3\x1b\x64\x53\x60\x6f\x30\xae\x05\xc4\xf8\xe6\xec\xf2\xba\x56\x74\xd5\xe5\xed\x94\xae\x50\x5c\xcf\x8a\xae\xba\xb8\x5e\x1b\x3a\xb3\xf5\x0a\xa5\x1d\x37\xd2\xcd\xff\xb8\x7b\xbc\x41\xf7\xb3\x6f\x9d\xd4\x57\x37\xa0\xf2\xd6\x94\xc7\xc9\x79\x22\x3e\x25\xb5\x91\xf2\xa7\x49\xcd\x9c\xba\x85\x86\xac\xd7\xf3\x29\xaa\x8d\xaa\x3f\x8d\x6a\x2a\xdb\x2b\x74\x67\x83\xb4\x17\xcb\xfe\x17\xab\x5c\x8e\x2a\x01\xd7\xc9\x73\x14\xfa\x1f\x8c\x18\x78\x0a\x5c\x34\xa5\xf4\x4b\x51\x44\x4d\x98\xee\xa5\x55\x22\xdb\x71\x9a\xf9\x74\x2f\x8b\x7a\x6a\x02\x1d\x0d\x2b\x41\xa7\x9d\x81\x4e\x0d\xd0\xd1\xd0\x04\x9d\x36\x82\x4e\xaa\x41\xdd\x49\x67\xa4\xee\xc4\x14\x7e\x01\xd5\x9d\x34\x57\xdf\xab\x86\x1d\x75\xd7\xa7\xa3\xa2\xf6\xcf\xa6\x5d\xd9\x49\xaa\xee\x24\xff\x3f\x24\xb5\xb2\x94\x54\x5b\xce\xd6\x92\x5a\x59\x4a\xaa\x2d\x68\x6b\x49\xad\x6c\x25\xd5\x96\xb4\x03\x49\xad\xac\x25\xd5\x16\xb6\x0b\x49\xe1\x75\x5d\x0b\xd8\x1d\xf9\x9f\xd1\x54\xb1\x05\x1a\x44\x85\xd7\x75\x2d\x60\x77\xe0\x7f\x46\x54\xc5\x06\x68\x10\x15\x5e\xd7\xd6\x7f\xda\x19\xa9\xa9\xaa\x92\xea\x37\xc8\x0a\xaf\xfb\xde\xd8\xf2\xa8\xea\x96\xd5\x1b\xd7\x74\x6a\x76\x49\xf6\x39\x04\x40\x65\x48\xa2\x92\x2b\x72\xcc\x59\x1a\x06\xc0\x15\xc2\xdd\xc7\x00\xe4\xe0\x2f\x8e\xc8\xdb\x57\xc6\xb7\x44\x2a\xeb\xcf\x10\xa2\xa3\x9b\x1b\xa1\x94\x49\x7d\xeb\x57\x5e\x0f\xfe\x94\xc7\x0d\xe1\x5b\xe0\x03\x12\xc7\xc2\x67\x01\x0c\x7c\xb6\xfd\xcd\x8f\x12\x21\x81\xf7\x73\x16\xe5\xf2\x70\xad\xdf\x65\x5e\x75\x90\xd3\x01\x40\xee\x7a\x3f\x9a\xf1\x19\xfd\x19\xbe\x68\x5e\xfc\xf4\x88\x17\xf7\xb7\xb3\x6f\x8b\x8c\x6b\xef\x85\xf1\xad\x9e\xe8\x88\xa7\x44\x00\xd7\x03\x9e\x93\x0d\x7f\x8b\x7d\x6d\xca\xad\x11\x79\x06\xcd\xf7\x58\x6a\x0e\x69\x9c\xe8\x8c\x48\xf8\x57\x3a\x99\x65\xd7\xb3\x43\x5e\xcf\x30\xfe\x7e\x77\x7f\x53\x89\x1c\x13\x21\xfe\x61\x3c\x28\x47\x2e\xb7\x66\xc8\xeb\x52\x73\x86\x9c\xbd\x7d\x36\xf6\xc3\xe2\x76\x76\xfb\xf0\xf4\x7b\x35\xb7\x04\x4a\xa8\x7c\x0a\x2b\xc0\xf7\x66\xf3\xfd\x0c\xfc\x41\x9b\x91\x69\xaf\x4a\xf6\xc7\x7f\xe6\x40\xe8\x35\x79\x06\x4e\x41\x42\xde\x94\x8e\x52\xd2\xc9\xd4\xee\xf8\x4b\x0f\x56\xad\xd4\xc1\x74\x30\x3c\x0a\x5f\x50\xb2\x69\xdf\x0f\x0a\x4f\xd2\x16\x80\x5a\x92\x3c\x81\x02\xeb\xfe\xa9\x88\x77\x17\xbb\xff\x02\x00\x00\xff\xff\x15\xf0\xc6\xf9\x7a\x14\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 5242, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
