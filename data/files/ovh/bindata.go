// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package ovh

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x98\x4b\x6f\xe2\x30\x10\x80\xef\xfc\x0a\x2b\x67\x8a\x70\x12\x28\xe2\xd6\xd2\x2e\x39\xec\x23\xaa\xf7\x71\x58\xf5\x60\xc2\x08\x22\xc0\x46\xce\x43\x6a\x2b\xfe\xfb\xca\x81\x4d\x58\x9b\xc4\x86\x44\x7b\x29\xaa\x6d\xcd\x7c\x99\x99\x4f\x56\xf2\xd1\x43\xc8\x61\x74\x07\xce\x14\x39\x3c\x5f\x3b\x7d\xb9\x00\x2c\x77\xa6\xe8\x77\x0f\x21\x84\x9c\x25\xe4\x4e\x0f\xa1\xd7\x62\x47\xc0\x2a\xe6\x2c\x29\x77\x3f\x8a\xbf\x08\x39\x5b\x1e\xd1\x34\xe6\x4c\xc6\x79\x04\x9a\xad\xa9\x60\x3c\x4e\xfa\x68\x46\x19\x5d\xd2\x22\x6e\x71\xf0\x18\x41\x1e\xfb\xca\x45\xba\x46\x0f\x3b\x10\x71\x74\x76\xe0\x9d\x33\xa8\x12\x14\x4b\x8f\x01\xc1\xce\xe9\xdf\xd7\xe2\xf7\xd0\xaf\x4f\x3f\x17\x34\x87\x6d\xcc\x20\xe9\xa3\x4f\x82\xb2\x08\x2e\x65\xff\x05\x49\x0a\x82\xa1\xe7\x4c\xf0\x3d\x34\xa6\x9f\xbf\x3c\x5c\x91\x9e\xa4\x82\x26\x0b\x9e\x89\x55\x53\xfa\x19\xb0\x54\xd0\xad\x4d\x7a\xf2\x38\x57\xd3\x97\xfd\x88\x59\x92\xca\x14\xdf\xdf\xf6\x70\xa1\x2b\xc9\x26\x93\xc9\x7e\x86\x04\xcd\x3e\x7f\xfb\xf1\x84\x70\x95\x69\x09\x49\x24\xe2\xfd\x5f\x6c\x8c\xf2\x19\x17\xb2\x66\xde\x00\xcf\xd7\xef\xd5\xc1\x88\xa6\xb0\xe2\xe2\xad\x8c\xb4\xe5\xd9\xf2\x6c\x7b\x2f\x73\xe0\xea\x19\xe9\xce\x99\x22\xb7\xca\x13\x27\x1b\xb9\x30\xba\x58\x39\x8d\xd0\xad\x25\x74\xdb\x11\xba\x0a\xa1\xaf\x12\x8e\x86\x76\x84\x5e\x2d\xa1\xdf\x8e\xd0\x57\x08\x27\x2a\x21\x1e\x1a\x11\x09\xb1\x6b\xb2\x3b\xf0\x1b\x01\x09\x79\xba\xba\xc5\xd8\x8a\xae\xbe\xc1\x9d\xd2\x69\xed\x75\xad\xe8\xea\x9b\xeb\xb6\xa1\x53\x87\x4f\x6b\xad\x6f\x39\x7c\x2f\x0f\x5f\x3a\xe9\x6f\x31\x80\x32\x9a\xa9\x8e\xe3\x5b\x45\x96\xa4\x36\x32\xdf\x4c\xaa\xd6\x14\x6b\x03\x69\x6b\xb4\x44\xb5\xb1\xfa\x66\x54\xd5\x6c\x57\x9b\x4e\x83\xda\xcf\xf3\xbb\x7b\xab\x5a\x7a\xb5\x80\x61\xb6\xd8\xc6\xd1\x89\x91\x80\xc8\x41\x24\xa6\x92\xde\xeb\x12\x99\x30\xf1\xc8\xaa\x90\xed\x38\xd5\x7a\xe2\x91\xee\x93\x09\xd4\x1b\xd6\x82\x4e\x3a\x03\x9d\x28\xa0\xde\x50\x05\x9d\x18\x41\xc7\xf5\xa0\x78\xdc\x19\x29\x1e\xab\xe2\x6b\xa8\x78\x6c\xee\xbe\x5b\x0f\xeb\x75\x37\xa7\x9e\xee\xfe\xd5\xb4\x81\x9d\x52\x4d\x37\xf9\xff\x50\x2a\xb0\x54\xaa\x2d\x67\x6b\xa5\x02\x4b\xa5\xda\x82\xb6\x56\x2a\xb0\x55\xaa\x2d\x69\x07\x4a\x05\xd6\x4a\xb5\x85\xed\x42\x29\x12\x36\x8d\x80\xdd\x95\x7f\x8b\x53\xfa\x08\x18\xa4\x22\x61\xd3\x08\xd8\x5d\xf8\xb7\x48\xa5\x0f\x80\x41\x2a\x12\x36\xf6\x7f\xd2\x19\xa9\x6a\xd5\x85\xee\x1b\xb4\x22\xe1\x9d\xeb\x5b\x5e\x55\xdd\xb2\xba\x7e\xc3\xa4\x96\xaf\xca\x9b\x6c\x01\x82\x41\x5a\xbc\x27\x1f\xe1\x1d\x19\xfd\x9f\xef\x19\xd5\x63\x55\xbb\x05\xfd\xe0\x7e\xe0\x97\x1c\x17\x9e\x4e\xdd\x3f\x7e\x42\xa9\x82\x9d\x3e\xa4\x4c\x51\x2a\x32\x28\x57\x0f\xbd\xf3\x5f\xf9\x72\x7f\xe8\x1d\xfe\x04\x00\x00\xff\xff\xa9\xb0\x5e\x9c\x94\x11\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 4500, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
