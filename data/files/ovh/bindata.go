// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package ovh

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x98\x4b\x8f\xa2\x4c\x14\x86\xf7\xfe\x8a\x0a\x6b\xdb\x58\x80\x97\xb8\x53\xbb\x3f\x59\x7c\x33\x43\xba\xe6\xb2\x98\xb8\x28\xe1\x44\x89\x58\x65\x8a\x4b\xd2\xdd\xf1\xbf\x4f\x0a\x1d\xb0\x0b\x81\x52\xc8\x6c\x9a\xb6\x2e\xe7\x7d\xea\x9c\xf3\xa6\x02\x1f\x3d\x84\x0c\x46\x0f\x60\xcc\x90\xc1\xd3\x9d\xd1\x97\x03\xc0\x52\x63\x86\x7e\xf7\x10\x42\xc8\xf0\x21\x35\x7a\x08\xad\xb3\x19\x01\xdb\x80\xb3\x28\x9f\xfd\xc8\xfe\x22\x64\x84\xdc\xa3\x71\xc0\x99\x8c\xb3\x00\x9a\xec\xa8\x60\x3c\x88\xfa\x68\x49\x19\xf5\x69\x16\x37\x5b\x78\x8e\x20\x97\x7d\xe5\x22\xde\xa1\xf9\x01\x44\xe0\x5d\x2d\x78\xe7\x0c\x0a\x81\x6c\x68\xe1\x10\x6c\x5c\x7e\xae\xb3\xe7\xa9\x5f\x2d\xbf\x12\x34\x85\x30\x60\x10\xf5\xd1\x7f\x82\x32\x0f\x6e\xa9\xff\x82\x28\x06\xc1\xd0\x4b\x22\xf8\x11\x6a\xe5\x57\xaf\xf3\x3b\xe4\x49\x2c\x68\xb4\xe1\x89\xd8\xd6\xc9\x2f\x81\xc5\x82\x86\x3a\xf2\x64\xb1\x52\xe5\xf3\x7a\x04\x2c\x8a\xa5\xc4\xf7\xb7\x23\xdc\xa8\x4a\xb4\x4f\xa4\xd8\x4f\x97\xa0\xe5\xff\xdf\x7e\x3c\x23\x5c\x28\xf9\x10\x79\x22\x38\xfe\xc5\xc6\x28\x5d\x72\x21\x73\x66\x0d\xf0\x6a\xf7\x5e\x2c\xf4\x68\x0c\x5b\x2e\xde\xf2\x48\x21\x4f\xfc\xab\xe9\xa3\xd4\xc0\xc5\x19\xe9\xc1\x98\x21\xb3\xd0\x09\xa2\xbd\x1c\x18\xdd\xcc\x5c\x89\xd0\xac\x24\x34\xdb\x11\x9a\x0a\xa1\xad\x12\x8e\x86\x7a\x84\x56\x25\xa1\xdd\x8e\xd0\x56\x08\xa7\x2a\x21\x1e\x36\x22\x12\xa2\x57\x64\x73\x60\xd7\x02\x12\xf2\x7c\x77\x89\xb1\x16\x5d\x75\x81\x3b\xa5\x2b\x95\xd7\xd4\xa2\xab\x2e\xae\xd9\x86\x4e\x6d\xbe\x52\x69\x6d\xcd\xe6\x7b\x9d\x7f\xe9\xa4\xbe\x59\x03\xca\x68\x4d\x79\x1c\x3f\x6a\x64\x49\xaa\x63\xe6\x87\x49\xd5\x9c\xe2\x52\x43\xea\x3a\x5a\xa2\xea\xb8\xfa\x61\x54\xd5\xd9\x66\xa9\x3b\x1b\xac\xfd\xb2\x7a\x9a\x68\xe5\xd2\xaa\x04\x74\x93\x4d\x18\x78\x17\x46\x02\x22\x05\x11\x35\xa5\x74\x52\x36\x51\x13\x26\x1e\x69\x25\xb2\x1d\xa7\x9a\x4f\x3c\x2a\xfb\xa9\x09\xd4\x1a\x56\x82\x4e\x3b\x03\x9d\x2a\xa0\xd6\x50\x05\x9d\x36\x82\x8e\xab\x41\xf1\xb8\x33\x52\x3c\x56\x8d\x5f\x42\xc5\xe3\xe6\xea\x9b\xd5\xb0\x56\x77\x7d\x6a\x95\xbd\x7f\x37\xad\xa3\x67\xa9\xba\x9b\xfc\x5f\x58\xca\xd1\xb4\x54\x5b\xce\xd6\x96\x72\x34\x2d\xd5\x16\xb4\xb5\xa5\x1c\x5d\x4b\xb5\x25\xed\xc0\x52\x8e\xb6\xa5\xda\xc2\x76\x61\x29\xe2\xd6\xb5\x80\xde\x95\xff\x88\xa7\xca\x2d\xd0\x60\x2a\xe2\xd6\xb5\x80\xde\x85\xff\x88\xa9\xca\x0d\xd0\x60\x2a\xe2\xd6\xd6\x7f\xda\x19\xa9\xea\xaa\x1b\xd5\x6f\xb0\x15\x71\x9f\x4c\x5b\xf3\xaa\xea\x96\xd5\xb4\x6b\x3a\x35\x7f\x55\xde\x27\x1b\x10\x0c\xe2\xec\x3d\xf9\x0c\x6f\xc8\xe8\x9f\xbe\x67\x14\xc7\x2a\x66\x33\xfa\xc1\x64\x60\xe7\x1c\x37\x4e\xa7\xce\xc7\x9c\x87\x85\xd0\x65\x50\x22\x50\xff\x50\x6c\xc8\x27\x4f\x57\x5b\xcf\x5f\x5f\x3e\x6d\xf4\x41\x0e\xc5\x22\x81\x62\x47\xef\xfa\xb9\xee\xc9\xff\x4e\x7f\x02\x00\x00\xff\xff\x69\xf3\x00\x4f\xcf\x11\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 4559, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
