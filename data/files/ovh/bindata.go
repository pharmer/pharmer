// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package ovh

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x98\x4b\x6f\xe2\x30\x10\x80\xef\xfc\x0a\x2b\x67\x8a\x70\x12\x68\xc4\xad\xa5\x5d\x72\xd8\x47\x54\xef\xe3\xb0\xea\xc1\x84\x11\x44\x80\x8d\x9c\x87\xd4\x56\xfc\xf7\x95\x03\x4b\x58\x9b\xc4\x86\x44\x7b\x21\xc2\xb6\x3c\x9f\x67\xe6\x93\x95\x7c\xf4\x10\x72\x18\xdd\x82\x33\x41\x0e\x2f\x56\x4e\x5f\x0e\x00\x2b\x9c\x09\xfa\xdd\x43\x08\x21\x67\x01\x85\xd3\x43\xe8\xb5\x9c\x11\xb0\x4c\x38\x4b\x4f\xb3\x1f\xe5\x2f\x42\xce\x86\xc7\x34\x4b\x38\x93\xfb\x3c\x02\xcd\x57\x54\x30\x9e\xa4\x7d\x34\xa5\x8c\x2e\x68\xb9\x6f\xb9\xf0\xb0\x83\x5c\xf6\x95\x8b\x6c\x85\x1e\xb6\x20\x92\xf8\x6c\xc1\x3b\x67\x50\x05\x28\x87\x1e\x43\x82\x9d\xe3\xdf\xd7\xf2\xb9\xef\xd7\x87\x9f\x09\x5a\xc0\x26\x61\x90\xf6\xd1\x27\x41\x59\x0c\x97\xa2\xff\x82\x34\x03\xc1\xd0\x73\x2e\xf8\x0e\x1a\xc3\xcf\x5e\x1e\xae\x08\x4f\x32\x41\xd3\x39\xcf\xc5\xb2\x29\xfc\x14\x58\x26\xe8\xc6\x26\x3c\x79\x9c\xa9\xe1\x4f\xf5\x48\x58\x9a\xc9\x10\xdf\xdf\x76\x70\xa1\x2a\xe9\x3a\x97\xc1\x7e\x46\x04\x4d\x3f\x7f\xfb\xf1\x84\x70\x15\x69\x01\x69\x2c\x92\xdd\x5f\x6c\x8c\x8a\x29\x17\x32\x67\xde\x00\xcf\x56\xef\xd5\xc2\x98\x66\xb0\xe4\xe2\xed\xb4\xd3\x86\xe7\x8b\xb3\xe9\x9d\x8c\x81\xab\x33\xd2\xad\x33\x41\x6e\x15\x27\x49\xd7\x72\x60\x74\x31\x73\x1a\xa1\x5b\x4b\xe8\xb6\x23\x74\x15\x42\x5f\x25\x1c\x0d\xed\x08\xbd\x5a\x42\xbf\x1d\xa1\xaf\x10\x06\x2a\x21\x1e\x1a\x11\x09\xb1\x2b\xb2\x3b\xf0\x1b\x01\x09\x79\xba\xba\xc4\xd8\x8a\xae\xbe\xc0\x9d\xd2\x69\xe5\x75\xad\xe8\xea\x8b\xeb\xb6\xa1\x53\x9b\x4f\x2b\xad\x6f\xd9\x7c\x2f\x0f\x5f\x3a\xa9\x6f\xd9\x80\x72\x37\x53\x1e\xc7\xb7\x8a\x2c\x49\x6d\x64\xbe\x99\x54\xcd\x29\xd6\x1a\xd2\xd6\x68\x89\x6a\x63\xf5\xcd\xa8\xaa\xd9\xae\xd6\x9d\x06\xb5\x9f\x67\x77\xf7\x56\xb9\xf4\x6a\x01\xa3\x7c\xbe\x49\xe2\x23\x23\x01\x51\x80\x48\x4d\x29\xbd\xd7\x25\x32\x61\xe2\x91\x55\x22\xdb\x71\xaa\xf9\xc4\x23\xdd\x27\x13\xa8\x37\xac\x05\x0d\x3a\x03\x0d\x14\x50\x6f\xa8\x82\x06\x46\xd0\x71\x3d\x28\x1e\x77\x46\x8a\xc7\xaa\xf8\x1a\x2a\x1e\x9b\xab\xef\xd6\xc3\x7a\xdd\xf5\xa9\xa7\xbb\x7f\x35\x6d\x68\xa7\x54\xd3\x4d\xfe\x3f\x94\x0a\x2d\x95\x6a\xcb\xd9\x5a\xa9\xd0\x52\xa9\xb6\xa0\xad\x95\x0a\x6d\x95\x6a\x4b\xda\x81\x52\xa1\xb5\x52\x6d\x61\xbb\x50\x8a\x44\x4d\x2d\x60\x77\xe5\xdf\xe2\x94\xde\x02\x06\xa9\x48\xd4\xd4\x02\x76\x17\xfe\x2d\x52\xe9\x0d\x60\x90\x8a\x44\x8d\xf5\x0f\x3a\x23\x55\xad\xba\x50\x7d\x83\x56\x24\xba\x73\x7d\xcb\xab\xaa\x5b\x56\xd7\x6f\xe8\xd4\xd3\xab\xf2\x3a\x9f\x83\x60\x90\x95\xef\xc9\x07\x78\x47\xee\xfe\xcf\xf7\x8c\xea\x58\xd5\x6c\x49\x3f\x08\x06\xd5\xd9\x2e\x9c\x4e\x9d\x3f\x7c\x42\xa9\x36\x3b\x7e\x48\x99\xa0\x4c\xe4\x70\x1a\xdd\xf7\xce\x9f\xf2\xe5\x7e\xdf\xdb\xff\x09\x00\x00\xff\xff\xe6\x95\xe0\x4e\x94\x11\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 4500, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
