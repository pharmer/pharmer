// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package ovh

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x98\x4d\x6f\xe2\x3c\x10\xc7\xef\x7c\x8a\x91\xcf\x14\xe1\x24\xd0\x88\x5b\x4b\xfb\x90\xc3\xb3\xbb\x51\xbd\x2f\x87\x55\x0f\x6e\xb0\x4a\x04\xd8\xd4\x79\x91\xda\x8a\xef\xbe\x72\x80\x84\x75\xde\x0c\x89\xf6\x52\xe8\xc4\xcc\xff\xe7\x99\xf9\xcb\x8a\x3f\x07\x00\x88\xd3\x2d\x43\x33\x40\x22\x5d\xa1\xa1\x0a\x30\x9e\xa2\x19\xfc\x1e\x00\x00\xa0\x25\x4b\xb3\x28\x00\x7a\xa3\xa7\x6f\x3b\x29\x96\x68\x00\xf0\x9c\xad\x97\xec\x35\x14\x3c\xca\x7f\xf3\x99\xfd\x05\x40\x1b\x11\xd0\x38\x14\x5c\x65\xbf\x67\x34\x59\x51\xc9\x45\x18\x0d\x61\x4e\x39\x5d\x9e\xb2\xe5\x19\xd4\xb2\xaf\x42\xc6\x2b\xb8\xdb\x32\x19\x06\x67\x0b\x3e\x04\x67\x85\x40\x16\xba\xf7\x08\x46\xc7\x7f\x9f\xb3\xcf\xfd\xb0\x5e\x7e\x21\x69\xca\x36\x21\x67\xd1\x10\xfe\x93\x94\x07\xac\x4a\xfd\x17\x8b\x62\x26\x39\x3c\x26\x52\xec\x58\xa3\xfc\xe2\xe9\xee\x02\x79\x12\x4b\x1a\xbd\x88\x44\xbe\x36\xc9\xcf\x19\x8f\x25\xdd\x98\xc8\x93\xfb\x85\x2e\x9f\xf7\x23\xe4\x51\xac\x24\xbe\xbf\xef\x58\x45\x57\xa2\x75\xa2\xc4\x7e\xfa\x04\xe6\xff\x7f\xfb\xf1\x00\xb8\x50\x5a\xb2\x28\x90\xe1\xee\x84\x8d\x21\x9d\x0b\xa9\x6a\x66\x8f\xf0\x62\xf5\x51\x2c\x0c\x68\xcc\x5e\x85\x7c\xcf\x33\x6d\x44\xb2\x3c\x7b\xbc\x53\x1a\xb8\xd8\x23\xdd\xa2\x19\x58\x85\x4e\x18\xad\x55\x60\x52\x59\xb9\x12\xa1\x55\x4b\x68\x75\x23\xb4\x34\x42\x47\x27\x9c\x8c\xcd\x08\xed\x5a\x42\xa7\x1b\xa1\xa3\x11\xba\x3a\x21\x1e\xb7\x22\x12\x62\xd6\x64\x6b\xe4\x34\x02\x12\xf2\x70\x71\x8b\xb1\x11\x5d\x7d\x83\x7b\xa5\x2b\xb5\xd7\x32\xa2\xab\x6f\xae\xd5\x85\x4e\x1f\xbe\x52\x6b\x1d\xc3\xe1\x7b\xba\xfb\xd2\x4b\x7f\xb3\x01\x54\xd9\xda\xea\x38\xbd\xd6\xc8\x8a\xd4\xc4\xcc\x57\x93\xea\x35\xc5\xa5\x81\x34\x75\xb4\x42\x35\x71\xf5\xd5\xa8\xba\xb3\xad\xd2\x74\xb6\x58\xfb\x71\x71\x73\x6b\x54\x4b\xbb\x16\xd0\x4f\x5e\x36\x61\x70\x64\x24\x4c\xa6\x4c\x46\x6d\x25\xbd\x2d\x9b\xa8\x0d\x13\x4f\x8c\x0a\xd9\x8d\x53\xaf\x27\x9e\x94\xfd\xd4\x06\x6a\x8f\x6b\x41\xdd\xde\x40\x5d\x0d\xd4\x1e\xeb\xa0\x6e\x2b\xe8\xb4\x1e\x14\x4f\x7b\x23\xc5\x53\xdd\xf8\x25\x54\x3c\x6d\xef\xbe\x55\x0f\x6b\xf7\x37\xa7\x76\xd9\xfb\x17\xd3\x7a\x66\x96\x6a\x3a\xc9\xff\x85\xa5\x3c\x43\x4b\x75\xe5\xec\x6c\x29\xcf\xd0\x52\x5d\x41\x3b\x5b\xca\x33\xb5\x54\x57\xd2\x1e\x2c\xe5\x19\x5b\xaa\x2b\x6c\x1f\x96\x22\x7e\xd3\x08\x98\x1d\xf9\xd7\x78\xaa\x3c\x02\x2d\xa6\x22\x7e\xd3\x08\x98\x1d\xf8\xd7\x98\xaa\x3c\x00\x2d\xa6\x22\x7e\x63\xff\xdd\xde\x48\x75\x57\x55\x74\xbf\xc5\x56\xc4\xbf\xb1\x1c\xc3\xa3\xaa\x5f\x56\xcb\x69\x98\xd4\xfc\x55\x79\x9d\xbc\x30\xc9\x59\x9c\xbd\x27\x1f\xe0\x91\xca\xfe\xd7\x7d\x46\xb1\xad\xe2\x69\x46\x3f\x72\x47\xc5\xde\x2a\x76\xa7\x3f\x3f\x5c\xac\x14\xc9\x8e\xd7\x2b\x33\x88\x65\xc2\x86\xe7\xe1\x37\x5a\x15\xcd\xae\x5d\x0e\xf1\x3c\xbc\x1f\x9c\x7f\x3e\x0f\xd4\xb7\xfd\x9f\x00\x00\x00\xff\xff\x98\x14\x38\x3e\xd8\x11\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 4568, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
