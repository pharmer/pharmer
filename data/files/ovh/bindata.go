// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package ovh

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x98\xdf\x6f\xe2\x38\x10\xc7\xdf\xf9\x2b\xac\x3c\x03\xd7\x04\xca\xa2\xbe\x51\xca\xc2\x49\xb7\x2d\xaa\xdb\xdb\x87\xd3\xaa\x72\x93\xd9\x92\x6b\xb0\xb3\xb6\x93\xbb\xee\xaa\xff\xfb\xc9\x06\x12\x70\x7e\x99\x26\xba\x97\x36\xf5\xd8\x33\x9f\xce\xcc\x57\x96\xe7\x57\x0f\x21\x87\x92\x2d\x38\x57\xc8\x61\xe9\xc6\xe9\xab\x05\xa0\xa9\x70\xae\xd0\x5f\x3d\x84\x10\x72\x02\x48\xf5\x32\x42\xce\x0f\x72\xf8\x8a\x39\x0b\x9c\x1e\x42\xdf\xf4\x01\x0e\x2f\x21\xa3\xf9\x99\x5f\xfa\x27\x42\x4e\xc4\x7c\x22\x43\x46\x95\xfb\x6b\x20\xc9\x86\x70\xca\x42\xd1\x47\x73\x42\x49\x70\xf0\x96\x79\x50\xdb\x6e\x19\x97\x1b\x34\xdb\x02\x0f\xfd\xa3\x0d\x3f\x19\x85\x3c\x80\x5e\xba\x5e\x61\xd7\xd9\xff\xf9\x4d\xff\x7e\xef\x57\x87\x5f\x72\x92\x42\x14\x52\x10\x7d\xf4\x99\x13\xea\x43\x59\xf4\xaf\x20\x24\x70\x8a\x16\x09\x67\x31\xd4\x86\x5f\xde\xcf\xce\x08\x8f\x25\x27\xe2\x99\x25\xfc\xa5\x2e\xfc\x1c\xa8\xe4\x24\xb2\x09\x8f\xaf\x97\x66\xf8\xac\x1e\x21\x15\x52\x85\x78\x78\x8b\xa1\xa4\x2a\xe2\x35\x51\xc1\xd2\x58\x0c\x84\x08\x06\x6e\x1e\x27\x00\xe1\xf3\x30\x3e\x40\xbb\x28\x9d\x33\xae\x32\x36\x1a\xba\xcb\xcd\xcf\x7c\xa3\x4f\x24\xbc\x30\xfe\xa6\x76\xfd\xb9\xc6\x68\x1e\xb1\x24\x38\x32\xc7\x2a\x82\x9b\xff\x87\x64\xeb\x5c\x21\x2f\x8f\x13\x8a\x57\xb5\x70\x59\x9a\x37\x83\xcf\xab\xe4\xf3\xda\xf1\x79\x06\xdf\xd8\xe4\xbb\xbc\xb0\xe1\x1b\x55\xf2\x8d\xdb\xf1\x8d\x0d\xbe\xa9\xc9\xe7\x5e\xd4\x02\x2a\xc7\x18\xdf\x20\x9b\x02\x7b\xc3\x71\x2d\x20\xc6\x37\x67\x97\xd7\xb5\xa2\xab\x2e\x6f\xa7\x74\x85\xe2\x7a\x56\x74\xd5\xc5\xf5\xda\xd0\x99\xad\x57\x28\xed\xb8\x91\x6e\xfe\xc7\xdd\xe3\x0d\xba\x9f\x7d\xe9\xa4\xbe\xba\x01\x95\xb7\xa6\x3c\x4e\xce\x13\xf1\x29\xa9\x8d\x94\x3f\x4c\x6a\xe6\xd4\x2d\x34\x64\xbd\x9e\x4f\x51\x6d\x54\xfd\x61\x54\x53\xd9\x5e\xa1\x3b\x1b\xa4\xbd\x58\x0e\x3e\x59\xe5\x72\x54\x09\xb8\x4e\x9e\xa3\xd0\xdf\x33\x62\xe0\x29\x70\xd1\x94\xd2\x4f\x45\x11\x35\x61\xba\x97\x56\x89\x6c\xc7\x69\xe6\xd3\xbd\x2c\xea\xa9\x09\x74\x74\x51\x09\x3a\xed\x0c\x74\x6a\x80\x8e\x2e\x4c\xd0\x69\x23\xe8\xa4\x1a\xd4\x9d\x74\x46\xea\x4e\x4c\xe1\x17\x50\xdd\x49\x73\xf5\xbd\x6a\xd8\x51\x77\x7d\x3a\x2a\x6a\xff\x6c\xda\x95\x9d\xa4\xea\x6e\xf2\xff\x43\x52\x2b\x4b\x49\xb5\xe5\x6c\x2d\xa9\x95\xa5\xa4\xda\x82\xb6\x96\xd4\xca\x56\x52\x6d\x49\x3b\x90\xd4\xca\x5a\x52\x6d\x61\xbb\x90\x14\x5e\xd7\xb5\x80\xdd\x95\xff\x11\x4d\x15\x5b\xa0\x41\x54\x78\x5d\xd7\x02\x76\x17\xfe\x47\x44\x55\x6c\x80\x06\x51\xe1\x75\x6d\xfd\xa7\x9d\x91\x9a\xaa\x2a\xa9\x7e\x83\xac\xf0\x7a\xe0\x8d\x2d\xaf\xaa\x6e\x59\xbd\x71\x4d\xa7\x66\x8f\x64\x9f\x43\x00\x54\x86\x24\x2a\x79\x22\xc7\x9c\xa5\x61\x00\x5c\x21\xdc\xed\xe7\x22\x07\x7f\x71\x44\xde\x3e\x33\xbe\x25\x52\x59\xbf\x87\x10\x1d\xbd\xdc\x08\xa5\x4c\xea\x57\xbf\xf2\x7a\xf0\xa7\x3c\x6e\x08\xdf\x02\x1f\x92\x38\x16\x3e\x0b\x60\xe8\xb3\xed\x6f\x7e\x94\x08\x09\x7c\x90\xb3\x28\x97\x87\x67\xfd\x7b\xe6\x55\x07\x39\x1d\x00\xe4\xae\x77\x13\x1b\x9f\xd1\xef\xe1\x8b\xe6\xc5\x4f\x8f\x78\x71\x7f\x3b\xfb\xb2\xc8\xb8\x76\x5e\x18\xdf\xea\x41\x8f\x78\x4a\x04\x70\x3d\xf7\x39\xd9\xf0\xb7\xd8\xd5\xa6\xdc\x1a\x91\x67\xd0\x7c\x8f\xa5\xe6\x90\xc6\x89\xce\x88\x84\x7f\xa5\x93\x59\xde\xfb\x76\xc8\xeb\x19\xc6\x5f\xef\xee\x6f\x2a\x91\x63\x22\xc4\x3f\x8c\x07\xe5\xc8\xe5\xd6\x0c\x79\x5d\x6a\xce\x90\xb3\xd3\x67\x63\x3f\x2c\x6e\x67\xb7\x0f\x4f\xbf\x57\x73\x4b\xa0\x84\xca\xa7\xb0\x02\x7c\x67\x36\xcf\x67\xe0\x0f\xda\x8c\x4c\x7b\x55\xb2\xf7\x5f\xe6\x40\xe8\x35\x79\x06\x4e\x41\x96\x4d\x83\x94\xa2\x0e\x9a\x1c\x4e\x87\x35\x8a\x3d\xb5\xee\xa7\x84\x47\x2d\x1e\x40\xea\x5c\x21\xc9\x13\xc8\x59\x9d\x1f\xa4\xb8\xa6\xa7\x87\xbb\xd5\xde\x31\xb8\x06\xee\xbd\xff\x17\x00\x00\xff\xff\xda\x8c\x21\x60\x96\x14\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 5270, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
