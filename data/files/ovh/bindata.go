// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package ovh

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x98\xdf\x6f\xe2\x38\x10\xc7\xdf\xfb\x57\x58\x79\x06\x8e\x04\xca\xa2\xbe\x51\xca\xc2\x49\xb7\x2d\xaa\xdb\xdb\x87\xd3\xaa\x72\x93\xd9\x92\x6b\xb0\xb3\xb6\x93\xbb\xee\x8a\xff\xfd\x64\x53\x12\x70\x7e\x99\x26\xba\x97\x92\x7a\x9c\x99\x8f\x67\xe6\xab\xc8\xf3\xeb\x02\x21\x87\x92\x2d\x38\x57\xc8\x61\xe9\xc6\xe9\xa9\x05\xa0\xa9\x73\x85\xfe\xba\x40\x08\x21\x27\x80\x54\xaf\x22\xe4\xfc\x20\x87\xa7\x98\xb3\xc0\xb9\x40\xe8\x9b\xde\xcf\xe1\x25\x64\x54\x64\xef\xfc\xd2\x7f\x11\x72\x22\xe6\x13\x19\x32\xaa\xbc\x5f\x03\x49\x36\x84\x53\x16\x8a\x1e\x9a\x13\x4a\x82\x83\xb7\xcc\x83\xda\x76\xcb\xb8\xdc\xa0\xd9\x16\x78\xe8\x1f\x6d\xf8\xc9\x28\xe4\x01\xf4\xd2\xf5\x0a\xbb\xce\xfb\xbf\xdf\xf4\xef\xae\x57\x1d\x7e\xc9\x49\x0a\x51\x48\x41\xf4\xd0\x67\x4e\xa8\x0f\x65\xd1\xbf\x82\x90\xc0\x29\x5a\x24\x9c\xc5\x50\x1b\x7e\x79\x3f\x3b\x23\x3c\x96\x9c\x88\x67\x96\xf0\x97\xba\xf0\x73\xa0\x92\x93\xc8\x26\x3c\xbe\x5e\x9a\xe1\xb3\x7a\x84\x54\x48\x15\xe2\xe1\x2d\x86\x92\xaa\x88\xd7\x44\x05\x4b\x63\xd1\x17\x22\xe8\xbb\x79\x9c\x00\x84\xcf\xc3\xf8\x00\xed\xa2\x74\xce\xb8\xca\xd8\x68\xe0\x2e\x37\x3f\xf3\x8d\x3e\x91\xf0\xc2\xf8\x9b\xda\xf5\xe7\x1a\xa3\x79\xc4\x92\xe0\xc8\x1c\xab\x08\x6e\x7e\x42\xb2\x75\xae\x90\x97\xc7\x09\xc5\xab\x5a\xb8\x2c\xcd\x9b\xc1\xe7\x55\xf2\x79\xed\xf8\x3c\x83\x6f\x6c\xf2\x5d\x0e\x6d\xf8\x46\x95\x7c\xe3\x76\x7c\x63\x83\x6f\x6a\xf2\xb9\xc3\x5a\x40\xe5\x18\xe3\x1b\x64\x53\x60\x6f\x30\xae\x05\xc4\xf8\xe6\xec\xf2\xba\x56\x74\xd5\xe5\xed\x94\xae\x50\x5c\xcf\x8a\xae\xba\xb8\x5e\x1b\x3a\xb3\xf5\x0a\xa5\x1d\x37\xd2\xcd\xff\xb8\x7b\xbc\x41\xf7\xb3\x2f\x9d\xd4\x57\x37\xa0\xf2\xd6\x94\xc7\xc9\x79\x22\x3e\x25\xb5\x91\xf2\x87\x49\xcd\x9c\xba\x85\x86\xac\xd7\xf3\x29\xaa\x8d\xaa\x3f\x8c\x6a\x2a\xdb\x2b\x74\x67\x83\xb4\x17\xcb\xfe\x27\xab\x5c\x8e\x2a\x01\xd7\xc9\x73\x14\xfa\xef\x8c\x18\x78\x0a\x5c\x34\xa5\xf4\x53\x51\x44\x4d\x98\xee\xa5\x55\x22\xdb\x71\x9a\xf9\x74\x2f\x8b\x7a\x6a\x02\x1d\x0d\x2b\x41\xa7\x9d\x81\x4e\x0d\xd0\xd1\xd0\x04\x9d\x36\x82\x4e\xaa\x41\xdd\x49\x67\xa4\xee\xc4\x14\x7e\x01\xd5\x9d\x34\x57\xdf\xab\x86\x1d\x75\xd7\xa7\xa3\xa2\xf6\xcf\xa6\x5d\xd9\x49\xaa\xee\x4b\xfe\x7f\x48\x6a\x65\x29\xa9\xb6\x9c\xad\x25\xb5\xb2\x94\x54\x5b\xd0\xd6\x92\x5a\xd9\x4a\xaa\x2d\x69\x07\x92\x5a\x59\x4b\xaa\x2d\x6c\x17\x92\xc2\xeb\xba\x16\xb0\xfb\xe4\x7f\x44\x53\xc5\x16\x68\x10\x15\x5e\xd7\xb5\x80\xdd\x07\xff\x23\xa2\x2a\x36\x40\x83\xa8\xf0\xba\xb6\xfe\xd3\xce\x48\x4d\x55\x95\x54\xbf\x41\x56\x78\xdd\xf7\xc6\x96\x9f\xaa\x6e\x59\xbd\x71\x4d\xa7\x66\x97\x64\x9f\x43\x00\x54\x86\x24\x2a\xb9\x22\xc7\x9c\xa5\x61\x00\x5c\x21\xdc\xbd\x8f\x45\x0e\xfe\xe2\x88\xbc\x7d\x66\x7c\x4b\xa4\xb2\x7e\x0f\x21\x3a\xba\xb9\x11\x4a\x99\xd4\xb7\x7e\xe5\xf5\xe0\x4f\x79\xdc\x10\xbe\x05\x3e\x20\x71\x2c\x7c\x16\xc0\xc0\x67\xdb\xdf\xfc\x28\x11\x12\x78\x3f\x67\x51\x2e\x0f\xd7\xfa\x5d\xe6\x55\x07\x39\x1d\x00\xe4\xae\xf7\x03\x1b\x9f\xd1\xef\xe1\x8b\xe6\xc5\x4f\x8f\x78\x71\x7f\x3b\xfb\xb2\xc8\xb8\xf6\x5e\x18\xdf\xea\x39\x8f\x78\x4a\x04\x70\x3d\xf6\x39\xd9\xf0\xb7\xd8\xd7\xa6\xdc\x1a\x91\x67\xd0\x7c\x8f\xa5\xe6\x90\xc6\x89\xce\x88\x84\x7f\xa5\x93\x59\x76\x3d\x3b\xe4\xf5\x0c\xe3\xaf\x77\xf7\x37\x95\xc8\x31\x11\xe2\x1f\xc6\x83\x72\xe4\x72\x6b\x86\xbc\x2e\x35\x67\xc8\xd9\xdb\x67\x63\x3f\x2c\x6e\x67\xb7\x0f\x4f\xbf\x57\x73\x4b\xa0\x84\xca\xa7\xb0\x02\x7c\x6f\x36\xdf\xcf\xc0\x1f\xb4\x19\x99\xf6\xaa\x64\xbf\x3f\x99\x03\xa1\xd7\xe4\x19\x38\x05\x09\x79\x53\x3a\x4a\x49\x27\x53\xbb\xe3\x93\x1e\xac\x5a\xa9\x83\xe9\x60\x78\x14\xbe\xa0\x64\xd3\xbe\x1f\x1f\x9e\xa4\x2d\x00\xb5\x24\x79\x02\x27\xc7\xf8\x41\xca\x56\xf5\x70\x71\xbf\x5e\x38\xd9\xfe\x57\x9d\x6f\x77\xb1\xfb\x2f\x00\x00\xff\xff\x7b\x26\xc0\xbc\xbe\x14\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 5310, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
