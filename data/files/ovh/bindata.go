// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package ovh

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x98\x4d\x6f\xe2\x3c\x10\xc7\xef\x7c\x0a\x2b\x67\x8a\x70\x12\x68\xc4\xad\xd0\x3e\xe4\xf0\xec\x6e\x54\xef\xcb\x61\xc5\xc1\x84\x11\x44\x80\xcd\x3a\x2f\x52\x5b\xf1\xdd\x57\x0e\x2c\x61\x9d\x17\x1b\x12\xed\xa5\x29\x63\x6b\xfe\x3f\xcf\xcc\x5f\x56\xf2\xd1\x43\xc8\x62\x74\x0f\xd6\x04\x59\x3c\xdb\x58\x7d\x19\x00\x96\x59\x13\xf4\xb3\x87\x10\x42\xd6\x0a\x32\xab\x87\xd0\x22\x5f\x11\xb0\x8e\x38\x8b\x2f\xab\x1f\xf9\x5f\x84\xac\x1d\x0f\x69\x12\x71\x26\xf3\x4c\x81\xa6\x1b\x2a\x18\x8f\xe2\x3e\x9a\x51\x46\x57\x34\xcf\x9b\x6f\x3c\x65\x90\xdb\x3e\x73\x91\x6c\xd0\xd3\x1e\x44\x14\x5e\x6d\x78\xe7\x0c\x0a\x81\x3c\x34\xf5\x09\xb6\xce\x3f\x17\xf9\xf3\xd8\xaf\x97\x9f\x0b\x9a\xc1\x2e\x62\x10\xf7\xd1\x7f\x82\xb2\x10\xaa\xd4\x7f\x40\x9c\x80\x60\xe8\x25\x15\xfc\x00\x8d\xf2\xf3\xd7\xa7\x1b\xe4\x49\x22\x68\xbc\xe4\xa9\x58\x37\xc9\xcf\x80\x25\x82\xee\x4c\xe4\xc9\x74\xae\xca\x5f\xfa\x11\xb1\x38\x91\x12\x5f\xdf\x0e\x50\xd1\x95\x78\x9b\x4a\xb1\xef\x01\x41\xb3\xff\xbf\x7c\x7b\x46\xb8\x50\x5a\x41\x1c\x8a\xe8\xf0\x07\x1b\xa3\x6c\xc6\x85\xac\x99\x33\xc0\xf3\xcd\x7b\xb1\x31\xa4\x09\xac\xb9\x78\xbb\x64\xda\xf1\x74\x75\xb5\x7c\x90\x1a\xb8\x38\x23\xdd\x5b\x13\x64\x17\x3a\x51\xbc\x95\x81\x51\x65\xe5\x4a\x84\x76\x2d\xa1\xdd\x8e\xd0\x56\x08\x5d\x95\x70\x34\x34\x23\x74\x6a\x09\xdd\x76\x84\xae\x42\xe8\xa9\x84\x78\xa8\x45\x24\xc4\xac\xc9\xf6\xc0\x6d\x04\x24\xe4\xf9\xe6\x16\x63\x23\xba\xfa\x06\x77\x4a\x57\x6a\xaf\x6d\x44\x57\xdf\x5c\xbb\x0d\x9d\x3a\x7c\xa5\xd6\xba\x86\xc3\xf7\xfa\xf4\xa9\x93\xfe\xe6\x03\x28\xb3\xe9\xea\x38\xbe\xd7\xc8\x92\xd4\xc4\xcc\x77\x93\xaa\x35\xc5\xa5\x81\x34\x75\xb4\x44\x35\x71\xf5\xdd\xa8\xaa\xb3\xed\xd2\x74\x6a\xac\xfd\x32\x7f\x78\x34\xaa\xa5\x53\x0b\x18\xa4\xcb\x5d\x14\x9e\x19\x09\x88\x0c\x44\xac\x2b\xe9\x63\xd9\x44\x3a\x4c\x3c\x32\x2a\x64\x3b\x4e\xb5\x9e\x78\x54\xf6\x93\x0e\xd4\x19\xd6\x82\x7a\x9d\x81\x7a\x0a\xa8\x33\x54\x41\x3d\x2d\xe8\xb8\x1e\x14\x8f\x3b\x23\xc5\x63\xd5\xf8\x25\x54\x3c\xd6\x77\xdf\xae\x87\x75\xba\x9b\x53\xa7\xec\xfd\x9b\x69\x7d\x33\x4b\x35\xdd\xe4\xff\xc2\x52\xbe\xa1\xa5\xda\x72\xb6\xb6\x94\x6f\x68\xa9\xb6\xa0\xad\x2d\xe5\x9b\x5a\xaa\x2d\x69\x07\x96\xf2\x8d\x2d\xd5\x16\xb6\x0b\x4b\x91\xa0\x69\x04\xcc\xae\xfc\x7b\x3c\x55\x1e\x01\x8d\xa9\x48\xd0\x34\x02\x66\x17\xfe\x3d\xa6\x2a\x0f\x80\xc6\x54\x24\x68\xec\xbf\xd7\x19\xa9\xea\xaa\x8a\xee\x6b\x6c\x45\x82\x07\xdb\x35\xbc\xaa\xba\x65\xb5\xdd\x86\x49\xbd\xbc\x2a\x6f\xd3\x25\x08\x06\x49\xfe\x9e\x7c\x82\xb7\x64\xf6\xbf\xbe\x67\x14\xc7\x2a\x56\x73\xfa\x81\x37\x28\xce\x56\x71\x3a\x75\xfd\xf4\x09\xa5\x48\x76\xfe\x90\x32\x41\x89\x48\xa1\x7f\x1d\xfe\x45\xab\xa2\x07\xc1\x57\xe7\xf8\x25\x7c\xec\x5d\x3f\x17\x3d\xf9\xdf\xf1\x77\x00\x00\x00\xff\xff\x32\x7f\xa0\xb6\xc2\x11\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 4546, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
