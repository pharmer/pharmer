// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package packet

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x98\x5d\x73\xda\x3a\x13\xc7\xef\xf3\x29\x76\x7c\xad\xf0\x04\x43\x98\x24\x77\x34\xa1\x2d\x4d\xf3\x32\x09\xd3\xa7\x67\x4e\x3b\xcc\x62\x2f\x46\x45\x48\xee\x4a\x26\x25\x9d\x7c\xf7\x33\x36\x84\x17\x47\x40\x9c\x69\x6f\x12\xd0\xae\xf5\x5b\xfd\xfd\xf7\x4a\xf8\xf7\x01\x40\xa0\x71\x42\xc1\x19\x04\x29\x46\x63\x72\x81\xc8\xc7\x48\x4f\x6d\x70\x06\xff\x1e\x00\x00\x04\x31\x4d\x8b\x61\x80\xe0\x27\x3e\x7f\x4a\xd9\xc4\xc1\x01\xc0\xf7\xe2\x02\xa6\x44\x1a\xbd\xba\xe6\x77\xf1\x17\x20\x50\x26\x42\x27\x8d\xce\x09\xed\x89\x75\xc4\x31\x4e\x04\x5c\x7f\x5e\xcc\xb3\xbc\x76\x47\xc2\xa3\xd1\xb4\x9a\xba\x18\xc2\x89\xad\x07\x8b\xaf\xdf\x8b\xff\x4f\x62\x07\xd8\x8e\x06\x19\x6b\x01\x5f\xda\x5e\xac\x2f\xec\x81\x4a\x8c\xab\x40\x9d\x42\xed\x50\xc0\x07\x3f\xd4\x17\xf6\xad\xd4\xa9\x0a\xd0\xf3\x91\x8c\x30\x31\x02\xba\x5e\x81\xbd\x61\x0f\xd4\x70\x95\x95\x5e\xa0\x52\x68\x05\xf4\xbe\xfa\x98\xbe\xa8\x07\x19\x0f\x1f\x2a\x20\xdf\x33\xea\xf1\x30\x63\x27\xe0\xa2\xe3\xa3\x6e\x49\xf0\x80\x87\x8c\x15\xc0\x1f\x8d\x4e\xe0\xd2\xe8\x44\xc0\xc7\x4b\x1f\x78\x4b\x82\x07\x3c\x1a\x27\x15\xc0\x9f\x8d\x85\xb6\x4e\x48\x91\x15\x70\xee\xb5\xd4\xd6\x14\x0f\x5c\xe1\xaf\x0a\xf0\x5b\x64\x2b\xd3\x14\xf5\x4c\xc0\xf5\x27\x1f\x7b\x5b\x86\x07\x4d\x0f\x5c\x01\x7d\x4f\xe8\x9c\x22\x01\xff\xf7\xae\xd9\x1b\xf6\x40\x2d\x55\xb9\xcb\xf7\x52\x27\x98\x1a\x26\x2f\xf2\x65\xd0\x07\x94\xba\x0a\x30\xd3\x7a\x36\xc5\x7c\x21\xfe\x7b\xbb\x25\xc1\x07\xfe\x11\x55\x01\xcf\x62\x4d\x33\x01\xed\xcc\x3a\x46\x25\xd1\x0b\xdf\x9e\xe4\x2b\x60\x56\xa5\x79\xf4\xcc\x78\x66\x04\x7c\xba\xf5\x81\x3d\x41\x0f\x50\xb3\xab\x04\x64\xa3\x9d\x11\x70\x73\xbd\x4d\xec\xad\x29\x1e\xf8\x6c\xf6\x58\x86\x2f\x77\x45\xa9\xad\x43\x1d\x51\x6f\x96\x92\x67\x6f\xb4\xe3\x2c\xa7\x0d\x90\x69\x42\x0e\x55\xff\x68\x45\x8a\xc9\x46\x2c\xd3\xe7\xa2\x6f\x32\x86\x7c\x16\x38\x82\xc8\xe8\xa1\x4c\x32\x2e\x16\x04\xd2\x02\x42\x42\x9a\x18\x15\x64\x96\xe0\x5b\x10\x29\x93\xc5\x30\x96\x4a\x11\x7f\x0b\xc0\x12\x4f\x89\x05\x3c\x48\x37\x02\x84\xae\x76\xa4\xa0\xed\xcc\x04\xc2\x5a\xf3\xc3\xe8\x11\x52\x36\x11\x59\x6b\x18\x50\xc7\x70\xf2\xe1\x1d\x98\x21\xdc\xb5\xaf\x6a\xab\x6a\x22\x74\x94\x18\x9e\xe5\xa5\xbc\x43\x26\xb8\xca\xeb\x5d\x8b\xa7\xf9\x4a\x9a\x2b\x29\x71\x12\x9c\xc1\xc9\x6a\x35\xd2\x8e\xf3\x81\xa3\xbd\x7b\xba\x28\xf5\x09\x51\xba\xcd\xa2\x8a\xd1\x5f\x08\x5c\xdf\x2f\x70\xdd\x27\xf0\xa3\x4c\xd3\xd9\x86\xcc\x9b\xaa\xea\x85\xac\x9d\xc6\x61\x3d\x6c\x1e\xc1\xb4\x51\x52\xb5\x11\xfe\x39\x59\x1b\x61\x59\xd7\x7a\xb8\x53\xd8\xbf\x21\x24\xbd\x42\x49\x82\x5a\xed\x2f\xac\x36\x6c\xee\xb6\x51\x7e\x60\x12\xa5\x83\x85\x28\xed\xf7\xa2\xb4\x0d\xaf\x7d\x2f\x4e\x79\xa2\xb4\x53\x8a\xd2\xd9\x48\x94\x76\x16\x51\x6a\xfc\xa2\xd4\x0e\xc5\xce\x86\xb1\x4f\xed\x70\xbf\xd8\xe1\x4b\xdb\xba\x11\x41\x4a\x3c\xa4\xc8\x01\x2a\x05\x69\xc6\xa9\xb1\x04\x53\xc9\x2e\x43\x25\x1f\xe7\x99\x1b\x4e\x8e\x33\x54\xd0\x39\x3e\x0c\x5b\xc7\x47\x30\x6d\xae\x5c\x6c\x05\x84\xc7\x2d\x98\xbb\xf8\xe2\xe2\xae\x99\x5b\x59\x14\xde\xb6\xf2\x17\xdc\xdf\x5f\x58\x70\xc6\xa1\x92\x3a\x81\xb0\x76\x02\xbd\x22\xd3\x3a\xc3\x98\x50\x65\x17\x84\x65\x1b\x84\xc7\xad\xb2\x0f\x9a\xbb\xdb\x49\xd9\xf5\x6f\x70\x79\x88\xaf\x10\xbe\xed\x6b\x18\xa7\xad\xc3\xc8\x30\xcd\xf5\xb4\x26\xff\x65\x05\xed\xbb\x2b\x68\x35\x61\x40\x68\x1d\x0c\xd0\x52\x0c\x46\xc3\x39\x4e\x65\x36\x81\xde\x28\xd3\x31\xf1\x57\x88\x46\x32\xb5\x55\xe5\x3a\x6d\x95\xe4\xaa\x87\x2f\x9a\x6f\x63\xf7\x63\xe3\x6d\x12\xd5\xe4\x6a\xec\x57\xab\xe1\x13\x6b\x24\x93\x11\xe4\x72\x89\xf9\xc7\xee\x8d\xc7\x94\x8b\x06\x9b\x5b\xb3\xd4\x60\xad\xc8\x97\xbb\xe9\xcc\xc2\x98\x99\x72\x8c\x30\xcc\xe5\xbe\xfe\x72\xd5\x81\xa1\x42\x3b\x82\x98\xe5\x94\x6c\x65\x47\xd6\x5f\x21\xf1\x9e\x3e\xbc\x6f\x83\x7b\x83\x43\xed\x7e\xc9\xef\x17\x62\x42\xfe\x03\xdf\x82\xd4\x70\xda\xda\x78\x38\x0b\xad\xa4\x5d\xf6\x8a\xa1\x61\x50\xc8\x09\x81\x19\xfc\xc8\x07\x0c\xc3\x50\x2a\x02\x4d\x14\xff\x01\xe1\x5a\xcd\x8a\x4f\xf2\x1b\x74\x5b\x1e\xc1\x22\xa6\x98\xb4\x93\xa8\x3c\x07\xb0\x94\xcd\x54\xc6\xc4\xf3\x1f\x30\xcb\xd7\x1f\xcf\xa5\xa5\x0a\x67\xef\x0d\x4f\xd0\xe5\x09\x43\x49\x2a\x5e\xc5\x51\x6b\xe3\x0a\x13\xe7\x13\xff\x5e\x55\x93\x8e\x90\x27\xc4\x35\x4c\x53\x1b\x99\x98\x6a\x91\x99\xfc\x2f\x52\x99\x75\xc4\x87\xab\x72\xf2\x29\x9f\x8b\x7e\x5a\xce\x5a\x40\x36\x97\xbf\x9a\x7a\xfe\x62\x66\xfe\x00\x15\x25\xb7\xcf\x2f\x3b\xbd\xfe\xed\xdd\xcd\xa7\xce\x79\xaf\xdf\xbd\x58\x13\x25\x9f\xcb\xf0\x64\xf5\x62\xa7\x9f\xb2\xc9\xef\x66\x5f\xc6\x9b\x69\x3f\xec\xdc\x30\x8b\x78\x79\x16\x85\x03\x2a\x8a\xbd\x9d\xc7\xa1\x5b\xba\x5e\xea\x34\x2b\x04\x72\xf4\xcb\x05\xcb\xc8\x93\x78\xfd\x0a\xda\xb7\xdd\xfe\x65\xe7\x9f\x9d\xe5\x63\x2a\xfb\x63\x9a\xf9\x6b\xc7\x54\x5e\x96\x63\xcb\xc2\xdb\xb7\x5d\x78\x11\x5d\x56\x9d\xa2\xb5\x0f\x86\xe3\xb5\xca\xb7\x58\x69\x9c\x0d\x88\x35\x39\xdf\x51\x7e\x4a\x6c\x17\x0f\x5e\xbd\x76\x52\x5b\x3b\xc8\x2f\x5e\xa5\xad\x19\x24\xa6\x69\x70\x06\x8e\x33\x5a\xf3\x70\xf1\x3a\xed\xc5\xe8\x4f\x5c\x8c\x1d\xac\x97\x56\xee\x0a\x1b\xf0\xd3\xd7\xc0\x87\xa8\xac\x87\x5e\x1e\x2e\xf0\xc5\xe0\x26\x3f\x97\xe4\xe0\xe9\xbf\x00\x00\x00\xff\xff\x47\xfb\x6c\x4a\x3e\x14\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 5182, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
