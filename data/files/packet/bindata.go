// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package packet

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x55\x5f\x6f\xe2\xba\x13\x7d\xef\xa7\xb0\xf2\x9c\x65\x49\x60\x11\xe2\x2d\x1b\xf8\xfd\x44\xff\xdd\x5c\xa0\x5b\x55\x57\x2b\x34\x38\x53\xea\xe2\xd8\x91\xed\xd0\x65\xab\x7e\xf7\x2b\x27\x34\x09\x21\xb0\xdd\xd5\x7d\x69\x45\xe6\x78\xce\x19\xcf\x99\xf1\xeb\x05\x21\x8e\x80\x04\x9d\x11\x71\x52\xa0\x1b\x34\x8e\x6b\xbf\xa1\xd8\x3a\x23\xf2\xcf\x05\x21\x84\x38\x31\x6e\x9d\x0b\x42\xbe\xe7\x11\x85\x6b\x26\x85\x2e\xa3\xaf\xf9\x5f\x42\x1c\x2e\x29\x18\x26\x85\x4d\x75\xfb\x10\x92\x1b\x34\x4a\xba\xe4\xf6\xc1\x25\x77\xf3\x20\x4f\x9b\xe3\x8a\x04\x16\x75\x37\x27\x13\xd0\xa6\x0a\xfd\x94\x02\xab\xcc\xf9\x27\x7c\x51\x9e\xb3\xff\xf9\x3d\xff\xff\xe6\x9e\xe6\x9d\x83\x20\x97\x52\xa3\x4b\xc2\xe0\x1c\xed\x3d\xfe\x82\x56\x3f\xd3\xdf\xa0\x0d\x12\x6d\x50\xc5\x90\xb8\xe4\xf6\xba\x8d\x72\x72\x47\xee\x27\xf3\xc5\x59\x4a\x48\xf4\x6f\x50\x2e\xe4\x66\x27\x5d\x72\x19\xb5\xd1\x05\xf3\x69\x40\x26\xc1\x2f\x08\x85\x32\x4d\xc2\xb2\xcb\x4c\x68\x03\x82\xe2\x62\x97\x62\x4b\xaf\xf5\x26\xb3\x3c\x2b\x50\x98\xa0\x01\xbe\xec\x56\x4c\x31\x6a\xaa\x58\x5a\x0a\x7d\x88\x26\xa4\x3b\x22\x7d\xf2\x63\x38\x20\x83\xfe\x8a\x19\x12\x4a\x85\xda\x25\xc3\xff\x7f\x25\xe3\xf1\xac\x47\x66\xc1\x4d\x75\x9e\x82\xc1\xb5\x54\x3b\x7b\xf8\x2b\x28\xb4\x46\x02\x5e\x8b\xa7\x96\xbb\x5f\x95\x0d\x89\x33\x22\xc3\x8a\x9f\xe9\x8d\xfd\xd0\x6d\xbd\xc3\x23\xe5\xde\x79\xe5\x5e\xab\xf2\x9e\xff\x1f\x4a\xef\xf9\x4d\xed\x9e\xff\x41\xf1\xfe\x79\xf1\xfe\x88\xf8\x2d\xea\xfd\x2f\x83\x42\x7e\x9f\x4c\xc2\xf0\x4f\x4a\xf0\x9b\x35\xf8\x5f\x06\xcd\x22\xfc\xe1\x47\x5b\xd0\x3b\x5f\x45\x6f\x44\xbc\xc1\x71\x15\x9e\x3f\x7c\xaf\xe2\x0f\x2a\xf0\x06\x8d\x0a\x3c\xff\xc8\x42\x65\x1b\xca\xb1\xa0\x0a\x63\x14\x86\x01\x6f\x19\x8a\x54\xc9\x2d\x8b\x51\x59\xe2\xa8\xda\xa5\xef\x19\x53\x0e\xbb\xff\x49\x95\x80\xb1\x80\x47\x86\x3c\xae\xe2\x20\x84\x34\xf9\x70\xdb\xc4\xaf\xd5\x90\xa6\x4f\xa0\x12\x54\x1d\x48\x53\x4d\x65\x8c\x1d\x2a\x93\xcf\x94\x67\x76\xe1\x7c\xaa\xe4\xd8\x94\xef\xb3\xfc\x56\x66\xcd\x49\x0e\xa7\xbe\x4a\x5d\x6c\x79\x2a\xc5\x23\x5b\xe7\x92\x83\xf0\x6a\xb2\x58\x46\xb3\xbf\x2e\x27\xe1\x62\x39\x1d\x97\xea\x8a\x5c\x52\x25\xd5\x2b\xb1\x4c\x95\x7c\x46\x6a\x96\x2c\x3e\x84\x3d\xeb\xa2\x73\xfb\x78\x33\x0b\x87\x15\xe6\x62\xa3\x22\x4e\xa6\x8d\xf3\x4c\xa4\x59\x7e\x41\x06\x7f\x18\xa7\x8c\xbc\xb9\x1f\xaf\x20\x88\xa6\xcb\xab\xc9\xc3\x59\xf9\x90\xb2\xe5\x06\x77\xed\xda\x21\x65\x57\xcd\x58\x29\x3c\x88\xa6\xe4\x28\x5a\xaa\x4e\x41\xeb\x17\xa9\xe2\x9a\xf2\x13\x1b\x76\x93\xad\x50\x09\x34\xa8\xbf\xa1\xd2\xed\x4f\xea\xb6\x88\xd8\xc4\x5e\x67\xd8\x39\xbd\x64\x1b\xd1\xe2\xf5\xae\xb9\x28\xc6\xad\xeb\x8c\x88\x51\x19\x1e\x99\x24\xc6\x47\xc8\xb8\x99\xa7\x48\x1b\xd6\x93\xf1\x3c\x5b\x09\xcc\x0b\xf3\xba\x1d\xbf\xdf\xef\x74\x3b\xdd\xcf\xde\xa0\x56\xbc\xa3\x51\x6d\x19\xc5\x03\x64\xb7\x05\x07\x3c\x7f\xbe\xf0\x56\xc6\x18\xb2\x58\xe9\xbd\x9e\x1a\x04\x05\xac\x38\x86\x85\xb9\x6f\xa4\x60\x46\x2a\x26\xd6\x45\x4b\x0a\xfb\x3b\xa7\xe0\xd7\x72\xbd\x2e\xb0\xad\x49\x2d\xeb\x49\x08\x2f\x02\x63\xd4\x86\x89\xf2\x85\x7d\xa7\xfc\x84\x1c\xb4\x61\x54\x23\x28\xfa\x74\x20\xa0\x1e\xd8\x67\x9f\x61\xca\x19\x05\x5b\x9d\x57\x83\xc6\x42\xcf\x51\x6d\x51\x4d\xa3\xda\x1d\x79\x5d\xe7\x10\x33\x96\x09\xb0\x9c\x7d\x3f\xe2\x1d\x7b\x69\xfc\xe0\x1e\xe3\x84\x69\xeb\x8a\x50\x0a\xa3\x64\xee\xc9\x5b\x48\x50\xa7\x40\xf1\x9a\x3d\x22\xdd\x51\x8e\xee\x35\x4b\x98\x99\x81\x58\xa3\x72\xe7\x45\x8b\x02\x4a\x65\x26\x8c\x1b\x59\x57\x69\x83\xc2\x7c\x93\x3c\x4b\xf0\xda\x5a\xdb\x1d\xef\x6d\x60\xa4\x82\x35\x86\x1c\xb4\x76\x67\xa8\x65\xa6\x28\xfe\x9d\x49\x03\x75\x11\x09\x58\x71\x0d\x77\x0c\xf2\xae\xfb\xfd\x3a\x50\xa0\x79\x91\x6a\x13\xd5\x56\xe3\x23\x07\x21\x90\x9f\xec\x64\xc0\x51\x99\x53\x3d\x97\xf6\x62\x9d\x18\x57\x0c\x44\x1b\x8f\xe4\x8c\xee\xea\x6c\x42\x8a\x16\xd3\xdc\xe3\xea\x49\xca\xcd\x42\x6e\x50\x04\x99\x79\x12\xa7\x7c\x33\x5b\x01\xb5\x80\x9f\xa7\x00\x41\x34\xd5\x79\x63\xbf\x82\x66\x34\xc8\x62\x66\x4e\x42\xf7\xf5\x04\xc6\x30\x7a\x0c\x4a\x25\xe7\x73\x8e\x98\x4e\x85\x41\xb5\xcd\x77\x7a\xaf\xd5\xc8\x51\xb6\xe2\x8c\xe6\x4e\xaa\x4f\x74\xb5\x60\x2e\xde\x2e\xfe\x0d\x00\x00\xff\xff\x56\xf3\x35\x07\xda\x0b\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 3034, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
