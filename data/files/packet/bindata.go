// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package packet

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\xcd\x6e\xe2\x3a\x14\xde\xf3\x14\x47\x59\xe7\x72\x9b\x40\xb9\x88\x5d\x4a\x73\x47\xb4\xd3\x4e\x54\xa8\x2a\x34\xaa\x22\x93\x9c\x76\x5c\x12\xdb\xb2\x0d\x2d\x53\xf1\xee\x23\x27\x10\x43\x48\xe9\x8f\x66\x43\x84\x3f\xfb\xfb\xf1\xf1\x71\xf2\xda\x02\x70\x18\xc9\xd1\x19\x80\x23\x48\x32\x47\xed\xb8\x66\x0c\xd9\xd2\x19\xc0\xcf\x16\x00\x80\x93\xe2\xd2\x69\x01\xdc\x17\x88\xc4\x47\xca\x99\xaa\xd0\xd7\xe2\x17\xc0\xc9\x78\x42\x34\xe5\xcc\x50\x5d\x4f\x87\x70\x85\x5a\x72\x17\xae\xa7\x2e\xdc\x8e\x83\x82\xb6\x98\x57\x12\x98\x59\xb7\x63\x08\x89\xd2\x16\xfa\xcd\x19\x5a\xe6\x62\x08\x9f\xa5\xe7\x6c\xfe\xde\x17\xcf\xb5\xfb\xb6\xee\x98\x30\xb8\xe0\x0a\x5d\x18\x06\xc7\x64\xef\xf0\x1d\x59\xf5\x94\x7c\x42\x36\xc8\x95\x46\x99\x92\xdc\x85\xeb\xef\x4d\x92\xe1\x2d\xdc\x85\xe3\xc9\x51\x49\x92\xab\x4f\x48\x4e\xf8\x7c\xc5\x5d\xb8\x88\x9a\xe4\x82\xf1\x28\x80\x30\x78\x47\x90\x49\x5d\x17\xac\xaa\x4c\x99\xd2\x84\x25\x38\x59\x09\x6c\xa8\xb5\x9a\x2f\x8c\xce\x8c\x48\xcc\x51\x93\x2c\x3e\xb1\x4a\x29\xaa\x44\x52\x51\x19\x9d\x46\x21\x9c\x0c\xa0\x0b\x2f\xfd\x1e\xf4\xba\x33\xaa\x61\xc8\x25\x2a\x17\xfa\xdf\xce\xe0\xfc\xfc\xa6\x03\x37\xc1\x95\x5d\x9f\x10\x8d\x8f\x5c\xae\xcc\xe2\x33\x22\xd1\x1c\x24\x92\xed\xe0\xc2\x68\x77\x6d\x6c\x92\x3b\x03\xe8\x5b\x7d\xaa\xe6\x66\xe0\xa4\x71\x0f\x0f\x9c\x7b\xc7\x9d\x7b\x8d\xce\x3b\xfe\x5f\xb4\xde\xf1\xeb\xde\x3d\xff\x83\xe6\xfd\xe3\xe6\xfd\x01\xf8\x0d\xee\xfd\xd3\x5e\x69\xbf\x0b\xe1\x70\xf8\x95\x08\x7e\x3d\x83\x7f\xda\xab\x87\xf0\xfb\x1f\x2d\x41\xe7\x78\x8a\xce\x00\xbc\xde\x61\x0a\xcf\xef\x6f\x53\x7c\x21\x81\xd7\xab\x25\xf0\xfc\x83\x23\x54\x95\xa1\x6a\x8b\x44\x62\x8a\x4c\x53\x92\x35\x34\x85\x90\x7c\x49\x53\x94\x46\x38\xb2\x77\xe9\x96\x51\x64\x64\xf5\x3f\x97\x39\xd1\x66\xc2\x03\xc5\x2c\xb5\x38\x61\x8c\xeb\xa2\xb9\x0d\xf1\xab\x6d\x52\xf1\x8b\xc8\x1c\x65\x9b\x08\xa1\x12\x9e\x62\x3b\xe1\xf9\xbf\x49\xb6\x30\x17\xce\x3f\xd6\x8e\xa1\xdc\xf6\xf2\xba\x62\x2d\x44\xf6\xbb\xde\x52\x97\xb7\x7c\xc2\xd9\x03\x7d\x2c\x2c\x07\xc3\xcb\x70\x12\x47\x37\x3f\x2e\xc2\xe1\x24\x1e\x9d\x57\xee\x4a\x2e\x2e\x73\xfb\x96\x88\x85\xe4\x4f\x98\xe8\x98\xa6\xfb\xd3\x9e\x54\x59\xb9\x0d\x5e\x67\xc9\xc8\x0c\x0b\xb3\x51\x89\xc3\xa8\xb6\x9e\x32\xb1\x28\x36\x48\xe3\x8b\x76\x2a\x64\xed\x7e\x3c\x41\x10\x8d\xe2\xcb\x70\x7a\xd4\x3e\x11\x34\x9e\xe3\xaa\xd9\x3b\x11\xf4\xb2\x8e\x55\xc6\x83\x68\x04\x07\x68\xe5\x5a\x10\xa5\x9e\xb9\x4c\x77\x9c\xbf\x71\xc3\xce\x17\x33\x94\x0c\x35\xda\x82\x3b\x4b\x94\x6a\xef\xe5\xba\x9b\x76\x8b\x1a\x19\xaf\xfd\x5f\xbb\xbb\x63\xa1\xde\x37\x07\xb8\xe6\x3c\xdb\x3f\x59\x1b\x0b\x24\xcd\xed\x82\xa6\xed\xde\x7c\x0a\xec\x2d\x34\x1f\x04\x03\xd0\x72\x81\x07\x31\xcb\xa7\x09\xbb\x6e\xad\xff\x04\x00\x00\xff\xff\xa2\xa9\x0d\xf2\x5f\x08\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 2143, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
