// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package packet

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x55\x5f\x6f\xe2\xba\x13\x7d\xef\xa7\xb0\xf2\x9c\x65\x49\x60\x11\xe2\x2d\x1b\xf8\xfd\x44\xff\xdd\x5c\xa0\x5b\x55\x57\x2b\x34\x38\x53\xea\xe2\xd8\x91\xed\xd0\x65\xab\x7e\xf7\x2b\x27\x34\x09\x21\xb0\xdd\xd5\x7d\x69\x45\xe6\x78\xce\x19\xcf\x99\xf1\xeb\x05\x21\x8e\x80\x04\x9d\x11\x71\x52\xa0\x1b\x34\x8e\x6b\xbf\xa1\xd8\x3a\x23\xf2\xcf\x05\x21\x84\x38\x31\x6e\x9d\x0b\x42\xbe\xe7\x11\x85\x6b\x26\x85\x2e\xa3\xaf\xf9\x5f\x42\x1c\x2e\x29\x18\x26\x85\x4d\x75\xfb\x10\x92\x1b\x34\x4a\xba\xe4\xf6\xc1\x25\x77\xf3\x20\x4f\x9b\xe3\x8a\x04\x16\x75\x37\x27\x13\xd0\xa6\x0a\xfd\x94\x02\xab\xcc\xf9\x27\x7c\x51\x9e\xb3\xff\xf9\x3d\xff\xff\xe6\x9e\xe6\x9d\x83\x20\x97\x52\xa3\x4b\xc2\xe0\x1c\xed\x3d\xfe\x82\x56\x3f\xd3\xdf\xa0\x0d\x12\x6d\x50\xc5\x90\xb8\xe4\xf6\xba\x8d\x72\x72\x47\xee\x27\xf3\xc5\x59\x4a\x48\xf4\x6f\x50\x2e\xe4\x66\x27\x5d\x72\x19\xb5\xd1\x05\xf3\x69\x40\x26\xc1\x2f\x08\x85\x32\x4d\xc2\xb2\xcb\x4c\x68\x03\x82\xe2\x62\x97\x62\x4b\xaf\xf5\x26\xb3\x3c\x2b\x50\x98\xa0\x01\xbe\xec\x56\x4c\x31\x6a\xaa\x58\x5a\x0a\x7d\x88\x26\xa4\x3b\x22\x7d\xf2\x63\x38\x20\x83\xfe\x8a\x19\x12\x4a\x85\xda\x25\xc3\xff\x7f\x25\xe3\xf1\xac\x47\x66\xc1\x4d\x75\x9e\x82\xc1\xb5\x54\x3b\x7b\xf8\x2b\x28\xb4\x46\x02\x5e\x8b\xa7\x96\xbb\x5f\x95\x0d\x89\x33\x22\xc3\x8a\x9f\xe9\x8d\xfd\xd0\x6d\xbd\xc3\x23\xe5\xde\x79\xe5\x5e\xab\xf2\x9e\xff\x1f\x4a\xef\xf9\x4d\xed\x9e\xff\x41\xf1\xfe\x79\xf1\xfe\x88\xf8\x2d\xea\xfd\x2f\x83\x42\x7e\x9f\x4c\xc2\xf0\x4f\x4a\xf0\x9b\x35\xf8\x5f\x06\xcd\x22\xfc\xe1\x47\x5b\xd0\x3b\x5f\x45\x6f\x44\xbc\xc1\x71\x15\x9e\x3f\x7c\xaf\xe2\x0f\x2a\xf0\x06\x8d\x0a\x3c\xff\xc8\x42\x65\x1b\xca\xb1\xa0\x0a\x63\x14\x86\x01\x6f\x19\x8a\x54\xc9\x2d\x8b\x51\x59\xe2\xa8\xda\xa5\xef\x19\x53\x0e\xbb\xff\x49\x95\x80\xb1\x80\x47\x86\x3c\xae\xe2\x20\x84\x34\xf9\x70\xdb\xc4\xaf\xd5\x90\xa6\x4f\xa0\x12\x54\x1d\x48\x53\x4d\x65\x8c\x1d\x2a\x93\xcf\x94\x67\x76\xe1\x7c\xaa\xe4\xd8\x94\xef\xb3\xfc\x56\x66\xcd\x49\x0e\xa7\xbe\x4a\x5d\x6c\x79\x2a\xc5\x23\x5b\xe7\x92\x83\xf0\x6a\xb2\x58\x46\xb3\xbf\x2e\x27\xe1\x62\x39\x1d\x97\xea\x8a\x5c\x52\x25\xd5\x2b\xb1\x4c\x95\x7c\x46\x6a\x96\x2c\x3e\x84\x3d\xeb\xa2\x73\xfb\x78\x33\x0b\x87\x15\xe6\x62\xa3\x22\x4e\xa6\x8d\xf3\x4c\xa4\x59\x7e\x41\x06\x7f\x18\xa7\x8c\xbc\xb9\x1f\xaf\x20\x88\xa6\xcb\xab\xc9\xc3\x59\xf9\x90\xb2\xe5\x06\x77\xed\xda\x21\x65\x57\xcd\x58\x29\x3c\x88\xa6\xe4\x28\x5a\xaa\x4e\x41\xeb\x17\xa9\xe2\x9a\xf2\x13\x1b\x76\x93\xad\x50\x09\x34\xa8\xbf\xa1\xd2\xed\x4f\xea\xb6\x88\xd8\xc4\x5e\x67\xd8\x39\xbd\x64\x1b\xd1\xe2\xf5\xae\xb9\xc8\xbe\xe0\x23\x62\x54\x86\x47\x1e\x89\xf1\x11\x32\x6e\xe6\x29\xd2\x86\xf3\x64\x3c\xcf\x56\x02\xf3\xba\xbc\x6e\xc7\xef\xf7\x3b\xdd\x4e\xf7\xb3\x37\xa8\xd5\xee\x68\x54\x5b\x46\xf1\x00\xd9\x6d\xc1\x01\xcf\x5f\x2f\xbc\x95\x31\x86\x2c\x56\x7a\xaf\xa7\x06\x41\x01\x2b\x8e\x61\xe1\xed\x1b\x29\x98\x91\x8a\x89\x75\xd1\x91\xc2\xfd\xce\x29\xf8\xb5\x5c\xaf\x0b\x6c\x6b\x52\xcb\x7a\x12\xc2\x8b\xc0\x18\xb5\x61\xa2\x7c\x60\xdf\x29\x3f\x21\x07\x6d\x18\xd5\x08\x8a\x3e\x1d\x08\xa8\x07\xf6\xd9\x67\x98\x72\x46\xc1\x56\xe7\xd5\xa0\xb1\xd0\x73\x54\x5b\x54\xd3\xa8\x76\x47\x5e\xd7\x39\xc4\x8c\x65\x02\x2c\x67\xdf\x4f\x78\xc7\x5e\x1a\x3f\xb8\xc7\x38\x61\xda\x9a\x22\x94\xc2\x28\x99\x5b\xf2\x16\x12\xd4\x29\x50\xbc\x66\x8f\x48\x77\x94\xa3\x7b\xcd\x12\x66\x66\x20\xd6\xa8\xdc\x79\xd1\xa2\x80\x52\x99\x09\xe3\x46\xd6\x54\xda\xa0\x30\xdf\x24\xcf\x12\xbc\xb6\xce\x76\xc7\x7b\x1b\x18\xa9\x60\x8d\x21\x07\xad\xdd\x19\x6a\x99\x29\x8a\x7f\x67\xd2\x40\x5d\x44\x02\x56\x5c\xc3\x1d\x83\xbc\xeb\x7e\xbf\x0e\x14\x68\x5e\xa4\xda\x44\xb5\xcd\xf8\xc8\x41\x08\xe4\x27\x3b\x19\x70\x54\xe6\x54\xcf\xa5\xbd\x58\x27\xc6\x15\x03\xd1\xc6\x23\x39\xa3\xbb\x3a\x9b\x90\xa2\xc5\x34\xf7\xb8\x7a\x92\x72\xb3\x90\x1b\x14\x41\x66\x9e\xc4\x29\xdf\xcc\x56\x40\x2d\xe0\xe7\x29\x40\x10\x4d\x75\xde\xd8\xaf\xa0\x19\x0d\xb2\x98\x99\x93\xd0\x7d\x3d\x81\x31\x8c\x1e\x83\x52\xc9\xf9\x9c\x23\xa6\x53\x61\x50\x6d\xf3\x95\xde\x6b\x35\x72\x94\xad\x38\xa3\xb9\x93\xea\x13\x5d\xed\x97\x8b\xb7\x8b\x7f\x03\x00\x00\xff\xff\x13\xc3\xd8\x49\xd9\x0b\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 3033, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
