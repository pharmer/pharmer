// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package packet

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\xdf\x6f\xe2\x38\x10\x7e\xef\x5f\x61\xe5\x39\xcb\x92\xc0\x72\x15\x6f\x69\xe0\x4e\xf4\xd7\xe5\x80\x6e\x55\x9d\x56\x68\x70\xa6\xd4\xc5\xb1\x23\xdb\xa1\xcb\x56\xfd\xdf\x4f\x4e\x68\x12\x20\x61\xbb\xab\x7b\x69\xd5\xcc\xe7\xf9\xbe\xf1\x7c\x33\xee\xeb\x19\x21\x8e\x80\x04\x9d\x21\x71\x52\xa0\x6b\x34\x8e\x6b\xbf\xa1\xd8\x38\x43\xf2\xef\x19\x21\x84\x38\x31\x6e\x9c\x33\x42\xbe\xe5\x11\x85\x2b\x26\x85\x2e\xa3\xaf\xf9\x4f\x42\x1c\x2e\x29\x18\x26\x85\x4d\x75\xfb\x10\x92\x1b\x34\x4a\xba\xe4\xf6\xc1\x25\x77\xb3\x20\x4f\x9b\xe3\x8a\x04\x16\x75\x37\x23\x63\xd0\xa6\x0a\xfd\x90\x02\xab\xcc\xf9\x27\x7c\x51\x9e\xb3\xfb\xf3\x5b\xfe\xfb\xcd\x6d\xe7\x9d\x81\x20\x97\x52\xa3\x4b\xc2\xe0\x14\xed\x3d\xfe\x84\x56\x3f\xd3\x5f\xa0\x0d\x12\x6d\x50\xc5\x90\xb8\xe4\xf6\xba\x89\x72\x7c\x47\xee\xc7\xb3\xf9\x49\x4a\x48\xf4\x2f\x50\xce\xe5\x7a\x2b\x5d\x72\x19\x35\xd1\x05\xb3\x49\x40\xc6\xc1\x4f\x08\x85\x32\x87\x84\x65\x97\x99\xd0\x06\x04\xc5\xf9\x36\xc5\x86\x5e\xeb\x75\x66\x79\x96\xa0\x30\x41\x03\x7c\xd1\xad\x98\x62\xd4\x54\xb1\xb4\x14\xfa\x10\x8d\x49\x77\x48\xfa\xe4\xfb\xf9\x80\x0c\xfa\x4b\x66\x48\x28\x15\x6a\x97\x9c\xff\x75\x41\x46\xa3\x69\x8f\x4c\x83\x9b\xea\x3c\x05\x83\x2b\xa9\xb6\xf6\xf0\x05\x28\xb4\x46\x02\x5e\x8b\xa7\x96\xbb\x5f\x95\x0d\x89\x33\x24\xe7\x15\x3f\xd3\x6b\xfb\xa1\xdb\x78\x87\x47\xca\xbd\xd3\xca\xbd\x46\xe5\x3d\xff\x7f\x94\xde\xf3\x0f\xb5\x7b\xfe\x07\xc5\xfb\xa7\xc5\xfb\x43\xe2\x37\xa8\xf7\xbf\x0c\x0a\xf9\x7d\x32\x0e\xc3\xdf\x29\xc1\x3f\xac\xc1\xff\x32\x38\x2c\xc2\x3f\xff\x68\x0b\x7a\xa7\xab\xe8\x0d\x89\x37\x38\xae\xc2\xf3\xcf\xdf\xab\xf8\x8d\x0a\xbc\xc1\x41\x05\x9e\x7f\x64\xa1\xb2\x0d\xe5\x58\x50\x85\x31\x0a\xc3\x80\x37\x0c\x45\xaa\xe4\x86\xc5\xa8\x2c\x71\x54\xed\xd2\xf7\x8c\x29\x87\xed\x9f\x52\x25\x60\x2c\xe0\x91\x21\x8f\xab\x38\x08\x21\x4d\x3e\xdc\x36\xf1\x6b\x35\xa4\xe9\x13\xa8\x04\x55\x07\xd2\x54\x53\x19\x63\x87\xca\xe4\x33\xe5\x99\x5d\x38\x9f\x2a\x39\x36\xe5\xfb\x2c\xbf\x95\x59\x73\x92\xfd\xa9\xaf\x52\x17\x5b\x9e\x4a\xf1\xc8\x56\xb9\xe4\x20\xbc\x1a\xcf\x17\xd1\xf4\xef\xcb\x71\x38\x5f\x4c\x46\xa5\xba\x22\x97\x54\x49\xf5\x4a\x2c\x52\x25\x9f\x91\x9a\x05\x8b\xf7\x61\xcf\xba\xe8\xdc\x2e\x7e\x98\x85\xc3\x12\x73\xb1\x51\x11\x27\x93\x83\xf3\x4c\xa4\x59\x7e\x41\x06\xbf\x1b\xa7\x8c\xbc\xb9\x1f\xaf\x20\x88\x26\x8b\xab\xf1\xc3\x49\xf9\x90\xb2\xc5\x1a\xb7\xcd\xda\x21\x65\x57\x87\xb1\x52\x78\x10\x4d\xc8\x51\xb4\x54\x9d\x82\xd6\x2f\x52\xc5\x35\xe5\x2d\x1b\x76\x9d\x2d\x51\x09\x34\xa8\xbf\xa2\xd2\xcd\x4f\xea\xa6\x88\xd8\xc4\x5e\xe7\x8f\x4e\xbf\x75\x4e\x0e\xa2\xc5\xeb\x5d\x73\x51\x8c\x1b\xd7\x19\x12\xa3\x32\x3c\x32\x49\x8c\x8f\x90\x71\x33\x4b\x91\xee\x1f\xda\xb9\x6c\x92\x4e\x41\xac\xf2\xff\x10\xbc\x6e\xc7\xef\xf7\x3b\xdd\x4e\xf7\xb3\x37\xa8\xdd\x80\xa3\x51\x6d\x18\xc5\xb0\xe9\x44\xb7\x01\x0f\x3c\x7f\xcb\xf0\x56\xc6\x18\xb2\x58\xe9\x9d\xb8\x1a\x04\x05\x2c\xf9\x7b\xc6\x1b\x29\x98\x91\x8a\x89\x55\xd1\x9f\x62\x16\x9c\x36\xf8\xb5\x5c\xad\x0a\x6c\x63\x52\xcb\xda\x0a\xe1\x45\x60\x84\xda\x30\x51\x3e\xb7\xef\x94\x9f\x90\x83\x36\x8c\x6a\x04\x45\x9f\xf6\x04\xd4\x03\xbb\xec\x53\x4c\x39\xa3\x60\xab\xf3\x6a\xd0\x58\xe8\x19\xaa\x0d\xaa\x49\x54\xbb\x23\xaf\xeb\xec\x63\x46\x32\x01\x96\xb3\xef\x3a\xd1\xb1\x97\xc6\xf7\xee\x31\x4e\x98\xb6\x16\x09\xa5\x30\x4a\xe6\x06\xbd\x85\x04\x75\x0a\x14\xaf\xd9\x23\xd2\x2d\xe5\xe8\x5e\xb3\x84\x99\xbc\x27\xca\x9d\x15\xad\x0a\x28\x95\x99\x30\x6e\x64\x2d\xa6\x0d\x0a\xf3\x55\xf2\x2c\xc1\x6b\xeb\x73\x77\xb4\xf3\x84\x91\x0a\x56\x18\x72\xd0\xda\x9d\xa2\x96\x99\xa2\xf8\x4f\x26\x0d\xd4\x45\x24\xd0\x64\x93\x41\xde\x76\xbf\x5f\x47\x0a\x34\x2f\x52\xad\xa3\xda\xa2\x7c\xe4\x20\x04\xf2\xd6\x56\x06\x1c\x95\x69\x6b\xba\xb4\x37\xeb\xc4\xb8\x64\x20\x9a\x78\x24\x67\x74\x5b\x67\x13\x52\x34\xb8\xe6\x1e\x97\x4f\x52\xae\xe7\x72\x8d\x22\xc8\xcc\x93\x68\x33\xce\x74\x09\xd4\x02\x7e\xb4\x01\x82\x68\xa2\xf3\xce\x5e\x80\x66\x34\xc8\x62\x66\x5a\xa1\xbb\x7a\x02\x63\x18\x3d\x06\xa5\x92\xf3\x19\x47\x4c\x27\xc2\xa0\xda\xe4\x1b\xbe\xd7\xe8\xe4\x28\x5b\x72\x46\x73\x2b\xd5\xe7\xbb\x5a\x37\x67\x6f\x67\xff\x05\x00\x00\xff\xff\x52\x4b\x5e\xa6\xe8\x0b\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 3048, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
