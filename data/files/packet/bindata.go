// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package packet

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x55\xdf\x6f\xe2\x38\x10\x7e\xef\x5f\x61\xe5\x39\xcb\x92\xc0\x72\x15\x6f\x69\xe0\x4e\xf4\xd7\xe5\x80\x6e\x55\x9d\x56\x68\x70\xa6\xd4\xc5\xb1\x23\xdb\xa1\xcb\x56\xfd\xdf\x4f\x4e\x68\x12\x42\x60\xbb\xab\x7b\x69\x45\xe6\xf3\x7c\xdf\x78\xbe\x19\xbf\x9e\x11\xe2\x08\x48\xd0\x19\x12\x27\x05\xba\x46\xe3\xb8\xf6\x1b\x8a\x8d\x33\x24\xff\x9e\x11\x42\x88\x13\xe3\xc6\x39\x23\xe4\x5b\x1e\x51\xb8\x62\x52\xe8\x32\xfa\x9a\xff\x25\xc4\xe1\x92\x82\x61\x52\xd8\x54\xb7\x0f\x21\xb9\x41\xa3\xa4\x4b\x6e\x1f\x5c\x72\x37\x0b\xf2\xb4\x39\xae\x48\x60\x51\x77\x33\x32\x06\x6d\xaa\xd0\x0f\x29\xb0\xca\x9c\x7f\xc2\x17\xe5\x39\xbb\x9f\xdf\xf2\xff\x6f\xee\x71\xde\x19\x08\x72\x29\x35\xba\x24\x0c\x4e\xd1\xde\xe3\x4f\x68\xf5\x33\xfd\x05\xda\x20\xd1\x06\x55\x0c\x89\x4b\x6e\xaf\xdb\x28\xc7\x77\xe4\x7e\x3c\x9b\x9f\xa4\x84\x44\xff\x02\xe5\x5c\xae\xb7\xd2\x25\x97\x51\x1b\x5d\x30\x9b\x04\x64\x1c\xfc\x84\x50\x28\xd3\x24\x2c\xbb\xcc\x84\x36\x20\x28\xce\xb7\x29\xb6\xf4\x5a\xaf\x33\xcb\xb3\x04\x85\x09\x1a\xe0\x8b\x6e\xc5\x14\xa3\xa6\x8a\xa5\xa5\xd0\x87\x68\x4c\xba\x43\xd2\x27\xdf\xcf\x07\x64\xd0\x5f\x32\x43\x42\xa9\x50\xbb\xe4\xfc\xaf\x0b\x32\x1a\x4d\x7b\x64\x1a\xdc\x54\xe7\x29\x18\x5c\x49\xb5\xb5\x87\x2f\x40\xa1\x35\x12\xf0\x5a\x3c\xb5\xdc\xfd\xaa\x6c\x48\x9c\x21\x39\xaf\xf8\x99\x5e\xdb\x0f\xdd\xd6\x3b\x3c\x50\xee\x9d\x56\xee\xb5\x2a\xef\xf9\xff\xa3\xf4\x9e\xdf\xd4\xee\xf9\x1f\x14\xef\x9f\x16\xef\x0f\x89\xdf\xa2\xde\xff\x32\x28\xe4\xf7\xc9\x38\x0c\x7f\xa7\x04\xbf\x59\x83\xff\x65\xd0\x2c\xc2\x3f\xff\x68\x0b\x7a\xa7\xab\xe8\x0d\x89\x37\x38\xac\xc2\xf3\xcf\xdf\xab\xf8\x8d\x0a\xbc\x41\xa3\x02\xcf\x3f\xb0\x50\xd9\x86\x72\x2c\xa8\xc2\x18\x85\x61\xc0\x5b\x86\x22\x55\x72\xc3\x62\x54\x96\x38\xaa\x76\xe9\x7b\xc6\x94\xc3\xf6\x4f\xa9\x12\x30\x16\xf0\xc8\x90\xc7\x55\x1c\x84\x90\x26\x1f\x6e\x9b\xf8\xb5\x1a\xd2\xf4\x09\x54\x82\xaa\x03\x69\xaa\xa9\x8c\xb1\x43\x65\xf2\x99\xf2\xcc\x2e\x9c\x4f\x95\x1c\x9b\xf2\x7d\x96\xdf\xca\xac\x39\xc9\xfe\xd4\x57\xa9\x8b\x2d\x4f\xa5\x78\x64\xab\x5c\x72\x10\x5e\x8d\xe7\x8b\x68\xfa\xf7\xe5\x38\x9c\x2f\x26\xa3\x52\x5d\x91\x4b\xaa\xa4\x7a\x25\x16\xa9\x92\xcf\x48\xcd\x82\xc5\xfb\xb0\x67\x5d\x74\x6e\x17\x6f\x66\xe1\xb0\xc4\x5c\x6c\x54\xc4\xc9\xa4\x71\x9e\x89\x34\xcb\x2f\xc8\xe0\x77\xe3\x94\x91\x37\xf7\xe3\x15\x04\xd1\x64\x71\x35\x7e\x38\x29\x1f\x52\xb6\x58\xe3\xb6\x5d\x3b\xa4\xec\xaa\x19\x2b\x85\x07\xd1\x84\x1c\x44\x4b\xd5\x29\x68\xfd\x22\x55\x5c\x53\x7e\x64\xc3\xae\xb3\x25\x2a\x81\x06\xf5\x57\x54\xba\xfd\x49\xdd\x14\x11\x9b\xd8\xeb\xfc\xd1\xe9\x1f\x9d\x93\x46\xb4\x78\xbd\x6b\x2e\x8a\x71\xe3\x3a\x43\x62\x54\x86\x07\x26\x89\xf1\x11\x32\x6e\x66\x29\xd2\x86\xf5\x64\x3c\xcb\x96\x02\xf3\xc2\xbc\x6e\xc7\xef\xf7\x3b\xdd\x4e\xf7\xb3\x37\xa8\x15\xef\x68\x54\x1b\x46\x71\x0f\xd9\x6d\xc1\x01\xcf\x9f\x2f\xbc\x95\x31\x86\x2c\x56\x7a\xa7\xa7\x06\x41\x01\x4b\x8e\x61\x61\xee\x1b\x29\x98\x91\x8a\x89\x55\xd1\x92\xc2\xfe\xce\x31\xf8\xb5\x5c\xad\x0a\x6c\x6b\x52\xcb\x7a\x14\xc2\x8b\xc0\x08\xb5\x61\xa2\x7c\x61\xdf\x29\x3f\x21\x07\x6d\x18\xd5\x08\x8a\x3e\xed\x09\xa8\x07\x76\xd9\xa7\x98\x72\x46\xc1\x56\xe7\xd5\xa0\xb1\xd0\x33\x54\x1b\x54\x93\xa8\x76\x47\x5e\xd7\xd9\xc7\x8c\x64\x02\x2c\x67\xdf\x8d\x78\xc7\x5e\x1a\xdf\xbb\xc7\x38\x61\xda\xba\x22\x94\xc2\x28\x99\x7b\xf2\x16\x12\xd4\x29\x50\xbc\x66\x8f\x48\xb7\x94\xa3\x7b\xcd\x12\x66\xa6\x20\x56\xa8\xdc\x59\xd1\xa2\x80\x52\x99\x09\xe3\x46\xd6\x55\xda\xa0\x30\x5f\x25\xcf\x12\xbc\xb6\xd6\x76\x47\x3b\x1b\x18\xa9\x60\x85\x21\x07\xad\xdd\x29\x6a\x99\x29\x8a\xff\x64\xd2\x40\x5d\x44\x02\x56\x5c\xc3\x1d\x83\xbc\xeb\x7e\xbf\x0e\x14\x68\x5e\xa4\x5a\x47\xb5\xd5\xf8\xc8\x41\x08\xe4\x47\x3b\x19\x70\x54\xe6\x58\xcf\xa5\xbd\x58\x27\xc6\x25\x03\xd1\xc6\x23\x39\xa3\xdb\x3a\x9b\x90\xa2\xc5\x34\xf7\xb8\x7c\x92\x72\x3d\x97\x6b\x14\x41\x66\x9e\xc4\x31\xdf\x4c\x97\x40\x2d\xe0\xc7\x31\x40\x10\x4d\x74\xde\xd8\x0b\xd0\x8c\x06\x59\xcc\xcc\x51\xe8\xae\x9e\xc0\x18\x46\x0f\x41\xa9\xe4\x7c\xc6\x11\xd3\x89\x30\xa8\x36\xf9\x4e\xef\xb5\x1a\x39\xca\x96\x9c\xd1\xdc\x49\xf5\x89\xae\x16\xcc\xd9\xdb\xd9\x7f\x01\x00\x00\xff\xff\x56\x1f\xdb\x9d\xda\x0b\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 3034, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
