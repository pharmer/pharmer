// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package packet

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x95\x5f\x6f\x9b\x30\x14\xc5\xdf\xf3\x29\xae\x78\x66\x59\x21\x69\x16\xf1\x46\x29\x9b\xd2\xae\x1d\x6a\x52\x55\xd1\x54\x21\x07\x6e\x3b\x37\x60\x5b\xb6\x93\x36\xab\xf2\xdd\x27\x43\x03\x09\xa1\xe9\x1f\xed\x25\x28\x1c\x73\xcf\xef\x70\xb9\xf6\x73\x07\xc0\x62\x24\x47\xcb\x03\x4b\x90\x64\x8e\xda\xb2\xcd\x3d\x64\x4b\xcb\x83\xdf\x1d\x00\x00\x2b\xc5\xa5\xd5\x01\xb8\x2d\x14\x89\xf7\x94\x33\x55\xa9\xcf\xc5\x2f\x80\x95\xf1\x84\x68\xca\x99\x29\x75\x39\x0d\xe0\x02\xb5\xe4\x36\x5c\x4e\x6d\xb8\x1e\xfb\x45\xd9\x62\x5d\x59\xc0\xac\xba\x1e\x43\x48\x94\xae\xa5\xbf\x9c\x61\x5d\xb9\xb8\x85\x8f\xd2\xb1\x5e\xfe\xde\x16\xd7\xb5\xfd\xba\xef\x98\x30\x38\xe3\x0a\x6d\x08\xfc\x43\xb6\x37\xf8\x86\xad\x7a\x48\x3e\x60\xeb\xe7\x4a\xa3\x4c\x49\x6e\xc3\xe5\xcf\x36\xcb\xf0\x1a\x6e\xc2\xf1\xe4\xa0\x25\xc9\xd5\x07\x2c\x27\x7c\xbe\xe2\x36\x9c\x45\x6d\x76\xfe\x78\xe4\x43\xe8\xbf\x61\xc8\xa4\x6e\x1a\x56\x5d\xa6\x4c\x69\xc2\x12\x9c\xac\x04\xb6\xf4\x5a\xcd\x17\xc6\x67\x46\x24\xe6\xa8\x49\x16\x1f\xd5\x4e\x29\xaa\x44\x52\x51\x81\x4e\xa3\x10\x8e\x3c\xe8\xc3\xd3\x70\x00\x83\xfe\x8c\x6a\x08\xb8\x44\x65\xc3\xf0\xc7\x09\x9c\x9e\x5e\xf5\xe0\xca\xbf\xa8\x9f\x4f\x88\xc6\x7b\x2e\x57\xe6\xe1\x13\x22\xd1\x7c\x48\x24\xdb\xd2\x85\xf1\xee\xd7\xb1\x49\x6e\x79\x30\xac\xfd\xa9\x9a\x9b\x1b\x47\xad\xef\x70\x8f\xdc\x39\x4c\xee\xb4\x92\xf7\xdc\xff\x88\xde\x73\x9b\xec\x8e\xfb\x4e\x78\xf7\x30\xbc\xeb\x81\xdb\x42\xef\x1e\x0f\x4a\xfc\x3e\x84\x41\xf0\x99\x08\x6e\x33\x83\x7b\x3c\x68\x86\x70\x87\xef\x6d\x41\xef\x70\x8a\x9e\x07\xce\x60\x3f\x85\xe3\x0e\x37\x29\x3e\x91\xc0\x19\x34\x12\x38\xee\xde\x27\x54\xb5\xa1\x1a\x8b\x44\x62\x8a\x4c\x53\x92\xb5\x0c\x85\x90\x7c\x49\x53\x94\xc6\x38\xaa\xf7\xd2\x4d\x45\x91\x91\xd5\x77\x2e\x73\xa2\xcd\x82\x3b\x8a\x59\x5a\xeb\x84\x31\xae\x8b\xe1\x36\x85\x9f\xeb\x21\x15\x7f\x88\xcc\x51\x76\x89\x10\x2a\xe1\x29\x76\x13\x9e\x7f\x4d\xb2\x85\xd9\x70\xbe\xd4\x38\xa6\xe4\x66\x96\xd7\x55\xd5\xc2\x64\x77\xea\xeb\xd2\xe5\x2e\x9f\x70\x76\x47\xef\x0b\x64\x3f\x38\x0f\x27\x71\x74\xf5\xeb\x2c\x0c\x26\xf1\xe8\xb4\xa2\x2b\x6b\x71\x99\xd7\xa7\x44\x2c\x24\x7f\xc0\x44\xc7\x34\xdd\x5d\xf6\xa0\xca\xce\xbd\xe8\xcd\x2a\x19\x99\x61\x01\x1b\x95\x3a\x8c\x1a\xcf\x53\x26\x16\xc5\x0b\xd2\xf8\xa4\xad\x4a\x59\xdb\xef\x4f\xe0\x47\xa3\xf8\x3c\x9c\x1e\xc4\x27\x82\xc6\x73\x5c\xb5\xb3\x13\x41\xcf\x9b\x5a\x05\xee\x47\x23\xd8\x53\x2b\x6a\x41\x94\x7a\xe4\x32\xdd\x22\x7f\x65\x87\x9d\x2f\x66\x28\x19\x6a\xac\x1b\x6e\x2d\x51\xaa\x9d\xc3\x75\x3b\xed\x46\x35\x36\x4e\xf7\x5b\xb7\xbf\x85\xd0\x9c\x9b\x3d\xbd\x3c\xcf\x77\x5e\x9d\x39\xd5\x3d\xd0\x72\x81\x7b\xac\xe5\xd5\x10\xaf\x3b\xeb\x7f\x01\x00\x00\xff\xff\x0f\xf5\x7d\x23\x24\x08\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 2084, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
