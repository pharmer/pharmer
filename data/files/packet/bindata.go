// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package packet

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\x5d\x73\xda\x3c\x13\xbd\xcf\xaf\xd8\xf1\xb5\xc2\x1b\x1c\xc2\xa4\xb9\xa3\x09\x6d\x69\x9a\x8f\x49\x98\xbe\x7d\xe6\x69\x87\x59\xec\xc5\xa8\x08\xc9\x5d\xc9\xa4\x4e\x27\xff\xfd\x19\x1b\xc2\x87\x23\x20\xee\xb4\x37\x09\x68\xd7\x3a\x67\x8f\x8f\x56\x42\xbf\x0e\x00\x02\x8d\x53\x0a\xce\x20\x48\x31\x9a\x90\x0b\x44\x31\x46\x7a\x66\x83\x33\xf8\xf7\x00\x00\x20\x88\x69\x56\x0e\x03\x04\x3f\xf0\xf9\x53\xca\x26\x0e\x0e\x00\xbe\x95\x0f\x30\x25\xd2\xe8\xd5\x33\xbf\xca\xbf\x00\x81\x32\x11\x3a\x69\x74\x81\xd0\x99\x5a\x47\x1c\xe3\x54\xc0\xf5\xa7\xc5\x3c\xcb\x67\x77\x24\x3c\x1a\x4d\xab\xa9\xcb\x21\x9c\xda\x66\xb0\xf8\xfa\xad\xfc\xff\x24\x76\x00\xdb\xf1\x30\x63\x2d\xe0\x73\xc7\x0b\xeb\x0b\x7b\x40\x25\xc6\x75\x40\x9d\x42\xed\x50\xc0\x7b\x3f\xa8\x2f\xec\xab\xd4\xa9\x1a\xa0\xe7\x63\x19\x61\x62\x04\xf4\xbc\x02\x7b\xc3\x1e\x50\xc3\x75\x2a\xbd\x40\xa5\xd0\x0a\xe8\x7f\xf1\x61\xfa\xa2\x1e\xc8\x78\xf4\x50\x03\xf2\x1d\xa3\x9e\x8c\x32\x76\x02\x2e\xba\x3e\xd4\x2d\x09\x1e\xe0\x11\x63\x0d\xe0\x0f\x46\x27\x70\x69\x74\x22\xe0\xc3\xa5\x0f\x78\x4b\x82\x07\x78\x3c\x49\x6a\x00\x7f\x32\x16\x3a\x3a\x21\x45\x56\xc0\xb9\xd7\x52\x5b\x53\x3c\xe0\x0a\x7f\xd6\x00\xbf\x45\xb6\x32\x4d\x51\xe7\x02\xae\x3f\xfa\xb0\xb7\x65\x78\xa0\xe9\x81\x6b\x40\xdf\x13\x3a\xa7\x48\xc0\xff\xbd\x35\x7b\xc3\x1e\x50\x4b\x75\xde\xf2\xbd\xd4\x09\xa6\x86\xc9\x0b\xf9\x32\xe8\x03\x94\xba\x0e\x60\xa6\x75\x3e\xc3\xa2\x10\xff\xbb\xdd\x92\xe0\x03\xfe\x1e\xd5\x01\xce\x63\x4d\xb9\x80\x4e\x66\x1d\xa3\x92\xe8\x05\xdf\x9e\xe4\x23\x90\xd7\x69\x1e\x7d\x33\xc9\x8d\x80\x8f\xb7\x3e\x60\x4f\xd0\x03\xa8\xd9\xd5\x02\x64\xa3\x9d\x11\x70\x73\xbd\x4d\xec\xad\x29\x1e\xf0\x3c\x7f\xac\x82\x2f\x77\x45\xa9\xad\x43\x1d\x51\x3f\x4f\xc9\xb3\x37\xda\x49\x56\xa0\x0d\x91\x69\x4a\x0e\xd5\xe0\x68\x85\x14\x93\x8d\x58\xa6\xcf\xa4\x6f\x32\x86\x62\x16\x38\x82\xc8\xe8\x91\x4c\x32\x2e\x0b\x02\x69\x01\x21\x21\x4d\x8c\x0a\x32\x4b\xf0\x35\x88\x94\xc9\x62\x98\x48\xa5\x88\xbf\x06\x60\x89\x67\xc4\x02\x1e\xa4\x1b\x03\x42\x4f\x3b\x52\xd0\x71\x66\x0a\x61\xa3\xf5\x7e\xfc\x08\x29\x9b\x88\xac\x35\x0c\xa8\x63\x38\x7d\xff\x16\xcc\x08\xee\x3a\x57\x8d\x15\x9b\x08\x1d\x25\x86\xf3\x82\xca\x5b\x64\x82\xab\x82\xef\x5a\x3c\x2d\x2a\x69\xad\xa4\xc4\x69\x70\x06\xa7\xab\x6a\xa4\x9d\x14\x03\x47\x7b\xf7\x74\x51\xe9\x13\xa2\xf2\x9a\x45\x1d\xa3\xbf\x10\xb8\xb9\x5f\xe0\xa6\x4f\xe0\x47\x99\xa6\xf9\x86\xcc\x9b\xaa\xea\x85\xac\xdd\xe3\xc3\x66\xd8\x3a\x82\xd9\x71\x45\xd5\xe3\xf0\xcf\xc9\x7a\x1c\x56\x75\x6d\x86\x3b\x85\xfd\x1b\x42\xd2\x2b\x94\x24\x68\x34\xfe\x42\xb5\x61\x6b\xb7\x8d\x8a\x03\x93\xa8\x1c\x2c\x44\x65\xbf\x17\x95\x6d\x78\xed\x7b\x79\xca\x13\x95\x9d\x52\x54\xce\x46\xa2\xb2\xb3\x88\x4a\xe3\x17\x95\x76\x28\x76\x36\x8c\x7d\x6a\x87\xfb\xc5\x0e\x5f\xda\xd6\x8d\x09\x52\xe2\x11\x45\x0e\x50\x29\x48\x33\x4e\x8d\x25\x98\x49\x76\x19\x2a\xf9\x38\xcf\xdc\x70\x72\x9c\xa1\x82\xee\xc9\x61\xd8\x3e\x39\x82\x59\x6b\xe5\x62\x2b\x20\x3c\x69\xc3\xdc\xc5\x17\x17\x77\xad\xc2\xca\xa2\xf4\xb6\x95\x3f\xe1\xfe\xfe\xc2\x82\x33\x0e\x95\xd4\x09\x84\x8d\x53\xe8\x97\x99\xd6\x19\xc6\x84\x6a\xbb\x20\xac\xda\x20\x3c\x69\x57\x7d\xd0\xda\xdd\x4e\xaa\xae\xff\x0d\x97\x87\xf8\x0a\xe1\x3b\xbe\x86\xf1\xa6\x7d\x18\x19\xa6\xb9\x9e\xd6\x14\xbf\xac\xa0\x73\x77\x05\xed\x16\x0c\x09\xad\x83\x21\x5a\x8a\xc1\x68\x38\xc7\x99\xcc\xa6\xd0\x1f\x67\x3a\x26\xfe\x02\xd1\x58\xa6\xb6\xae\x5c\x6f\xda\x15\xb9\x9a\xe1\x8b\xe6\x7b\xbc\x7b\xd9\x78\x9b\x44\x3d\xb9\x8e\xf7\xab\x75\xec\x13\x6b\x2c\x93\x31\x14\x72\x89\xf9\xc7\xde\x8d\xc7\x94\x8b\x06\x5b\x58\xb3\xd2\x60\xad\x28\xca\xdd\x74\x66\x69\xcc\x4c\x39\x46\x18\x15\x72\x5f\x7f\xbe\xea\xc2\x48\xa1\x1d\x43\xcc\x72\x46\xb6\xb6\x23\x9b\xaf\x90\x78\x4f\x1f\xde\xb7\xc1\xfd\x86\x43\xed\x7e\xc9\xef\x17\x62\x42\xf1\x03\xdf\x82\xd4\xf0\xa6\xbd\xb1\x38\x4b\xad\xa4\x5d\xf6\x8a\x91\x61\x50\xc8\x09\x81\x19\x7e\x2f\x06\x0c\xc3\x48\x2a\x02\x4d\x14\xff\x01\xe1\xda\xad\x9a\x2b\xf9\x37\x74\x5b\x1e\xc1\x22\xa6\x98\xb4\x93\xa8\x3c\x07\xb0\x94\xcd\x4c\xc6\xc4\xf3\x1f\x30\xcb\xeb\x8f\x67\x6a\xa9\xc2\xfc\x9d\xe1\x29\xba\x22\x61\x24\x49\xc5\xab\x38\x6a\x6d\x5c\x69\xe2\x62\xe2\x5f\x2b\x36\xe9\x18\x79\x4a\xdc\xc0\x34\xb5\x91\x89\xa9\x11\x99\xe9\xff\x22\x95\x59\x47\x7c\xb8\xa2\x53\x4c\xf9\x4c\xfa\x69\x39\x6b\x09\xb2\x59\xfe\x6a\xea\xf9\xc5\xcc\x7c\x01\x95\x94\x3b\xe7\x97\xdd\xfe\xe0\xf6\xee\xe6\x63\xf7\xbc\x3f\xe8\x5d\xac\x89\x52\xcc\x65\x78\xba\xba\xd8\x19\xa4\x6c\x8a\xb7\x39\x90\xf1\x66\xda\x77\x3b\x37\xcc\x22\x5e\x9d\x45\xe1\x90\x4a\xb2\xb7\xf3\x38\xf4\x2a\xcf\x4b\x9d\x66\xa5\x40\x8e\x7e\xba\x60\x19\x79\x12\xaf\xaf\xa0\x73\xdb\x1b\x5c\x76\xff\xd9\x49\x1f\x53\x39\x98\x50\xee\xe7\x8e\xa9\xbc\xac\xc6\x96\xc4\x3b\xb7\x3d\x78\x11\x5d\xb2\x4e\xd1\xda\x07\xc3\xf1\x1a\xf3\x2d\x56\x9a\x64\x43\x62\x4d\xce\x77\x94\x9f\x11\xdb\xc5\xc2\x6b\x36\x4e\x1b\x6b\x07\xf9\xc5\x55\xda\x9a\x41\x62\x9a\x05\x67\xe0\x38\xa3\x35\x0f\x97\xd7\x69\x2f\x46\x7f\xe0\x62\xec\x60\x9d\x5a\x49\xe9\xe0\xe9\xbf\x00\x00\x00\xff\xff\x1f\x6f\xf8\x4e\xbe\x13\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 5054, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
