// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package packet

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x57\xcd\x52\xe3\x46\x10\xbe\xfb\x29\xba\x74\xc9\x45\x10\x6b\xfc\x13\xaf\x6f\x5a\xa1\xa4\x0c\x0b\x71\x61\x53\xbb\x54\x6a\xcb\xd5\x48\x0d\x0c\x96\x66\xb4\x33\x63\x83\x97\xe2\x39\xf2\x40\x79\xb1\xd4\x08\x63\x59\xb2\x91\x31\xd9\xd4\x5e\xc0\x3d\xad\xe9\xef\xeb\xaf\x7b\xa4\x9e\xc7\x06\x80\x23\x30\x25\xa7\x0f\x4e\x86\xd1\x94\x8c\xe3\xda\x35\x12\x73\xed\xf4\xe1\xaf\x06\x00\x80\x13\xd3\x3c\x5f\x06\x70\xbe\xe1\xcb\xaf\x4c\xc9\xd8\x69\x00\x7c\xcd\x37\x28\xba\xe1\x52\x14\x7b\x1e\xf3\xbf\x00\x4e\x22\x23\x34\x5c\x0a\x8b\x70\x76\x19\xc0\x29\x19\x25\x5d\x38\xbb\x74\xe1\x62\xe4\x2f\x83\xad\x02\xd8\xa7\x2e\x46\x10\xa2\x36\x85\xeb\xbb\x14\x54\x44\xce\x97\xe8\x5e\x79\xce\xd2\xfc\x9a\xff\x7f\x72\x5f\xc7\x1d\xa1\x80\x63\xa9\xc9\x85\xc0\xaf\x83\xfd\x4c\x3b\x60\xf5\x5d\xb4\x07\xac\x9f\x6a\x43\x2a\xc6\xd4\x85\xb3\x4f\xdb\x20\xc3\x0b\xf8\x1c\x8e\xc6\xb5\x90\x98\xea\x3d\x20\xc7\x72\xba\x90\x2e\x1c\x0f\xb7\xc1\xf9\xa3\x81\x0f\xa1\xbf\x03\x50\x28\x53\x05\x5c\x55\x99\x0b\x6d\x50\x44\x34\x5e\x64\xb4\xa5\xd6\x7a\x3a\xb3\x38\x57\xa8\x28\x25\x83\xc9\xa4\x59\x20\xc5\xa4\x23\xc5\xb3\x15\xd1\xcb\x61\x08\xcd\x3e\xb4\xe1\xa1\xd7\x85\x6e\xfb\x8a\x1b\x08\xa4\x22\xed\x42\xef\x8f\x8f\x70\x74\x74\xde\x82\x73\xff\xb4\xd8\x1f\xa1\xa1\x1b\xa9\x16\x76\xf3\x47\x54\x64\x1b\x09\x93\x35\x7f\x66\xb1\xdb\x45\xda\x98\x3a\x7d\xe8\x15\xf8\x5c\x4f\xed\x42\x73\xa7\xd8\x6e\xa5\xde\x6e\x45\x1b\x77\x9f\x36\xdc\x90\xc4\xab\x97\xc4\xdb\x2a\x49\x8b\xfd\x40\x4d\x5a\xac\x2a\x8a\xc7\x7e\xba\x2a\xb4\x43\x96\xb0\x0f\x03\x61\x28\x81\x2f\x24\x05\x84\xad\x03\xaf\xf3\x5b\xef\x13\xcc\x3b\x85\x38\xed\x03\xd6\x6e\x36\x21\x0c\x82\xff\x47\x25\xd6\xae\x55\x49\x73\x51\x52\x01\x4d\x52\xb2\xa5\x8a\x4b\x76\x82\x0f\x25\x3b\xbe\xbe\x2f\xd9\x8b\xc5\xf7\x92\xcd\xb1\xbc\xff\x5a\x61\xc9\xbe\x9d\xde\x94\xab\x44\x65\xbf\x5e\xc4\xfb\x56\x85\xd5\x17\x85\x59\x4d\x36\x9b\x95\x75\xba\xcb\x82\xbc\xb7\x16\xac\x5a\x0c\xd6\xe9\x6e\x54\xa3\xb7\xdf\x51\x7e\x47\x53\x32\xdc\x91\xbf\xdf\x07\x06\xff\xfc\x0d\x01\xce\xf9\x2c\x85\xf1\xed\x4c\xc4\xa4\xbe\x80\x7f\x7e\x3a\xef\xc1\x48\x06\xbf\x68\x17\x3c\xd6\xfb\x8f\x72\x7c\xe8\x56\xe4\xf0\xd8\xc6\x7b\x8d\x75\x6a\xd5\xf8\x01\x47\xb4\x55\x2f\x46\xab\x0f\x5e\x77\xb3\x19\xd6\xb2\x7f\x47\xe6\xde\x1b\x32\xdf\xf3\xe5\x95\x67\x5e\x7d\x99\xed\xa7\x84\xae\x57\x62\xb4\x53\x89\x77\xf6\xc1\x5b\xd4\x60\xed\x0f\xdd\x5a\x3d\xb6\x54\x7e\xf5\x79\x8f\x14\xc5\x24\x0c\xc7\x64\xcb\xc7\x3d\x53\x72\xce\x63\x52\x96\xe3\xb0\x18\x15\x5f\xc0\xb3\x04\x17\xbf\x4b\x95\xa2\xb1\x0f\x5c\x73\x4a\xe2\xc2\x8f\x42\x48\x93\x0f\x29\x36\xf0\x63\xc1\x26\xbb\x45\x95\x92\x3a\xc4\x2c\xd3\x91\x8c\xe9\x30\x92\xe9\xaf\x51\x32\xb3\x83\xd3\x41\x41\xc7\x86\x7c\x21\xfd\xb4\x8a\x9a\x83\x94\xd3\x2b\x42\x3f\x0f\xb1\x91\x14\xd7\xfc\x26\xa7\xec\x07\x27\xe1\x78\x32\x3c\xff\xf3\x38\x0c\xc6\x93\xc1\xd1\x5a\x13\xd8\x58\x52\xa5\xc5\x10\x3c\xc9\x94\xbc\xa3\xc8\x4c\x78\x5c\x7e\xec\x4e\x3f\x17\x7a\xe9\xaf\x46\x49\xf0\x8a\x72\xb2\xc3\x67\x3f\x0c\x2a\xfb\xb9\xc8\x66\xb9\x40\x86\x1e\x8c\xb3\xf2\x3c\xb9\x6f\xcf\xc0\x1f\x0e\x26\x27\xe1\x65\x2d\x7d\xcc\xf8\x64\x4a\x8b\xed\xdc\x31\xe3\x27\x55\xdf\x8a\xb8\x3f\x1c\xc0\x86\x77\xc5\x3a\x43\xad\xef\xa5\x8a\xd7\x98\xbf\xd2\x4a\xd3\xd9\x15\x29\x41\x66\xdb\x98\x38\x27\xa5\x97\x07\xc6\x3b\xec\x1d\xbe\x3e\x24\x56\xbc\xcb\x4b\xc9\x5a\xfb\xd8\x8b\x49\x1f\x8c\x9a\xd1\xda\x89\xfe\x86\x9b\x6b\xf9\x65\xe5\x79\xb5\xb1\x4e\x3c\x27\xdc\x78\x6a\xfc\x1b\x00\x00\xff\xff\xf5\xbc\xa5\x33\x09\x0d\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 3337, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
