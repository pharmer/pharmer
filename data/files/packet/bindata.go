// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package packet

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\xdf\x6f\xda\x3a\x14\x7e\xef\x5f\x61\xe5\x39\x63\x24\x30\x6e\xc5\x5b\x16\xd8\x15\x2b\xa5\xb9\x40\x57\x55\x57\x13\x3a\x38\xa7\xd4\xc5\xb1\x23\xdb\xa1\x63\x55\xff\xf7\x2b\x27\x34\x09\x10\x58\x37\xdd\x97\x56\xcd\xf9\xfc\x7d\xdf\xf9\x65\xf7\xe5\x82\x10\x47\x40\x82\x4e\x9f\x38\x29\xd0\x35\x1a\xc7\xb5\xdf\x50\x6c\x9c\x3e\xf9\xf7\x82\x10\x42\x9c\x18\x37\xce\x05\x21\xdf\xf3\x88\xc2\x15\x93\x42\x97\xd1\x97\xfc\x27\x21\x0e\x97\x14\x0c\x93\xc2\x52\x4d\xee\x43\x72\x8d\x46\x49\x97\x4c\xee\x5d\x72\x3b\x0b\x72\xda\x1c\x57\x10\x58\xd4\xed\x8c\x0c\x41\x9b\x2a\xf4\x53\x0a\xac\x98\xf3\x4f\xf8\xac\x3c\x67\xf7\xe7\xf7\xfc\xf7\xab\x7b\x5a\x77\x06\x82\x7c\x95\x1a\x5d\x12\x06\xe7\x64\xef\xf0\x17\xb2\xfa\x89\xfe\x86\x6c\x90\x68\x83\x2a\x86\xc4\x25\x93\x71\x93\xe4\xf0\x96\xdc\x0d\x67\xf3\xb3\x92\x90\xe8\xdf\x90\x9c\xcb\xf5\x56\xba\xe4\x6b\xd4\x24\x17\xcc\x46\x01\x19\x06\xbf\x10\x14\xca\x1c\x0a\x96\x5d\x66\x42\x1b\x10\x14\xe7\xdb\x14\x1b\x7a\xad\xd7\x99\xd5\x59\x82\xc2\x04\x0d\xf0\x45\xbb\x52\x8a\x51\x53\xc5\xd2\xd2\xe8\x7d\x34\x24\xed\x3e\xe9\x92\x1f\x97\x3d\xd2\xeb\x2e\x99\x21\xa1\x54\xa8\x5d\x72\xf9\xf7\x67\x32\x18\x4c\x3b\x64\x1a\x5c\x57\xe7\x29\x18\x5c\x49\xb5\xb5\x87\x3f\x83\x42\x3b\x48\xc0\x6b\xf1\xd4\x6a\x77\xab\xb4\x21\x71\xfa\xe4\xb2\xd2\x67\x7a\x6d\x3f\xb4\x1b\x6b\x78\xe4\xdc\x3b\xef\xdc\x6b\x74\xde\xf1\xff\x47\xeb\x1d\xff\xd0\xbb\xe7\xbf\xd3\xbc\x7f\xde\xbc\xdf\x27\x7e\x83\x7b\xff\x53\xaf\xb0\xdf\x25\xc3\x30\xfc\x93\x14\xfc\xc3\x1c\xfc\x4f\xbd\xc3\x24\xfc\xcb\xf7\xb6\xa0\x73\x3e\x8b\x4e\x9f\x78\xbd\xe3\x2c\x3c\xff\xf2\x2d\x8b\x3f\xc8\xc0\xeb\x1d\x64\xe0\xf9\x47\x23\x54\xb6\xa1\x5c\x0b\xaa\x30\x46\x61\x18\xf0\x86\xa5\x48\x95\xdc\xb0\x18\x95\x15\x8e\xaa\xbb\xf4\x8d\x31\xe5\xb0\xfd\x22\x55\x02\xc6\x02\x1e\x18\xf2\xb8\x8a\x83\x10\xd2\xe4\xcb\x6d\x89\x5f\xaa\x25\x4d\x1f\x41\x25\xa8\x5a\x90\xa6\x9a\xca\x18\x5b\x54\x26\x1f\x29\xcf\xec\x85\xf3\xa1\xb2\x63\x29\xdf\x76\xf9\xb5\x64\xcd\x45\xf6\xb7\xbe\xa2\x2e\x6e\x79\x2a\xc5\x03\x5b\xe5\x96\x83\xf0\x6a\x38\x5f\x44\xd3\x9b\xaf\xc3\x70\xbe\x18\x0d\x4a\x77\x05\x97\x54\x49\xf5\x4a\x2c\x52\x25\x9f\x90\x9a\x05\x8b\xf7\x61\x4f\xba\xe8\xdc\x2e\x7e\xc8\xc2\x61\x89\xb9\xd9\xa8\x88\x93\xd1\xc1\x79\x26\xd2\x2c\x2f\x90\xc1\x1f\xc6\x29\x23\xaf\xee\xfb\x33\x08\xa2\xd1\xe2\x6a\x78\x7f\xd6\x3e\xa4\x6c\xb1\xc6\x6d\xb3\x77\x48\xd9\xd5\x61\xac\x34\x1e\x44\x23\x72\x14\x2d\x5d\xa7\xa0\xf5\xb3\x54\x71\xcd\xf9\x89\x1b\x76\x9d\x2d\x51\x09\x34\xa8\xbf\xa1\xd2\xcd\x4f\xea\xa6\x88\x58\x62\xaf\xf5\x57\xab\x7b\x72\x4f\x0e\xa2\xc5\xeb\x5d\x9b\xa2\x18\x37\xae\xd3\x27\x46\x65\x78\x34\x24\x31\x3e\x40\xc6\xcd\x2c\x45\xba\x7f\x68\x37\x65\xa3\x74\x0a\x62\x95\xff\x87\xe0\xb5\x5b\x7e\xb7\xdb\x6a\xb7\xda\x1f\xbd\x5e\xad\x02\x8e\x46\xb5\x61\x14\xc3\xa6\x13\xed\x06\x3c\xf0\xfc\x2d\xc3\x89\x8c\x31\x64\xb1\xd2\x3b\x73\x35\x08\x0a\x58\xf2\x37\xc6\x6b\x29\x98\x91\x8a\x89\x55\xd1\x9f\x62\x17\x9c\x53\xf0\xb1\x5c\xad\x0a\x6c\x23\xa9\x55\x3d\x09\xe1\x45\x60\x80\xda\x30\x51\x3e\xb7\x6f\x92\x1f\x90\x83\x36\x8c\x6a\x04\x45\x1f\xf7\x0c\xd4\x03\x3b\xf6\x29\xa6\x9c\x51\xb0\xd9\x79\x35\x68\x2c\xf4\x0c\xd5\xc6\x16\xaa\x56\x23\xaf\xed\xec\x63\x06\x32\x01\x96\xab\xaf\x5b\xb6\x5c\x7c\xaf\x82\x71\xc2\xb4\x1d\x8e\x50\x0a\xa3\x64\x3e\x9a\x13\x48\x50\xa7\x40\x71\xcc\x1e\x90\x6e\x29\x47\x77\xcc\x12\x66\xf2\x6e\x28\x77\x56\x34\x29\xa0\x54\x66\xc2\xb8\x91\x1d\x2e\x6d\x50\x98\x6f\x92\x67\x09\x8e\xed\x84\xbb\x83\xdd\x34\x18\xa9\x60\x85\x21\x07\xad\xdd\x29\x6a\x99\x29\x8a\xff\x64\xd2\x40\xdd\x44\x02\x4d\x03\xd2\xcb\x1b\xee\x77\xeb\x48\x81\xe6\x59\xaa\x75\x54\xbb\x22\xed\x02\x7c\x78\xe0\x20\x04\xf2\x93\x9d\x0c\x38\x2a\x73\xaa\xe7\xd2\x16\xd6\x89\x71\xc9\x40\x34\x89\x49\xce\xe8\xb6\x2e\x29\xa4\x68\x18\x9a\x3b\x5c\x3e\x4a\xb9\x9e\xcb\x35\x8a\x20\x33\x8f\xe2\xd4\xdc\x4c\x97\x40\x2d\xe0\xe7\x31\x60\x76\xf3\x65\x3e\xbe\x09\xaf\x6e\xa3\x45\x14\x4c\x46\xe1\x29\x8a\x20\x1a\xe9\xbc\xf5\x9f\x41\x33\x1a\x64\x31\x33\x27\xa1\xbb\x8c\x03\x63\x18\x3d\x06\xa5\x92\xf3\x19\x47\x4c\x47\xc2\xa0\xda\xe4\x4f\x40\xa7\x71\xd4\xa3\x6c\xc9\x19\x1d\x45\x07\x17\x40\x75\x1f\x5d\xbc\x5e\xfc\x17\x00\x00\xff\xff\x65\x55\x50\x62\x09\x0c\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 3081, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
