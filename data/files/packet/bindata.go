// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package packet

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x95\x5f\x4f\xdb\x30\x14\xc5\xdf\xfb\x29\xae\xf2\x9c\x75\x24\x2d\x55\x95\xb7\x10\xb2\xa9\x30\x58\x44\xcb\x50\x35\xa1\xc8\x4d\x2e\xcc\x34\xb1\x2d\xdb\x2d\x74\xa8\xdf\x7d\x72\x02\x49\x49\x43\xf8\xa3\xbd\x80\xea\x63\x9f\xf3\xbb\xb1\xaf\xfd\xd8\x03\xb0\x18\xc9\xd1\xf2\xc0\x12\x24\x59\xa2\xb6\x6c\x33\x86\x6c\x6d\x79\xf0\xbb\x07\x00\x60\xa5\xb8\xb6\x7a\x00\xd7\x85\x22\xf1\x96\x72\xa6\x2a\xf5\xb1\xf8\x0b\x60\x65\x3c\x21\x9a\x72\x66\xac\xce\xe7\x01\x9c\xa1\x96\xdc\x86\xf3\xb9\x0d\x97\x53\xbf\xb0\x2d\xe6\x95\x06\x66\xd6\xe5\x14\x42\xa2\x74\x2d\xfd\xe5\x0c\x6b\xe7\x62\x08\xef\xa5\x63\x3d\xfd\xbc\x2e\xfe\x6f\xed\xd7\x73\xa7\x84\xc1\x09\x57\x68\x43\xe0\x77\xc5\x5e\xe1\x1b\xb1\xea\x2e\xf9\x40\xac\x9f\x2b\x8d\x32\x25\xb9\x0d\xe7\x3f\xda\x22\xc3\x4b\xb8\x0a\xa7\xb3\xce\x48\x92\xab\x0f\x44\xce\xf8\x72\xc3\x6d\x38\x89\xda\xe2\xfc\xe9\xc4\x87\xd0\x7f\x23\x90\x49\xdd\x0c\xac\x76\x99\x32\xa5\x09\x4b\x70\xb6\x11\xd8\xb2\xd7\x6a\xb9\x32\x39\x0b\x22\x31\x47\x4d\xb2\xf8\xa0\x4e\x4a\x51\x25\x92\x8a\x0a\x74\x1e\x85\x70\xe0\xc1\x10\x1e\xc6\x23\x18\x0d\x17\x54\x43\xc0\x25\x2a\x1b\xc6\xdf\x8f\xe0\xf8\xf8\x62\x00\x17\xfe\x59\xbd\x3e\x21\x1a\x6f\xb9\xdc\x98\xc5\x47\x44\xa2\x39\x48\x24\xdb\xd1\x85\xc9\x1e\xd6\x65\x93\xdc\xf2\x60\x5c\xe7\x53\xb5\x34\x03\x07\xad\xdf\x70\x8f\xdc\xe9\x26\x77\x5a\xc9\x07\xee\x7f\x44\x1f\xb8\x4d\x76\xc7\x7d\x27\xbc\xdb\x0d\xef\x7a\xe0\xb6\xd0\xbb\x87\xa3\x12\x7f\x08\x61\x10\x7c\xa6\x04\xb7\x59\x83\x7b\x38\x6a\x16\xe1\x8e\xdf\xbb\x05\x83\xee\x2a\x06\x1e\x38\xa3\xfd\x2a\x1c\x77\xfc\x5c\xc5\x27\x2a\x70\x46\x8d\x0a\x1c\x77\xef\x08\x55\xdb\x50\xb5\x45\x22\x31\x45\xa6\x29\xc9\x5a\x9a\x42\x48\xbe\xa6\x29\x4a\x13\x1c\xd5\x77\xe9\xb3\xa3\xc8\xc8\xe6\x1b\x97\x39\xd1\x66\xc2\x0d\xc5\x2c\xad\x75\xc2\x18\xd7\x45\x73\x1b\xe3\xc7\xba\x49\xc5\x1f\x22\x73\x94\x7d\x22\x84\x4a\x78\x8a\xfd\x84\xe7\x5f\x93\x6c\x65\x2e\x9c\x2f\x35\x8e\xb1\x7c\xee\xe5\x6d\xe5\x5a\x84\xbc\xec\xfa\xda\xba\xbc\xe5\x13\xce\x6e\xe8\x6d\x81\xec\x07\xa7\xe1\x2c\x8e\x2e\x7e\x9e\x84\xc1\x2c\x9e\x1c\x57\x74\xa5\x17\x97\x79\xfd\x4a\xc4\x42\xf2\x3b\x4c\x74\x4c\xd3\x97\xd3\xee\x54\xb9\x73\x4f\x7a\xd3\x25\x23\x0b\x2c\x60\xa3\x52\x87\x49\x63\x3d\x65\x62\x55\x7c\x20\x8d\x0f\xda\xaa\x94\xad\xfd\xfe\x0a\xfc\x68\x12\x9f\x86\xf3\x4e\x7c\x22\x68\xbc\xc4\x4d\x3b\x3b\x11\xf4\xb4\xa9\x55\xe0\x7e\x34\x81\x3d\xb5\xa2\x16\x44\xa9\x7b\x2e\xd3\x1d\xf2\x57\x6e\xd8\xe5\x6a\x81\x92\xa1\x46\xf5\x0b\xa5\x6a\x7f\x52\xd7\xa5\x62\x8c\x9d\xfe\xb8\xff\xfa\x25\xdb\x50\xcb\xd7\x7b\xe7\x14\x99\x17\xdc\x03\x2d\x57\xd8\xdb\xa5\x2a\x68\x7a\xdb\xde\xbf\x00\x00\x00\xff\xff\xf1\xa7\x80\x00\x07\x08\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 2055, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
