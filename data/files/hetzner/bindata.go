// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package hetzner

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x98\x4d\x6f\xea\x38\x17\xc7\xf7\xfd\x14\x56\xd6\x5c\x1e\x92\x86\x3c\x1d\x76\x0c\x54\x33\x95\xda\x8a\x21\x57\x1d\xa4\xd1\x5d\x38\xce\x29\x58\x38\x76\x64\x3b\x8c\xe8\x55\xbf\xfb\xc8\x49\x0a\x49\xc8\x4b\x49\x41\x77\xd3\x8a\x9c\xb7\x9f\x8f\xff\x76\x1c\xff\xbc\x41\xc8\xe2\x38\x02\x6b\x82\xac\x0d\xe8\x37\x0e\xd2\x1a\x98\x87\xc0\x77\xd6\x04\xfd\x73\x83\x10\x42\x56\x08\x3b\xeb\x06\xa1\x1f\xa9\x45\xc2\x9a\x0a\xae\x0e\xd6\x9f\xe9\x5f\x84\x2c\x26\x08\xd6\x54\x70\x93\xeb\x0f\x90\x11\xe6\xfb\x34\x57\x6a\xcc\xa2\x8c\x69\x7e\x7f\x7c\xfa\x26\x38\x1c\x33\xe5\xb5\xac\xfc\xc7\x8f\xf4\xff\xfb\xa1\x30\xe5\x4a\x63\x4e\xe0\xfb\x3e\x86\x9a\xf2\x6a\x9b\x98\xf4\xf7\x2b\x77\x74\x2c\x10\x82\x22\x92\xc6\x1f\x58\x73\x08\x29\xc1\x1a\x42\xb4\x14\x42\x23\x1f\xe4\x0e\x24\x2a\x87\x18\xfb\x5a\xc8\xbd\xf1\x7f\x12\x5c\x6f\xd8\x1e\x1d\xe3\xb2\x90\x82\x77\x6c\xaa\xba\xc7\x71\xe2\xc8\x9a\xa0\x5b\xe7\x48\x40\xd5\xd6\x9a\x20\x67\x34\x1a\x65\xe3\x19\x34\x62\x7f\xf3\xfd\x79\x0f\xf4\x72\xd8\x95\xf0\xdd\x56\xfa\xc5\xea\x37\xfb\x4c\xf2\x72\x48\x1f\x6a\xaf\x42\x6d\x3b\x77\xe7\x76\xdd\x40\xf4\xe8\xfa\x69\xd8\xb5\xf8\xbb\xda\x6e\x3b\xe7\xf7\xbd\x14\x73\x09\x70\x67\xec\x55\xc1\xdd\xce\xc6\xdb\x4e\xbf\xce\x9f\xc4\x5d\x6b\x04\x77\xdd\xeb\xf5\xcf\x7d\x20\x69\xd8\x67\xc9\x56\x23\x7f\xc9\xaa\xbd\x5f\xb9\xe7\xaa\xa7\x1c\x72\x1d\xea\x2e\xed\x18\x86\x7e\x5b\xe5\x05\x94\xd3\x8d\x3f\xee\xa6\xf7\x7b\xa0\xfb\x97\xe5\xf6\xdc\x1e\x6f\x28\xdb\xef\xd9\x77\xff\xf2\x8d\xaf\x19\xc0\xb8\x83\x7f\x7c\xbe\xda\xc7\x17\x56\xfb\x29\x75\xb7\xda\xc7\xfd\xd4\x5e\x0d\xbb\x0e\x7e\x87\xda\x17\x2b\xef\xfc\x17\x94\xf7\xcb\x9b\x6e\x18\x7a\xbd\x9d\xaa\x61\x57\xc2\x6f\x7f\x37\xa5\x18\xcf\x2f\x4f\xd0\x07\xbf\x1c\x77\x25\xd1\xd8\x4e\x1b\xff\x6c\x65\x37\x1f\xe1\x77\x39\x6c\xd9\xa9\x8e\xf3\x85\x4a\x9d\x60\xd6\x40\x69\x57\x4f\x5f\xa7\xdb\x49\x3b\xa3\xf3\x19\x46\xe7\x4b\x8c\x4e\xf5\x98\x72\xba\xfa\xda\x19\x6f\x3f\xc3\x78\x7b\x51\xc6\x93\xc9\xb6\xdb\x97\xda\xac\xed\x7b\xed\x08\xd9\xf5\x85\x76\x1e\x64\xdd\x87\x42\x3b\xe4\xf8\x33\x90\xe3\x2f\x41\x56\xd7\x8d\x5d\x77\xaa\x6e\xa7\xf4\x3e\x43\xe9\x7d\x89\xf2\xae\xf3\x00\xe4\x7d\x50\x1e\xbe\xdc\xb7\x49\x00\x92\x83\x06\xf5\x02\x52\xd5\xdf\x1e\xec\x32\x8b\x01\xb1\x87\xff\x1f\xba\x8d\x03\xa9\x58\xb3\x8b\x8a\x8f\x34\xf9\x65\xc5\x04\x69\x99\x40\xfe\xec\xbd\x90\xe9\x15\x27\x4c\xfb\x31\x90\x72\x4c\x2c\x42\x3f\x09\x38\xe8\xb4\xc0\x68\xe8\xb8\xee\x70\x34\x1c\xfd\xcf\xf6\x0e\x85\x4c\x9b\x41\xee\x28\x81\x92\xe7\xa8\xc6\x0f\xb3\xf4\x2a\x04\x9e\x45\x08\x33\x1a\x4a\x95\xf3\x14\x5c\x80\xe3\x80\xc1\x8c\x25\x4a\x83\x7c\x12\x9c\x6a\x21\x29\x5f\x9b\xa4\x38\x8e\x15\x11\x21\x58\x4d\xee\x8f\x62\xbd\xce\x7c\x6b\x93\x9a\xaa\x8d\x2e\x2c\x33\xcc\x41\x69\xca\x0f\xb7\x35\x1f\x25\xbf\x01\xc3\x4a\x53\xa2\x00\x4b\xb2\x29\x01\x14\x0d\x79\xf6\x25\xc4\x8c\x12\xac\x8a\x9b\xa7\x69\x32\x57\x99\x72\x1e\x16\x85\x1e\x15\x36\xeb\xcc\x67\x2e\x22\x4c\xd3\xea\x24\x1b\xd6\xd0\x34\x8d\x95\xfa\x18\x46\x54\x19\x51\xcc\x04\xd7\x52\x30\xe3\xfc\x8c\x23\x50\x31\x26\xf0\x48\x5f\x81\xec\x09\x83\xc1\x23\x8d\xa8\x5e\x62\xbe\x06\x39\xf0\xb3\x29\x9a\x12\x22\x12\xae\x07\x0b\x23\x2a\xa5\x81\xeb\x17\xc1\x92\x08\x1e\x71\x00\x6c\x30\xcf\x65\xa0\x85\xc4\x6b\x98\x31\xac\xd4\x60\x09\x4a\x24\x92\xc0\x5f\x89\xd0\xb8\x08\x11\x61\x03\x57\x51\x87\x97\xce\xba\xe3\x16\x1d\x39\xe8\x7f\x85\xdc\x2e\xa4\xd8\xd1\x10\xa4\xf1\x7d\x65\x98\x73\x60\x8d\x33\x39\x65\x20\x75\xd3\x9c\x0b\xd3\x58\x2b\x84\x80\x62\x5e\x57\x47\x30\x4a\xf6\xc5\x6a\x5c\xf0\x1a\xd1\xfc\x0d\xc1\x46\x88\xed\x77\xb1\x05\x3e\x4d\xf4\x86\x37\xe9\x66\x19\x60\x62\x1c\xde\x9a\x1c\xa6\x8b\x07\x95\x4e\xec\xef\x58\x51\x32\x4d\x42\xaa\x1b\x5d\xf3\xf1\x4c\xb5\xa6\xe4\xd4\x29\x16\x8c\xf9\x0c\x20\x7e\xe0\x1a\xe4\x0e\x9b\x99\xbd\xad\x15\xf2\x22\x09\x18\x25\xa9\x92\x8a\x2b\xfa\xb8\xbf\xdc\xbc\xff\x17\x00\x00\xff\xff\x18\x42\xeb\x0c\xc4\x14\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 5316, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
