// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package hetzner

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x98\xcd\x6e\xe2\x30\x10\xc7\xef\x3c\xc5\xc8\x67\xb6\xc2\x26\x89\x58\xae\x05\xed\x5e\xba\xaa\x36\xab\x2a\xd2\xaa\x87\x94\x8c\xda\x08\x70\xa8\x13\x22\xa5\x15\xef\xbe\x72\x08\x78\xf3\x41\x4c\x4c\xa2\x5e\xf8\x18\xfb\x6f\xff\x3c\x99\x89\x3d\xfe\x1c\x01\x10\xee\x6f\x91\xcc\x81\xbc\x61\xf2\xc1\x51\x90\xb1\x34\x22\x4f\x63\x32\x87\xbf\x23\x00\x00\x12\x60\x9a\x9b\x01\xc8\xbb\x7f\xfa\xb5\x13\x51\x40\x46\x00\xcf\xb9\x40\xe0\x6b\x18\x71\xa5\xf9\xcc\x3f\x01\xc8\x26\x5a\xf9\x49\x18\x71\x39\xc5\x0f\x14\x5b\x9f\x67\xc5\x08\x67\x95\x6c\x5a\x2c\x95\xf5\x23\xe2\xa8\x46\x2a\x08\x48\xf1\xe7\x39\xff\x3e\x9c\x27\x0e\x79\x9c\xf8\x7c\x85\x7f\xb2\x1d\x36\x4c\x1f\xaf\xf7\x72\xf8\xa5\x67\x4d\xd4\x04\x01\xc6\x2b\x11\xee\x4e\x58\x0b\x0c\xc2\x95\x9f\x60\x00\xbf\xa3\x28\x01\x17\x45\x8a\x02\xca\x12\xd9\xfe\x1a\x89\x4c\xf6\x7f\x88\x78\xf2\xb6\xc9\x40\xe9\x8e\x92\xff\x7a\xef\xe4\xac\x96\x5a\xa7\xbf\x25\x73\x98\x32\x45\x10\xc6\x6b\x32\x07\x36\x99\x4c\x8e\xeb\x19\x5f\xc4\xfe\xe6\xba\x0b\x03\xf4\xb2\x6c\x20\x7c\xab\x95\xfe\xd1\xfb\x4e\x3b\x92\x97\x25\x26\xd4\x4e\x85\x9a\xb2\x59\x57\xaf\x4b\x08\x03\xaf\xd7\x65\x43\xf1\xeb\xdc\x4e\x59\x77\xbf\x97\x34\x7d\x80\x33\xdb\xa9\x82\x5b\x5a\xc7\x53\x66\xe6\xf9\x9a\x6e\xa8\x15\xcc\xf4\xf9\xfa\x33\x7b\x11\x61\x60\x92\xb2\x55\xe5\x97\x64\xed\xd2\xb3\xba\x46\x4f\x59\x32\x0c\xb5\x2e\x76\x24\x83\xd9\xab\xb2\x87\xc8\xd1\xe3\xdb\x7a\x7a\xd7\x00\xdd\xed\x97\xdb\xb1\x0c\x76\x28\xea\x1a\xfa\xdd\xed\xdf\xf1\x0d\x0b\xb0\x35\xfc\x76\xf7\x68\xb7\x7b\x8e\xf6\x3a\xb5\x3e\xda\x6d\xb3\x68\xaf\xca\x86\xc1\xd7\x44\xfb\xa3\xe7\x74\xdf\xa0\x9c\x2f\x77\xba\x64\x30\xda\x9d\xaa\xb2\x81\xf0\xdb\xf7\xa6\x1c\xe3\xd7\xd3\x03\x9a\xe0\x97\x75\x03\x05\x0d\x65\x6d\xfc\xf7\x1e\xbd\x7c\x84\x4f\x0b\xd8\x72\xa7\x26\xce\xa7\x50\x24\x7b\x7f\x73\x81\x92\x56\x4f\x5f\xf5\xd7\x49\x3b\x23\xbb\x86\x91\xdd\xc4\xc8\xaa\xc7\x94\x7a\xf6\xb5\x33\x4e\xaf\x61\x9c\xf6\xca\x58\x7b\xd8\xb4\x3d\xd5\xee\xdb\xea\x35\x05\xa9\xab\xd0\xba\x41\x36\x15\x0a\xed\x90\xf6\x35\x90\xf6\x4d\x90\xd5\xbc\xa1\x4d\xa7\xea\x76\x4a\xe7\x1a\x4a\xe7\x26\xca\x99\xf6\x00\xe4\x9c\x28\xcf\x95\xfb\x7a\xff\x82\x82\x63\xd2\x54\xb6\xa7\x28\xe2\x02\x91\xde\xcd\xee\x2e\x2f\xa0\xd2\x5a\xdc\x5b\x9c\xc6\x29\xee\x2e\xe6\x90\x88\x3d\x8e\x95\xf1\xdd\xaf\xdb\xf2\xfb\x8c\xa3\xb5\x30\x1e\x14\xf0\xe8\xf0\x2f\x00\x00\xff\xff\xd1\x8c\xa0\xd9\x2c\x11\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 4396, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
