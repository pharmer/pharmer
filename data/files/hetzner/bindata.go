// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package hetzner

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x98\xcd\x6e\xea\x38\x14\xc7\xf7\x7d\x0a\x2b\x6b\x2e\x43\xd2\x90\xe9\xb0\x63\xa0\x9a\xa9\xd4\x56\x0c\xb9\xea\x20\x8d\xee\xc2\x38\xa7\x60\xe1\xd8\x91\xed\x30\xa2\x57\x7d\xf7\x2b\x27\x01\x92\x90\x8f\x92\x82\xba\x69\x45\x7c\x3e\x7e\x3e\xe7\x6f\xc7\xf1\xcf\x1b\x84\x2c\x8e\x43\xb0\x46\xc8\x5a\x83\x7e\xe3\x20\xad\x9e\x79\x08\x7c\x6b\x8d\xd0\x7f\x37\x08\x21\x64\x05\xb0\xb5\x6e\x10\xfa\x91\x8c\x48\x58\x51\xc1\xd5\x61\xf4\x67\xf2\x17\x21\x8b\x09\x82\x35\x15\xdc\xc4\xfa\x0b\x64\x88\xf9\x2e\x89\x95\x0c\xa6\x5e\x66\x68\x7a\x7f\x7c\xfa\x26\x38\x1c\x23\x65\xb9\xac\xec\xc7\x8f\xe4\xff\xfb\x21\x31\xe5\x4a\x63\x4e\xe0\xfb\x2e\x82\x8a\xf4\x6a\x13\x9b\xf0\xf7\x0b\x77\x70\x4c\x10\x80\x22\x92\x46\x7b\xac\x29\x04\x94\x60\x0d\x01\x9a\x0b\xa1\x91\x0f\x72\x0b\x12\x15\x5d\xcc\xf8\x4a\xc8\x9d\xb1\x7f\x12\x5c\xaf\xd9\x0e\x1d\xfd\x52\x97\x9c\x75\x64\xb2\xba\xc7\x79\xe2\xd0\x1a\xa1\x5b\xe7\x48\x40\xd5\xc6\x1a\x21\x67\x30\x18\xa4\xf3\xe9\xd5\x62\x7f\xf3\xfd\x69\x07\xf4\xa2\xdb\x95\xf0\xdd\x46\xfa\xd9\xe2\x0f\xfb\x4c\xf2\xa2\x4b\x17\x6a\xaf\x44\x6d\x3b\x77\xe7\x56\xdd\x40\x74\xa8\xfa\xa9\xdb\xb5\xf8\xdb\xca\x6e\x3b\xe7\xd7\xbd\xe0\x73\x09\x70\x67\xe8\x95\xc1\xdd\xd6\xc2\xdb\x4e\xb7\xca\x9f\xf8\x5d\x6b\x06\x77\xed\xeb\xf5\xef\xdd\x52\xd2\xa0\xcb\x92\x2d\x7b\x7e\xc9\xaa\xbd\x5f\xb8\xe7\xaa\xa7\xe8\x72\x1d\xea\x36\xed\x18\x86\x6e\x5b\xe5\x05\x94\xd3\x8e\x3f\x6c\xa7\xf7\x3b\xa0\xfb\x97\xe5\xf6\xdc\x0e\x6f\x28\xdb\xef\x58\x77\xff\xf2\x85\xaf\x98\xc0\xb0\x85\x7f\x78\xbe\xda\x87\x17\x56\xfb\x29\x75\xbb\xda\x87\xdd\xd4\x5e\x76\xbb\x0e\x7e\x8b\xda\x67\x0b\xef\xfc\x17\x94\xf7\xe5\x45\x37\x0c\x9d\xde\x4e\x65\xb7\x2b\xe1\x37\xbf\x9b\x12\x8c\xe7\x97\x27\xe8\x82\x5f\xf4\xbb\x92\x68\x6c\xa7\x89\x7f\xb2\xb0\xeb\x8f\xf0\xdb\x0c\xb6\x68\x54\xc5\xf9\x42\xa5\x8e\x31\xab\xa1\xb4\xcb\xa7\xaf\xd3\xed\xa4\x99\xd1\xf9\x08\xa3\xf3\x29\x46\xa7\x7c\x4c\x39\x5d\x7d\xcd\x8c\xb7\x1f\x61\xbc\xbd\x28\xe3\x49\xb3\xed\xe6\xa5\x36\x69\xfa\x5e\x3b\x42\xb6\x7d\xa1\x9d\x07\x59\xf5\xa1\xd0\x0c\x39\xfc\x08\xe4\xf0\x53\x90\xe5\x75\x63\x57\x9d\xaa\x9b\x29\xbd\x8f\x50\x7a\x9f\xa2\xbc\x6b\x3d\x00\x79\x7b\xca\xc3\x97\xfb\x26\x5e\x82\xe4\xa0\x41\xbd\x80\x54\xd5\xb7\x07\xdb\x74\xc4\x80\xd8\xfd\xdf\xfb\x6e\xed\x44\x4a\xa3\xe9\x45\xc5\x3e\x4c\x76\x59\x31\x42\x5a\xc6\x90\x3d\x7b\xcf\x45\x7a\xc5\x31\xd3\x7e\x04\xa4\xe8\x43\x58\xac\x34\xc8\x87\x68\x8e\xf9\x2a\xb9\x0c\xb1\x07\x7d\xc7\x75\xfb\x83\xfe\xe0\x37\xdb\x3b\x64\x33\xb5\x06\xb9\xa5\x04\x26\x55\x1e\x83\x0a\x7b\xcc\x92\x7b\x11\x78\x16\x01\x4c\x68\x20\x55\x06\x97\x33\x01\x8e\x97\x6c\x1f\xf1\x49\x70\xaa\x85\xa4\x7c\x65\x82\xe2\x28\x52\x44\x04\x60\xd5\x99\x3f\x8a\xd5\x2a\xb5\xad\x0c\x6a\xb2\xd6\x9a\xb0\x74\x60\x0a\x4a\x53\x7e\xb8\xba\xd9\xa7\xfc\x06\x0c\x2b\x4d\x89\x02\x2c\xc9\xba\x00\x90\x1f\xc8\xa2\xcf\x21\x62\x94\x60\x95\xdf\x49\x4d\xc5\xb9\x4a\x65\xf4\x30\xcb\xd5\x28\xb7\x73\xa7\x36\x53\x11\x62\x9a\x64\xcf\x3a\xd1\x37\x45\x63\x85\x3a\x06\x21\x55\x46\x21\x13\xc1\xb5\x14\xcc\x18\x3f\xe3\x10\x54\x84\x09\x3c\xd2\x57\x20\x3b\xc2\xa0\xf7\x48\x43\xaa\x93\x9e\xc8\x9e\x9f\xb6\x6a\x4c\x88\x88\xb9\xee\xcd\x8c\xc2\x94\x06\xae\x5f\x04\x8b\x43\x78\xc4\x4b\x60\xbd\x69\xa6\x09\x2d\x24\x5e\xc1\x84\x61\xa5\x7a\x73\x50\x22\x96\x04\xfe\x89\x85\xc6\x79\x88\x10\x57\xc9\xc4\x4b\xda\xee\xb8\x79\x4b\x0e\xfa\x7f\x21\x37\x33\x29\xb6\x34\x00\x69\x6c\x5f\x19\xe6\x1c\x58\x6d\x2b\xc7\x0c\xa4\xae\x6b\xba\x30\x95\xb5\x02\x58\x52\xcc\xab\xf2\x08\x46\xc9\x2e\x9f\x8d\x0b\x5e\xa1\x9a\x7f\x61\xb9\x16\x62\xf3\x5d\x6c\x80\x8f\x63\xbd\xe6\x75\xc2\x99\x2f\x31\x31\x06\x6f\x75\x06\xe3\xd9\x83\x4a\x3a\xfb\x27\x56\x94\x8c\xe3\x80\xea\x5a\xd3\x6c\x3e\x63\xad\x29\x39\x35\x8a\x04\x63\x3e\x03\x88\x1e\xb8\x06\xb9\xc5\xa6\xb5\xb7\x95\x4a\x9e\xc5\x4b\x46\x49\x22\xa5\xfc\xfa\x3e\xee\x36\x37\xef\xbf\x02\x00\x00\xff\xff\x4b\x65\x61\x95\xd2\x14\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 5330, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
