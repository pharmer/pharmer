// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package hetzner

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x98\x5d\x6f\xea\x36\x18\xc7\xef\xfb\x29\xac\x5c\x53\x46\xd2\x90\x75\xdc\x31\xe8\x36\x34\xda\xc3\x48\xd7\x21\x4d\x47\x93\x71\x9e\x82\x85\xb1\x23\xdb\x61\xa2\x47\xfd\xee\x47\x4e\x78\x49\x42\x5e\x4a\x0a\x3a\x37\xad\xc8\xf3\xf6\xf3\xe3\xbf\x1d\xc7\xdf\x6e\x10\xb2\x38\x5e\x83\xd5\x43\xd6\x12\xf4\x1b\x07\x69\xb5\xcc\x43\xe0\x1b\xab\x87\xfe\xbd\x41\x08\x21\x2b\x80\x8d\x75\x83\xd0\xd7\xd8\x22\x61\x41\x05\x57\x07\xeb\xb7\xf8\x2f\x42\x16\x13\x04\x6b\x2a\xb8\xc9\xf5\x3b\xc8\x35\xe6\xdb\x38\x57\x6c\x4c\xa2\x8c\x69\xf8\x70\x7c\xfa\x26\x38\x1c\x33\xed\x6a\x59\xbb\x1f\x5f\xe3\xff\xef\x87\xc2\x94\x2b\x8d\x39\x81\xe7\x6d\x08\x05\xe5\xd5\x2a\x32\xe9\x1f\x66\x6e\xe7\x58\x20\x00\x45\x24\x0d\xf7\x58\x43\x08\x28\xc1\x1a\x02\x34\x15\x42\x23\x1f\xe4\x06\x24\xca\x86\x18\xfb\x42\xc8\xad\xf1\x7f\x14\x5c\x2f\xd9\x16\x1d\xe3\x92\x90\x94\x77\x68\xaa\xba\xc7\x71\xe2\xb5\xd5\x43\x77\xce\x91\x80\xaa\x95\xd5\x43\x4e\xa7\xd3\x49\xc6\xd3\x2a\xc5\xbe\xf5\xfd\x61\x03\xf4\x6c\xd8\x95\xf0\xdd\x4a\xfa\xc9\xec\x17\xfb\x4c\xf2\x6c\x48\x13\x6a\x2f\x47\x6d\x3b\xf7\xe7\x76\xdd\x40\x34\xe8\xfa\x69\xd8\xb5\xf8\xeb\xda\x6e\x3b\xe7\xf7\x3d\x13\x73\x09\x70\xa7\xeb\xe5\xc1\xdd\xda\xc6\xdb\x4e\xb3\xce\x9f\xc4\x5d\x6b\x04\xf7\xf5\xeb\xf5\x8f\xed\x5c\xd2\xa0\xc9\x92\xcd\x47\xfe\x90\x55\xfb\x30\x73\xcf\x55\x4f\x36\xe4\x3a\xd4\x75\xda\x31\x0c\xcd\xb6\xca\x0b\x28\xa7\x1e\xbf\x5b\x4f\xef\x37\x40\xf7\x2f\xcb\xed\xb9\x0d\xde\x50\xb6\xdf\xb0\xef\xfe\xe5\x1b\x5f\x30\x80\x6e\x0d\x7f\xf7\x7c\xb5\x77\x2f\xac\xf6\x53\xea\x7a\xb5\x77\x9b\xa9\x3d\x1f\x76\x1d\xfc\x1a\xb5\x4f\x66\xde\xf9\x2f\x28\xef\x87\x37\xdd\x30\x34\x7a\x3b\xe5\xc3\xae\x84\x5f\xfd\x6e\x8a\x31\x9e\x5e\x1e\xa1\x09\x7e\x36\xee\x4a\xa2\xb1\x9d\x2a\xfe\xc1\xcc\x2e\x3f\xc2\x6f\x76\xb0\x59\xa7\x22\xce\x17\x2a\x75\x84\x59\x09\xa5\x9d\x3f\x7d\x9d\x6e\x27\xd5\x8c\xce\x47\x18\x9d\x4f\x31\x3a\xf9\x63\xca\xe9\xea\xab\x66\xbc\xfb\x08\xe3\xdd\x45\x19\x4f\x26\xdb\xae\x5e\x6a\x83\xaa\xef\xb5\x23\x64\xdd\x17\xda\x79\x90\x45\x1f\x0a\xd5\x90\xdd\x8f\x40\x76\x3f\x05\x99\x5f\x37\x76\xd1\xa9\xba\x9a\xd2\xfb\x08\xa5\xf7\x29\xca\xfb\xda\x03\x90\xb7\xa7\x3c\x7c\xb9\xaf\xa2\x39\x48\x0e\x1a\xd4\x0b\x48\x55\x7c\x7b\xb0\x49\x2c\x06\xc4\x6e\xff\xdc\x76\x4b\x07\x92\xb3\x26\x17\x15\xfb\x34\xbb\xcb\x8a\x1e\xd2\x32\x82\xdd\xb3\xf7\x54\xa6\x57\x1c\x31\xed\x87\x40\xb2\x31\x84\x45\x4a\x83\x1c\x85\x53\xcc\x17\xf1\x65\x88\xdd\x69\x3b\xae\xdb\xee\xb4\x3b\x3f\xd9\xde\xa1\x9a\xe9\x35\xc8\x0d\x25\x30\x28\x8a\xe8\x14\xf8\x63\x16\xdf\x8b\xc0\x93\x08\x60\x40\x03\xa9\x76\x70\x29\x17\xe0\x78\xce\xf6\x19\x1f\x05\xa7\x5a\x48\xca\x17\x26\x29\x0e\x43\x45\x44\x00\x56\x99\xfb\x58\x2c\x16\x89\x6f\x61\x52\x53\xb5\xd4\x85\x25\x86\x21\x28\x4d\xf9\xe1\xea\x66\x5f\xf2\x16\x18\x56\x9a\x12\x05\x58\x92\x65\x06\x20\x6d\xd8\x65\x9f\x42\xc8\x28\xc1\x2a\xbd\x93\x9a\x8e\x73\x95\xc8\x68\x14\xa6\x7a\x94\xda\xb9\x13\x9f\xa1\x58\x63\x1a\x57\x5f\xb5\x4d\xbb\x58\xa6\x83\xc1\x9a\x2a\xa3\x8d\x81\xe0\x5a\x0a\x66\xdc\x9e\xf0\x1a\x54\x88\x09\x8c\xe9\x2b\x90\x2d\x61\xd0\x1a\xd3\x35\xd5\xf1\x6c\xc8\x96\x9f\x4c\x52\x9f\x10\x11\x71\xdd\x9a\x18\x6d\x29\x0d\x5c\xbf\x08\x16\xad\x61\x8c\xe7\xc0\x5a\xc3\x9d\x1a\xb4\x90\x78\x01\x03\x86\x95\x6a\x4d\x41\x89\x48\x12\xf8\x2b\x12\x1a\xa7\x21\xd6\xb8\x48\x20\x5e\x3c\xe1\x8e\x9b\xf6\xe4\xa0\xff\x17\x72\x35\x91\x62\x43\x03\x90\xf1\xa0\xa2\x39\xdc\xbe\x32\xcc\x39\xb0\xd2\x99\xec\x33\x90\xba\x6c\xce\x85\x69\xac\x15\xc0\x9c\x62\x5e\x54\x4c\x30\x4a\xb6\xe9\x92\x5c\xf0\x02\xd1\xfc\x03\xf3\xa5\x10\xab\x67\xb1\x02\xde\x8f\xf4\x92\x97\xe9\x66\x3a\xc7\xc4\x38\xbc\x9d\x3a\xf8\x5f\x7e\x7b\x1e\x7f\x19\xfc\xf9\xf7\xe4\xbf\x49\xff\x69\x34\x28\x4b\xd1\x9f\x8c\x54\x3c\xf5\xbf\x62\x45\x49\x3f\x0a\xa8\x2e\x75\xdd\x8d\xb8\xaf\x35\x25\xa7\x4e\xa1\x60\xcc\x67\x00\xe1\x88\x6b\x90\x1b\x6c\x14\x70\x57\x28\xf5\x49\x34\x67\x94\x8c\x26\xb9\x0d\xe0\xb8\x1d\xdd\xbc\x7f\x0f\x00\x00\xff\xff\xb2\x8d\x1c\x0b\xf3\x14\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 5363, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
