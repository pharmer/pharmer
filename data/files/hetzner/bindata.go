// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package hetzner

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x98\xcd\x6e\xe2\x30\x10\xc7\xef\x3c\x85\xe5\x73\xb7\xc2\x26\xc9\xb2\x5c\x0b\xda\xbd\x74\x55\x6d\x56\x15\xd2\x8a\x43\x4a\x46\x6d\x04\xd8\xc8\x31\x91\xd2\x8a\x77\x5f\x39\xa1\x31\xf9\x20\x26\x26\x51\x2f\x04\x3c\xf9\x7b\x7e\x33\xcc\xc4\x76\x3e\x46\x08\x61\x16\xec\x00\xcf\x10\x7e\x03\xf9\xce\x40\xe0\x3b\x35\x08\x2c\xc1\x33\xf4\x6f\x84\x10\x42\x38\x84\x04\x8f\x10\x5a\x65\x16\x01\xaf\x11\x67\x71\x61\xfd\xc8\x3e\x11\xc2\x5b\xbe\x0e\x64\xc4\x99\x9a\xeb\x27\x88\x5d\xc0\xd2\x6c\xae\xcc\x98\xab\x94\x69\xbe\xd0\xa3\xef\x9c\x81\x9e\xe9\xe4\x0b\x9f\x7e\xac\xb2\xeb\xb1\x70\x1c\xb1\x58\x06\x6c\x0d\x7f\xd3\x3d\x34\xb8\x8f\x37\x07\x35\xfd\x62\xe9\x8c\xb5\x83\x10\xe2\xb5\x88\xf6\x9f\x58\x73\x08\xa3\x75\x20\x21\x44\x7f\x38\x97\xc8\x07\x91\x80\x40\x65\x89\xb2\xbf\x72\x91\xaa\xfb\x1f\x39\x93\x6f\xdb\x14\x69\x5d\x2e\x39\xbb\x7b\xaf\xbc\x3a\x3a\xce\x60\x87\x67\x68\x42\x35\x41\x14\x6f\xf0\x0c\xd1\xf1\x78\x9c\xc7\x73\x77\x11\xfb\x9b\xef\xcf\x2d\xd0\xcb\xb2\x81\xf0\x9d\x56\xfa\xa7\xe5\x0f\xd2\x91\xbc\x2c\xb1\xa1\xf6\x2a\xd4\x84\x4e\xbb\x66\x5d\x41\x58\x64\xbd\x2e\x1b\x8a\xdf\x94\x76\x42\xbb\xe7\xbd\xa4\xe9\x03\x9c\xba\x5e\x15\xdc\x31\x26\x9e\x50\xbb\xcc\xd7\x74\x43\x45\x30\x35\xf7\xeb\xaf\xf4\x45\x44\xa1\x4d\xcb\x56\x95\x5f\xd2\xb5\x8b\xa5\xd3\xb5\x7a\xca\x92\x61\xa8\x4d\xb5\xa3\x18\xec\x1e\x95\x3d\x54\x8e\x19\xdf\x35\xd3\xfb\x16\xe8\x7e\xbf\xdc\x9e\x63\xb1\x42\x11\xdf\x32\xef\x7e\xff\x89\x6f\x08\xc0\x35\xf0\xbb\xdd\xab\xdd\xed\xb9\xda\xeb\xd4\xe6\x6a\x77\xed\xaa\xbd\x2a\x1b\x06\xdf\x50\xed\x4f\x4b\xaf\xfb\x02\xe5\x7d\x79\xd2\x15\x83\xd5\xea\x54\x95\x0d\x84\xdf\xbe\x36\x65\x18\xbf\x9f\x1f\xc1\x06\xbf\xac\x1b\xa8\x68\x08\x6d\xe3\x7f\x58\x92\xcb\x5b\xf8\xe4\x04\x5b\xbe\xa9\x89\xf3\x39\x12\xf2\x10\x6c\x2f\x50\x92\xea\xee\xab\xfe\x38\x69\x67\xa4\xd7\x30\xd2\x9b\x18\x69\x75\x9b\x52\xef\xbe\x76\xc6\xc9\x35\x8c\x93\x5e\x19\x6b\x7f\x36\x69\x6f\xb5\x87\xb6\xf3\x9a\x86\x34\x9d\xd0\xba\x41\x36\x1d\x14\xda\x21\xdd\x6b\x20\xdd\x9b\x20\xab\x7d\x43\x9a\x76\xd5\xed\x94\xde\x35\x94\xde\x4d\x94\x53\xe3\x06\xc8\xfb\xa4\x2c\x4e\xee\x9b\xc3\x0b\x08\x06\x32\x3b\xb6\xe7\xd4\x38\x01\x11\x97\xde\x23\xe8\x78\xb4\x55\x61\x91\xfb\xef\xf7\x4e\x41\x51\x0f\xac\x66\x97\x9c\x6f\xb5\xa3\xd3\xa0\x42\x08\xc2\x9d\x16\x14\xc6\xe3\x99\x34\x7f\xeb\x51\x12\x86\xa0\x86\xa4\x38\x80\x56\x8c\xce\xaf\xab\x91\xfa\x76\xfc\x1f\x00\x00\xff\xff\xf7\xc3\x02\x35\x4b\x11\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 4427, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
