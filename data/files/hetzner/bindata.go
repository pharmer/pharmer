// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package hetzner

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x98\x5d\x6f\xea\x36\x18\xc7\xef\xfb\x29\xac\x5c\x73\x18\x49\x43\xd4\x71\xc7\xa0\xda\x2a\xb5\x15\x23\x47\x1d\xd2\x74\x2e\x1c\xe7\x29\x58\x38\x76\x64\x3b\x4c\xf4\xa8\xdf\x7d\x72\x92\x42\x12\xf2\x52\x52\xd0\xb9\x69\x45\x9e\xb7\x9f\x1f\xff\xed\x38\xfe\x79\x83\x90\xc5\x71\x04\xd6\x04\x59\x1b\xd0\x6f\x1c\xa4\x35\x30\x0f\x81\xef\xac\x09\xfa\xf7\x06\x21\x84\xac\x10\x76\xd6\x0d\x42\x3f\x52\x8b\x84\x35\x15\x5c\x1d\xac\x3f\xd3\xbf\x08\x59\x4c\x10\xac\xa9\xe0\x26\xd7\x9f\x20\x23\xcc\xf7\x69\xae\xd4\x98\x45\x19\xd3\xfc\xfe\xf8\xf4\x4d\x70\x38\x66\xca\x6b\x59\xf9\x8f\x1f\xe9\xff\xf7\x43\x61\xca\x95\xc6\x9c\xc0\xf7\x7d\x0c\x35\xe5\xd5\x36\x31\xe9\xef\x57\xee\xe8\x58\x20\x04\x45\x24\x8d\x3f\xb0\xe6\x10\x52\x82\x35\x84\x68\x29\x84\x46\x3e\xc8\x1d\x48\x54\x0e\x31\xf6\xb5\x90\x7b\xe3\xff\x24\xb8\xde\xb0\x3d\x3a\xc6\x65\x21\x05\xef\xd8\x54\x75\x8f\xe3\xc4\x91\x35\x41\xb7\xce\x91\x80\xaa\xad\x35\x41\xce\x68\x34\xca\xc6\x33\x68\xc4\xfe\xe6\xfb\xf3\x1e\xe8\xe5\xb0\x2b\xe1\xbb\xad\xf4\x8b\xd5\xef\xf6\x99\xe4\xe5\x90\x3e\xd4\x5e\x85\xda\x76\xee\xce\xed\xba\x81\xe8\xd1\xf5\xd3\xb0\x6b\xf1\x77\xb5\xdd\x76\xce\xef\x7b\x29\xe6\x12\xe0\xce\xd8\xab\x82\xbb\x9d\x8d\xb7\x9d\x7e\x9d\x3f\x89\xbb\xd6\x08\xee\xba\xd7\xeb\x5f\xfb\x40\xd2\xb0\xcf\x92\xad\x46\xfe\x92\x55\x7b\xbf\x72\xcf\x55\x4f\x39\xe4\x3a\xd4\x5d\xda\x31\x0c\xfd\xb6\xca\x0b\x28\xa7\x1b\x7f\xdc\x4d\xef\xf7\x40\xf7\x2f\xcb\xed\xb9\x3d\xde\x50\xb6\xdf\xb3\xef\xfe\xe5\x1b\x5f\x33\x80\x71\x07\xff\xf8\x7c\xb5\x8f\x2f\xac\xf6\x53\xea\x6e\xb5\x8f\xfb\xa9\xbd\x1a\x76\x1d\xfc\x0e\xb5\x2f\x56\xde\xf9\x2f\x28\xef\x97\x37\xdd\x30\xf4\x7a\x3b\x55\xc3\xae\x84\xdf\xfe\x6e\x4a\x31\x9e\x5f\x9e\xa0\x0f\x7e\x39\xee\x4a\xa2\xb1\x9d\x36\xfe\xd9\xca\x6e\x3e\xc2\xef\x72\xd8\xb2\x53\x1d\xe7\x0b\x95\x3a\xc1\xac\x81\xd2\xae\x9e\xbe\x4e\xb7\x93\x76\x46\xe7\x33\x8c\xce\x97\x18\x9d\xea\x31\xe5\x74\xf5\xb5\x33\xde\x7e\x86\xf1\xf6\xa2\x8c\x27\x93\x6d\xb7\x2f\xb5\x59\xdb\xf7\xda\x11\xb2\xeb\x0b\xed\x3c\xc8\xba\x0f\x85\x76\xc8\xf1\x67\x20\xc7\x5f\x82\xac\xae\x1b\xbb\xee\x54\xdd\x4e\xe9\x7d\x86\xd2\xfb\x12\xe5\x5d\xe7\x01\xc8\xfb\xa0\x3c\x7c\xb9\x6f\x93\x00\x24\x07\x0d\xea\x05\xa4\xaa\xbf\x3d\xd8\x65\x16\x03\x62\x0f\xef\x86\xcd\x03\xa9\x58\xb3\x8b\x8a\x8f\x34\xf9\x65\xc5\x04\x69\x99\x40\xfe\xec\xbd\x90\xe9\x15\x27\x4c\xfb\x31\x90\x72\x4c\x2c\x42\x3f\x09\x38\xe8\xb4\xc0\x68\xe8\xb8\xee\x70\x34\x1c\xfd\x66\x7b\x87\x42\xa6\xcd\x20\x77\x94\x40\xc9\x73\x54\xe3\x87\x59\x7a\x15\x02\xcf\x22\x84\x19\x0d\xa5\xca\x79\x0a\x2e\xc0\x71\xc0\x60\xc6\x12\xa5\x41\x3e\x09\x4e\xb5\x90\x94\xaf\x4d\x52\x1c\xc7\x8a\x88\x10\xac\x26\xf7\x47\xb1\x5e\x67\xbe\xb5\x49\x4d\xd5\x46\x17\x96\x19\xe6\xa0\x34\xe5\x87\xdb\x9a\x8f\x92\xdf\x80\x61\xa5\x29\x51\x80\x25\xd9\x94\x00\x8a\x86\x3c\xfb\x12\x62\x46\x09\x56\xc5\xcd\xd3\x34\x99\xab\x4c\x39\x0f\x8b\x42\x8f\x0a\x9b\x75\xe6\x33\x17\x11\xa6\x69\x75\x92\x0d\x6b\x68\x9a\xc6\x4a\x7d\x0c\x23\xaa\x8c\x28\x66\x82\x6b\x29\x98\x71\x7e\xc6\x11\xa8\x18\x13\x78\xa4\xaf\x40\xf6\x84\xc1\xe0\x91\x46\x54\x2f\x31\x5f\x83\x1c\xf8\xd9\x14\x4d\x09\x11\x09\xd7\x83\x85\x11\x95\xd2\xc0\xf5\x8b\x60\x49\x04\x8f\x38\x00\x36\x98\xe7\x32\xd0\x42\xe2\x35\xcc\x18\x56\x6a\xb0\x04\x25\x12\x49\xe0\xef\x44\x68\x5c\x84\x88\xb0\x81\xab\xa8\xc3\x4b\x67\xdd\x71\x8b\x8e\x1c\xf4\x7f\x42\x6e\x17\x52\xec\x68\x08\xd2\xf8\xbe\x32\xcc\x39\xb0\xc6\x99\x9c\x32\x90\xba\x69\xce\x85\x69\xac\x15\x42\x40\x31\xaf\xab\x23\x18\x25\xfb\x62\x35\x2e\x78\x8d\x68\xfe\x81\x60\x23\xc4\xf6\xbb\xd8\x02\x9f\x26\x7a\xc3\x9b\x74\xb3\x0c\x30\x31\x0e\x6f\x4d\x0e\xd3\xc5\x83\x4a\x27\xf6\x0f\xac\x28\x99\x26\x21\xd5\x8d\xae\xf9\x78\xa6\x5a\x53\x72\xea\x14\x0b\xc6\x7c\x06\x10\x3f\x70\x0d\x72\x87\xcd\xcc\xde\xd6\x0a\x79\x91\x04\x8c\x92\x54\x49\xc5\x15\x7d\xdc\x5f\x6e\xde\xff\x0f\x00\x00\xff\xff\x29\xf9\x5d\x8d\xc4\x14\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 5316, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
