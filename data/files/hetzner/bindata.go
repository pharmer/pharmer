// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package hetzner

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x98\xdf\x8f\xa2\x30\x10\xc7\xdf\xfd\x2b\x26\x7d\xde\xdb\xd8\x0a\xc4\xe3\x75\x35\x77\x2f\x7b\xd9\x1c\x17\x43\x72\xd9\x07\x56\x26\xbb\x44\x2d\xa6\x20\x09\xbb\xf1\x7f\xbf\x14\x50\x8e\x1f\x52\xa9\x10\x5f\x34\x32\xfd\xb6\x9f\x19\x67\xe8\xb4\x5f\x13\x00\xc2\xbd\x1d\x12\x1b\xc8\x07\xc6\x9f\x1c\x05\x79\x90\x0f\x91\x27\xc4\x86\xbf\x13\x00\x00\xe2\x63\x42\x26\x00\xaf\x99\x45\xe0\x7b\x10\xf2\xe8\x6c\xfd\xca\x3e\x01\xc8\x36\x5c\x7b\x71\x10\x72\x39\xd7\x0f\x14\x3b\x8f\xa7\xd9\x5c\x99\x31\x57\x49\xd3\x62\x59\x3e\xfd\x0c\x39\x96\x33\x15\x6b\x91\xe2\xc7\x6b\xf6\x7d\x3c\x2f\x1c\xf0\x28\xf6\xf8\x1a\xff\xa4\x7b\x6c\x59\x3e\xda\x1c\xe4\xf4\x4b\xd7\x98\x96\x0b\xf8\x18\xad\x45\xb0\x3f\x61\x2d\xd0\x0f\xd6\x5e\x8c\x3e\xfc\x0e\xc3\x18\x1c\x14\x09\x0a\xa8\x4a\xa4\xfd\x3d\x14\xa9\x1c\xff\x1c\xf2\xf8\x63\x9b\x42\xa9\xcb\x25\xff\x8d\xde\xcb\x55\x8d\xd2\x4f\x6f\x47\x6c\x98\xb1\x92\x20\x88\x36\xc4\x06\x36\x9d\x4e\x73\x7f\x1e\x2e\x62\x7f\x73\x9c\x85\x06\x7a\x55\x36\x12\xbe\xd1\x49\xff\xe2\x7e\xa7\x3d\xc9\xab\x12\x1d\x6a\xab\x46\x4d\xd9\xbc\x6f\xd4\x25\x84\x46\xd4\x9b\xb2\xb1\xf8\x55\x61\xa7\xac\x7f\xdc\x2b\x9a\x21\xc0\x99\x69\xd5\xc1\x0d\x65\xe0\x29\xd3\x8b\x7c\x43\x37\x96\x07\x73\x75\xbd\xfe\x4c\xdf\x44\xe0\xeb\x94\x6c\x5d\x79\x97\xaa\x5d\xba\x46\xdf\xec\xa9\x4a\xc6\xa1\x56\xe5\x8e\x64\xd0\x7b\x55\x0e\x90\x39\x6a\x7c\x53\x4d\xef\x68\xa0\x3b\xc3\x72\x5b\x86\xc6\x0e\x45\x1d\xcd\xb8\x3b\xc3\x07\xbe\xc5\x01\x53\xc1\x6f\xf6\xcf\x76\x73\xe0\x6c\x6f\x52\xab\xb3\xdd\xd4\xcb\xf6\xba\x6c\x1c\x7c\x45\xb6\xbf\xb8\x56\xff\x0d\xca\xba\x7b\xd0\x25\x83\xd6\xee\x54\x97\x8d\x84\xdf\xbd\x37\x65\x18\xbf\x56\xcf\xa8\x83\x5f\xd5\x8d\x94\x34\x94\x75\xf1\x3f\xb9\xf4\x72\x0b\x9f\x14\xb0\xd5\x41\x6d\x9c\xab\x40\xc4\x07\x6f\x7b\x81\x92\xd6\xbb\xaf\xe6\xeb\xa4\x9b\x91\x5d\xc3\xc8\x6e\x62\x64\xf5\x36\xa5\x59\x7d\xdd\x8c\xb3\x6b\x18\x67\x83\x32\x36\xfe\x6c\xda\x5d\x6a\x4f\x5d\xe7\xb5\x12\x52\x75\x42\xeb\x07\xd9\x76\x50\xe8\x86\x34\xaf\x81\x34\x6f\x82\xac\xd7\x0d\x6d\xeb\xaa\xbb\x29\xad\x6b\x28\xad\x9b\x28\xe7\xca\x06\xc8\x3a\x51\x9e\x4f\xee\x9b\xc3\x1b\x0a\x8e\x31\x46\x2b\x14\x51\xfb\xed\x41\x92\x5b\x24\x08\x7d\x9c\x3f\x5e\x76\xa4\x66\xcd\x2f\x2a\x4e\xd3\x14\x97\x15\x36\xc4\xe2\x80\xc5\xb3\x63\x49\x33\x39\xfe\x0b\x00\x00\xff\xff\x3a\xf1\x38\x3e\xf2\x10\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 4338, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
