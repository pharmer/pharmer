// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package hetzner

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x98\xcd\x6e\xa3\x30\x10\xc7\xef\x79\x8a\x91\xcf\xdd\x2a\x76\x00\x65\xb9\x36\xd1\xee\xa5\xab\x6a\x59\x45\x48\xab\x1e\x68\x18\xb5\x28\x89\x49\x0d\x41\xa2\x55\xde\x7d\x65\x20\x61\xf9\x08\x0e\x0e\xa8\x97\x7c\x8c\xfd\xb7\x7f\x1e\x66\xf0\xd8\x9f\x13\x00\xc2\xbd\x1d\x12\x1b\xc8\x1b\xc6\x1f\x1c\x05\xb9\x93\x46\xe4\x09\xb1\xe1\xef\x04\x00\x80\xf8\x98\x64\x56\x00\xf2\xee\x9d\x7e\xed\x45\xe8\x93\x09\xc0\x73\xd6\x5f\xe0\x6b\x10\xf2\xe8\xac\xf9\xcc\x3e\x01\xc8\x36\x5c\x7b\x71\x10\x72\x39\xc3\x0f\x14\x3b\x8f\xa7\xc5\x08\x67\x95\x6c\x5a\x2c\x4b\xeb\x47\xc8\xb1\x1c\xa9\x20\x20\xc5\x9f\xe7\xec\xfb\x78\x9e\x38\xe0\x51\xec\xf1\x35\xfe\x49\xf7\xd8\x32\x7d\xb4\x39\xc8\xe1\x97\xae\x31\x2d\x27\xf0\x31\x5a\x8b\x60\x7f\xc2\x5a\xa0\x1f\xac\xbd\x18\x7d\xf8\x1d\x86\x31\x38\x28\x12\x14\x50\x95\xc8\xf6\xd7\x50\xa4\xb2\xff\x63\xc8\xe3\xb7\x6d\x0a\xa5\x2e\x97\xfc\xd7\x7b\x2f\x67\x35\xca\x75\x7a\x3b\x62\xc3\x8c\x95\x04\x41\xb4\x21\x36\xb0\xe9\x74\x9a\xaf\xe7\xee\x22\xf6\x37\xc7\x59\x68\xa0\x57\x65\x23\xe1\x1b\x9d\xf4\x4f\xee\x77\xda\x93\xbc\x2a\xd1\xa1\xb6\x6a\xd4\x94\xcd\xfb\x7a\x5d\x42\x68\x78\xbd\x29\x1b\x8b\x5f\xe5\x76\xca\xfa\xfb\xbd\xa2\x19\x02\x9c\x99\x56\x1d\xdc\x50\x3a\x9e\x32\x3d\xcf\x37\x74\x63\xad\x60\xae\xce\xd7\x9f\xe9\x8b\x08\x7c\x9d\x94\xad\x2b\xbf\x24\x6b\x97\xae\xd1\x37\x7a\xaa\x92\x71\xa8\x55\xb1\x23\x19\xf4\x5e\x95\x03\x44\x8e\x1a\xdf\x54\xd3\x3b\x1a\xe8\xce\xb0\xdc\x96\xa1\xb1\x43\x51\x47\xd3\xef\xce\xf0\x8e\x6f\x59\x80\xa9\xe0\x37\xfb\x47\xbb\x39\x70\xb4\x37\xa9\xd5\xd1\x6e\xea\x45\x7b\x5d\x36\x0e\xbe\x22\xda\x9f\x5c\xab\xff\x06\x65\x7d\xb9\xd3\x25\x83\xd6\xee\x54\x97\x8d\x84\xdf\xbd\x37\x65\x18\xbf\x56\x8f\xa8\x83\x5f\xd5\x8d\x14\x34\x94\x75\xf1\x3f\xb8\xf4\x72\x09\x9f\x14\xb0\xd5\x4e\x6d\x9c\xab\x40\xc4\x07\x6f\x7b\x81\x92\xd6\xab\xaf\xe6\xeb\xa4\x9b\x91\x5d\xc3\xc8\x6e\x62\x64\xf5\x32\xa5\x99\x7d\xdd\x8c\xb3\x6b\x18\x67\x83\x32\x36\x1e\x36\xed\x4e\xb5\x87\xae\xf3\x5a\x09\xa9\x3a\xa1\xf5\x83\x6c\x3b\x28\x74\x43\x9a\xd7\x40\x9a\x37\x41\xd6\xf3\x86\xb6\x55\xd5\xdd\x94\xd6\x35\x94\xd6\x4d\x94\x73\x65\x01\x64\x9d\x28\xcf\x27\xf7\xcd\xe1\x05\x05\xc7\x18\xa3\x15\x8a\xa8\xfd\xf6\x20\xc9\x5b\x24\x08\xbd\x9f\xdf\x5f\x5e\x48\xad\x35\xbf\xbe\x38\x0d\x53\x5c\x61\xd8\x10\x8b\x03\xde\x95\xc6\x77\xaf\x69\xcb\xae\x35\x72\x6b\x61\x3c\x96\xdc\x93\xe3\xbf\x00\x00\x00\xff\xff\x68\x1f\x16\x80\x32\x11\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 4402, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
