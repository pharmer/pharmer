// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package hetzner

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x98\x4d\x6f\xa3\x3c\x10\xc7\xef\xf9\x14\x23\x9f\xf3\x54\xb1\x03\x28\x0f\xd7\x26\xda\xbd\x74\x55\x2d\xab\x08\x69\xd5\x03\x0d\xa3\x16\x25\x31\x59\x43\x90\x68\x95\xef\xbe\x32\x90\xb0\xbc\x04\x07\x07\xd4\x4b\xa2\xcc\xf0\xb7\x7f\x9e\xcc\xe0\xb1\x3f\x27\x00\x84\x7b\x7b\x24\x36\x90\x77\x8c\x3f\x38\x0a\x32\x95\x46\xe4\x09\xb1\xe1\xf7\x04\x00\x80\xf8\x98\x90\x09\xc0\x4b\xe6\x11\xf8\x16\x84\x3c\xba\x78\x3f\xb3\x4f\x00\xb2\x0b\x37\x5e\x1c\x84\x5c\x8e\xf5\x0d\xc5\xde\xe3\x69\x36\x56\xe6\xcc\x55\xd2\xb5\x5c\x95\xd6\x8f\x90\x63\x39\x52\x31\x17\x29\x7e\xbc\x64\xdf\xa7\xcb\xc4\x01\x8f\x62\x8f\x6f\xf0\x57\x7a\xc0\x96\xe9\xa3\xed\x51\x0e\xbf\x72\x8d\x59\x39\x81\x8f\xd1\x46\x04\x87\x33\xd6\x12\xfd\x60\xe3\xc5\xe8\xc3\xcf\x30\x8c\xc1\x41\x91\xa0\x80\xaa\x44\xfa\xdf\x42\x91\xca\xe7\x9f\x42\x1e\xbf\xef\x52\x28\x75\xb9\xe4\x9f\xa7\x0f\x72\x56\xa3\x5c\xa7\xb7\x27\x36\xcc\x59\x49\x10\x44\x5b\x62\x03\x9b\xcd\x66\xf9\x7a\xa6\x57\xb1\xff\x73\x9c\xa5\x06\x7a\x55\x36\x12\xbe\xd1\x49\xff\xec\xfe\x4f\x7b\x92\x57\x25\x3a\xd4\x56\x8d\x9a\xb2\x45\xdf\xa8\x4b\x08\x8d\xa8\x37\x65\x63\xf1\xab\xc2\x4e\x59\xff\xb8\x57\x34\x43\x80\x33\xd3\xaa\x83\x1b\xca\xc0\x53\xa6\x17\xf9\x86\x6e\xac\x15\x2c\xd4\xf5\xfa\x3d\x7d\x15\x81\xaf\x53\xb2\x75\xe5\x97\x54\xed\xca\x35\xfa\x66\x4f\x55\x32\x0e\xb5\x2a\x77\x24\x83\xde\xab\x72\x80\xcc\x51\xe3\x9b\x6a\x7a\x47\x03\xdd\x19\x96\xdb\x32\x34\x76\x28\xea\x68\xc6\xdd\x19\x3e\xf0\x2d\x0b\x30\x15\xfc\x66\xff\x6c\x37\x07\xce\xf6\x26\xb5\x3a\xdb\x4d\xbd\x6c\xaf\xcb\xc6\xc1\x57\x64\xfb\xb3\x6b\xf5\xdf\xa0\xac\x2f\x0f\xba\x64\xd0\xda\x9d\xea\xb2\x91\xf0\xbb\xf7\xa6\x0c\xe3\xc7\xfa\x09\x75\xf0\xab\xba\x91\x92\x86\xb2\x2e\xfe\x47\x97\x5e\x6f\xe1\x93\x02\xb6\xfa\x50\x1b\xe7\x3a\x10\xf1\xd1\xdb\x5d\xa1\xa4\xf5\xee\xab\xf9\x3a\xe9\x66\x64\xb7\x30\xb2\xbb\x18\x59\xbd\x4d\x69\x56\x5f\x37\xe3\xfc\x16\xc6\xf9\xa0\x8c\x8d\x3f\x9b\x76\x97\xda\x63\xd7\x79\xad\x84\x54\x9d\xd0\xfa\x41\xb6\x1d\x14\xba\x21\xcd\x5b\x20\xcd\xbb\x20\xeb\x75\x43\xdb\xba\xea\x6e\x4a\xeb\x16\x4a\xeb\x2e\xca\x85\xb2\x01\xb2\xce\x94\x97\x93\xfb\xf6\xf8\x8a\x82\x63\x8c\xd1\x1a\x45\xd4\x7e\x7b\x90\xe4\x1e\x09\x42\x1f\x16\x0f\xd7\x17\x52\xf3\xe6\x17\x15\xe7\x61\x8a\xcb\x0a\x1b\x62\x71\xc4\x69\x69\xfc\xe3\x35\x6d\x07\x11\xfa\x85\xb5\x30\x9e\x4a\xee\xc9\xe9\x6f\x00\x00\x00\xff\xff\xe9\xba\x67\xfa\x1c\x11\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 4380, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
