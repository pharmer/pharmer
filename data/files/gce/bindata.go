// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package gce

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x98\x41\x73\xe2\x36\x14\xc7\xef\x7c\x0a\x8d\x4f\xed\x0c\xb8\x31\xb0\x84\xc9\x2d\xf1\xd2\x6d\x76\xa6\x4d\x26\x90\xed\xa1\xb3\xc3\x08\xf9\x61\x6b\x23\x4b\xae\x24\x93\xd2\x4c\xbe\xfb\x8e\x8c\x63\x8c\x6c\x63\x71\x49\x62\xbd\xbf\x9e\x7e\xef\xe9\x1f\x23\xf1\x36\x40\xc8\xe3\x38\x05\xef\x06\x79\x31\x01\x6f\x68\x06\x80\xef\xbc\x1b\xf4\xcf\x00\x21\x84\xbc\x08\x76\xc5\x28\x42\xde\xbf\xd8\x1b\x20\xf4\xbd\xd0\x48\x88\xa9\xe0\xaa\xd2\xbd\x15\x3f\xab\x80\xc9\xb7\xc0\x4a\x83\xe4\xe8\x79\x59\x26\x40\xc8\x63\x82\x60\x5d\xc6\xef\x40\xbe\x00\x83\x3d\x0a\x45\xce\xf5\x7e\x88\x96\x22\xd7\x09\x0a\xb1\x14\x8c\x72\x7c\x9c\xf4\xbf\xe0\x70\x5c\xa9\x18\xca\xd5\x08\xb0\xd2\xc1\x68\x53\xc9\xea\xa3\xa4\x75\x34\xf2\xca\xc1\xef\xc5\xef\xf7\x61\x17\xf9\xdf\x70\x9e\x7c\x95\x00\xfa\x8c\x19\x03\x35\x44\x0f\x4f\x7d\xa0\xaf\x60\x16\xc7\x16\xd2\x61\x74\xe3\x8a\x14\x02\xd7\x12\xb3\x4e\x24\xd3\x43\x42\x19\xba\x63\xf9\x76\xab\x86\xe8\x5e\xbc\xf6\x76\x90\x1c\x72\x36\xd9\xaa\x80\xdd\xdd\x2a\x60\x37\xb8\x0a\x6c\x2f\xed\xf1\x22\x97\x22\x83\xf6\xa2\x96\xda\x47\x5f\x12\xaa\x18\xa6\x7c\x88\xee\x80\xc5\x34\x4f\xcf\x56\x05\x45\xb6\xaa\xb9\xc3\x8e\x08\xe9\x8c\x38\x7b\xe4\x56\x51\x8c\x7e\x59\x61\xfa\x8a\xf9\xaf\x1d\x7b\x92\x60\x1e\x27\x39\xae\x0c\x7e\x50\x9f\x2d\x00\x2b\x8a\x4b\xbb\x9e\xec\x4a\x6d\x7c\xd3\x31\x4e\x2e\x43\xff\x8a\xb3\x4e\xf2\x95\x78\xd9\x8b\x21\x2a\x24\xfd\xb8\x5c\x48\x9d\x74\x31\xd7\x82\x4d\xf0\x5a\xd0\xa6\xaf\xde\x34\x94\x2b\x8d\x39\x81\xd5\x3e\x83\x96\xf7\x8d\x7a\xc9\x8b\x97\x57\x30\x52\x29\x66\xec\x48\x1b\x81\x22\x92\x66\x1f\x25\x35\x05\x04\x6b\x88\x85\xdc\x17\x4e\xb3\x42\x99\x49\x1a\x54\xcf\x12\xa7\xe6\xd9\xbf\x6e\xed\x6c\x89\xc0\x83\x91\x21\x8d\xb0\x8c\x46\x41\x27\x47\x87\xea\x04\xa6\x8c\xf7\xf1\x4c\xfc\xeb\x4f\xae\x40\x63\x27\xa0\xf1\x65\x40\x63\x0b\xe8\xda\x77\xe6\x99\x3a\xf1\x4c\x2f\xe3\x99\xda\x1b\xe6\x8c\x33\x77\xc2\x99\x5f\x86\x33\xb7\xf7\xeb\xca\xd9\x3e\x33\x37\xff\xcc\x2e\x34\xd0\xcc\x22\x9a\x39\x13\x4d\xc6\x6e\x48\x27\x3a\x17\xa6\x89\x6d\xa2\x60\xdc\x07\x95\xd0\x38\x49\x21\x3d\xef\xe9\x16\x51\x1d\xe7\x0f\x1a\x27\xe8\x4f\x48\xcd\x63\x8f\xab\x83\x89\x23\xcf\x59\x4f\xb7\x88\x1c\x79\x6c\x57\x8f\x67\x8e\x3c\x67\x4d\xdd\x22\x72\xe4\xb1\x6d\xfd\x69\xec\xc8\x73\xde\xd5\x6d\x2a\x47\xa2\x86\xaf\x83\xab\xa9\x23\x53\x8f\xaf\x5b\x65\x8e\x54\x0d\x67\x8f\xaf\xe6\x0e\x54\x24\xcb\xfb\x9d\x6d\x89\x1a\x44\xe1\xe3\x73\xaf\xad\x7d\x57\x9a\x5e\x5f\x5b\x22\x17\x1a\xdb\xd4\x13\xdf\xc5\xd5\x66\xa1\x5e\x57\x5b\x22\x17\x1a\xdb\xd2\xd7\xbe\x8b\xa7\xcd\x42\xfd\x9e\xb6\x55\x2e\x3c\x4d\x43\x4f\x7d\x17\x47\x9b\xb5\x1c\x1c\xdd\x90\xb9\x30\x35\xed\x3c\xff\x70\x50\x75\x56\x23\x12\x22\xe0\x9a\x62\xd6\x72\x52\xcb\xa4\xd8\xd1\x08\xa4\x59\xe4\x8b\x10\x31\x83\x90\x89\xbc\xf6\x81\x10\x51\x95\x31\xbc\xff\x5d\xc8\x14\x6b\xa3\xfa\xa1\x44\xed\xf8\x89\x39\x17\xba\x38\xa2\x9a\xe4\x6f\xc7\xa3\x64\x96\x60\x99\x82\xf4\x71\x96\x29\x22\x22\xf0\x89\x48\x7f\x23\x2c\x37\x17\x8c\xd1\x11\xc9\x64\xac\x9f\x40\x5b\xa7\x45\x5c\x5d\x3a\x45\x69\x21\x71\x0c\xf6\xb4\x72\xd6\x7b\xc5\xbf\xa5\xc0\xa2\xd3\xf3\xf3\xb1\x88\xc3\xb5\x9b\x08\xbe\xa5\x71\xd1\xa0\x70\xb1\x7e\x7c\x7a\xf8\xba\x08\x57\xeb\xfb\xcf\x35\x06\x93\x48\xc8\xb4\xbc\xb0\xaf\x33\x29\x7e\x00\xd1\x6b\x1a\x9d\x6a\x8a\xd6\xdd\x14\x4d\x37\x71\x3b\x05\xc3\x1b\x60\xc7\x8d\x40\xc5\x4e\xa0\xc7\x83\x18\xd9\x6a\xca\xb3\xbc\xd8\x10\x0d\xff\x69\xaf\x8a\xbc\x0f\x1d\x0b\x59\x2e\x9e\xbe\xdd\x87\x8b\xf5\x6d\x18\x3e\x3c\xff\xb5\xea\xae\x46\x81\xdc\x51\x02\x6b\x4c\x88\xb9\x32\xb5\x97\x54\x8a\x6e\xdb\x34\xed\x75\x2d\x0f\x33\x50\xeb\x94\x93\xe2\xb0\x04\x5c\x2b\xb0\xfc\xcb\xbe\x92\xbc\xe4\x1b\x90\x1c\x34\xa8\x6f\x20\x55\xfb\xf7\x20\xbb\x43\xc4\x24\x0e\xfc\xb9\x7f\xd5\xf9\x3f\x69\x45\x0f\x5f\xbe\xd4\xdc\x1d\x81\x19\xd0\x32\x87\x41\x9d\xaa\xa0\x19\xbc\xff\x0c\x00\x00\xff\xff\x0d\x38\xb5\xe2\xc2\x11\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 4546, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
