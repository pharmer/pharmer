// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package gce

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x97\xdf\x6f\xab\x36\x14\xc7\xdf\xf3\x57\x58\x3c\x6d\x12\x41\x85\xa4\x49\xd4\xb7\x36\xeb\x7e\x49\xd3\xa6\x35\xd5\x1e\xa6\x6a\x3a\x81\x93\xe0\xc5\xd8\x5c\xdb\xa4\x37\xb7\xca\xff\x7e\x65\x42\x09\x31\x10\x9c\x97\x00\xe7\x7c\xb1\x3f\x3e\xfe\x8a\x1c\x7f\x8c\x08\xf1\x38\x64\xe8\x3d\x10\x6f\x1b\xa3\xe7\x9b\x00\xf2\xbd\xf7\x40\xfe\x1d\x11\x42\x88\x97\xe0\xbe\x8c\x12\xe2\x7d\x01\x6f\x44\xc8\x5b\xa9\x91\xb8\xa5\x82\xab\x5a\xf7\x51\xfe\xd6\x09\x33\xde\x33\x28\x8d\x92\x93\xd7\x97\x6a\x00\x42\x3c\x26\x62\xd0\x55\xfe\x09\xe5\x0e\x19\x1e\xc8\x52\x14\x5c\x1f\x7c\xf2\x22\x0a\x9d\x92\x25\x48\xc1\x28\x87\xf3\x4b\xdf\x04\xc7\xf3\x4c\x65\xa8\x50\x63\x04\xa5\xc3\xf1\xba\x96\x35\xa3\x71\x67\x34\xf1\xaa\xe0\x5b\x79\x3d\xfa\x7d\xe4\xff\xe0\x75\xf2\x55\x8a\xe4\x27\x60\x0c\x95\x4f\xfe\xfc\x7b\x08\xf4\x1d\xcd\xe4\x60\x21\x9d\xa2\x6b\x57\xa4\x25\x72\x2d\x81\xf5\x22\x99\x1a\xc6\x94\x91\x27\x56\x6c\x36\xca\x27\xbf\x89\xf7\xc1\x0a\xc6\xa7\x31\xdb\x6c\x75\xc2\xae\x6e\x9d\xb0\x0b\x5c\x27\x36\xb7\xd6\xf8\xb9\x90\x22\xc7\xee\x45\xbd\xe8\x80\xfc\x92\x52\xc5\x80\x72\x9f\x3c\x21\xdb\xd2\x22\xbb\xba\x2a\x2c\x47\xab\x8b\xeb\xf7\x64\xe2\xde\x8c\xb3\x47\x1e\x15\x05\xf2\xc3\x0a\xe8\x3b\xf0\x1f\x7b\xf6\x24\x05\xbe\x4d\x0b\xa8\x0d\x7e\x52\x5f\x5d\x00\x28\x0a\x95\x5d\x2f\x76\xa5\x11\x5f\xf7\xc4\xe3\xdb\xd0\x7f\x87\xbc\x97\x7c\x25\x76\x07\xe1\x93\x52\x32\x8c\xcb\x85\xd4\x69\x1f\x73\x23\xd9\x06\x6f\x24\x6d\xfa\xfa\x4b\x43\xb9\xd2\xc0\x63\x5c\x1d\x72\xec\xf8\xde\xa8\x5d\x51\x7e\xbc\xc2\xb1\xca\x80\xb1\x33\x6d\x82\x2a\x96\x34\xff\x5c\x52\x5b\x10\x83\xc6\xad\x90\x87\xd2\x69\x56\x2a\x37\x83\x86\xf5\xb3\x84\xcc\x3c\x07\xf3\xce\xca\x56\x08\x3c\x1c\x1b\xd2\x04\x64\x32\x0e\x7b\x39\x7a\x54\x17\x30\x55\x7e\x88\x67\x12\xcc\xef\x5d\x81\x22\x27\xa0\xe8\x36\xa0\xc8\x02\x9a\x07\xce\x3c\x53\x27\x9e\xe9\x6d\x3c\x53\x7b\xc3\x9c\x71\x16\x4e\x38\x8b\xdb\x70\x16\xf6\x7e\xdd\x39\xdb\x67\xe6\xe6\x9f\xd9\x8d\x06\x9a\x59\x44\x33\x67\xa2\x49\xe4\x86\x74\xa1\x73\x61\x9a\xd8\x26\x0a\xa3\x21\xa8\x94\x6e\xd3\x0c\xb3\xeb\x9e\xee\x10\x35\x71\x7e\xa5\xdb\x94\xfc\x81\x99\x79\x1c\x70\x75\x38\x71\xe4\xb9\xea\xe9\x0e\x91\x23\x8f\xed\xea\x68\xe6\xc8\x73\xd5\xd4\x1d\x22\x47\x1e\xdb\xd6\xf7\x91\x23\xcf\x75\x57\x77\xa9\x1c\x89\x5a\xbe\x0e\xef\xa6\x8e\x4c\x03\xbe\xee\x94\x39\x52\xb5\x9c\x1d\xdd\x2d\x1c\xa8\xe2\xbc\x18\x76\xb6\x25\x6a\x11\x2d\xff\x7a\x1d\xb4\x75\xe0\x4a\x33\xe8\x6b\x4b\xe4\x42\x63\x9b\x7a\x12\xb8\xb8\xda\x4c\x34\xe8\x6a\x4b\xe4\x42\x63\x5b\x7a\x1e\xb8\x78\xda\x4c\x34\xec\x69\x5b\xe5\xc2\xd3\x36\xf4\x34\x70\x71\xb4\x99\xcb\xc1\xd1\x2d\x99\x0b\x53\xdb\xce\x8b\x4f\x07\xd5\xbd\x5a\x2c\x31\x41\xae\x29\xb0\x8e\x4e\x4d\x1f\xf2\x8b\x73\xe6\x09\x90\xaa\x9c\xc1\xe1\x67\x21\x33\xd0\x26\xfb\xbf\x12\x8d\x96\x73\x43\x91\x25\x97\x3d\xe7\x47\x7d\xd7\x38\xbb\x2a\x94\x7b\x1a\xe3\x7f\x10\xc7\xa6\xd7\x6e\x34\x9a\xa6\xb3\x85\x35\xb2\xf2\x3f\xe8\xa4\x22\x8f\x5d\x2a\xca\xf3\xa2\x24\xd0\xf8\x55\x83\x44\xf0\xea\xec\xb1\xba\xb3\x5b\xd3\x5d\xb1\x46\xc9\x51\x97\x7d\xe9\x89\xcb\xdb\xa3\x54\x17\x27\xe3\x26\xf1\x67\xd6\x4c\x13\x06\xf3\x60\xda\xec\x88\xad\xbd\x6a\xe5\xb5\x10\xec\x3c\x51\x15\x34\x08\x90\x64\xe7\x17\xce\xd0\xcd\x23\x4e\x79\xa2\xbf\x78\xd1\x9c\xeb\x1f\x88\x96\x05\xb6\x96\x79\xba\x9a\xc5\x1e\x47\xc7\xef\x01\x00\x00\xff\xff\xe2\xab\x15\x2d\x23\x10\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 4131, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
