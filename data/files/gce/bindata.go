// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package gce

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x98\x41\x73\xe2\x36\x14\xc7\xef\x7c\x0a\x8d\x4f\xed\x0c\xb8\x31\xb0\x84\xc9\x2d\xf1\xd2\x6d\x76\xa6\x4d\x26\x90\xed\xa1\xb3\xc3\x08\xf9\x61\x6b\x23\x4b\x5e\x49\x26\xa5\x99\x7c\xf7\x8e\x8c\x63\x8c\x6c\x63\x71\x49\xe2\xf7\xfe\x92\x7e\xef\xe9\x1f\x23\xf1\x36\x40\xc8\xe3\x38\x05\xef\x06\x79\x31\x01\x6f\x68\x02\xc0\x77\xde\x0d\xfa\x67\x80\x10\x42\x5e\x04\xbb\x22\x8a\x90\xf7\x13\x7b\x03\x84\xbe\x17\x1a\x09\x31\x15\x5c\x55\xba\xb7\xe2\x67\x95\x30\xf3\x2d\xb0\xd2\x20\x39\x7a\x5e\x96\x13\x20\xe4\x31\x41\xb0\x2e\xf3\x77\x20\x5f\x80\xc1\x1e\x85\x22\xe7\x7a\x3f\x44\x4b\x91\xeb\x04\x85\x58\x0a\x46\x39\x3e\x0e\xfa\x4f\x70\x38\xae\x54\x84\x72\x35\x02\xac\x74\x30\xda\x54\xb2\x7a\x94\xb4\x46\x23\xaf\x0c\x7e\x2f\x7e\xbf\x0f\xbb\xc8\xff\x86\xf3\xe4\xab\x04\xd0\x67\xcc\x18\xa8\x21\x7a\x78\xea\x03\x7d\x05\xb3\x38\xb6\x90\x0e\xd1\x8d\x2b\x52\x08\x5c\x4b\xcc\x3a\x91\x4c\x0f\x09\x65\xe8\x8e\xe5\xdb\xad\x1a\xa2\x7b\xf1\xda\xdb\x41\x72\x98\xb3\xc9\x56\x25\xec\xee\x56\x09\xbb\xc1\x55\x62\x7b\x69\x8f\x17\xb9\x14\x19\xb4\x17\xb5\xd4\x3e\xfa\x92\x50\xc5\x30\xe5\x43\x74\x07\x2c\xa6\x79\x7a\xb6\x2a\x28\x66\xab\x9a\x3b\xec\xc8\x90\xce\x8c\xb3\x47\x6e\x15\xc5\xe8\x97\x15\xa6\xaf\x98\xff\xda\xb1\x27\x09\xe6\x71\x92\xe3\xca\xe0\x07\xf5\xd9\x02\xb0\xa2\xb8\xb4\xeb\xc9\xae\xd4\xe2\x9b\x8e\x38\xb9\x0c\xfd\x2b\xce\x3a\xc9\x57\xe2\x65\x2f\x86\xa8\x90\xf4\xe3\x72\x21\x75\xd2\xc5\x5c\x4b\x36\xc1\x6b\x49\x9b\xbe\x7a\xd3\x50\xae\x34\xe6\x04\x56\xfb\x0c\x5a\xde\x37\xea\x25\x2f\x5e\x5e\xc1\x48\xa5\x98\xb1\x23\x6d\x04\x8a\x48\x9a\x7d\x94\xd4\x14\x10\xac\x21\x16\x72\x5f\x38\xcd\x4a\x65\x66\xd2\xa0\x7a\x96\x38\x35\xcf\xfe\x75\x6b\x67\x4b\x04\x1e\x8c\x0c\x69\x84\x65\x34\x0a\x3a\x39\x3a\x54\x27\x30\x65\xbe\x8f\x67\xe2\x5f\x7f\x72\x05\x1a\x3b\x01\x8d\x2f\x03\x1a\x5b\x40\xd7\xbe\x33\xcf\xd4\x89\x67\x7a\x19\xcf\xd4\xde\x30\x67\x9c\xb9\x13\xce\xfc\x32\x9c\xb9\xbd\x5f\x57\xce\xf6\x99\xb9\xf9\x67\x76\xa1\x81\x66\x16\xd1\xcc\x99\x68\x32\x76\x43\x3a\xd1\xb9\x30\x4d\x6c\x13\x05\xe3\x3e\xa8\x84\xc6\x49\x0a\xe9\x79\x4f\xb7\x88\xea\x38\x7f\xd0\x38\x41\x7f\x42\x6a\x1e\x7b\x5c\x1d\x4c\x1c\x79\xce\x7a\xba\x45\xe4\xc8\x63\xbb\x7a\x3c\x73\xe4\x39\x6b\xea\x16\x91\x23\x8f\x6d\xeb\x4f\x63\x47\x9e\xf3\xae\x6e\x53\x39\x12\x35\x7c\x1d\x5c\x4d\x1d\x99\x7a\x7c\xdd\x2a\x73\xa4\x6a\x38\x7b\x7c\x35\x77\xa0\x22\x59\xde\xef\x6c\x4b\xd4\x20\x0a\x1f\x9f\x7b\x6d\xed\xbb\xd2\xf4\xfa\xda\x12\xb9\xd0\xd8\xa6\x9e\xf8\x2e\xae\x36\x0b\xf5\xba\xda\x12\xb9\xd0\xd8\x96\xbe\xf6\x5d\x3c\x6d\x16\xea\xf7\xb4\xad\x72\xe1\x69\x1a\x7a\xea\xbb\x38\xda\xac\xe5\xe0\xe8\x86\xcc\x85\xa9\x69\xe7\xf9\x87\x83\xaa\xb3\x1a\x91\x10\x01\xd7\x14\xb3\x96\x93\x5a\x26\xc5\x8e\x46\x20\xcd\x22\x5f\x84\x88\x19\x84\x4c\xe4\xb5\x0f\x84\x88\xaa\x8c\xe1\xfd\xef\x42\xa6\x58\x1b\xd5\x0f\x25\x6a\xc7\x4f\xcc\xb9\xd0\xc5\x11\xd5\x4c\xfe\x76\x3c\x4a\x66\x09\x96\x29\x48\x1f\x67\x99\x22\x22\x02\x9f\x88\xf4\x37\xc2\x72\x73\xc1\x18\x1d\x91\xcc\x8c\xf5\x13\x68\xeb\xb0\x88\xab\x4b\x87\x28\x2d\x24\x8e\xc1\x1e\x56\x8e\x7a\xaf\xf8\xb7\x14\x58\x74\x7a\x7e\x3e\x16\x71\xb8\x76\x13\xc1\xb7\x34\x2e\x1a\x14\x2e\xd6\x8f\x4f\x0f\x5f\x17\xe1\x6a\x7d\xff\xb9\xc6\x60\x26\x12\x32\x2d\x2f\xec\xeb\x4c\x8a\x1f\x40\xf4\x9a\x46\xa7\x9a\xa2\x75\x37\x45\xd3\x4d\xde\x9e\x82\xe1\x0d\xb0\xe3\x46\xa0\x62\x27\xd0\xe3\x41\x8c\x6c\x35\xe5\x59\x5e\x6c\x88\x86\x7f\xb5\x57\x65\xde\x87\x8e\x85\x2c\x17\x4f\xdf\xee\xc3\xc5\xfa\x36\x0c\x1f\x9e\xff\x5a\x75\x57\xa3\x40\xee\x28\x81\x35\x26\xc4\x5c\x99\xda\x4b\x2a\x45\xb7\x6d\x9a\xf6\xba\x96\x87\x11\xa8\x75\xc8\x49\x71\x58\x02\xae\x15\x58\xfe\x65\x5f\x49\x5e\xf2\x0d\x48\x0e\x1a\xd4\x37\x90\xaa\xfd\x7b\x90\xdd\x21\x63\x26\x0e\xfc\xb9\x7f\xd5\xf9\x3f\x69\x65\x0f\x5f\xbe\xd4\xdc\x1d\x81\x09\x68\x99\x43\xcd\x88\x3f\x71\x33\x96\x49\x11\x95\xd1\x41\x9d\xbf\xe0\x1e\xbc\xff\x1f\x00\x00\xff\xff\x9e\xf7\xdf\x5d\xec\x11\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 4588, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
