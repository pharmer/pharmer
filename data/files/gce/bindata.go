// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package gce

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x98\x51\x6f\xea\x36\x14\xc7\xdf\xfb\x29\xac\x3c\x6d\x12\x64\x85\x72\x01\xf5\xad\xcd\x65\x5d\xaf\xb4\xb5\x2a\x74\x7b\x98\xae\x90\x71\x0e\x89\x6f\x1d\x3b\xb3\x1d\x3a\x56\xf1\xdd\x27\x87\x34\x24\x4e\x42\xcc\x4b\x69\xce\xf9\x1f\xfb\x77\x4e\xfe\x44\x0e\x1f\x57\x08\x79\x1c\x27\xe0\xdd\x22\x2f\x22\xe0\x0d\x4c\x00\xf8\xce\xbb\x45\x7f\x5f\x21\x84\x90\x17\xc2\x2e\x8f\x22\xe4\xfd\x83\xbd\x2b\x84\xbe\xe7\x1a\x09\x11\x15\x5c\x95\xba\x8f\xfc\x6f\x99\x30\xeb\x2d\xb0\xd2\x20\x39\x7a\x5d\x16\x0b\x20\xe4\x31\x41\xb0\x2e\xf2\xf7\x20\xdf\x80\xc1\x1e\x05\x22\xe3\x7a\x3f\x40\x4b\x91\xe9\x18\x05\x58\x0a\x46\x39\x3e\x15\xfd\x27\x38\x9c\x76\xca\x43\x99\x1a\x02\x56\x7a\x34\xdc\x94\xb2\x6a\x94\xb4\x46\x43\xaf\x08\x7e\xcf\x3f\x0f\x83\x2e\xf2\xbf\xe0\x3c\xf9\x2a\x06\xf4\x15\x33\x06\x6a\x80\x9e\x5e\xfa\x40\xdf\xc1\x6c\x8e\x2d\xa4\x63\x74\xe3\x8a\x14\x00\xd7\x12\xb3\x4e\x24\x33\x43\x42\x19\xba\x67\xd9\x76\xab\x06\xe8\x51\xbc\xf7\x4e\x90\x1c\xd7\x6c\xb2\x95\x09\x7b\xba\x65\xc2\x1e\x70\x99\xd8\x5e\x3a\xe3\x45\x26\x45\x0a\xed\x4d\x2d\xb5\x8f\x1e\x62\xaa\x18\xa6\x7c\x80\xee\x81\x45\x34\x4b\xce\x76\x05\xf9\x6a\xe5\x70\x07\x1d\x19\xd2\x99\x71\xf6\xc8\x9d\xa2\x18\xfd\xb4\xc2\xf4\x1d\xf3\x9f\x3b\xee\x49\x8c\x79\x14\x67\xb8\x34\xf8\x51\x7d\xb6\x01\xac\x28\x2e\xec\x5a\xbb\x2b\x95\xf8\xa6\x23\x4e\x2e\x43\xff\x86\xd3\x4e\xf2\x95\x78\xdb\x8b\x01\xca\x25\xfd\xb8\x5c\x48\x1d\x77\x31\x57\x92\x4d\xf0\x4a\xd2\xa6\x2f\x9f\x34\x94\x2b\x8d\x39\x81\xd5\x3e\x85\x96\xe7\x8d\x7a\xcb\xf2\x87\xd7\x68\xa8\x12\xcc\xd8\x89\x36\x04\x45\x24\x4d\x3f\x5b\x6a\x0a\x08\xd6\x10\x09\xb9\xcf\x9d\x66\xa5\x52\xb3\xe8\xa8\xbc\x96\x38\x31\xd7\xfe\xac\x75\xb2\x05\x02\x1f\x0d\x0d\x69\x88\x65\x38\x1c\x75\x72\x74\xa8\x6a\x30\x45\xbe\x8f\xe7\xc6\x9f\x7d\x71\x05\x1a\x3b\x01\x8d\x2f\x03\x1a\x5b\x40\x33\xdf\x99\x67\xe2\xc4\x33\xb9\x8c\x67\x62\xdf\x30\x67\x9c\xb9\x13\xce\xfc\x32\x9c\xb9\x7d\xbf\xae\x9d\xed\x33\x75\xf3\xcf\xf4\x42\x03\x4d\x2d\xa2\xa9\x33\xd1\xcd\xd8\x0d\xa9\xa6\x73\x61\xba\xb1\x4d\x34\x1a\xf7\x41\xc5\x34\x8a\x13\x48\xce\x7b\xba\x45\x54\xc5\xf9\x8d\x46\x31\xfa\x1d\x12\x73\xd9\xe3\xea\xd1\x8d\x23\xcf\x59\x4f\xb7\x88\x1c\x79\x6c\x57\x8f\xa7\x8e\x3c\x67\x4d\xdd\x22\x72\xe4\xb1\x6d\xfd\x65\xec\xc8\x73\xde\xd5\x6d\x2a\x47\xa2\x86\xaf\x47\xd7\x13\x47\xa6\x1e\x5f\xb7\xca\x1c\xa9\x1a\xce\x1e\x5f\xcf\x1d\xa8\x48\x9a\xf5\x3b\xdb\x12\x35\x88\x82\xe7\xd7\x5e\x5b\xfb\xae\x34\xbd\xbe\xb6\x44\x2e\x34\xb6\xa9\x6f\x7c\x17\x57\x9b\x8d\x7a\x5d\x6d\x89\x5c\x68\x6c\x4b\xcf\x7c\x17\x4f\x9b\x8d\xfa\x3d\x6d\xab\x5c\x78\x9a\x86\x9e\xf8\x2e\x8e\x36\x7b\x39\x38\xba\x21\x73\x61\x6a\xda\x79\xfe\xe9\xa0\xf2\xac\x46\x24\x84\xc0\x35\xc5\xac\xe5\xa4\x96\x4a\xb1\xa3\x21\xc8\xea\xbb\xe6\x11\x92\xaa\x94\xe1\xfd\xaf\x42\x26\x58\x9b\xec\x0f\x25\x2a\xc7\x4e\xcc\xb9\xd0\xf9\xd1\xd4\x2c\xfa\x71\x3a\x42\xa6\x31\x96\x09\x48\x1f\xa7\xa9\x22\x22\x04\x9f\x88\xe4\x17\xc2\x32\xf3\x62\x31\x3c\xa1\x98\x15\xab\x27\xcf\xd6\xb2\x90\xab\x4b\x4b\x94\x16\x12\x47\x60\x97\x15\x55\x87\x92\x7f\x4b\x81\x85\xf5\x73\xf3\xa9\x89\xe3\xeb\x36\x11\x7c\x4b\x23\x53\xfe\x10\x2c\xd6\xcb\xc5\xcb\x9f\x8f\xc1\x62\x7d\x17\x04\x4f\xaf\x7f\xac\x2a\x20\x66\x35\x21\x93\x62\x82\x6b\x05\x72\x47\x09\xac\x31\x21\xe6\x0d\xa3\x2e\xcc\x87\x78\x8b\xbc\x42\x74\xd7\xa6\x61\x78\x03\x39\xf5\x83\x10\x11\x03\x14\x30\x91\x85\x68\x79\xac\x40\xad\x25\x94\xa7\x59\x7e\x93\x34\xfc\xab\xb1\x04\xec\x95\xd9\xc3\xc0\xb1\xc1\xe7\x97\xa7\x6f\x8b\x60\xb5\x7e\xfc\xda\xdd\x5b\x2a\xc5\x0f\x20\x7a\x4d\xc3\xf6\xb6\x8a\xbc\xbd\x44\x7b\x47\xcf\x47\x31\xb2\xd5\xb5\x66\x2a\x8d\x14\xff\xd9\xaf\x22\x6f\xd9\x06\x24\x07\x0d\x27\x23\x7a\x3b\x90\xaa\xf6\x4b\x48\xb5\xf9\xcf\xac\xd9\x62\xe4\xcf\xfc\x49\xd5\x54\xd6\x77\xb3\x91\xd7\x42\xb0\xba\xe3\x0b\x04\x1c\x26\xa7\x82\xb6\xe9\x17\xbf\xe0\xd4\x0a\x43\x30\x21\x2d\x33\x68\xb4\x79\xfc\x34\xcd\x1e\xae\x0e\xff\x07\x00\x00\xff\xff\x87\x0d\x07\x28\x13\x12\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 4627, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
