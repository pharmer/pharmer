// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package gce

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x98\x51\x73\xda\x38\x17\x86\xef\xf3\x2b\x34\xbe\xfa\xbe\x19\xe3\x02\xa1\x49\xa6\x77\xc4\xc9\x76\xd3\x49\x5b\x16\x68\x7b\xb1\xd3\xc9\x08\xf9\x60\xab\xc8\x92\x57\x92\xc9\xd2\x4c\xfe\xfb\x8e\x84\x63\x8c\xb0\x41\xdc\xb4\xb1\xce\x2b\xe9\x39\x47\xaf\x85\xe4\x97\x0b\x84\x02\x8e\x73\x08\x3e\xa0\x20\x25\x10\x84\xa6\x01\xf8\x3a\xf8\x80\xfe\xbe\x40\x08\xa1\x20\x81\xb5\x6d\x45\x28\xf8\x07\x07\x17\x08\xfd\xb4\x1a\x09\x29\x15\x5c\xd5\xba\x17\xfb\x6f\x1d\x30\xe3\xdd\x63\xa5\x41\x72\xf4\x6d\x56\x0d\x80\x50\xc0\x04\xc1\xba\x8a\xdf\x82\x5c\x01\x83\x0d\x8a\x45\xc9\xf5\x26\x44\x33\x51\xea\x0c\xc5\x58\x0a\x46\x39\xde\x75\xfa\x2d\x38\xec\x66\xb2\x4d\xa5\xea\x01\x56\x7a\xd0\x5b\xd4\xb2\x66\x2b\x69\x6d\x4d\x82\xaa\xf1\xa7\xfd\xff\x35\xec\x22\xff\x01\xc7\xc9\xe7\x19\xa0\x3b\xcc\x18\xa8\x10\x7d\x9d\x9e\x02\x7d\x06\x33\x39\x76\x90\xb6\xad\x0b\x5f\xa4\x18\xb8\x96\x98\x75\x22\x99\x1a\x12\xca\xd0\x2d\x2b\x97\x4b\x15\xa2\x07\xf1\x7c\xb2\x82\x64\x3b\xe6\x21\x5b\x1d\x70\xab\x5b\x07\xdc\x02\xd7\x81\xe5\xb9\x35\xbe\x2f\xa5\x28\xa0\x3d\xa9\x99\x8e\xd0\xc7\x8c\x2a\x86\x29\x0f\xd1\x2d\xb0\x94\x96\xf9\xd1\xac\xc0\x8e\x56\x17\x37\xec\x88\x90\xce\x88\xb7\x47\xc6\x8a\x62\xf4\xbf\x39\xa6\xcf\x98\xff\xbf\x63\x4d\x32\xcc\xd3\xac\xc4\xb5\xc1\xb7\xea\xa3\x09\x60\x45\x71\x65\xd7\xbd\x55\x69\xb4\x2f\x3a\xda\xc9\x79\xe8\x9f\x70\xd1\x49\x3e\x17\xab\x8d\x08\x91\x95\x9c\xc6\xe5\x42\xea\xac\x8b\xb9\x11\x3c\x04\x6f\x04\x5d\xfa\x7a\xa7\xa1\x5c\x69\xcc\x09\xcc\x37\x05\xb4\xec\x37\x6a\x55\xda\xcd\x6b\xd0\x53\x39\x66\x6c\x47\x9b\x80\x22\x92\x16\x6f\x29\x1d\x0a\x08\xd6\x90\x0a\xb9\xb1\x4e\x73\x42\x85\x19\x74\x50\x3f\x4b\x9c\x9b\xe7\xe8\xba\xb5\xb2\x15\x02\x1f\xf4\x0c\x69\x82\x65\xd2\x1b\x74\x72\x74\xa8\xf6\x60\xaa\xf8\x29\x9e\xcb\xe8\xfa\xbd\x2f\xd0\xd0\x0b\x68\x78\x1e\xd0\xd0\x01\xba\x8e\xbc\x79\x46\x5e\x3c\xa3\xf3\x78\x46\xee\x82\x79\xe3\xdc\x78\xe1\xdc\x9c\x87\x73\xe3\xae\x57\xdf\xdb\x3e\x57\x7e\xfe\xb9\x3a\xd3\x40\x57\x0e\xd1\x95\x37\xd1\xe5\xd0\x0f\x69\x4f\xe7\xc3\x74\xe9\x9a\x68\x30\x3c\x05\x95\xd1\x34\xcb\x21\x3f\xee\xe9\x16\x51\x13\xe7\x4f\x9a\x66\xe8\x33\xe4\xe6\xf1\x84\xab\x07\x97\x9e\x3c\x47\x3d\xdd\x22\xf2\xe4\x71\x5d\x3d\xbc\xf2\xe4\x39\x6a\xea\x16\x91\x27\x8f\x6b\xeb\xf7\x43\x4f\x9e\xe3\xae\x6e\x53\x79\x12\x1d\xf8\x7a\xd0\x1f\x79\x32\x9d\xf0\x75\xab\xcc\x93\xea\xc0\xd9\xc3\xfe\x8d\x07\x15\x29\xca\xd3\xce\x76\x44\x07\x44\xf1\xe4\xdb\x49\x5b\x47\xbe\x34\x27\x7d\xed\x88\x7c\x68\x5c\x53\x5f\x46\x3e\xae\x36\x13\x9d\x74\xb5\x23\xf2\xa1\x71\x2d\x7d\x1d\xf9\x78\xda\x4c\x74\xda\xd3\xae\xca\x87\xe7\xd0\xd0\xa3\xc8\xc7\xd1\x66\x2e\x0f\x47\x1f\xc8\x7c\x98\x0e\xed\x7c\xf3\xe6\xa0\xfa\xac\x46\x24\x24\xc0\x35\xc5\xac\xe5\xa4\x56\x48\xb1\xa6\x09\x48\x33\xc9\x47\x21\x52\x06\x31\x13\x65\xe3\x07\x21\xa1\xaa\x60\x78\xf3\x87\x90\x39\xd6\x46\xf5\x4b\x89\xc6\xf1\x13\x73\x2e\xb4\x3d\xa2\x9a\xc1\x5f\x76\x47\xc9\x22\xc3\x32\x07\x19\xe1\xa2\x50\x44\x24\x10\x11\x91\xbf\x23\xac\x34\x17\x8c\xde\x0e\xc9\x8c\xd8\x3c\x81\xb6\x76\x4b\xb8\x3a\xb7\x8b\xd2\x42\xe2\x14\xdc\x6e\x55\xaf\xd7\x9a\x7f\x49\x81\x25\xfb\xe7\xe7\x5d\x12\xdb\x6b\x37\x11\x7c\x49\x53\x5b\xa0\xf8\xfe\x69\x32\xfd\xfa\xe9\x3e\x9e\x3f\x3d\xdc\x35\x18\xcc\x40\x42\xe6\xd5\x85\xfd\xa9\x90\xe2\x17\x10\xfd\x44\x93\x7d\x8d\x2d\xdd\x07\x5b\x74\x13\x77\x87\x60\x78\x01\x6c\xb7\x10\xc8\xae\x04\x9a\x6c\xc5\xc8\x55\x53\x5e\x94\x76\x41\x34\xfc\xab\x83\x3a\xf2\x1a\x7a\x26\x32\xbb\x9f\x7e\x7f\x88\xef\x9f\xc6\x71\xfc\xf5\xdb\x97\x79\x77\x36\x0a\xe4\x9a\x12\x78\xc2\x84\x98\x2b\x53\x7b\x4a\x95\x68\xdc\xa6\x69\xcf\x6b\xb6\xed\x81\x5a\xbb\xec\x25\x87\x25\xe0\x46\x82\xd5\x5f\xee\x95\x64\x55\x2e\x40\x72\xd0\xa0\xbe\x83\x54\xed\xdf\x41\xd6\xdb\x88\x19\x78\x10\x5d\x47\xdd\x7b\xa8\x13\xdd\x7e\x7c\x69\xb8\x3b\x01\xd3\xa0\x65\x09\x07\x8e\x4a\x60\x89\x4b\xa6\x67\x05\x10\xe7\x8d\x10\xc9\xac\x5c\x70\xb0\x79\x0d\xfa\xd1\x70\x34\x8a\xfa\x51\xff\x5d\x63\x1f\x42\x75\x21\xf7\x94\xfd\x16\x1d\x66\xf6\x6e\x08\x5f\x44\x02\x31\x4d\xa4\xaa\x78\x9a\x77\x68\x8e\x17\xe6\x7d\xb6\xef\xdc\x67\xc1\xa9\x16\x92\x72\x6b\x80\xb7\x77\x25\xe8\x92\x3f\x8a\x34\xdd\x6a\x5b\x07\x35\xb3\x76\x4a\xd8\x36\x70\x07\x4a\x53\x5e\x5f\x5f\xdf\xa6\xec\x01\xc3\x4a\x53\xa2\x00\x4b\x92\xed\x01\x34\x03\xd5\xe8\x53\x28\x18\x25\x58\x35\x6f\x5a\xa6\xc8\x5c\x19\xff\x80\x7c\x98\x34\x6a\x34\xe8\x07\xfb\x9a\x3b\x91\x63\x6a\x67\xaf\x76\x9e\xc8\x14\x8d\xed\xd5\x31\xc9\xa9\x32\xa6\x88\x05\xd7\x52\x58\x9f\x7e\xc1\x39\xa8\x02\x13\x78\xa4\x4b\x20\x1b\xc2\x20\x7c\xa4\x39\xd5\x53\xcc\x53\x90\xe1\x6c\xcf\xeb\xe1\xc4\x98\x4a\x69\xe0\xfa\xbb\x60\x65\x0e\x8f\xc6\xee\xe1\x5d\x65\x83\xed\x3e\x14\x33\xac\x54\x38\x05\x25\x4a\x49\xe0\xaf\x52\xe8\xbd\x4b\x79\x6e\xbf\xca\x39\xee\xb8\xb2\xab\x3e\x1c\x35\x85\x1c\xf4\xb3\x90\xab\x49\x63\xd7\x5e\x32\xcc\x39\xb0\xce\x95\x1c\x33\x90\xba\x6b\xcd\x85\x29\x6c\x90\xc0\x82\x36\xbe\x29\x34\xe6\x11\x8c\x92\x4d\x73\x36\x2e\x78\x8b\x69\x7e\xc0\x22\x13\x62\x35\x17\x2b\xe0\xe3\x52\x67\xbc\xcb\x37\xd3\x05\x26\x46\xf0\xbb\x4b\x30\x9e\x3c\x28\xbb\xb0\xb7\x58\x51\x32\x2e\x13\xaa\x3b\xa5\x55\x3e\x63\xad\x29\x39\x14\x15\x82\xb1\x19\x03\x28\x1e\xb8\x06\xb9\xb6\x3f\x00\x97\xad\x46\x9e\x94\x0b\x46\x89\x75\x52\xf3\x8d\xde\xed\x2f\x17\xaf\xff\x05\x00\x00\xff\xff\xd4\xf2\xde\x3d\x94\x15\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 5524, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
