// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package gce

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x9d\x5d\x6f\xdb\x36\x17\xc7\xef\xf3\x29\x08\x5d\x3d\x0f\x60\x6b\xd6\x4b\x6c\x37\x77\x8d\x9b\x75\x2d\xd0\x35\x48\xd2\xdd\x0c\x45\x40\x4b\x8c\xad\x46\x26\x55\x52\x72\xe7\x15\xf9\xee\x83\x14\x5b\xb2\xf8\x62\xd3\x76\x5a\x60\xda\xb9\xe9\x8b\xce\x11\xf3\x27\x29\xfd\xce\x89\xf5\x87\xf5\xfd\x0c\x21\x87\xe2\x05\x71\x2e\x90\x33\x8b\x88\xd3\x2b\x0f\x10\xba\x14\xce\x05\xfa\xf3\x0c\x21\x84\x9c\x98\x2c\xab\xc3\x08\x39\x5f\xf1\xe6\x5f\x19\x67\xb1\x73\x86\xd0\xe7\xea\x04\x4e\x66\x09\xa3\xcd\x39\xdf\xab\x3f\x11\x72\x52\x16\xe1\x3c\x61\xb4\x1c\x7e\x32\xc7\x74\x36\x2f\x30\x9a\xb0\x82\xe6\xab\x1e\xba\xc3\xc9\x37\x4c\xd7\x23\xd6\xa3\x94\xa9\x58\x24\xb8\x4f\xb0\xc8\xbd\x26\xfa\x37\xa3\xa4\xf9\x09\xd5\xa1\x26\xad\x8f\xeb\xc4\xf6\xf1\xa9\xe1\x78\xe4\xac\x0f\x7f\xae\xfe\x7e\xea\x99\x75\xdf\xb1\xc7\x15\xeb\xa1\xf7\x38\xdb\x21\x96\x32\x9e\xcf\x2d\x15\x37\xb9\x1a\xd9\x5b\x41\x55\xfb\x56\xf0\x80\x09\x18\x45\x0b\x56\xe4\x73\x0b\xc1\xcf\x79\x1a\xb1\xeb\x80\x2a\x74\x1d\x78\x31\x91\x96\x2b\xdb\xe4\x9a\xc4\x6e\x56\xf6\x34\x5d\x85\xc8\x39\x4e\x0f\x10\xa7\x39\x41\x52\xa8\xcb\x98\xee\xcd\x38\x60\x81\x6f\x73\x17\xbd\x9d\x27\x22\xc5\x09\xed\xa1\x4b\x92\xce\x92\x62\xa1\x9b\x1d\x29\x38\xcb\x48\xff\x1b\xd9\x37\xab\xed\xc4\xb6\xd6\x56\x24\x32\x46\xe2\xd3\xb6\x61\x6b\x2c\xdf\x56\xa8\xdf\x5e\xf6\x56\xc4\x34\x05\xff\xd4\xeb\x78\x6b\xac\xc0\x56\x68\x60\x14\x1a\x18\x85\x06\x2f\x28\x34\xb4\x15\x1a\x1a\xe5\x84\xa7\xca\xa9\x70\x87\x17\x84\x27\x91\x35\x61\x0d\xe7\xb4\x57\xd3\x94\x34\xb5\x49\x3a\x71\x52\xd5\xdd\xbb\x19\x76\xff\x7c\xd4\xf4\xf6\x54\x34\xf1\xe9\x9e\xf8\x01\x13\x28\x4b\x75\x94\xa4\xe8\x32\x2d\x1e\x1e\x44\x0f\xbd\x63\xdf\xb0\x6e\x52\x85\xe8\x47\x84\x96\x7c\xda\x3d\x9b\xad\xbc\xf6\x34\xb6\x03\x53\x53\x20\x32\x05\x1e\xec\x67\x74\x49\xf8\x23\x49\xc9\xaa\xee\x42\x6e\xcb\x05\x42\x13\xcc\x59\x9a\x50\xd3\xe4\xf6\xef\xd3\x26\x49\x51\xbf\x59\x73\xdd\xd1\x13\x01\xb8\x1e\x67\xf7\xad\xba\x49\x52\xd6\xfb\xf9\xa8\x4e\xee\x41\x37\xee\xdd\x9c\xa0\x37\x38\x4d\x89\xe8\xa1\x8f\x37\x06\x99\xfb\x8b\xc9\x26\x49\x91\xa9\x29\x2f\xf5\x51\x59\x66\xdd\x90\x26\x54\xe4\x98\x46\xe4\x6e\x95\x11\x4d\x5b\x2a\x1e\x8b\x52\xd8\x83\xd7\x5f\x24\x11\x67\x8d\xb0\x98\x88\x88\x27\xd9\x66\x6e\x1e\x5a\x4e\xae\x3f\xa1\xff\x89\x39\xe6\x24\x46\xd9\x7c\x25\x92\x08\xa7\x28\x62\x9c\xfc\x1f\x61\x1a\xa3\x81\x3b\x44\x6f\x2f\xd1\xcd\xeb\x0f\xcd\x20\x51\x56\x8e\xee\x35\x2b\x81\x17\xce\x45\x99\xd9\xfc\x98\x44\x3c\x3a\x17\x28\x18\x8c\xfc\x1f\xd6\xdf\xee\xe8\x1d\x4f\xe9\x3a\x0d\x9d\xde\x31\xbd\xe1\x8e\x06\x6d\x4f\xf7\xb6\xaf\x2d\x7a\x99\xd6\xca\xd4\xb6\x1c\xd7\xea\x98\x7a\x8b\xe3\xfa\x11\x53\x03\x70\x5c\xd3\x60\xaa\xdf\xbb\x2a\xbb\x45\xa5\x7c\xc9\x9a\xbb\xbb\xa4\x9d\x5e\x12\x0d\x95\xe5\x45\x8b\x94\xae\x04\x1c\x56\x2e\x74\xac\x3e\x8c\xeb\x3a\x8c\x9e\x82\xdc\x9e\x96\xac\x33\xaf\x2f\x16\x38\x4d\x4f\x20\xab\xe7\x8e\x54\xb2\xe2\x9c\xcc\x18\x5f\x55\xbf\xcf\xb4\xc7\xd7\x43\xd7\x73\x47\x00\x5d\x80\x2e\x40\x17\xa0\xdb\x7d\xe8\x52\xaf\x3f\x4f\x66\xf3\x28\x2b\xfa\xde\xd0\x4c\xde\x61\x85\x5e\xd1\x43\x5e\xe8\x86\x3b\x11\xfb\x5b\x32\x9b\xa3\xc9\xf5\x27\x85\xb2\x43\x19\xb3\xa1\x1b\xca\x9c\x1d\x9e\x9f\x07\x43\x00\x2d\x80\x16\x40\xbb\x2f\x09\x40\xfb\xaf\x05\xad\x6f\xe4\xac\x5f\x63\xd6\x1d\x1f\x45\x59\x5f\xe9\x65\xc7\xc0\x58\x60\xac\x1c\x01\xc6\x02\x63\xbb\xcd\xd8\xc0\x0c\xd9\xa0\xa6\xac\x3f\xd6\x61\xb6\x02\x69\x20\x93\xb4\xcc\x05\x94\x02\x4a\xe5\x08\xa0\x14\x50\xda\x75\x94\x9a\x3f\x18\x30\xa5\xd9\xf4\xaa\x7b\x10\x4b\x32\x4e\xca\x61\x62\xe7\x02\xe5\xbc\x20\x96\x6a\x43\xa3\xd6\x70\x83\xfd\x40\xf7\xfc\xcd\x42\x70\x28\xe9\x0d\xd4\xa7\x73\x50\x11\x34\x01\xa8\x08\x50\x11\xa0\x22\x74\xa8\x22\x0c\xcd\x90\x1d\xd6\x94\x3d\x1f\x19\x6d\x0e\x43\x99\xa4\x65\x2e\xa0\x14\x50\x2a\x47\x00\xa5\x80\xd2\x6e\xa3\x74\x6c\x24\xe9\x78\x03\xd2\x91\xeb\x1f\xd5\xae\x8e\x25\xc8\x8e\x5c\x1f\x18\x0b\x8c\x95\x23\xc0\x58\x60\x6c\xb7\x19\xfb\xca\xfc\xf9\xc5\xab\xda\xd8\x30\x36\x35\xab\xaf\x64\xe3\xc2\x78\xf8\x13\x8c\x0b\x3f\xec\x76\xb7\xbe\x41\xad\xae\xc1\xc3\x76\xf3\x80\x7d\x5b\x90\x85\xa5\x21\x65\x60\xe1\x47\xf9\x40\x16\xe5\x7f\xa5\x9d\x55\x2d\x29\x03\x70\xa4\x40\x85\x54\x22\x50\x21\xa1\x42\x76\xb7\x42\x96\xa4\xb5\x71\xa4\x04\xc7\x62\x56\xf1\xa4\x04\x00\x59\x80\xac\x1c\x01\xc8\x02\x64\xbb\x0d\x59\x3b\x4b\xca\xc0\xde\x91\x32\x00\x43\x0a\x80\x54\x89\x00\x48\x01\xa4\x5d\x07\xe9\x5e\x43\x8a\x92\x66\xd9\xab\xee\x86\xec\x11\x96\x94\x52\x88\x85\x25\xc5\xb7\x70\xa4\xe8\x15\xcb\x8f\x52\x7d\x78\x90\x0a\x45\x41\x89\x40\x51\x80\xa2\xd0\xed\xa2\x60\xe5\x49\x09\x3d\x6b\x4b\x4a\xe8\x01\x48\x01\xa4\x4a\x04\x40\x0a\x20\xed\x36\x48\x2d\x1c\x29\xe7\x16\x86\x14\x7d\xb7\x2a\x7b\x52\xce\xc1\x92\x02\x90\x55\x22\x00\x59\x80\x6c\xb7\x21\x6b\x65\x49\x19\xfa\x1a\x6b\x83\xde\x93\x32\xf4\xc1\x92\xf2\x23\x2d\x29\x22\xc7\x34\xc6\x3c\xee\x7b\xc6\x7d\x7b\xfe\x76\xaa\x1e\x0a\xdc\xd1\xf9\xee\x2f\xa1\x5a\x8f\x25\x6f\xaa\xfc\x3d\x54\xe5\x40\x50\x1d\xa1\x3a\xca\x11\xa8\x8e\x50\x1d\xbb\x59\x1d\x1b\xca\xda\x38\xff\x86\x83\xe3\x30\xab\xd4\xce\x01\x50\x16\x28\x2b\x47\x80\xb2\x40\xd9\x8e\x53\xd6\xc2\xf5\x37\x72\x8f\xeb\x65\xe5\xc7\xa8\x23\x17\x5a\x59\x80\xac\x12\x01\xc8\x02\x64\x3b\x0e\x59\x2b\xd7\x9f\xe7\x6b\x7a\x59\xbd\x21\xc5\xf3\xa1\x5d\x05\x92\x2a\x11\x20\x29\x90\xb4\xf3\x24\xdd\x69\xfb\xd3\xe7\xd9\x34\xab\xbb\x19\x7b\xa0\xe9\xaf\x96\x61\xe1\xfa\xf3\x8e\x6b\xae\x65\xab\x8a\x07\xbd\x35\x54\x04\x25\x02\x15\x01\x2a\x42\xc7\x2b\x82\x95\xe7\xcf\x0f\x4d\xbd\xb5\xe2\xf9\xf3\x43\xe8\xad\x81\xa4\x4a\x04\x48\x0a\x24\xed\x38\x49\x2d\x4c\x7f\xc1\x71\x8f\xdb\x64\xc7\x5f\x00\x88\x05\xc4\x2a\x11\x40\x2c\x20\xb6\xe3\x88\xb5\xb2\xfc\x05\x3a\x53\x83\xde\xf2\x17\xfc\x04\xdf\xc2\x7f\xc0\xf2\x57\xbf\xfe\x37\xe2\x24\x26\x34\x4f\x70\xaa\x79\xf9\x6f\xc6\xd9\x32\x89\x09\x2f\x77\xeb\x2d\x63\xb3\x94\x4c\x52\x56\x6c\x15\xbb\x38\x11\x59\x8a\x57\xbf\x32\xbe\xc0\x79\x99\xf5\x45\x30\xda\x84\x31\xa5\x2c\xaf\x5e\x7f\x5c\x0e\xfe\xbd\xd1\x95\xcd\x31\x5f\x10\xee\xe2\x2c\x13\x11\x8b\x89\x1b\xb1\xc5\x2f\x51\x5a\x88\x9c\xf0\x7e\x23\xa9\xf5\x36\x67\xd3\x69\x31\x15\x87\x9e\x22\x72\xc6\xf1\x8c\xc8\xa7\xad\xcf\x7a\xaa\xf5\x3f\x24\x24\x8d\xdb\x17\x53\x33\x89\x72\x03\xe9\x32\x62\xf4\x21\x99\x55\x0b\x34\xb9\xba\xbf\xbe\xf9\xf8\xfe\x6a\x72\x77\xff\xee\xcd\x96\x86\x72\x20\xc6\x17\xd5\xcb\x3e\x23\x72\x9f\x71\xf6\x85\x44\xf9\x7d\x12\xb7\x73\xaa\xa5\xbb\xa8\x16\xbd\x8c\xcb\x43\xa4\x78\x4a\xd2\x66\x23\x50\xb5\x13\xe8\xfa\x39\x19\xc9\xd9\x09\xcd\x8a\x6a\x43\x72\xf2\x57\xee\xd4\x91\xa7\x9e\xe5\x44\x6e\xaf\x6e\xfe\x78\x37\xb9\xba\x7f\x3d\x99\x7c\xfc\xf4\xfb\x9d\x79\x36\x82\xf0\x65\x12\x91\x7b\x1c\x45\xac\xa0\xb9\x7e\x4a\xeb\xa4\xd7\xba\x1c\xfd\xbc\x6e\x9f\xcf\x40\xda\x53\x5a\x93\xc3\x9c\xe0\xad\x09\x1a\x2e\xf3\xc7\x62\x4a\x38\x25\xb9\xee\x15\xd7\x4b\xc2\xc5\xc6\x66\xe5\x8e\xdd\x41\x73\xfd\x12\xba\x94\x2e\xdc\x98\x2c\xd7\x1f\x88\x6e\x5f\x63\x9c\xc5\xea\xd1\xaf\x78\xfb\xa3\xd3\x8d\xb4\x4a\xd2\xd9\xd3\x3f\x01\x00\x00\xff\xff\xb8\x80\xdc\x18\x4e\x86\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 34382, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
