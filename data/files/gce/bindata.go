// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package gce

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x9d\x5d\x6f\xdb\x36\x17\xc7\xef\xf3\x29\x08\x5d\x3d\x0f\x60\x6b\xd6\x4b\x6c\x27\x77\x8d\x9b\x75\x2d\xd0\x35\x48\xd2\xdd\x0c\x45\x40\x4b\xb4\xad\x46\x26\x55\x52\x72\xe7\x15\xf9\xee\x83\x14\xdb\xb2\xf8\x62\xd3\x76\x52\x60\xda\xb9\xd9\x5a\x9e\x43\xea\x1c\x52\xfe\x9d\x53\xeb\x0f\xeb\xc7\x19\x42\x0e\xc5\x73\xe2\x5c\x22\x67\x1a\x11\xa7\x53\x0e\x10\xba\x10\xce\x25\xfa\xf3\x0c\x21\x84\x9c\x98\x2c\xaa\x61\x84\x9c\x6f\x78\xfd\xa7\x8c\xb3\xd8\x39\x43\xe8\x4b\x35\x81\x93\x69\xc2\x68\x3d\xe7\x47\xf5\x5f\x84\x9c\x94\x45\x38\x4f\x18\x2d\x97\x1f\xcd\x30\x9d\xce\x0a\x8c\x46\xac\xa0\xf9\xb2\x83\xee\x71\xf2\x1d\xd3\xd5\x8a\x9b\x55\x4a\x57\x2c\x12\xdc\x25\x58\xe4\x5e\x6d\xfd\x9b\x51\x52\x5f\xa1\x1a\xaa\xdd\xba\x78\xe3\xd8\x1c\x1f\x1b\xc6\x23\x67\x35\xfc\xa5\xfa\xff\x53\xc7\x1c\xf7\x3d\x7b\x5c\xb2\x0e\xfa\x80\xb3\x1d\xc1\x52\xc6\xf3\x99\x65\xc4\xb5\xaf\x26\xec\x2d\xa3\x1a\xfb\x96\xf1\x80\x04\x8c\x41\x0b\x56\xe4\x33\x8b\x80\x9f\xfd\x34\xc1\xae\x0c\x6a\xa0\x2b\xc3\x8b\x05\x69\xb9\xb3\xb5\xaf\x29\xd8\xf5\xce\x9e\x16\x57\x21\x72\x8e\xd3\x03\x82\xd3\x4c\x90\x22\xd4\x79\x8c\xf7\x7a\x1c\xb0\xc1\x77\xb9\x8b\xde\xcd\x12\x91\xe2\x84\x76\xd0\x15\x49\xa7\x49\x31\xd7\x65\x47\x0a\xce\x32\xd2\xfd\x4e\xf6\x65\xb5\xed\xd8\x8c\xb5\x61\x89\x8c\x96\xf8\xb4\x63\xd8\x5a\xcb\xb7\x0d\xd4\x6f\x6e\x7b\xc3\x62\x4a\xc1\x3f\xf5\x3e\xde\x5a\x2b\xb0\x0d\x34\x30\x06\x1a\x18\x03\x0d\x5e\x30\xd0\xd0\x36\xd0\xd0\x18\x4e\x78\x6a\x38\x15\xee\xf0\x9c\xf0\x24\xb2\x26\xac\x61\x4e\x73\x37\x4d\x4e\x63\x1b\xa7\x13\x93\xaa\x3e\xbd\xeb\x65\xf7\xe7\xa3\xba\x37\x53\xd1\xd8\xc7\x7b\xec\x07\x24\x50\x96\xea\x28\x49\xd1\x55\x5a\x4c\x26\xa2\x83\xde\xb3\xef\x58\x97\x54\x21\xba\x11\xa1\x25\x9f\x76\x67\xb3\xe5\xd7\x4c\x63\xdb\x30\x36\x19\x22\x93\x61\x62\x9f\xd1\x15\xe1\x8f\x24\x25\xcb\x4d\x17\x72\x57\x6e\x10\x1a\x61\xce\xd2\x84\x9a\x92\xdb\x7f\x4e\x6b\x27\x25\xfa\xf5\x9e\xeb\x46\x4f\x04\xe0\x6a\x9d\xdd\x1f\xd5\xb5\x93\xb2\xdf\xcf\xa3\xba\x70\x0f\xfa\xe0\xde\xcf\x08\x7a\x8b\xd3\x94\x88\x0e\xfa\x74\x6b\x08\x73\x7f\x31\x59\x3b\x29\x61\x6a\xca\xcb\x66\x54\x0e\x73\xd3\x90\x26\x54\xe4\x98\x46\xe4\x7e\x99\x11\x4d\x5b\x2a\x1e\x8b\x32\xb0\x89\xd7\x9d\x27\x11\x67\x75\x60\x31\x11\x11\x4f\xb2\x75\x6e\x1e\x5a\x8c\x6e\x3e\xa3\xff\x89\x19\xe6\x24\x46\xd9\x6c\x29\x92\x08\xa7\x28\x62\x9c\xfc\x1f\x61\x1a\xa3\x9e\xdb\x47\xef\xae\xd0\xed\x9b\x8f\xf5\x22\x51\x56\xae\xee\xd5\x3b\x81\xe7\xce\x65\xe9\x59\x5f\x26\x11\x8f\xce\x25\x0a\x7a\x03\xff\xd5\xfa\xdb\x1d\xbd\xe3\x29\x5d\xa7\xa1\xd3\x3b\xa6\x37\xdc\xd1\xa0\xed\xe9\xde\xf6\xb5\x45\x2f\xd3\x5a\x99\xda\x96\xe3\x5a\x1d\x53\x6f\x71\x5c\x3f\x62\x6a\x00\x8e\x6b\x1a\x4c\xf5\x7b\x57\x65\xb7\xa8\x94\x2f\x59\x73\x77\x97\xb4\xd3\x4b\xa2\xa1\xb2\xbc\x68\x91\xd2\x95\x80\xc3\xca\x85\x8e\xd5\x87\x71\x5d\x87\xd1\x53\x90\xdb\xd1\x92\x75\xea\x75\xc5\x1c\xa7\xe9\x09\x64\xf5\xdc\x81\x4a\x56\x9c\x93\x29\xe3\xcb\xea\xdf\x33\xcd\xf5\xf5\xd0\xf5\xdc\x01\x40\x17\xa0\x0b\xd0\x05\xe8\xb6\x1f\xba\xd4\xeb\xce\x92\xe9\x2c\xca\x8a\xae\xd7\x37\x93\xb7\x5f\xa1\x57\x74\x90\x17\xba\xe1\x4e\xc4\xfe\x96\x4c\x67\x68\x74\xf3\x59\xa1\x6c\x5f\xc6\x6c\xe8\x86\x32\x67\xfb\xe7\xe7\x41\x1f\x40\x0b\xa0\x05\xd0\xee\x73\x02\xd0\xfe\x6b\x41\xeb\x1b\x39\xeb\x6f\x30\xeb\x0e\x8f\xa2\xac\xaf\xf4\xb2\x43\x60\x2c\x30\x56\xb6\x00\x63\x81\xb1\xed\x66\x6c\x60\x86\x6c\xb0\xa1\xac\x3f\xd4\x61\xb6\x02\x69\x20\x93\xb4\xf4\x05\x94\x02\x4a\x65\x0b\xa0\x14\x50\xda\x76\x94\x9a\xbf\x18\x30\xb9\xd9\xf4\xaa\x7b\x10\x4b\x32\x4e\xca\x65\x62\xe7\x12\xe5\xbc\x20\x96\xd1\x86\xc6\x58\xc3\x35\xf6\x03\xdd\xf3\x37\x8b\x80\x43\x29\xde\x40\x7d\x3a\x07\x15\x41\x63\x80\x8a\x00\x15\x01\x2a\x42\x8b\x2a\x42\xdf\x0c\xd9\xfe\x86\xb2\xe7\x03\xa3\xcc\xa1\x2f\x93\xb4\xf4\x05\x94\x02\x4a\x65\x0b\xa0\x14\x50\xda\x6e\x94\x0e\x8d\x24\x1d\xae\x41\x3a\x70\xfd\xa3\xda\xd5\xa1\x04\xd9\x81\xeb\x03\x63\x81\xb1\xb2\x05\x18\x0b\x8c\x6d\x37\x63\x2f\xcc\xdf\x5f\x5c\x6c\x84\x0d\x43\x53\xb3\x7a\x21\x0b\x17\x86\xfd\x9f\x20\x5c\x78\xb5\x8f\xbb\xf5\x07\xd4\xea\x1e\x3c\xec\x34\x0f\x38\xb7\x39\x99\x5b\x0a\x52\x7a\x16\x7a\x94\x8f\x64\x5e\xfe\x55\x3a\x59\x55\x92\xd2\x03\x45\x0a\x54\x48\xc5\x02\x15\x12\x2a\x64\x7b\x2b\x64\x49\x5a\x1b\x45\x4a\x70\x2c\x66\x15\x4d\x4a\x00\x90\x05\xc8\xca\x16\x80\x2c\x40\xb6\xdd\x90\xb5\x93\xa4\xf4\xec\x15\x29\x3d\x10\xa4\x00\x48\x15\x0b\x80\x14\x40\xda\x76\x90\xee\x15\xa4\x28\x6e\x96\xbd\xea\x6e\xc8\x1e\x21\x49\x29\x03\xb1\x90\xa4\xf8\x16\x8a\x14\x7d\xc4\xf2\xa3\x54\x1f\x1e\xa4\x42\x51\x50\x2c\x50\x14\xa0\x28\xb4\xbb\x28\x58\x69\x52\x42\xcf\x5a\x92\x12\x7a\x00\x52\x00\xa9\x62\x01\x90\x02\x48\xdb\x0d\x52\x0b\x45\xca\xb9\x85\x20\x45\xdf\xad\xca\x9a\x94\x73\x90\xa4\x00\x64\x15\x0b\x40\x16\x20\xdb\x6e\xc8\x5a\x49\x52\xfa\xbe\x46\xda\xa0\xd7\xa4\xf4\x7d\x90\xa4\xbc\xa6\x24\x45\xe4\x98\xc6\x98\xc7\x5d\xcf\x78\x6e\xcf\xbf\x4e\xd5\x41\x81\x3b\x38\xdf\xfd\x23\x54\xab\xb5\xe4\x43\x95\x7f\x87\xaa\x5c\x08\xaa\x23\x54\x47\xd9\x02\xd5\x11\xaa\x63\x3b\xab\x63\x4d\x59\x1b\xe5\x5f\xbf\x77\x1c\x66\x95\xda\xd9\x03\xca\x02\x65\x65\x0b\x50\x16\x28\xdb\x72\xca\x5a\xa8\xfe\x06\xee\x71\xbd\xac\xfc\x18\x75\xe0\x42\x2b\x0b\x90\x55\x2c\x00\x59\x80\x6c\xcb\x21\x6b\xa5\xfa\xf3\x7c\x4d\x2f\xab\x17\xa4\x78\x3e\xb4\xab\x40\x52\xc5\x02\x24\x05\x92\xb6\x9e\xa4\x3b\x65\x7f\x7a\x3f\x9b\x66\x75\x37\x63\x0f\x14\xfd\x6d\xc2\xb0\x50\xfd\x79\xc7\x35\xd7\xb2\x54\xc5\x83\xde\x1a\x2a\x82\x62\x81\x8a\x00\x15\xa1\xe5\x15\xc1\x4a\xf3\xe7\x87\xa6\xde\x5a\xd1\xfc\xf9\x21\xf4\xd6\x40\x52\xc5\x02\x24\x05\x92\xb6\x9c\xa4\x16\xa2\xbf\xe0\xb8\xc7\x6d\xb2\xe2\x2f\x00\xc4\x02\x62\x15\x0b\x20\x16\x10\xdb\x72\xc4\x5a\x49\xfe\x02\x9d\xa8\x41\x2f\xf9\x0b\x7e\x82\x6e\xe1\x3f\x20\xf9\xdb\xbc\xfe\x37\xe2\x24\x26\x34\x4f\x70\xaa\x79\xf9\x6f\xc6\xd9\x22\x89\x09\x2f\x4f\xeb\x1d\x63\xd3\x94\x8c\x52\x56\x6c\x15\xbb\x38\x11\x59\x8a\x97\xbf\x32\x3e\xc7\x79\xe9\xf5\x55\x30\x5a\x9b\x31\xa5\x2c\xaf\x5e\x7f\x5c\x2e\xfe\xa3\x8e\x2b\x9b\x61\x3e\x27\xdc\xc5\x59\x26\x22\x16\x13\x37\x62\xf3\x5f\xa2\xb4\x10\x39\xe1\xdd\x3a\xa4\xc6\xdb\x9c\x4d\xd3\x62\x2a\x0e\x9d\x22\x72\xc6\xf1\x94\xc8\xd3\x56\xb3\x9e\x36\xf1\x4f\x12\x92\xc6\xcd\x9b\xa9\x4e\xa2\x3c\x40\xba\x88\x18\x9d\x24\xd3\x6a\x83\x46\xd7\x0f\x37\xb7\x9f\x3e\x5c\x8f\xee\x1f\xde\xbf\xdd\x8a\xa1\x5c\x88\xf1\x79\xf5\xb2\xcf\x88\x3c\x64\x9c\x7d\x25\x51\xfe\x90\xc4\x4d\x9f\x6a\xeb\x2e\xab\x4d\x2f\xed\xf2\x12\x29\x1e\x93\xb4\x3e\x08\x54\x9d\x04\xba\x79\x76\x46\xb2\x77\x42\xb3\xa2\x3a\x90\x9c\xfc\x95\x3b\x1b\xcb\x53\xc7\x32\x91\xbb\xeb\xdb\x3f\xde\x8f\xae\x1f\xde\x8c\x46\x9f\x3e\xff\x7e\x6f\xce\x46\x10\xbe\x48\x22\xf2\x80\xa3\x88\x15\x34\xd7\xa7\xb4\x72\x7a\xa3\xf3\xd1\xe7\x75\xf7\x3c\x03\x69\xa7\x34\x92\xc3\x9c\xe0\xad\x04\x0d\xb7\xf9\x63\x31\x26\x9c\x92\x5c\xf7\x8a\xeb\x05\xe1\x62\x2d\xb3\x72\x87\x6e\xaf\xbe\x7f\x09\x5d\x48\x37\x6e\x4c\x16\xab\x2f\x44\xb7\xef\x31\xce\x62\x75\xf4\x1b\xde\xfe\xea\x74\x1d\x9a\x8c\xcc\xc6\xc5\x2f\x6c\x2e\x3e\xc1\xa9\xd0\x5c\x5d\x1e\xae\x2e\x5f\x0d\x36\xaf\x5f\x6e\xc9\xd9\xd3\x3f\x01\x00\x00\xff\xff\xd6\x48\x34\x93\xce\x86\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 34510, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
