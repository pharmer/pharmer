// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package gce

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x98\x51\x6f\xea\x36\x14\xc7\xdf\xfb\x29\xac\x3c\x6d\x12\x64\x37\xc0\x05\xd4\xb7\x36\x97\xdd\xf5\x4a\x5b\xab\x42\xb7\x87\xe9\x0a\x19\xe7\x90\xf8\xd6\xb1\x33\xdb\xa1\x63\x15\xdf\x7d\x72\x48\x43\x70\x12\x62\x5e\x4a\x73\xce\xdf\xf6\xef\x1c\xff\x9b\xda\xbc\xdf\x20\xe4\x71\x9c\x82\x77\x8b\xbc\x98\x80\x37\x30\x01\xe0\x3b\xef\x16\xfd\x7d\x83\x10\x42\x5e\x04\xbb\x22\x8a\x90\xf7\x0f\xf6\x6e\x10\xfa\x5e\x68\x24\xc4\x54\x70\x55\xe9\xde\x8b\x9f\x55\xc2\xcc\xb7\xc0\x4a\x83\xe4\xe8\x65\x59\x4e\x80\x90\xc7\x04\xc1\xba\xcc\xdf\x83\x7c\x05\x06\x7b\x14\x8a\x9c\xeb\xfd\x00\x2d\x45\xae\x13\x14\x62\x29\x18\xe5\xf8\x34\xe8\x3f\xc1\xe1\xb4\x52\x11\xca\xd5\x10\xb0\xd2\xc1\x70\x53\xc9\xea\x51\xd2\x1a\x8d\xbc\x32\xf8\xbd\xf8\x3c\x0c\xba\xc8\xff\x82\xcb\xe4\xab\x04\xd0\x17\xcc\x18\xa8\x01\x7a\x7c\xee\x03\x7d\x03\xb3\x38\xb6\x90\x8e\xd1\x8d\x2b\x52\x08\x5c\x4b\xcc\x3a\x91\x4c\x0f\x09\x65\xe8\x9e\xe5\xdb\xad\x1a\xa0\x07\xf1\xd6\xdb\x41\x72\x9c\xb3\xc9\x56\x25\xec\xee\x56\x09\xbb\xc1\x55\x62\x7b\x6d\x8f\x17\xb9\x14\x19\xb4\x17\xb5\xd4\x3e\xfa\x9a\x50\xc5\x30\xe5\x03\x74\x0f\x2c\xa6\x79\x7a\xb1\x2a\x28\x66\xab\x9a\x3b\xe8\xc8\x90\xce\x8c\xb3\x47\xee\x14\xc5\xe8\xa7\x15\xa6\x6f\x98\xff\xdc\xb1\x27\x09\xe6\x71\x92\xe3\xca\xe0\x47\xf5\xc5\x02\xb0\xa2\xb8\xb4\xeb\xd9\xae\xd4\xe2\x9b\x8e\x38\xb9\x0e\xfd\x1b\xce\x3a\xc9\x57\xe2\x75\x2f\x06\xa8\x90\xf4\xe3\x72\x21\x75\xd2\xc5\x5c\x4b\x36\xc1\x6b\x49\x9b\xbe\x7a\xd3\x50\xae\x34\xe6\x04\x56\xfb\x0c\x5a\xde\x37\xea\x35\x2f\x5e\x5e\xc1\x50\xa5\x98\xb1\x13\x6d\x04\x8a\x48\x9a\x7d\x94\xd4\x14\x10\xac\x21\x16\x72\x5f\x38\xcd\x4a\x65\x66\xd2\xa0\x7a\x96\x38\x35\xcf\xfe\xac\xb5\xb3\x25\x02\x0f\x86\x86\x34\xc2\x32\x1a\x06\x9d\x1c\x1d\xaa\x33\x98\x32\xdf\xc7\x33\xf6\x67\x9f\x5d\x81\x46\x4e\x40\xa3\xeb\x80\x46\x16\xd0\xcc\x77\xe6\x99\x38\xf1\x4c\xae\xe3\x99\xd8\x1b\xe6\x8c\x33\x77\xc2\x99\x5f\x87\x33\xb7\xf7\xeb\x93\xb3\x7d\xa6\x6e\xfe\x99\x5e\x69\xa0\xa9\x45\x34\x75\x26\x1a\x8f\xdc\x90\xce\x74\x2e\x4c\x63\xdb\x44\xc1\xa8\x0f\x2a\xa1\x71\x92\x42\x7a\xd9\xd3\x2d\xa2\x3a\xce\x6f\x34\x4e\xd0\xef\x90\x9a\xc7\x1e\x57\x07\x63\x47\x9e\x8b\x9e\x6e\x11\x39\xf2\xd8\xae\x1e\x4d\x1d\x79\x2e\x9a\xba\x45\xe4\xc8\x63\xdb\xfa\xf3\xc8\x91\xe7\xb2\xab\xdb\x54\x8e\x44\x0d\x5f\x07\x9f\x26\x8e\x4c\x3d\xbe\x6e\x95\x39\x52\x35\x9c\x3d\xfa\x34\x77\xa0\x22\x59\xde\xef\x6c\x4b\xd4\x20\x0a\x9f\x5e\x7a\x6d\xed\xbb\xd2\xf4\xfa\xda\x12\xb9\xd0\xd8\xa6\x1e\xfb\x2e\xae\x36\x0b\xf5\xba\xda\x12\xb9\xd0\xd8\x96\x9e\xf9\x2e\x9e\x36\x0b\xf5\x7b\xda\x56\xb9\xf0\x34\x0d\x3d\xf1\x5d\x1c\x6d\xd6\x72\x70\x74\x43\xe6\xc2\xd4\xb4\xf3\xfc\xc3\x41\xd5\x59\x8d\x48\x88\x80\x6b\x8a\x59\xcb\x49\x2d\x93\x62\x47\x23\x90\x66\x91\xaf\x42\xc4\x0c\x42\x26\xf2\xda\x3f\x84\x88\xaa\x8c\xe1\xfd\xaf\x42\xa6\x58\x1b\xd5\x0f\x25\x6a\xc7\x4f\xcc\xb9\xd0\xc5\x11\xd5\x4c\xfe\x7e\x3a\x4a\x66\x09\x96\x29\x48\x1f\x67\x99\x22\x22\x02\x9f\x88\xf4\x17\xc2\x72\x73\xc1\x18\x9e\x90\xcc\x8c\xf5\x13\x68\xeb\xb0\x88\xab\x6b\x87\x28\x2d\x24\x8e\xc1\x1e\x56\x8e\x3a\x54\xfc\x5b\x0a\x2c\x3a\x3f\x3f\x9f\x8a\x38\x5e\xbb\x89\xe0\x5b\x1a\x17\x0d\x0a\x17\xeb\xa7\xe7\xc7\x6f\x8b\x70\xb5\x7e\xf8\x52\x63\x30\x13\x09\x99\x96\x17\xf6\x75\x26\xc5\x0f\x20\x7a\x4d\xa3\x73\x4d\xd1\xba\xdb\xa2\xe9\x26\x6f\x4f\xc1\xf0\x06\xd8\x69\x23\x50\xb1\x13\xe8\xe9\x28\x46\xb6\x9a\xf2\x2c\x2f\x36\x44\xc3\xbf\xda\xab\x32\x87\x81\x63\x21\xcb\xc5\xf3\x9f\x0f\xe1\x62\x7d\x17\x86\x8f\x2f\x7f\xac\xba\xab\x51\x20\x77\x94\xc0\x1a\x13\x62\xae\x4c\xed\x25\x95\xa2\xbb\x36\x4d\x7b\x5d\xcb\xe3\x08\xd4\x3a\xe4\xac\x38\x2c\x01\xd7\x0a\x2c\x7f\xb3\xaf\x24\xaf\xf9\x06\x24\x07\x0d\x27\x23\x7a\x3b\x90\xea\xec\x1b\x91\x7a\x53\x3e\xb2\x66\x99\xc0\x9f\xf9\x93\xba\xa9\xac\xbf\xd1\x46\xfe\xf8\x75\xcc\x59\x87\x23\x30\x21\x2d\x73\x68\xb0\x1e\x3f\x0d\xf1\xe1\xe6\xf0\x7f\x00\x00\x00\xff\xff\x8c\x18\x61\x10\xe0\x11\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 4576, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
