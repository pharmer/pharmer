// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package gce

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x98\xdf\x72\xe2\x36\x14\xc6\xef\x79\x0a\x8d\xaf\xda\x19\x70\xc3\x9f\x25\x4c\xee\x12\x2f\xdd\x66\x67\xda\x64\x02\xd9\x5e\x74\x76\x18\x21\x1f\x6c\x6d\x64\xc9\x2b\xc9\xa4\x34\x93\x77\xef\x48\x10\x63\x64\x1b\x8b\x5c\x24\xf8\x9c\x4f\xd2\xef\x1c\x7d\x31\xb2\xdf\x7a\x08\x05\x1c\x67\x10\xdc\xa0\x20\x21\x10\xf4\x4d\x00\xf8\x36\xb8\x41\xff\xf4\x10\x42\x28\x88\x61\x6b\xa3\x08\x05\x3f\xf1\xc7\xa7\x5c\x8a\x38\xe8\x21\xf4\xdd\xea\x25\x24\x54\x70\x55\x8e\x79\xb3\xbf\xcb\x84\x99\x7b\x8e\x95\x06\xc9\xd1\xf3\xe2\x30\x05\x42\x01\x13\x04\xeb\x43\xfe\x0e\xe4\x0b\x30\xd8\xa1\x48\x14\x5c\xef\xfa\x68\x21\x0a\x9d\xa2\x08\x4b\xc1\x28\xc7\xc7\x41\xff\x09\x0e\xc7\x95\x6c\xa8\x50\x03\xc0\x4a\x0f\x07\xeb\x52\x56\x8d\x92\xc6\xa8\xc5\x37\x3f\xdf\xed\xdf\xf7\x7e\x1b\xf9\xdf\x70\x9e\x7c\x99\x02\xfa\x8c\x19\x03\xd5\x47\x0f\x4f\x5d\xa0\xaf\x60\x16\xc7\x0e\xd2\x3e\xba\xf6\x45\x8a\x80\x6b\x89\x59\x2b\x92\xe9\x21\xa1\x0c\xdd\xb1\x62\xb3\x51\x7d\x74\x2f\x5e\x3b\x3b\x48\xf6\x73\xd6\xd9\xca\x84\xdb\xdd\x32\xe1\x36\xb8\x4c\x6c\x2e\xed\xf1\xbc\x90\x22\x87\xe6\xa2\x16\x3a\x44\x5f\x52\xaa\x18\xa6\xbc\x8f\xee\x80\x25\xb4\xc8\xce\x56\x05\x76\xb6\xb2\xb9\xfd\x96\x0c\x69\xcd\x78\x7b\xe4\x56\x51\x8c\x7e\x59\x62\xfa\x8a\xf9\xaf\x2d\x7b\x92\x62\x9e\xa4\x05\x2e\x0d\xbe\x57\x9f\x2d\x00\x2b\x8a\x0f\x76\x3d\xd9\x95\x4a\x7c\xdd\x12\x27\x97\xa1\x7f\xc5\x79\x2b\xf9\x52\xbc\xec\x44\x1f\x59\x49\x37\x2e\x17\x52\xa7\x6d\xcc\x95\x64\x1d\xbc\x92\x74\xe9\xcb\x3b\x0d\xe5\x4a\x63\x4e\x60\xb9\xcb\xa1\xe1\x7e\xa3\x5e\x0a\x7b\x23\x1b\x0e\x54\x86\x19\x3b\xd2\xc6\xa0\x88\xa4\xf9\x47\x49\x75\x01\xc1\x1a\x12\x21\x77\xd6\x69\x4e\x2a\x37\x93\x0e\xcb\x6b\x89\x33\x73\x1d\x5e\x37\x76\xf6\x80\xc0\x87\x03\x43\x1a\x63\x19\x0f\x86\xad\x1c\x2d\xaa\x13\x98\x43\xbe\x8b\x67\x1c\x5e\x7f\xf2\x05\x1a\x79\x01\x8d\x2e\x03\x1a\x39\x40\xd7\xa1\x37\xcf\xc4\x8b\x67\x72\x19\xcf\xc4\xdd\x30\x6f\x9c\x99\x17\xce\xec\x32\x9c\x99\xbb\x5f\x57\xde\xf6\x99\xfa\xf9\x67\x7a\xa1\x81\xa6\x0e\xd1\xd4\x9b\x68\x3c\xf2\x43\x3a\xd1\xf9\x30\x8d\x5d\x13\x0d\x47\x5d\x50\x29\x4d\xd2\x0c\xb2\xf3\x9e\x6e\x10\x55\x71\xfe\xa0\x49\x8a\xfe\x84\xcc\x5c\x76\xb8\x7a\x38\xf6\xe4\x39\xeb\xe9\x06\x91\x27\x8f\xeb\xea\xd1\xd4\x93\xe7\xac\xa9\x1b\x44\x9e\x3c\xae\xad\x3f\x8d\x3c\x79\xce\xbb\xba\x49\xe5\x49\x54\xf3\xf5\xf0\x6a\xe2\xc9\xd4\xe1\xeb\x46\x99\x27\x55\xcd\xd9\xa3\xab\x99\x07\x15\xc9\x8b\x6e\x67\x3b\xa2\x1a\x51\xf4\xf8\xdc\x69\xeb\xd0\x97\xa6\xd3\xd7\x8e\xc8\x87\xc6\x35\xf5\x38\xf4\x71\xb5\x59\xa8\xd3\xd5\x8e\xc8\x87\xc6\xb5\xf4\x75\xe8\xe3\x69\xb3\x50\xb7\xa7\x5d\x95\x0f\x4f\xdd\xd0\x93\xd0\xc7\xd1\x66\x2d\x0f\x47\xd7\x64\x3e\x4c\x75\x3b\xcf\x3e\x1c\x54\x9e\xd5\x88\x84\x18\xb8\xa6\x98\x35\x9c\xd4\x72\x29\xb6\x34\x06\x69\x16\xf9\x22\x44\xc2\x20\x62\xa2\xa8\x7c\x21\xc4\x54\xe5\x0c\xef\x7e\x17\x32\xc3\xda\xa8\x7e\x28\x51\x39\x7e\x62\xce\x85\xb6\x47\x54\x33\xf9\xdb\xf1\x28\x99\xa7\x58\x66\x20\x43\x9c\xe7\x8a\x88\x18\x42\x22\xb2\xdf\x08\x2b\xcc\x03\xc6\xe0\x88\x64\x66\xac\x9e\x40\x1b\x87\xc5\x5c\x5d\x3a\x44\x69\x21\x71\x02\xee\xb0\xc3\xa8\xf7\x92\x7f\x43\x81\xc5\xa7\xe7\xe7\x63\x11\xfb\x47\x70\x22\xf8\x86\x26\xb6\x41\xd1\x7c\xf5\xf8\xf4\xf0\x75\x1e\x2d\x57\xf7\x9f\x2b\x0c\x66\x22\x21\xb3\xc3\xc3\xfb\x2a\x97\xe2\x07\x10\xbd\xa2\xf1\xa9\xc6\xb6\xee\xc6\x36\xdd\xe4\xdd\x29\x18\x5e\x03\x3b\x6e\x04\xb2\x3b\x81\x1e\xf7\x62\xe4\xaa\x29\xcf\x0b\xbb\x21\x1a\xfe\xd5\x41\x99\x79\xef\x7b\x16\xb2\x98\x3f\x7d\xbb\x8f\xe6\xab\xdb\x28\x7a\x78\xfe\x6b\xd9\x5e\x8d\x02\xb9\xa5\x04\x56\x98\x10\xf3\xc8\xd4\x5c\xd2\x41\x74\xdb\xa4\x69\xae\x6b\xb1\x1f\x81\x1a\x87\x9c\x14\x87\x25\xe0\x4a\x81\x87\x4f\xee\x23\xc9\x4b\xb1\x06\xc9\x41\x83\xfa\x06\x52\x35\xbf\x07\xd9\xee\x33\x66\xe2\x61\x38\x0b\xaf\x5a\xff\x27\x9d\xec\xfe\x45\x4c\xc5\xdd\x31\x98\x80\x96\x05\x54\x8c\xf8\x13\xd7\x63\xf6\x05\xcd\x3e\xda\xab\xf2\x5b\xee\xde\xfb\xff\x01\x00\x00\xff\xff\xfa\xeb\xf9\x03\xf8\x11\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 4600, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
