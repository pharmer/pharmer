// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package gce

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x98\xcf\x6e\xe3\x36\x10\xc6\xef\x79\x0a\x42\xa7\x16\xb0\xd5\xf5\x9f\xb5\x8d\xdc\x12\xad\xbb\xcd\x02\x6d\x82\xd8\x69\x0f\xc5\xc2\xa0\xa9\xb1\xc4\x0d\x45\xaa\x24\xe5\xd4\x0d\xfc\xee\x05\x65\x45\x96\x28\xc9\xa2\x2f\x71\x34\xf3\x91\xfc\xcd\xf0\x8b\x42\xfa\xfd\x06\x21\x8f\xe3\x04\xbc\x5b\xe4\x45\x04\xbc\x81\x09\x00\xdf\x7b\xb7\xe8\xef\x1b\x84\x10\xf2\x42\xd8\xe7\x51\x84\xbc\x7f\xb0\x77\x83\xd0\xf7\x5c\x23\x21\xa2\x82\xab\x52\xf7\x9e\xff\x2c\x13\x66\xbe\x25\x56\x1a\x24\x47\x2f\xab\x62\x02\x84\x3c\x26\x08\xd6\x45\xfe\x1e\xe4\x2b\x30\x38\xa0\x40\x64\x5c\x1f\x06\x68\x25\x32\x1d\xa3\x00\x4b\xc1\x28\xc7\xe7\x41\xff\x09\x0e\xe7\x95\xf2\x50\xa6\x86\x80\x95\x1e\x0d\xb7\xa5\xac\x1a\x25\xad\xd1\xd0\x2b\x82\xdf\xf3\xcf\xe3\xa0\x8b\xfc\x2f\xb8\x4c\xbe\x8e\x01\x7d\xc1\x8c\x81\x1a\xa0\xc7\xe7\x3e\xd0\x37\x30\x8b\x63\x0b\xe9\x14\xdd\xba\x22\x05\xc0\xb5\xc4\xac\x13\xc9\xf4\x90\x50\x86\xee\x59\xb6\xdb\xa9\x01\x7a\x10\x6f\xbd\x1d\x24\xa7\x39\x9b\x6c\x65\xc2\xee\x6e\x99\xb0\x1b\x5c\x26\x76\xd7\xf6\x78\x99\x49\x91\x42\x7b\x51\x2b\xed\xa3\xaf\x31\x55\x0c\x53\x3e\x40\xf7\xc0\x22\x9a\x25\x17\xab\x82\x7c\xb6\xb2\xb9\x83\x8e\x0c\xe9\xcc\x38\x7b\xe4\x4e\x51\x8c\x7e\x5a\x63\xfa\x86\xf9\xcf\x1d\x7b\x12\x63\x1e\xc5\x19\x2e\x0d\x7e\x52\x5f\x2c\x00\x2b\x8a\x0b\xbb\xd6\x76\xa5\x12\xdf\x76\xc4\xc9\x75\xe8\xdf\x70\xda\x49\xbe\x16\xaf\x07\x31\x40\xb9\xa4\x1f\x97\x0b\xa9\xe3\x2e\xe6\x4a\xb2\x09\x5e\x49\xda\xf4\xe5\x9b\x86\x72\xa5\x31\x27\xb0\x3e\xa4\xd0\xf2\xbe\x51\xaf\x59\xfe\xf2\x1a\x0d\x55\x82\x19\x3b\xd3\x86\xa0\x88\xa4\xe9\x47\x49\x4d\x01\xc1\x1a\x22\x21\x0f\xb9\xd3\xac\x54\x6a\x26\x1d\x95\xcf\x12\x27\xe6\xd9\x9f\xb7\x76\xb6\x40\xe0\xa3\xa1\x21\x0d\xb1\x0c\x87\xa3\x4e\x8e\x0e\x55\x0d\xa6\xc8\xf7\xf1\x4c\xfc\xf9\x67\x57\xa0\xb1\x13\xd0\xf8\x3a\xa0\xb1\x05\x34\xf7\x9d\x79\xa6\x4e\x3c\xd3\xeb\x78\xa6\xf6\x86\x39\xe3\x2c\x9c\x70\x16\xd7\xe1\x2c\xec\xfd\xfa\xe4\x6c\x9f\x99\x9b\x7f\x66\x57\x1a\x68\x66\x11\xcd\x9c\x89\x26\x63\x37\xa4\x9a\xce\x85\x69\x62\x9b\x68\x34\xee\x83\x8a\x69\x14\x27\x90\x5c\xf6\x74\x8b\xa8\x8a\xf3\x1b\x8d\x62\xf4\x3b\x24\xe6\xb1\xc7\xd5\xa3\x89\x23\xcf\x45\x4f\xb7\x88\x1c\x79\x6c\x57\x8f\x67\x8e\x3c\x17\x4d\xdd\x22\x72\xe4\xb1\x6d\xfd\x79\xec\xc8\x73\xd9\xd5\x6d\x2a\x47\xa2\x86\xaf\x47\x9f\xa6\x8e\x4c\x3d\xbe\x6e\x95\x39\x52\x35\x9c\x3d\xfe\xb4\x70\xa0\x22\x69\xd6\xef\x6c\x4b\xd4\x20\x0a\x9e\x5e\x7a\x6d\xed\xbb\xd2\xf4\xfa\xda\x12\xb9\xd0\xd8\xa6\x9e\xf8\x2e\xae\x36\x0b\xf5\xba\xda\x12\xb9\xd0\xd8\x96\x9e\xfb\x2e\x9e\x36\x0b\xf5\x7b\xda\x56\xb9\xf0\x34\x0d\x3d\xf5\x5d\x1c\x6d\xd6\x72\x70\x74\x43\xe6\xc2\xd4\xb4\xf3\xe2\xc3\x41\xe5\x59\x8d\x48\x08\x81\x6b\x8a\x59\xcb\x49\x2d\x95\x62\x4f\x43\x90\x66\x91\xaf\x42\x44\x0c\x02\x26\xb2\xca\x3f\x84\x90\xaa\x94\xe1\xc3\xaf\x42\x26\x58\x1b\xd5\x0f\x25\x2a\xc7\x4f\xcc\xb9\xd0\xf9\x11\xd5\x4c\xfe\x7e\x3e\x4a\xa6\x31\x96\x09\x48\x1f\xa7\xa9\x22\x22\x04\x9f\x88\xe4\x17\xc2\x32\x73\xc1\x18\x9e\x91\xcc\x8c\xd5\x13\x68\xeb\xb0\x90\xab\x6b\x87\x28\x2d\x24\x8e\xc0\x1e\x56\x8c\x3a\x96\xfc\x3b\x0a\x2c\xac\x9f\x9f\xcf\x45\x9c\xae\xdd\x44\xf0\x1d\x8d\xf2\x06\x05\xcb\xcd\xd3\xf3\xe3\xb7\x65\xb0\xde\x3c\x7c\xa9\x30\x98\x89\x84\x4c\x8a\x0b\xfb\x26\x95\xe2\x07\x10\xbd\xa1\x61\x5d\x93\xb7\xee\x36\x6f\xba\xc9\xdb\x53\x30\xbc\x05\x76\xde\x08\x94\xef\x04\x7a\x3a\x89\x91\xad\xa6\x3c\xcd\xf2\x0d\xd1\xf0\xaf\xf6\xca\xcc\x71\xe0\x58\xc8\x6a\xf9\xfc\xe7\x43\xb0\xdc\xdc\x05\xc1\xe3\xcb\x1f\xeb\xee\x6a\x14\xc8\x3d\x25\xb0\xc1\x84\x98\x2b\x53\x7b\x49\x85\xe8\xae\x4d\xd3\x5e\xd7\xea\x34\x02\xb5\x0e\xa9\x15\x87\x25\xe0\x4a\x81\xc5\x6f\xf6\x95\xe4\x35\xdb\x82\xe4\xa0\xe1\x6c\x44\x6f\x0f\x52\xd5\xbe\x11\xa9\x36\xe5\x23\x6b\x96\x19\xf9\x73\x7f\x5a\x35\x95\xf5\x37\xda\xc8\x6b\x21\x58\xdd\xf1\x05\x02\x0e\x93\xf3\x80\xb6\x5d\x29\xbe\xc9\xa9\x0d\x0c\xc1\x84\xb4\xcc\xa0\x51\xe6\xe9\xd3\x14\x7b\xbc\x39\xfe\x1f\x00\x00\xff\xff\xc1\x65\x2f\x32\x1b\x12\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 4635, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
