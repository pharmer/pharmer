// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package gce

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x98\x51\x73\xda\x38\x17\x86\xef\xf3\x2b\x34\xbe\xfa\xbe\x19\xe3\x02\xa1\x49\xa6\x77\xc4\xc9\x76\xe9\xa4\x2d\x0b\xb4\xbd\xd8\xe9\x64\x0e\xf2\xc1\x56\x91\x25\xaf\x24\x27\x4b\x33\xf9\xef\x3b\x32\x8e\x31\xc6\x06\x71\xd3\x06\x9d\x57\x47\x8f\xce\x79\x11\x96\x5f\x2e\x08\xf1\x04\xa4\xe8\x7d\x20\x5e\x4c\xd1\xf3\xed\x00\x8a\x27\xef\x03\xf9\xfb\x82\x10\x42\xbc\x08\x9f\x8a\x51\x42\xbc\x7f\xc0\xbb\x20\xe4\x67\xa1\x51\x18\x33\x29\x74\xa5\x7b\x29\xfe\xad\x02\x36\xdf\x3d\x68\x83\x4a\x90\x6f\xf3\x32\x01\x21\x1e\x97\x14\x4c\x19\xbf\x45\xb5\x46\x8e\x1b\x12\xca\x5c\x98\x8d\x4f\xe6\x32\x37\x09\x09\x41\x49\xce\x04\xec\x26\xfd\x96\x02\x77\x2b\x15\x43\xb9\xee\x21\x68\x33\xe8\x2d\x2b\x59\x7d\x94\xb6\x8e\x46\x5e\x39\xf8\xb3\xf8\xff\xd5\xef\x22\xff\x81\xc7\xc9\x17\x09\x92\x3b\xe0\x1c\xb5\x4f\xbe\xce\x4e\x81\x3e\xa3\x5d\x1c\x1a\x48\xdb\xd1\xa5\x2b\x52\x88\xc2\x28\xe0\x9d\x48\xb6\x86\x94\x71\x72\xcb\xf3\xd5\x4a\xfb\x64\x22\x9f\x4f\x56\x90\x6e\x73\x1e\xb2\x55\x81\x66\x75\xab\x40\xb3\xc0\x55\x60\x75\x6e\x8d\xef\x73\x25\x33\x6c\xdf\xd4\xdc\x04\xe4\x63\xc2\x34\x07\x26\x7c\x72\x8b\x3c\x66\x79\x7a\x74\x57\x58\x64\xab\x8a\xeb\x77\x44\x68\x67\xc4\xd9\x23\x63\xcd\x80\xfc\x6f\x01\xec\x19\xc4\xff\x3b\x7a\x92\x80\x88\x93\x1c\x2a\x83\x6f\xd5\x47\x37\x00\x9a\x41\x69\xd7\xbd\xae\xd4\xc6\x97\x1d\xe3\xf4\x3c\xf4\x4f\x90\x75\x92\x2f\xe4\x7a\x23\x7d\x52\x48\x4e\xe3\x0a\xa9\x4c\xd2\xc5\x5c\x0b\x1e\x82\xd7\x82\x4d\xfa\xea\xa4\x61\x42\x1b\x10\x14\x17\x9b\x0c\x5b\xce\x1b\xbd\xce\x8b\xc3\x6b\xd0\xd3\x29\x70\xbe\xa3\x8d\x50\x53\xc5\xb2\xb7\x2d\x1d\x0a\x28\x18\x8c\xa5\xda\x14\x4e\x6b\x84\x32\x9b\x74\x50\x7d\x56\x90\xda\xcf\xc1\x75\x6b\x65\x4b\x04\x31\xe8\x59\xd2\x08\x54\xd4\x1b\x74\x72\x74\xa8\xf6\x60\xca\xf8\x29\x9e\xcb\xe0\xfa\xbd\x2b\xd0\xd0\x09\x68\x78\x1e\xd0\xb0\x01\x74\x1d\x38\xf3\x8c\x9c\x78\x46\xe7\xf1\x8c\x9a\x0d\x73\xc6\xb9\x71\xc2\xb9\x39\x0f\xe7\xa6\xd9\xaf\xbe\xb3\x7d\xae\xdc\xfc\x73\x75\xa6\x81\xae\x1a\x44\x57\xce\x44\x97\x43\x37\xa4\x3d\x9d\x0b\xd3\x65\xd3\x44\x83\xe1\x29\xa8\x84\xc5\x49\x8a\xe9\x71\x4f\xb7\x88\xea\x38\x7f\xb2\x38\x21\x9f\x31\xb5\x1f\x4f\xb8\x7a\x70\xe9\xc8\x73\xd4\xd3\x2d\x22\x47\x9e\xa6\xab\x87\x57\x8e\x3c\x47\x4d\xdd\x22\x72\xe4\x69\xda\xfa\xfd\xd0\x91\xe7\xb8\xab\xdb\x54\x8e\x44\x07\xbe\x1e\xf4\x47\x8e\x4c\x27\x7c\xdd\x2a\x73\xa4\x3a\x70\xf6\xb0\x7f\xe3\x40\x45\xb3\xfc\xb4\xb3\x1b\xa2\x03\xa2\x70\xfa\xed\xa4\xad\x03\x57\x9a\x93\xbe\x6e\x88\x5c\x68\x9a\xa6\xbe\x0c\x5c\x5c\x6d\x17\x3a\xe9\xea\x86\xc8\x85\xa6\x69\xe9\xeb\xc0\xc5\xd3\x76\xa1\xd3\x9e\x6e\xaa\x5c\x78\x0e\x0d\x3d\x0a\x5c\x1c\x6d\xd7\x72\x70\xf4\x81\xcc\x85\xe9\xd0\xce\x37\x6f\x0e\xaa\x9e\xd5\xa8\xc2\x08\x85\x61\xc0\x5b\x9e\xd4\x32\x25\x9f\x58\x84\xca\x2e\xf2\x51\xca\x98\x63\xc8\x65\x5e\xfb\x41\x88\x98\xce\x38\x6c\xfe\x90\x2a\x05\x63\x55\xbf\xb4\xac\x3d\x7e\x82\x10\xd2\x14\x8f\xa8\x36\xf9\xcb\xee\x51\x32\x4b\x40\xa5\xa8\x02\xc8\x32\x4d\x65\x84\x01\x95\xe9\x3b\xca\x73\x7b\xc1\xe8\xed\x90\x6c\xc6\xfa\x13\x68\xeb\xb4\x48\xe8\x73\xa7\x68\x23\x15\xc4\xd8\x9c\x56\xce\x7a\xad\xf8\x57\x0c\x79\xb4\xff\xfc\xbc\xdb\xc4\xf6\xda\x4d\xa5\x58\xb1\xb8\x28\x50\x78\xff\x38\x9d\x7d\xfd\x74\x1f\x2e\x1e\x27\x77\x35\x06\x9b\x48\xaa\xb4\xbc\xb0\x3f\x66\x4a\xfe\x42\x6a\x1e\x59\xb4\xaf\x29\x4a\xf7\xa1\x28\xba\x8d\x37\x53\x70\x58\x22\xdf\x35\x82\x14\x9d\x20\xd3\xad\x98\x34\xd5\x4c\x64\x79\xd1\x10\x83\xff\x1a\xaf\x8a\xbc\xfa\x8e\x1b\x99\xdf\xcf\xbe\x4f\xc2\xfb\xc7\x71\x18\x7e\xfd\xf6\x65\xd1\xbd\x1b\x8d\xea\x89\x51\x7c\x04\x4a\xed\x95\xa9\x7d\x4b\xa5\x68\xdc\xa6\x69\xdf\xd7\x7c\x3b\x83\xb4\x4e\xd9\xdb\x1c\x28\x84\xda\x06\xcb\xbf\x9a\x57\x92\x75\xbe\x44\x25\xd0\xa0\xfe\x8e\x4a\xb7\xbf\x07\x79\xda\x46\x6c\xe2\x41\x70\x1d\x74\x9f\xa1\x8d\xe8\xf6\xe5\x4b\xcd\xdd\x11\xda\x01\xa3\x72\x3c\x70\x54\x84\x2b\xc8\xb9\x99\x67\x48\xf7\xe7\x94\xe6\x9f\x64\x33\x10\x71\xf1\x72\x67\xd0\x0f\x86\xa3\x51\xd0\x0f\xfa\xef\x6a\x87\x11\xa9\xaa\x19\xb6\xcd\xe8\xb7\xe8\x81\x17\x17\x45\xfc\x22\x23\x0c\x59\xa4\x74\x09\x57\xbf\x50\x0b\x58\xf2\xb7\x8c\x9f\xa5\x60\x46\x2a\x26\x0a\x37\xbc\x7d\x71\xbc\x2e\xf9\x83\x8c\xe3\xad\xb6\x35\xa9\x5d\xb5\x53\xc2\xb7\x81\x3b\xd4\x86\x89\xea\x2e\xfb\xb6\x64\x0f\x39\x68\xc3\xa8\x46\x50\x34\xd9\x03\xa8\x07\xca\xec\x33\xcc\x38\xa3\xa0\xeb\xd7\x2e\x5b\x71\xa1\xad\x99\x50\x4d\xa6\xb5\x1a\x0d\xfa\xde\xbe\xe6\x4e\xa6\xc0\x8a\xd5\xcb\x4e\x04\xb6\x68\x7c\xaf\x8e\x51\xca\xb4\x75\x48\x28\x85\x51\xb2\x30\xed\x17\x48\x51\x67\x40\xf1\x81\xad\x90\x6e\x28\x47\xff\x81\xa5\xcc\x14\x3d\x51\xfe\x7c\xcf\xf8\xfe\xd4\x3a\x4c\x1b\x14\xe6\xbb\xe4\x79\x8a\x0f\xd6\xfb\xfe\x5d\xe9\x89\xed\xa1\x14\x72\xd0\xda\x9f\xa1\x96\xb9\xa2\xf8\x57\x2e\xcd\xde\x0d\x3d\x85\x36\x9b\x5c\x15\x6d\x1f\x8e\xea\x4a\x81\xe6\x59\xaa\xf5\xb4\x76\x86\xaf\x38\x08\x81\xbc\xb3\x95\x63\x8e\xca\x74\x35\x5d\xda\xca\x7a\x11\x2e\x59\xed\x0d\x43\x6d\x1d\xc9\x19\xdd\xd4\x57\x13\x52\xb4\xb8\xe6\x07\x2e\x13\x29\xd7\x0b\xb9\x46\x31\xce\x4d\x22\xba\x8c\x33\x5b\x02\xb5\x82\xdf\x5d\x82\xf1\x74\xa2\x8b\xce\xde\x82\x66\x74\x9c\x47\xcc\x74\x4a\xcb\xfd\x8c\x8d\x61\xf4\x50\x94\x49\xce\xe7\x1c\x31\x9b\x08\x83\xea\xa9\xf8\x39\xb8\x6c\x75\xf2\x34\x5f\x72\x46\x0b\x2b\xd5\xbf\xdf\xbb\xd3\xe6\xe2\xf5\xbf\x00\x00\x00\xff\xff\x85\xf1\x23\xbf\xa2\x15\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 5538, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
