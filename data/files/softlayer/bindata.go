// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package softlayer

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x5c\xdf\x53\xdb\x48\x12\x7e\xe7\xaf\x98\xf2\x13\x57\xa5\x70\xd6\xcf\x15\xfb\xe6\x25\x24\xcb\xb2\x64\xb9\x40\xee\x2e\x75\x95\xa2\x26\xd2\x60\x2b\x96\x66\x7c\x33\x23\xc0\x49\xf1\xbf\x6f\x49\x18\xff\xd0\x88\x1e\x4d\x68\xaa\x52\x79\x49\x60\x24\x4f\x7f\x3d\xdd\xfd\x7d\xee\xc6\xf2\xb7\x3d\x42\x46\x9c\x56\x6c\xf4\x2b\x19\x29\x71\xad\x4b\xba\x64\x72\xe4\x35\xcb\x8c\xdf\x8c\x7e\x25\xff\xdb\x23\x84\x90\x51\xce\x6e\xda\x55\x42\x46\xff\xa7\xa3\x3d\x42\x3e\xb5\xf7\x48\x36\x2d\x04\x57\xeb\xfb\xbe\xb5\xff\x12\x32\x2a\x45\x46\x75\x21\x78\xb3\xef\xa4\x52\x9a\xc9\x9c\x56\x1e\x79\xc7\xf4\x8c\xc9\x92\xf2\x5c\xad\xb6\x5b\x6f\xd2\xdc\x49\xab\xad\xe5\xaf\x82\xb3\xcd\xce\xed\x12\xad\xd4\xd8\x5f\xdf\xb1\x5a\x08\x47\xab\xdf\x3f\xb5\xff\xdf\x7b\x4f\x23\x39\x9a\x31\xce\x69\xe1\x91\x13\x9e\x17\xb4\x0f\x41\x36\x63\x20\x82\x6c\xc6\xc6\xfe\x70\x83\xaf\x69\x59\x52\xe5\x91\x0f\x17\x93\x3e\x6b\x39\x2d\x41\x6b\x39\x2d\x77\xfd\x6d\x16\xe2\xee\x42\xd2\x5d\x38\xec\x2c\xf8\xe3\xe1\x88\xdf\x48\xca\xe7\xd7\xb5\xd4\x1e\x79\xcb\x64\x45\xf9\xb2\x0f\xf8\xb5\xa4\x20\xf0\x6b\x49\xc7\xc1\x70\xa3\xbf\x0b\x3e\x25\xa7\x82\x4f\x3d\x72\x34\x2b\x78\x6f\x64\x66\xf3\x29\x68\x72\x36\x9f\xba\x99\xac\x95\x16\xfc\xc9\xd0\xcc\x44\x0d\x9b\x13\xb5\x8b\xb9\x3f\x05\xcf\x5b\x6b\xa7\x7d\xc6\x4a\xc1\x41\x63\xa5\xe0\x2e\xc6\xce\x58\xf9\x59\xd4\x92\x33\x8f\x4c\x6a\xa5\x25\x2d\xfb\x93\xbd\x62\x70\xfa\x55\xac\x74\x49\xf6\x7f\xd5\x4c\x32\x4d\xa5\xf0\xc8\x19\xbb\x2b\x32\xd1\x6f\xf3\xce\x62\xf3\xce\xc5\xe6\x59\x51\x52\xee\x91\x13\x4d\xcb\xde\x44\xad\x0a\x8b\x8b\x85\x93\x8b\x67\x82\x6b\xc9\x68\xe9\x91\x23\xca\x69\xde\x7f\xaa\x96\x60\x56\x82\xbb\x98\xfc\x4b\x95\xc2\x23\xef\x84\xbc\xa5\xbd\x1e\x0a\x05\x7b\x28\x94\x93\x87\xe7\x54\x16\xca\x23\x0d\x0d\x64\xac\xcf\xde\x82\x4a\xd0\xde\x82\x4a\x17\x7b\x17\x94\x93\x3f\x84\x62\x4f\x16\xa2\xfa\x92\x81\xf6\xd4\x97\x6c\x97\x23\x9b\x05\x07\x4d\xb8\xa0\x82\x9c\xd3\xba\x39\xe4\xa7\x10\x50\x01\x23\xa0\xc2\xc9\x63\x26\xea\xd2\x23\xa7\x42\xb2\xde\xfc\x51\xcc\x62\x8e\x39\x9a\xa3\x5a\x97\xc0\xf9\x32\x98\xca\x15\xa3\x4e\xe6\x0a\x3e\xa5\x0b\x21\x99\x47\xd6\x3f\xf6\x9a\xe5\x30\x9d\x2b\x3e\x75\x32\xbb\xcc\x39\x5b\x5a\xf8\x4e\x2d\x73\xd8\xe6\x32\x77\xb1\x79\x29\xe6\x4b\xe1\x91\x3f\xe8\x82\xf2\x3e\x73\x5a\xcc\x41\x73\x5a\xcc\x5d\x58\xfd\x52\x48\xc1\xb5\x80\xa8\x47\x0b\xb8\x36\xb5\x70\xaa\xcd\xff\x50\x35\x2b\xf8\xb4\x95\xc9\xd7\x47\x4f\x66\xd0\x6d\x0e\x57\xe8\x6d\xde\xa9\xd0\x66\x21\xea\xc0\x58\xbf\xa5\x2c\xb8\xd2\x0d\xf7\x5c\x2e\x17\xac\xe7\x8d\xa5\x9a\xd7\x8d\x4d\x3f\xf3\xab\x8d\xd1\x9c\xa9\x4c\x16\x8b\x47\xdc\x3e\xc9\x84\x64\x84\xf2\x9c\xf8\x6f\x7f\x23\xef\x27\x67\x9b\x5b\x33\xaa\xd9\x54\xc8\xe5\xea\x3d\x80\x2c\x97\xe4\xdf\x85\xd4\x35\x2d\xc9\x05\x93\x37\x6c\xeb\x00\xb3\x45\x63\xca\xdf\x78\x4c\xab\xe6\xf7\xde\x63\x5b\xc3\x0a\x06\xc1\x0a\xd0\x61\x05\x30\xac\x68\x10\xac\x08\x1d\x56\x04\xc3\x4a\x06\xc1\x4a\xd0\x61\x25\x30\xac\x74\x10\xac\x14\x1d\x56\x0a\xc3\xf2\x87\x25\x97\x8f\x9f\x5d\xbe\x25\xbd\xfc\x61\x81\xf4\xf1\x23\xe9\x83\xa1\x0c\x20\x9a\x08\x5a\x60\x0a\x89\x27\x02\x17\x9e\x08\x20\x9e\xd8\xc6\xf5\xfc\x50\x76\x71\x81\x91\x0c\x20\xa2\xd8\xc6\xf5\x7c\xa6\xe8\xe2\x02\x99\x22\x80\x98\x62\x1b\xd7\xf3\x13\xac\x8b\xcb\x92\x5f\x00\x55\x6c\xe3\x7a\x3e\x57\x74\x71\x81\x5c\x11\x80\x5c\xb1\x93\xf8\xf8\x19\x06\x93\x45\x00\x92\xc5\x0e\x34\xfc\x60\xc2\x6c\x11\x41\x6c\x11\xa1\xb2\x45\xe4\xc2\x16\x11\xc4\x16\x11\x2a\x5b\x74\x71\x81\xa1\x8c\x20\xb6\x88\x50\xd9\xa2\x8b\x0b\x64\x8b\x08\x62\x8b\x08\x95\x2d\xba\xb8\x2c\xf9\x05\xb0\x45\x84\xca\x16\x5d\x5c\x20\x5b\x44\x20\x5b\x44\xb8\x6c\x61\x64\xbe\x25\xc5\x20\xb6\x88\x70\xd9\xc2\x80\x66\x89\x66\x38\xf0\xd4\x42\xfc\x53\x0b\x6d\x85\x39\x30\xd3\x22\xfc\x54\x8b\x2c\xb9\x96\x0c\x24\x8d\x04\x9f\x35\x12\x90\x36\x52\x88\xfe\x53\x54\xfa\x4f\x5d\xe8\x3f\x85\xe8\x3f\x45\xa5\xff\x2e\x2e\x30\xcb\x52\x88\xfe\x53\x54\xfa\xef\xe2\xb2\xc4\x11\xa0\x8c\x14\x95\xfe\xbb\xb8\x40\xc2\x48\x21\xfa\x4f\x51\xe9\xbf\x8b\x0b\x2c\xc9\x14\xa4\xff\x14\x97\xfe\x8d\xcc\xb7\xa4\x18\x44\xff\x29\x2e\xfd\x1b\xd0\x2c\xd1\x84\xe8\x3f\xc5\xa5\xff\x2e\x34\x98\xfe\x53\x90\xfe\x53\x5c\xfa\x37\x4a\xd3\x92\x6b\x10\xfd\xa7\xb8\xf4\x6f\x54\x27\x3c\x8d\x02\x87\x05\x3e\xee\xb4\xc0\x77\x1a\x17\xf8\xe0\xbc\xc0\xc7\x1d\x18\x18\xd0\xe0\xd9\x0f\x38\x32\xf0\x71\x67\x06\x06\x34\x5b\x40\xa1\xb1\x14\xee\xd8\xc0\x80\x06\x8f\x18\xc1\xc1\x81\x8f\x3b\x39\x30\xa0\xc1\x63\x46\x78\x76\xe0\x23\x0f\x0f\xcc\x42\xb0\xa5\x1b\x38\x6b\x44\x9e\x1f\x98\xe8\x6c\x61\x85\x44\x61\x07\x1d\x82\x2a\x18\xe8\x60\x59\x68\x4a\x75\x68\xd6\x21\x08\x83\x59\xac\xb6\xbc\x83\xa4\x61\xb7\x5c\x5f\x80\x4a\x2c\xe2\x90\x80\xe2\x90\xe0\x8a\x43\xe2\x24\x0e\x09\x28\x0e\x09\xae\x38\x74\xa1\xc1\x19\x97\x80\xe2\x90\xe0\x8a\x43\x17\x9a\x2d\xa0\x10\x8f\x24\xb8\xe2\xd0\x85\x06\xb3\x48\x02\x8a\x43\x82\x2b\x0e\x5d\x68\x70\x91\x26\xb0\x38\x24\xc8\xe2\x60\x14\x82\x2d\xdd\x40\x71\x48\x90\xc5\xc1\x40\x67\x0b\x2b\x28\x0e\x09\xb2\x38\x74\xd1\x59\xc4\x21\x81\xc5\x21\x41\x16\x07\xa3\x58\x6d\x79\x07\x8a\x43\x82\x2c\x0e\x46\xbd\x5a\xc5\x21\x18\x7a\x78\x7e\xf0\x02\xa7\xe7\x07\xe0\xf1\x85\x60\x6b\x13\xe2\xb6\x36\xa1\x53\x6b\x13\x82\xad\x4d\x88\xdb\xda\x18\xd0\xc0\x92\x08\xc1\xd6\x26\xc4\x6d\x6d\x0c\x68\x60\xc6\x85\x60\x6b\x13\xe2\xb6\x36\x06\x34\x90\xe6\x42\xb0\xb5\x09\x71\x5b\x1b\x03\x9a\xb5\x0c\x86\x26\x1b\x82\x7a\x99\x85\x60\x4b\x37\x48\xbd\x42\xe4\xd6\xc6\x44\x67\x0b\x2b\xa4\x5e\x21\x72\x6b\x63\xa0\x83\xd5\x2b\x84\x5b\x9b\x10\xb9\xb5\x31\x8b\xd5\x96\x77\x90\x7a\x85\xc8\xad\x8d\x59\xaf\x36\x2e\x01\xd5\xab\x53\x16\x2f\x70\x7a\x76\xf5\x0a\xa2\xc1\x22\x11\xbd\x84\x4c\x44\x60\xf6\xc5\x60\x73\x18\xe3\x36\x87\xb1\x53\x73\x18\x83\xcd\x61\x8c\xdb\x1c\x1a\xd0\x6c\xa7\x06\x14\x45\x8c\xdb\x1c\x1a\xd0\xc0\x92\x88\xc1\xe6\x30\xc6\x6d\x0e\x0d\x68\x20\x0f\xc7\x60\x73\x18\xe3\x36\x87\x06\x34\xb0\x4e\x63\xb8\x39\x8c\x91\x9b\x43\xb3\x10\xac\x45\x3a\x34\xa8\x08\xf2\x6a\xa2\xb3\x85\x15\x92\xd7\x18\xb9\x39\x34\xd0\xc1\xf2\x1a\xc3\xcd\x61\x8c\xdc\x1c\x9a\xc5\x6a\xcb\x3b\x48\x5e\x63\xe4\xe6\xd0\xac\x57\x1b\x97\x80\xf2\x1a\x63\x37\x87\x3d\x75\x61\x3b\x3e\x50\x5e\x77\x45\x02\x41\x5e\x4d\x99\x80\xe5\xf5\x84\x6b\x56\x92\xff\x32\xc1\xc9\x71\xf8\xca\x0f\x7e\x19\x93\x9b\xf0\x49\xb8\x17\x05\x9f\x96\x8c\xf4\xbe\x88\xec\x47\xe4\xa8\xf1\xc5\x23\xe1\x41\x3c\x26\x6f\x7f\xff\xfa\x0f\xd0\x91\xdf\xa8\x64\xe4\x8c\x69\xa4\xcf\xe5\x6c\x81\x22\xc7\xf1\xab\x20\x09\x40\x57\x5e\x37\x67\xd8\xff\x1a\xb2\xef\x07\x8f\xae\x04\x07\x11\x86\x2b\x8e\x13\xf1\xed\x03\x7e\x84\x15\x7d\x87\x2b\x11\xd9\xf7\x93\x8d\x2b\x3e\x8a\x2b\x6e\x25\xfa\x53\x26\xd8\x77\x04\xe5\x47\x8d\x49\x03\x2b\x76\xaa\x94\xcd\x4b\xc8\x7e\x30\xde\x78\x12\x62\x78\x12\x8c\xdd\x08\xb6\x8b\xeb\xd0\xdd\x95\xc3\x95\x2b\xd1\xc6\x95\x04\xc5\x15\xf3\xd3\x98\xce\xae\x38\xe6\xd7\xe1\x43\x7e\x05\x29\xb6\x2b\xe6\x27\x8b\x7e\x9a\xa8\xb8\x95\xca\x8f\xec\x49\x10\x83\x6f\x83\x7f\xe2\xfc\xfa\x91\xa9\x78\xed\xca\xfa\x29\xcc\x4c\xb2\x9c\x71\x5d\xd0\xb2\xe7\x19\xcc\x85\x14\x37\x45\xce\x64\xab\x86\x3b\x5f\x1a\xf2\xe0\x5a\xa1\x16\x25\x5d\xbe\x11\xb2\xa2\xba\xb9\xe7\xba\x60\xe5\xd6\x93\xb7\x94\x73\xa1\xdb\x87\x4c\x9b\xbd\x1f\x77\x6d\xf6\x9d\x51\x59\x31\x79\x40\x17\x0b\x95\x89\x9c\x1d\x64\xa2\xfa\x67\x56\xd6\x4a\x33\xf9\x6a\x83\xa8\xd9\xf2\xf1\xe9\xd1\xfb\xf5\xae\xad\x91\xdd\x27\x4f\x37\x5b\x3f\x7c\x9d\x49\x26\xf8\x75\x31\x6d\x51\xff\xf5\xe6\xf2\xcf\xc9\xc7\xe3\xf7\x57\x1f\x2e\x8e\xdf\xbf\x9b\x9c\x1d\xaf\xe1\x3d\x6c\x26\x64\x73\x2e\x9b\xaf\x44\xb9\xaa\x15\x93\xed\x17\xa5\xec\xdc\xf7\x45\x3d\x84\xaf\xff\x6a\x49\x3f\xb3\x16\xed\x87\xde\xcb\x05\x5f\xd4\xed\xf9\x68\x76\xa7\x47\xeb\x2b\xf7\x9e\x93\x03\x93\xf3\x93\xab\xd3\xe3\x8f\x36\xfc\x74\x51\x5c\xcd\xd9\xb2\x1f\x7e\xef\xc5\x35\xfa\xc9\xf9\x09\x39\xed\x5e\x5d\x83\x5f\x50\xa5\x6e\x85\xcc\xb7\x1c\x58\xfd\xd4\x7d\xb2\x77\x5e\x7f\x66\x92\x33\xcd\x36\x61\x1f\xdd\x30\xa9\x76\xbe\x41\x66\xdb\xe9\xc7\xab\xed\xdf\xd0\x0e\x7e\x39\x88\xb6\x20\x18\x7f\x63\xeb\x5e\xd7\x42\x94\xbb\xf9\xb5\x82\x40\xf3\x6a\xf3\x82\xbe\x53\x5f\x7d\xf3\xcd\xce\x0b\x73\xd6\x2c\x69\x59\x33\xc3\xcd\x87\xff\x1b\x67\xef\xf7\xee\xff\x0e\x00\x00\xff\xff\x95\xde\x6e\x37\x51\x47\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 18257, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
