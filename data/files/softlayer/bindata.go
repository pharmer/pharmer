// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package softlayer

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x5c\xdb\x6e\xdb\xc0\x11\x7d\xf7\x57\x2c\xf4\xe4\x02\x8c\x21\x5e\x43\xe7\xcd\x71\x6e\x8e\xeb\x34\xad\x93\xb6\x40\x11\x14\x1b\x71\x2d\x31\xa2\x76\xd5\xe5\xca\xb1\x12\xf8\xdf\x0b\xca\xb2\x2e\x5c\xfa\x2c\x37\x1e\x03\x41\x5e\x12\x69\x49\x6a\xce\xec\xcc\x9c\xa3\x19\x8b\xfc\x79\xc0\xd8\x40\xf2\x99\x18\xbc\x60\x83\x5a\x5d\x99\x8a\x2f\x85\x1e\x04\xcd\xb2\x90\xd7\x83\x17\xec\x3f\x07\x8c\x31\x36\x28\xc4\xf5\x6a\x95\xb1\xc1\xff\xf8\xe0\x80\xb1\x2f\xab\x73\xb4\x18\x97\x4a\xd6\x9b\xf3\x7e\xae\xfe\x65\x6c\x50\xa9\x11\x37\xa5\x92\xcd\xe7\x9e\xcc\x6a\x23\x74\xc1\x67\x01\xfb\x20\xcc\x44\xe8\x8a\xcb\xa2\x5e\x7f\xdc\xe6\x43\x9a\x33\xf9\x6c\x67\xf9\x87\x92\x62\xfb\xc9\xab\x25\x3e\xab\x87\xe1\xe6\x8c\xf5\x42\x3c\x58\xbf\xff\xb2\xfa\xff\x36\x78\x18\xc9\xe9\x44\x48\xc9\xcb\x80\x9d\xc9\xa2\xe4\x5d\x08\x46\x13\x01\x11\x8c\x26\x62\x18\xf6\x37\xf8\x8a\x57\x15\xaf\x03\xf6\xf9\xf2\xa4\xcb\x5a\xc1\x2b\x68\xad\xe0\xd5\xbe\xbf\xcd\x42\xda\x5e\xc8\xda\x0b\xc7\xad\x85\x70\xd8\x1f\xf1\x1b\xcd\xe5\xf4\x6a\xa1\x4d\xc0\xde\x0a\x3d\xe3\x72\xd9\x05\xfc\x4a\x73\x08\xfc\x4a\xf3\x61\xd4\xdf\xe8\x3b\x25\xc7\xec\x5c\xc9\x71\xc0\x4e\x27\xa5\xec\x8c\xcc\x64\x3a\x86\x26\x27\xd3\xb1\x9f\xc9\x45\x6d\x94\x7c\x30\x34\x13\xb5\xc0\xe6\xd4\xc2\xc7\xdc\x5f\x95\x2c\x56\xd6\xce\xbb\x8c\x55\x4a\x42\x63\x95\x92\x3e\xc6\x2e\x44\xf5\x55\x2d\xb4\x14\x01\x3b\x59\xd4\x46\xf3\xaa\x3b\xd9\x67\x02\xa7\xdf\x4c\x54\x3e\xc9\xfe\xf7\x85\xd0\xc2\x70\xad\x02\x76\x21\x6e\xca\x91\xea\xb6\x79\xe3\xb0\x79\xe3\x63\xf3\xa2\xac\xb8\x0c\xd8\x99\xe1\x55\x67\xa2\xce\x4a\x87\x8b\xa5\x97\x8b\x17\x4a\x1a\x2d\x78\x15\xb0\x53\x2e\x79\xd1\xbd\xab\x8e\x60\xce\x94\xf4\x31\xf9\xb7\xba\x52\x01\xfb\xa0\xf4\x77\xde\xe9\xa1\xaa\xb1\x87\xaa\xf6\xf2\xf0\x23\xd7\x65\x1d\xb0\x86\x06\x46\xa2\xcb\xde\x9c\x6b\x68\x6f\xce\xb5\x8f\xbd\x4b\x2e\xd9\x7b\x55\x8b\x07\x0b\xb1\xfe\x36\x82\xf6\xea\x6f\xa3\x7d\x8e\x6c\x16\x3c\x34\xe1\x92\x2b\xf6\x91\x2f\x9a\x4d\x7e\x08\x01\x57\x18\x01\x57\x5e\x1e\x0b\xb5\xa8\x02\x76\xae\xb4\xe8\xcc\x9f\x5a\x38\xcc\x09\x4f\x73\xdc\x98\x0a\xec\xaf\xc0\x54\x5e\x0b\xee\x65\xae\x94\x63\x3e\x57\x5a\x04\x6c\xf3\xb2\xd3\xac\xc4\x74\x5e\xcb\xb1\x97\xd9\x65\x21\xc5\xd2\xc1\x77\xf5\xb2\xc0\x36\x97\x85\x8f\xcd\x4f\x6a\xba\x54\x01\x7b\xcf\xe7\x5c\x76\x99\x33\x6a\x0a\xcd\x19\x35\xf5\x61\xf5\x4f\x4a\x2b\x69\x14\xa2\x1e\xa3\x70\x6d\x1a\xe5\x55\x9b\xff\xe2\xf5\xa4\x94\xe3\x95\x4c\xbe\x3a\x7d\x30\x83\xbe\x17\xb8\x42\xbf\x17\xad\x0a\x6d\x16\x92\x16\x8c\xcd\x57\xca\x52\xd6\xa6\xe1\x9e\x4f\xcb\xb9\xe8\xf8\x62\x59\x4f\x17\x8d\xcd\x70\x14\xce\xb6\x46\x0b\x51\x8f\x74\x39\xbf\xc7\x1d\xb2\x91\xd2\x82\x71\x59\xb0\xf0\xed\x4b\xf6\x8f\x93\x8b\xed\xa9\x23\x6e\xc4\x58\xe9\xe5\xfa\x3b\x80\xae\x96\xec\x9f\xa5\x36\x0b\x5e\xb1\x4b\xa1\xaf\xc5\xce\x06\x8e\xe6\x8d\xa9\x70\xeb\x31\x9f\x35\xef\x3b\xb7\x6d\x03\x2b\xea\x05\x2b\x22\x87\x15\x61\x58\x49\x2f\x58\x09\x39\xac\x04\xc3\xca\x7a\xc1\xca\xc8\x61\x65\x18\x56\xde\x0b\x56\x4e\x0e\x2b\xc7\xb0\xc2\x7e\xc9\x15\xd2\x67\x57\xe8\x48\xaf\xb0\x5f\x20\x43\xfa\x48\x86\x30\x94\x11\xa2\x89\x68\x05\xac\x26\xe2\x89\xc8\x87\x27\x22\xc4\x13\xbb\xb8\x1e\x1f\xca\x36\x2e\x18\xc9\x08\x11\xc5\x2e\xae\xc7\x33\x45\x1b\x17\x64\x8a\x08\x31\xc5\x2e\xae\xc7\x27\x58\x1b\x97\x23\xbf\x00\x55\xec\xe2\x7a\x3c\x57\xb4\x71\x41\xae\x88\x20\x57\xec\x25\x3e\x7d\x86\x61\xb2\x88\x20\x59\xec\x41\xa3\x0f\x26\x66\x8b\x04\xb1\x45\x42\xca\x16\x89\x0f\x5b\x24\x88\x2d\x12\x52\xb6\x68\xe3\x82\xa1\x4c\x10\x5b\x24\xa4\x6c\xd1\xc6\x05\xd9\x22\x41\x6c\x91\x90\xb2\x45\x1b\x97\x23\xbf\x00\x5b\x24\xa4\x6c\xd1\xc6\x05\xd9\x22\x81\x6c\x91\xd0\xb2\x85\x95\xf9\x8e\x14\x43\x6c\x91\xd0\xb2\x85\x05\xcd\x11\xcd\xb8\xe7\xae\xc5\xf4\xbb\x16\xbb\x0a\xb3\x67\xa6\x25\xf4\xa9\x96\x38\x72\x2d\xeb\x49\x1a\x19\x3d\x6b\x64\x90\x36\x72\x44\xff\x39\x29\xfd\xe7\x3e\xf4\x9f\x23\xfa\xcf\x49\xe9\xbf\x8d\x0b\x66\x59\x8e\xe8\x3f\x27\xa5\xff\x36\x2e\x47\x1c\x01\x65\xe4\xa4\xf4\xdf\xc6\x05\x09\x23\x47\xf4\x9f\x93\xd2\x7f\x1b\x17\x2c\xc9\x1c\xd2\x7f\x4e\x4b\xff\x56\xe6\x3b\x52\x0c\xd1\x7f\x4e\x4b\xff\x16\x34\x47\x34\x11\xfd\xe7\xb4\xf4\xdf\x86\x86\xe9\x3f\x87\xf4\x9f\xd3\xd2\xbf\x55\x9a\x8e\x5c\x43\xf4\x9f\xd3\xd2\xbf\x55\x9d\x78\x1a\x05\x87\x05\x21\xed\xb4\x20\xf4\x1a\x17\x84\x70\x5e\x10\xd2\x0e\x0c\x2c\x68\x78\xf6\x03\x47\x06\x21\xed\xcc\xc0\x82\xe6\x0a\x28\x1a\x4b\xd1\x8e\x0d\x2c\x68\x78\xc4\x08\x07\x07\x21\xed\xe4\xc0\x82\x86\xc7\x8c\x78\x76\x10\x12\x0f\x0f\xec\x42\x70\xa5\x1b\x9c\x35\x12\xcf\x0f\x6c\x74\xae\xb0\x22\x51\xd8\x43\x47\xa0\x0a\x16\x3a\x2c\x0b\x4d\xa9\xf6\xcd\x3a\x02\x61\xb0\x8b\xd5\x95\x77\x48\x1a\xf6\xcb\xf5\x09\xa8\xc4\x21\x0e\x19\x14\x87\x8c\x56\x1c\x32\x2f\x71\xc8\xa0\x38\x64\xb4\xe2\xd0\x86\x86\x33\x2e\x83\xe2\x90\xd1\x8a\x43\x1b\x9a\x2b\xa0\x88\x47\x32\x5a\x71\x68\x43\xc3\x2c\x92\x41\x71\xc8\x68\xc5\xa1\x0d\x0d\x17\x69\x86\xc5\x21\x23\x16\x07\xab\x10\x5c\xe9\x06\xc5\x21\x23\x16\x07\x0b\x9d\x2b\xac\x50\x1c\x32\x62\x71\x68\xa3\x73\x88\x43\x86\xc5\x21\x23\x16\x07\xab\x58\x5d\x79\x07\xc5\x21\x23\x16\x07\xab\x5e\x9d\xe2\x10\xf5\xdd\xbc\x30\x7a\x82\xdd\x0b\x23\xb8\x7d\x31\x6c\x6d\x62\xda\xd6\x26\xf6\x6a\x6d\x62\xd8\xda\xc4\xb4\xad\x8d\x05\x0d\x96\x44\x0c\x5b\x9b\x98\xb6\xb5\xb1\xa0\xc1\x8c\x8b\x61\x6b\x13\xd3\xb6\x36\x16\x34\x48\x73\x31\x6c\x6d\x62\xda\xd6\xc6\x82\xe6\x2c\x83\xbe\xc9\x46\xa0\x5e\x76\x21\xb8\xd2\x0d\xa9\x57\x4c\xdc\xda\xd8\xe8\x5c\x61\x45\xea\x15\x13\xb7\x36\x16\x3a\xac\x5e\x31\x6e\x6d\x62\xe2\xd6\xc6\x2e\x56\x57\xde\x21\xf5\x8a\x89\x5b\x1b\xbb\x5e\x5d\x5c\x02\xd5\xab\x55\x16\x4f\xb0\x7b\x6e\xf5\x8a\x92\xde\x22\x91\x3c\x85\x4c\x24\x30\xfb\x52\xd8\x1c\xa6\xb4\xcd\x61\xea\xd5\x1c\xa6\xb0\x39\x4c\x69\x9b\x43\x0b\x9a\x6b\xd7\x40\x51\xa4\xb4\xcd\xa1\x05\x0d\x96\x44\x0a\x9b\xc3\x94\xb6\x39\xb4\xa0\x41\x1e\x4e\x61\x73\x98\xd2\x36\x87\x16\x34\x58\xa7\x29\x6e\x0e\x53\xe2\xe6\xd0\x2e\x04\x67\x91\xf6\x0d\x2a\x81\xbc\xda\xe8\x5c\x61\x45\xf2\x9a\x12\x37\x87\x16\x3a\x2c\xaf\x29\x6e\x0e\x53\xe2\xe6\xd0\x2e\x56\x57\xde\x21\x79\x4d\x89\x9b\x43\xbb\x5e\x5d\x5c\x02\xe5\x35\xa5\x6e\x0e\x3b\xea\xc2\xb5\x7d\x50\x5e\xf7\x45\x82\x40\x5e\x6d\x99\xc0\xf2\x7a\x26\x8d\xa8\xd8\xbf\x85\x92\xec\x75\xfc\x2c\x8c\x9e\x0f\xd9\x75\xfc\x20\xdc\xcb\x52\x8e\x2b\xc1\x3a\x2f\x62\x87\x09\x3b\x6d\x7c\x09\x58\x7c\x94\x0e\xd9\xdb\x77\x3f\xfe\x02\x1d\x79\xc9\xb5\x60\x17\xc2\x10\xfd\x2e\x67\x07\x14\x7b\x9d\x3e\x8b\xb2\x08\xba\xf2\xaa\xd9\xc3\xee\x6b\xd8\x61\x18\xdd\xbb\x12\x1d\x25\x14\xae\x78\x4e\xc4\x77\x37\xf8\x1e\x56\xf2\x0b\xae\x24\xec\x30\xcc\xb6\xae\x84\x24\xae\xf8\x95\xe8\x1f\x99\x60\xbf\x10\x94\xdf\x35\x26\x0d\xac\xd4\xab\x52\xb6\x97\xb0\xc3\x68\xb8\xf5\x24\xa6\xf0\x24\x1a\xfa\x11\x6c\x1b\xd7\xb1\xbf\x2b\xc7\x6b\x57\x92\xad\x2b\x19\x89\x2b\xf6\xaf\x31\xbd\x5d\xf1\xcc\xaf\xe3\xbb\xfc\x8a\x72\x6a\x57\xec\x5f\x16\xfd\x31\x51\xf1\x2b\x95\xdf\xd9\x93\x28\x85\x5f\x83\xff\xe0\xfc\xfa\x9d\xa9\x78\xe3\xca\xe6\x2e\xcc\x91\x16\x85\x90\xa6\xe4\x55\xc7\x3d\x98\x66\x39\x5f\x3d\x30\xe4\x72\xef\x81\x21\x77\x6e\x95\xf5\xbc\xe2\xcb\x37\x4a\xcf\xb8\x69\xce\xb9\x2a\x45\xb5\x73\xd7\xed\xea\xed\xfe\xfd\xa1\x3f\x37\xaf\x18\x1b\x7c\xab\xef\xf6\x63\x51\x0b\xbd\x7a\x2e\x49\xb0\x7b\xf4\xfe\x49\x25\xdd\x47\x2b\xfe\x55\x54\xcd\xe1\xcf\x9d\x87\x4b\x39\x5f\xac\x20\x19\x71\x63\x06\x9b\x23\xb7\x01\x46\xc2\xe7\xe5\x7f\xa7\x62\xd9\x0d\xa4\xf3\xe0\x06\xc7\xc9\xc7\x33\x76\xde\x3e\xfa\x10\x8c\xf5\xab\xf6\xed\xb0\xd3\xc5\x57\xa1\xa5\x30\xab\x7b\x61\xef\x00\x0e\xae\x85\xae\xf7\x1e\xbb\xb2\x0b\xfd\xfe\xe8\xea\x0f\x4f\x47\xcf\x8f\x92\x1d\xf3\xd6\x1f\xa6\xda\xc7\x8d\x52\xd5\xd6\xd0\x7a\xb1\x81\xc0\x8b\xd9\xf6\x82\xae\xbd\x5b\x3f\x2e\x66\xef\xc2\x42\x34\x4b\x46\x2f\x84\xe5\xe6\xdd\xff\x8d\xb3\xb7\x07\xb7\xff\x0f\x00\x00\xff\xff\x4e\xa5\xa1\xce\x86\x46\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 18054, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
