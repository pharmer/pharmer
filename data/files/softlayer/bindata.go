// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package softlayer

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x5c\x5f\x73\xdb\xb6\xf2\x7d\xcf\xa7\xc0\xe8\x29\xbf\x19\x46\x15\xff\x96\xe9\x9b\x62\x3b\xa9\x1b\x3b\x75\xed\x24\xfd\x75\xee\x74\x32\x30\xb9\x96\x10\x81\x80\x2e\x00\xda\x51\x3a\xf9\xee\x77\x48\xc9\x12\x45\x50\x4b\xb1\x41\x66\x32\x79\x49\x6c\x10\xc4\x9e\xc5\x9e\x3d\xab\x85\x45\xfe\xf3\x84\x90\x91\xa0\x05\x8c\x7e\x21\x23\x2d\xef\x0c\xa7\x2b\x50\x23\xaf\x1a\x06\x71\x3f\xfa\x85\xfc\xe7\x09\x21\x84\x8c\x72\xb8\xaf\x47\x09\x19\xfd\x97\x8e\x9e\x10\xf2\x77\x3d\x47\xc1\x8c\x49\xa1\xb7\xf3\xfe\xa9\xff\x25\x64\xc4\x65\x46\x0d\x93\xa2\x5a\x77\x5a\x68\x03\x2a\xa7\x85\x47\xde\x80\x99\x83\xe2\x54\xe4\x7a\xb3\xdc\x76\x91\x6a\x26\x2d\x1a\xc3\x9f\xa5\x80\xdd\xca\xf5\x10\x2d\xf4\xc4\xdf\xce\xd8\x0c\x84\xa3\xcd\xef\x7f\xd7\xff\x7f\xf1\x0e\x23\x39\x99\x83\x10\x94\x79\xe4\x5c\xe4\x8c\x76\x21\xc8\xe6\x80\x22\xc8\xe6\x30\xf1\x8f\x37\x78\x4a\x39\xa7\xda\x23\xef\x6e\xa6\x5d\xd6\x72\xca\x51\x6b\x39\xe5\xfb\xfe\x56\x03\x71\x7b\x20\x69\x0f\x3c\x6f\x0d\xf8\x93\xe3\x11\xbf\x54\x54\x2c\xee\x4a\x65\x3c\xf2\x0a\x54\x41\xc5\xaa\x0b\xf8\x9d\xa2\x28\xf0\x3b\x45\x27\xc1\xf1\x46\x7f\x95\x62\x46\x5e\x4b\x31\xf3\xc8\xc9\x9c\x89\xce\xc8\xcc\x17\x33\xd4\xe4\x7c\x31\x1b\x66\xb2\xd4\x46\x8a\x83\xa1\x99\xcb\x12\x37\x27\xcb\x21\xe6\x2e\xa4\xc8\x6b\x6b\xaf\xbb\x8c\x71\x29\x50\x63\x5c\x8a\x21\xc6\x2e\x81\xdf\xca\x52\x09\xf0\xc8\xb4\xd4\x46\x51\xde\x4d\xf6\x02\x70\xfa\x15\xc0\x87\x90\xfd\x8f\x12\x14\x18\xaa\xa4\x47\x2e\xe1\x13\xcb\x64\xb7\xcd\x4f\x3d\x36\x3f\x0d\xb1\x79\xc9\x38\x15\x1e\x39\x37\x94\x77\x12\xb5\x60\x3d\x2e\xb2\x41\x2e\x5e\x4a\x61\x14\x50\xee\x91\x13\x2a\x68\xde\xbd\xab\x3d\xc1\x2c\xa4\x18\x62\xf2\x77\xcd\xa5\x47\xde\x48\xf5\x40\x3b\x3d\x94\x1a\xf7\x50\xea\x41\x1e\x5e\x51\xc5\xb4\x47\x2a\x19\xc8\xa0\xcb\xde\x92\x2a\xd4\xde\x92\xaa\x21\xf6\x6e\xa8\x20\xbf\x49\x0d\x07\x13\x51\x7f\xcc\x50\x7b\xfa\x63\xb6\xaf\x91\xd5\xc0\x80\x9a\x70\x43\x25\xb9\xa2\x65\xb5\xc9\x87\x10\x50\x89\x23\xa0\x72\x90\xc7\x20\x4b\xee\x91\xd7\x52\x41\x27\x7f\x34\xf4\x98\x83\x81\xe6\xa8\x31\x1c\xd9\x5f\xc0\xa5\x5c\x03\x1d\x64\x8e\x89\x19\x5d\x4a\x05\x1e\xd9\xfe\xd8\x69\x56\xe0\x72\xae\xc5\x6c\x90\xd9\x55\x2e\x60\xd5\xa3\x77\x7a\x95\xe3\x36\x57\xf9\x10\x9b\x6f\xe5\x62\x25\x3d\xf2\x1b\x5d\x52\xd1\x65\xce\xc8\x05\x6a\xce\xc8\xc5\x10\x55\x7f\x2b\x95\x14\x46\x62\xd2\x63\x24\x9e\x9b\x46\x0e\xca\xcd\x3f\xa9\x9e\x33\x31\xab\xcb\xe4\xe9\xc9\x41\x06\x3d\xe4\x78\x86\x3e\xe4\xad\x0c\xad\x06\xa2\x16\x8c\xed\x47\x4a\x26\xb4\xa9\xb4\xe7\xed\x6a\x09\x1d\x1f\x2c\xf5\xa2\xac\x6c\xfa\x99\x5f\xec\x8c\xe6\xa0\x33\xc5\x96\x8f\xb8\x7d\x92\x49\x05\x84\x8a\x9c\xf8\xaf\x5e\x90\xeb\xe9\xe5\x6e\x6a\x46\x0d\xcc\xa4\x5a\x6d\x3e\x03\x28\xbe\x22\xef\x99\x32\x25\xe5\xe4\x06\xd4\x3d\x34\x36\x30\x5b\x56\xa6\xfc\x9d\xc7\xb4\xa8\x7e\xef\xdc\xb6\x2d\xac\xe0\x28\x58\x81\x73\x58\x01\x0e\x2b\x3a\x0a\x56\xe4\x1c\x56\x84\xc3\x4a\x8e\x82\x95\x38\x87\x95\xe0\xb0\xd2\xa3\x60\xa5\xce\x61\xa5\x38\x2c\xff\x38\x72\xf9\xee\xd9\xe5\xf7\xd0\xcb\x3f\x2e\x90\xbe\xfb\x48\xfa\x68\x28\x03\x4c\x26\x82\x1a\x98\x76\xa4\x13\xc1\x10\x9d\x08\x30\x9d\x68\xe2\xfa\xfa\x50\xb6\x71\xa1\x91\x0c\x30\xa1\x68\xe2\xfa\x7a\xa5\x68\xe3\x42\x95\x22\xc0\x94\xa2\x89\xeb\xeb\x09\xd6\xc6\xd5\xc3\x2f\x44\x2a\x9a\xb8\xbe\x5e\x2b\xda\xb8\x50\xad\x08\x50\xad\xd8\x23\xbe\x7b\x86\xe1\x62\x11\xa0\x62\xb1\x07\xcd\x7d\x30\x71\xb5\x88\x30\xb5\x88\x9c\xaa\x45\x34\x44\x2d\x22\x4c\x2d\x22\xa7\x6a\xd1\xc6\x85\x86\x32\xc2\xd4\x22\x72\xaa\x16\x6d\x5c\xa8\x5a\x44\x98\x5a\x44\x4e\xd5\xa2\x8d\xab\x87\x5f\x88\x5a\x44\x4e\xd5\xa2\x8d\x0b\x55\x8b\x08\x55\x8b\xc8\xad\x5a\x58\xcc\xef\xa1\x18\xa6\x16\x91\x5b\xb5\xb0\xa0\xf5\x44\x33\x3c\x72\xd7\x42\xf7\xbb\x16\xf6\x25\xe6\x91\x4c\x8b\xdc\x53\x2d\xea\xe1\x5a\x72\xa4\x68\x24\xee\x55\x23\x41\x65\x23\xc5\xe4\x3f\x75\x2a\xff\xe9\x10\xf9\x4f\x31\xf9\x4f\x9d\xca\x7f\x1b\x17\xca\xb2\x14\x93\xff\xd4\xa9\xfc\xb7\x71\xf5\xc4\x11\x91\x8c\xd4\xa9\xfc\xb7\x71\xa1\x82\x91\x62\xf2\x9f\x3a\x95\xff\x36\x2e\x34\x25\x53\x54\xfe\x53\xb7\xf2\x6f\x31\xbf\x87\x62\x98\xfc\xa7\x6e\xe5\xdf\x82\xd6\x13\x4d\x4c\xfe\x53\xb7\xf2\xdf\x86\x86\xcb\x7f\x8a\xca\x7f\xea\x56\xfe\xad\xd4\xec\xe1\x1a\x26\xff\xa9\x5b\xf9\xb7\xb2\x13\x3f\x8d\x42\x0f\x0b\x7c\xb7\xa7\x05\xfe\xa0\xe3\x02\x1f\x3d\x2f\xf0\xdd\x1e\x18\x58\xd0\xf0\xb3\x1f\xf4\xc8\xc0\x77\x7b\x66\x60\x41\xeb\x0b\x28\x76\x2c\xe5\xf6\xd8\xc0\x82\x86\x1f\x31\xa2\x07\x07\xbe\xdb\x93\x03\x0b\x1a\x7e\xcc\x88\x9f\x1d\xf8\x8e\x0f\x0f\xec\x44\xe8\xa3\x1b\x7a\xd6\xe8\xf8\xfc\xc0\x46\xd7\x17\x56\xac\x28\xec\xa1\x73\x50\x15\x2c\x74\x78\x59\xa8\x52\xf5\x58\xd6\x39\x28\x0c\x76\xb2\xf6\xf1\x0e\x2b\x0d\xfb\xe9\xfa\x0d\xa4\xa4\xa7\x38\x24\x68\x71\x48\xdc\x16\x87\x64\x50\x71\x48\xd0\xe2\x90\xb8\x2d\x0e\x6d\x68\x38\xe3\x12\xb4\x38\x24\x6e\x8b\x43\x1b\x5a\x5f\x40\x31\x1d\x49\xdc\x16\x87\x36\x34\x5c\x45\x12\xb4\x38\x24\x6e\x8b\x43\x1b\x1a\x9e\xa4\x09\x5e\x1c\x12\xc7\xc5\xc1\x4a\x84\x3e\xba\xa1\xc5\x21\x71\x5c\x1c\x2c\x74\x7d\x61\x45\x8b\x43\xe2\xb8\x38\xb4\xd1\xf5\x14\x87\x04\x2f\x0e\x89\xe3\xe2\x60\x25\x6b\x1f\xef\xd0\xe2\x90\x38\x2e\x0e\x56\xbe\xf6\x16\x87\xe0\xd8\xcd\xf3\x83\x6f\xb0\x7b\x7e\x80\x6e\x5f\x88\xb6\x36\xa1\xdb\xd6\x26\x1c\xd4\xda\x84\x68\x6b\x13\xba\x6d\x6d\x2c\x68\x68\x4a\x84\x68\x6b\x13\xba\x6d\x6d\x2c\x68\x28\xe3\x42\xb4\xb5\x09\xdd\xb6\x36\x16\x34\x54\xe6\x42\xb4\xb5\x09\xdd\xb6\x36\x16\xb4\xde\x34\x38\x96\x6c\x0e\xaa\x97\x9d\x08\x7d\x74\xc3\xaa\x57\xe8\xb8\xb5\xb1\xd1\xf5\x85\x15\xab\x5e\xa1\xe3\xd6\xc6\x42\x87\x57\xaf\x10\x6f\x6d\x42\xc7\xad\x8d\x9d\xac\x7d\xbc\xc3\xaa\x57\xe8\xb8\xb5\xb1\xf3\xb5\x4f\x4b\xd0\xea\xd5\x4a\x8b\x6f\xb0\x7b\xfd\xd5\x2b\x88\x8e\x2e\x12\xd1\xb7\x28\x13\x11\xca\xbe\x18\x6d\x0e\x63\xb7\xcd\x61\x3c\xa8\x39\x8c\xd1\xe6\x30\x76\xdb\x1c\x5a\xd0\xfa\x76\x0d\x49\x8a\xd8\x6d\x73\x68\x41\x43\x53\x22\x46\x9b\xc3\xd8\x6d\x73\x68\x41\x43\x75\x38\x46\x9b\xc3\xd8\x6d\x73\x68\x41\x43\xf3\x34\xc6\x9b\xc3\xd8\x71\x73\x68\x27\x42\x6f\x92\x1e\x1b\x54\x07\xe5\xd5\x46\xd7\x17\x56\xac\xbc\xc6\x8e\x9b\x43\x0b\x1d\x5e\x5e\x63\xbc\x39\x8c\x1d\x37\x87\x76\xb2\xf6\xf1\x0e\x2b\xaf\xb1\xe3\xe6\xd0\xce\xd7\x3e\x2d\x41\xcb\x6b\xec\xba\x39\xec\xc8\x8b\xbe\xed\x43\xcb\xeb\x7e\x91\x70\x50\x5e\xed\x32\x81\x97\xd7\x73\x61\x80\x93\xff\x07\x29\xc8\x59\xf8\xcc\x0f\x7e\x9e\x90\xfb\xf0\x20\xdc\x1b\x26\x66\x1c\x48\xe7\x4d\xe4\x69\x44\x4e\x2a\x5f\x3c\x12\x8e\xe3\x09\x79\xf5\xeb\xe7\xff\x43\x1d\x79\x41\x15\x90\x4b\x30\x8e\xbe\x97\xd3\x00\x45\xce\xe2\x67\x41\x12\xa0\xae\x9c\x56\x7b\xd8\x7d\x0f\x79\xea\x07\x8f\xae\x04\xe3\xc8\x85\x2b\x03\x4f\xc4\x9b\x1b\xfc\x08\x2b\xfa\x17\xae\x44\xe4\xa9\x9f\xec\x5c\xf1\x9d\xb8\x32\x2c\x45\x7f\x48\x82\xfd\x8b\xa0\x7c\xaf\x31\xa9\x60\xc5\x83\x32\x65\x77\x0b\x79\x1a\x4c\x76\x9e\x84\x2e\x3c\x09\x26\xc3\x04\xb6\x8d\xeb\xf9\x70\x57\x9e\x6f\x5c\x89\x76\xae\x24\x4e\x5c\xb1\xbf\x8d\x39\xd8\x95\x81\xfc\x7a\xbe\xe6\x57\x90\xba\x76\xc5\xfe\x66\xd1\x0f\x13\x95\x61\xa9\xf2\x3d\x7b\x12\xc4\xe8\xc7\xe0\x1f\x98\x5f\xdf\xb3\x14\x6f\x5d\xd9\x3e\x85\x99\x29\xc8\x41\x18\x46\x79\xc7\x33\x98\x4b\x25\xef\x59\x0e\xaa\xae\x86\x7b\x2f\x0d\x59\xbb\xc6\xf4\x92\xd3\xd5\x4b\xa9\x0a\x6a\xaa\x39\x77\x0c\x78\xe3\xc9\x5b\x2a\x84\x34\xf5\x43\xa6\xd5\xda\x8f\xab\x56\xeb\xce\xa9\x2a\x40\x8d\xe9\x72\xa9\x33\x99\xc3\x38\x93\xc5\x4f\x19\x2f\xb5\x01\xf5\x6c\x87\xa8\x5a\xf2\xf1\xe9\xd1\x2f\xdb\x55\x6b\x23\xfb\x4f\x9e\xee\x96\x5e\xbf\xce\x24\x93\xe2\x8e\xcd\x6a\xd4\xbf\xbf\x7c\x7b\x31\xfd\xeb\xec\xfa\xc3\xbb\x9b\xb3\xeb\x37\xd3\xcb\xb3\x2d\xbc\xf5\x62\x52\x55\xfb\xb2\x7b\x25\xca\x87\x52\x83\xaa\x5f\x94\xb2\x37\xef\xa3\x5e\x87\xaf\xfb\x2a\xa7\xb7\x50\xa3\x7d\xd7\x79\x99\x89\x65\x59\xef\x8f\x81\x4f\x66\xb4\xbd\xf2\xc5\x1b\xe4\xc0\xf4\xea\xfc\xc3\xeb\xb3\xbf\xfa\xf0\xd3\x25\xfb\xb0\x80\x55\x37\xfc\xce\x8b\x5b\xf4\xd3\xab\x73\xf2\xba\x7d\x75\x0b\x7e\x49\xb5\x7e\x90\x2a\x6f\x38\xb0\xf9\xa9\xfd\x64\xef\xa2\xbc\x05\x25\xc0\x80\x7e\x0f\x4a\x77\xbf\x37\xe6\x7e\x7d\xa5\xfe\xab\xd9\xf8\xe7\xf1\xe1\x84\x69\x5d\x5d\xbf\xac\xa6\xc1\xa5\x1c\xaa\x01\xa3\x4a\xb0\x98\x92\xc3\x1d\x2d\xb9\xb9\x59\x42\xb6\x7f\xcf\x86\x6a\xe7\xcb\x6b\x2a\x66\xf5\x2b\x71\xfc\xc9\x38\x88\xa2\xf1\x64\x3c\xf9\xc9\xdf\x7b\xcd\x8a\x06\x75\xcf\x32\x38\xe9\xba\x63\xd2\x31\x9f\xf2\xfa\xc1\x6a\x78\x23\x73\x38\x61\xb9\xd2\x1b\x70\x8d\x29\x20\xe8\x2d\x7f\x5c\xf1\x52\x0a\x66\xa4\x62\x62\xb6\x8e\xcf\x3a\x21\x46\x87\xa6\x5f\xc8\xd9\x6c\x3d\xb7\x73\xd1\xca\xea\xc1\x29\x7c\x7d\xe1\x14\xb4\x61\x62\xfb\xec\xf7\xa3\xc9\x67\xc0\xa9\x36\x2c\xd3\x40\x55\x36\xdf\x03\xd0\xbc\xb0\x59\xfd\x1a\x96\x9c\x65\x54\x37\x1f\xd4\xac\x76\x5c\xe8\xb5\x12\x9d\x5f\x35\xf6\xc8\x9f\x8c\xf6\xe7\x9c\xca\x82\xb2\xda\xfa\x26\x12\xe3\x6a\xd3\xf8\xde\x3e\xe6\x05\xd3\x15\x43\x4e\xa4\x30\x4a\xd6\xfc\x7c\x43\x0b\xd0\x4b\x9a\xc1\x05\xbb\x83\x6c\x95\x71\xf0\x2e\x58\xc1\x4c\x1d\x13\xe5\xdd\xac\x43\x35\xcd\x32\x59\x0a\xe3\x5d\x55\x0c\xd3\x06\x84\x79\x2f\x79\x59\xc0\x45\x45\x73\xef\x74\xc3\x09\x23\x15\x9d\xc1\x09\xa7\x5a\x7b\xd7\xa0\x65\xa9\x32\xf8\xa3\x94\x86\x36\x41\x14\xb4\x8b\x26\x49\x1d\xf6\x20\x6a\xce\x14\x60\x1e\xa4\x5a\x5c\x35\x04\xf3\x8e\x53\x21\x80\x1f\x0c\xe5\x94\x83\x32\x87\x82\x2e\xab\x9d\x1d\xe5\x70\xcb\x1a\xaf\x1c\x68\xd8\x91\x9c\x65\xab\xa6\x35\x21\x45\x07\x6b\xfe\x84\xdb\xb9\x94\x8b\xb7\x72\x01\x62\x5a\x9a\xb9\x38\x44\x9c\xeb\x5b\x9a\x55\x13\x3e\x1f\x9a\x30\xbd\x3a\xd7\x75\x64\x5f\x50\xcd\xb2\x69\x99\x33\x73\x70\xea\xc6\x9f\xa9\x31\x2c\xb3\x27\x2d\x25\xe7\x37\x1c\x60\x59\x55\x41\x75\x5f\xcb\x7c\xd8\xc9\xe4\xab\xf2\x96\xb3\xac\xa6\x52\x33\xbf\x77\x6a\xf3\xe4\xcb\xff\x02\x00\x00\xff\xff\xac\x18\x6c\x31\xd8\x4a\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 19160, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
