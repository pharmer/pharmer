// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package softlayer

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x5c\x5d\x73\xdb\xb6\x12\x7d\xcf\xaf\xc0\xe8\x29\x77\x86\x71\xc5\xcf\x32\x7d\x53\x64\x27\x75\xfd\x11\xd5\x4e\xd2\xdb\xb9\xd3\xc9\xc0\xe4\x5a\x62\x04\x02\xbc\x00\xe8\x44\xe9\xe4\xbf\x77\x48\xc9\x12\x45\x50\x4b\xb1\x41\x66\x32\x79\x49\x6c\x10\xc4\x9e\xc5\xee\x9e\xa3\x85\x45\xfe\xfd\x84\x90\x11\xa7\x39\x8c\x7e\x21\x23\x25\xee\x35\xa3\x2b\x90\x23\xa7\x1a\x06\xfe\x30\xfa\x85\xfc\xef\x09\x21\x84\x8c\x52\x78\xa8\x47\x09\x19\xfd\x9f\x8e\x9e\x10\xf2\x57\x3d\x47\xc2\x3c\x13\x5c\x6d\xe7\xfd\x5d\xff\x4b\xc8\x88\x89\x84\xea\x4c\xf0\x6a\xdd\x49\xae\x34\xc8\x94\xe6\x0e\xb9\x06\xbd\x00\xc9\x28\x4f\xd5\x66\xb9\xed\x22\xd5\x4c\x9a\x37\x86\x3f\x0b\x0e\xbb\x95\xeb\x21\x9a\xab\xb1\xbb\x9d\xb1\x19\xf0\x47\x9b\xdf\xff\xaa\xff\xff\xe2\x1c\x46\x32\x5d\x00\xe7\x34\x73\xc8\x39\x4f\x33\xda\x85\x20\x59\x00\x8a\x20\x59\xc0\xd8\x3d\xde\xe0\x29\x65\x8c\x2a\x87\xbc\xbd\x9d\x74\x59\x4b\x29\x43\xad\xa5\x94\xed\xfb\x5b\x0d\x84\xed\x81\xa8\x3d\xf0\xbc\x35\xe0\x8e\x8f\x47\xfc\x52\x52\xbe\xbc\x2f\xa5\x76\xc8\x2b\x90\x39\xe5\xab\x2e\xe0\xf7\x92\xa2\xc0\xef\x25\x1d\x7b\xc7\x1b\xfd\x55\xf0\x39\xb9\x10\x7c\xee\x90\xe9\x22\xe3\x9d\x91\x59\x2c\xe7\xa8\xc9\xc5\x72\x3e\xcc\x64\xa9\xb4\xe0\x07\x43\xb3\x10\x25\x6e\x4e\x94\x43\xcc\x5d\x0a\x9e\xd6\xd6\x2e\xba\x8c\x31\xc1\x51\x63\x4c\xf0\x21\xc6\xae\x80\xdd\x89\x52\x72\x70\xc8\xa4\x54\x5a\x52\xd6\x9d\xec\x39\xe0\xe9\x97\x03\x1b\x92\xec\xbf\x97\x20\x41\x53\x29\x1c\x72\x05\x9f\xb2\x44\x74\xdb\xfc\xd4\x63\xf3\xd3\x10\x9b\x57\x19\xa3\xdc\x21\xe7\x9a\xb2\xce\x44\xcd\xb3\x1e\x17\xb3\x41\x2e\x5e\x09\xae\x25\x50\xe6\x90\x29\xe5\x34\xed\xde\xd5\x9e\x60\xe6\x82\x0f\x31\xf9\x5a\x31\xe1\x90\x6b\x21\x3f\xd2\x4e\x0f\x85\xc2\x3d\x14\x6a\x90\x87\x33\x2a\x33\xe5\x90\x8a\x06\x12\xe8\xb2\x57\x50\x89\xda\x2b\xa8\x1c\x62\xef\x96\x72\xf2\x9b\x50\x70\xb0\x10\xd5\x87\x04\xb5\xa7\x3e\x24\xfb\x1c\x59\x0d\x0c\xd0\x84\x5b\x2a\xc8\x8c\x96\xd5\x26\x1f\x42\x40\x05\x8e\x80\x8a\x41\x1e\x83\x28\x99\x43\x2e\x84\x84\xce\xfc\x51\xd0\x63\x0e\x06\x9a\xa3\x5a\x33\x64\x7f\x01\xa7\x72\x05\x74\x90\xb9\x8c\xcf\x69\x21\x24\x38\x64\xfb\x63\xa7\x59\x8e\xd3\xb9\xe2\xf3\x41\x66\x57\x29\x87\x55\x0f\xdf\xa9\x55\x8a\xdb\x5c\xa5\x43\x6c\xbe\x11\xcb\x95\x70\xc8\x6f\xb4\xa0\xbc\xcb\x9c\x16\x4b\xd4\x9c\x16\xcb\x21\xac\xfe\x46\x48\xc1\xb5\xc0\xa8\x47\x0b\xbc\x36\xb5\x18\x54\x9b\x7f\x50\xb5\xc8\xf8\xbc\x96\xc9\xd3\xe9\xc1\x0c\xfa\x98\xe2\x15\xfa\x31\x6d\x55\x68\x35\x10\xb4\x60\x6c\x3f\x52\x66\x5c\xe9\x8a\x7b\xde\xac\x0a\xe8\xf8\x60\xa9\x96\x65\x65\xd3\x4d\xdc\x7c\x67\x34\x05\x95\xc8\xac\x78\xc4\xed\x92\x44\x48\x20\x94\xa7\xc4\x7d\xf5\x82\xdc\x4c\xae\x76\x53\x13\xaa\x61\x2e\xe4\x6a\xf3\x19\x40\xb2\x15\x79\x97\x49\x5d\x52\x46\x6e\x41\x3e\x40\x63\x03\x93\xa2\x32\xe5\xee\x3c\xa6\x79\xf5\x7b\xe7\xb6\x6d\x61\x79\x47\xc1\xf2\xac\xc3\xf2\x70\x58\xc1\x51\xb0\x02\xeb\xb0\x02\x1c\x56\x74\x14\xac\xc8\x3a\xac\x08\x87\x15\x1f\x05\x2b\xb6\x0e\x2b\xc6\x61\xb9\xc7\x25\x97\x6b\x3f\xbb\xdc\x9e\xf4\x72\x8f\x0b\xa4\x6b\x3f\x92\x2e\x1a\x4a\x0f\xa3\x09\xaf\x06\xa6\x2c\xf1\x84\x37\x84\x27\x3c\x8c\x27\x9a\xb8\xbe\x3e\x94\x6d\x5c\x68\x24\x3d\x8c\x28\x9a\xb8\xbe\x9e\x29\xda\xb8\x50\xa6\xf0\x30\xa6\x68\xe2\xfa\xfa\x04\x6b\xe3\xea\xc9\x2f\x84\x2a\x9a\xb8\xbe\x9e\x2b\xda\xb8\x50\xae\xf0\x50\xae\xd8\x4b\x7c\xfb\x19\x86\x93\x85\x87\x92\xc5\x1e\x34\xfb\xc1\xc4\xd9\x22\xc0\xd8\x22\xb0\xca\x16\xc1\x10\xb6\x08\x30\xb6\x08\xac\xb2\x45\x1b\x17\x1a\xca\x00\x63\x8b\xc0\x2a\x5b\xb4\x71\xa1\x6c\x11\x60\x6c\x11\x58\x65\x8b\x36\xae\x9e\xfc\x42\xd8\x22\xb0\xca\x16\x6d\x5c\x28\x5b\x04\x28\x5b\x04\x76\xd9\xc2\xc8\xfc\x9e\x14\xc3\xd8\x22\xb0\xcb\x16\x06\xb4\x9e\x68\xfa\x47\xee\x9a\x6f\x7f\xd7\xfc\xbe\xc2\x3c\x32\xd3\x02\xfb\xa9\x16\xf4\xe4\x5a\x74\x24\x69\x44\xf6\x59\x23\x42\x69\x23\xc6\xe8\x3f\xb6\x4a\xff\xf1\x10\xfa\x8f\x31\xfa\x8f\xad\xd2\x7f\x1b\x17\x9a\x65\x31\x46\xff\xb1\x55\xfa\x6f\xe3\xea\x89\x23\x42\x19\xb1\x55\xfa\x6f\xe3\x42\x09\x23\xc6\xe8\x3f\xb6\x4a\xff\x6d\x5c\x68\x49\xc6\x28\xfd\xc7\x76\xe9\xdf\xc8\xfc\x9e\x14\xc3\xe8\x3f\xb6\x4b\xff\x06\xb4\x9e\x68\x62\xf4\x1f\xdb\xa5\xff\x36\x34\x9c\xfe\x63\x94\xfe\x63\xbb\xf4\x6f\x94\x66\x4f\xae\x61\xf4\x1f\xdb\xa5\x7f\xa3\x3a\xf1\xd3\x28\xf4\xb0\xc0\xb5\x7b\x5a\xe0\x0e\x3a\x2e\x70\xd1\xf3\x02\xd7\xee\x81\x81\x01\x0d\x3f\xfb\x41\x8f\x0c\x5c\xbb\x67\x06\x06\xb4\xbe\x80\x62\xc7\x52\x76\x8f\x0d\x0c\x68\xf8\x11\x23\x7a\x70\xe0\xda\x3d\x39\x30\xa0\xe1\xc7\x8c\xf8\xd9\x81\x6b\xf9\xf0\xc0\x2c\x84\xbe\x74\x43\xcf\x1a\x2d\x9f\x1f\x98\xe8\xfa\xc2\x8a\x89\xc2\x1e\x3a\x0b\xaa\x60\xa0\xc3\x65\xa1\x2a\xd5\x63\xb3\xce\x82\x30\x98\xc5\xda\x97\x77\x98\x34\xec\x97\xeb\x37\xa0\x92\x1e\x71\x88\x50\x71\x88\xec\x8a\x43\x34\x48\x1c\x22\x54\x1c\x22\xbb\xe2\xd0\x86\x86\x67\x5c\x84\x8a\x43\x64\x57\x1c\xda\xd0\xfa\x02\x8a\xf1\x48\x64\x57\x1c\xda\xd0\x70\x16\x89\x50\x71\x88\xec\x8a\x43\x1b\x1a\x5e\xa4\x11\x2e\x0e\x91\x65\x71\x30\x0a\xa1\x2f\xdd\x50\x71\x88\x2c\x8b\x83\x81\xae\x2f\xac\xa8\x38\x44\x96\xc5\xa1\x8d\xae\x47\x1c\x22\x5c\x1c\x22\xcb\xe2\x60\x14\x6b\x5f\xde\xa1\xe2\x10\x59\x16\x07\xa3\x5e\x7b\xc5\xc1\x3b\x76\xf3\x5c\xef\x1b\xec\x9e\xeb\xa1\xdb\xe7\xa3\xad\x8d\x6f\xb7\xb5\xf1\x07\xb5\x36\x3e\xda\xda\xf8\x76\x5b\x1b\x03\x1a\x5a\x12\x3e\xda\xda\xf8\x76\x5b\x1b\x03\x1a\x9a\x71\x3e\xda\xda\xf8\x76\x5b\x1b\x03\x1a\x4a\x73\x3e\xda\xda\xf8\x76\x5b\x1b\x03\x5a\x6f\x19\x1c\x9b\x6c\x16\xd4\xcb\x2c\x84\xbe\x74\xc3\xd4\xcb\xb7\xdc\xda\x98\xe8\xfa\xc2\x8a\xa9\x97\x6f\xb9\xb5\x31\xd0\xe1\xea\xe5\xe3\xad\x8d\x6f\xb9\xb5\x31\x8b\xb5\x2f\xef\x30\xf5\xf2\x2d\xb7\x36\x66\xbd\xf6\x71\x09\xaa\x5e\xad\xb2\xf8\x06\xbb\xd7\xaf\x5e\x5e\x70\xb4\x48\x04\xdf\x42\x26\x02\x34\xfb\x42\xb4\x39\x0c\xed\x36\x87\xe1\xa0\xe6\x30\x44\x9b\xc3\xd0\x6e\x73\x68\x40\xeb\xdb\x35\xa4\x28\x42\xbb\xcd\xa1\x01\x0d\x2d\x89\x10\x6d\x0e\x43\xbb\xcd\xa1\x01\x0d\xe5\xe1\x10\x6d\x0e\x43\xbb\xcd\xa1\x01\x0d\xad\xd3\x10\x6f\x0e\x43\xcb\xcd\xa1\x59\x08\xbd\x45\x7a\x6c\x50\x2d\xc8\xab\x89\xae\x2f\xac\x98\xbc\x86\x96\x9b\x43\x03\x1d\x2e\xaf\x21\xde\x1c\x86\x96\x9b\x43\xb3\x58\xfb\xf2\x0e\x93\xd7\xd0\x72\x73\x68\xd6\x6b\x1f\x97\xa0\xf2\x1a\xda\x6e\x0e\x3b\xea\xa2\x6f\xfb\x50\x79\xdd\x17\x09\x0b\xf2\x6a\xca\x04\x2e\xaf\xe7\x5c\x03\x23\xff\x05\xc1\xc9\x99\xff\xcc\xf5\x7e\x1e\x93\x07\xff\x20\xdc\xdb\x8c\xcf\x19\x90\xce\x9b\xc8\xd3\x80\x4c\x2b\x5f\x1c\xe2\x9f\x84\x63\xf2\xea\xd7\xcf\xff\x41\x1d\x79\x41\x25\x90\x2b\xd0\x96\xbe\x97\xd3\x00\x45\xce\xc2\x67\x5e\xe4\xa1\xae\x9c\x56\x7b\xd8\x7d\x0f\x79\xea\x7a\x8f\xae\x78\x27\x81\x0d\x57\x06\x9e\x88\x37\x37\xf8\x11\x56\xf0\x2f\x5c\x09\xc8\x53\x37\xda\xb9\xe2\x5a\x71\x65\x58\x89\xfe\x90\x09\xf6\x2f\x82\xf2\xbd\xc6\xa4\x82\x15\x0e\xaa\x94\xdd\x2d\xe4\xa9\x37\xde\x79\xe2\xdb\xf0\xc4\x1b\x0f\x23\xd8\x36\xae\xe7\xc3\x5d\x79\xbe\x71\x25\xd8\xb9\x12\x59\x71\xc5\xfc\x36\xe6\x60\x57\x06\xe6\xd7\xf3\x75\x7e\x79\xb1\x6d\x57\xcc\x6f\x16\xfd\x30\x51\x19\x56\x2a\xdf\xb3\x27\x5e\x88\x7e\x0c\xfe\x81\xf3\xeb\x7b\xa6\xe2\xad\x2b\xdb\xa7\x30\x13\x09\x29\x70\x9d\x51\xd6\xf1\x0c\x66\x21\xc5\x43\x96\x82\xac\xd5\x70\xef\xa5\x21\x6b\xd7\x32\x55\x30\xba\x7a\x29\x64\x4e\x75\x35\xe7\x3e\x03\xd6\x78\xf2\x96\x72\x2e\x74\xfd\x90\x69\xb5\xf6\xe3\xaa\xd5\xba\x0b\x2a\x73\x90\x27\xb4\x28\x54\x22\x52\x38\x49\x44\xfe\x53\xc2\x4a\xa5\x41\x3e\xdb\x21\xaa\x96\x7c\x7c\x7a\xf4\xcb\x76\xd5\xda\xc8\xfe\x93\xa7\xbb\xa5\xd7\xaf\x33\x49\x04\xbf\xcf\xe6\x35\xea\xd7\x2f\xdf\x5c\x4e\xfe\x3c\xbb\x79\xff\xf6\xf6\xec\xe6\x7a\x72\x75\xb6\x85\xb7\x5e\x4c\xc8\x6a\x5f\x76\xaf\x44\x79\x5f\x2a\x90\xf5\x8b\x52\xf6\xe6\x7d\x50\xeb\xf0\x75\x5f\x65\xf4\x0e\x6a\xb4\x6f\x3b\x2f\x67\xbc\x28\xeb\xfd\xd1\xf0\x49\x8f\xb6\x57\xbe\x38\x83\x1c\x98\xcc\xce\xdf\x5f\x9c\xfd\xd9\x87\x9f\x16\xd9\xfb\x25\xac\xba\xe1\x77\x5e\xdc\xa2\x9f\xcc\xce\xc9\x45\xfb\xea\x16\x7c\x41\x95\xfa\x28\x64\xda\x70\x60\xf3\x53\xfb\xc9\xde\x65\x79\x07\x92\x83\x06\xf5\x0e\xa4\xea\x7e\x6f\xcc\xc3\xfa\x4a\xfd\x57\xb3\x93\x9f\x4f\x0e\x17\x4c\xeb\xea\xfa\x65\x35\x8d\x5c\x4a\xa1\x1a\xd0\xb2\x04\x23\x53\x52\xb8\xa7\x25\xd3\xb7\x05\x24\xfb\xf7\x6c\x52\xed\xbc\xb8\xa1\x7c\x5e\xbf\x12\xc7\x1d\x9f\x78\x41\x70\x32\x3e\x19\xff\xe4\xee\xbd\x66\x45\x81\x7c\xc8\x12\x98\x76\xdd\x31\xee\x98\x4f\x59\xfd\x60\x35\x5c\x8b\x14\xa6\x59\x2a\xd5\x06\x5c\x63\x0a\x70\x7a\xc7\x1e\x57\xbc\x12\x3c\xd3\x42\x66\x7c\xbe\x8e\xcf\xba\x20\x46\x87\xa6\x5f\x8a\xf9\x7c\x3d\xb7\x73\xd1\xca\xea\xc1\x29\x6c\x7d\xe1\x14\x94\xce\xf8\xf6\xd9\xef\x47\x93\xcf\x80\x51\xa5\xb3\x44\x01\x95\xc9\x62\x0f\x40\xf3\xc2\x66\xf5\x1b\x28\x58\x96\x50\xd5\x7c\x50\xb3\xda\x71\xae\xd6\x4c\x74\x5e\x34\xf6\xc8\x1d\x8f\xf6\xe7\x9c\x8a\x9c\x66\xb5\xf5\xe5\x49\xb5\x5d\x6c\x6f\x07\xd3\x3c\x53\x55\x6e\x4c\x05\xd7\x52\xd4\x99\x79\x4d\x73\x50\x05\x4d\xe0\x32\xbb\x87\x64\x95\x30\x70\x2e\xb3\x3c\xd3\x75\x34\xa4\x73\xbb\x0e\xd2\x24\x49\x44\xc9\xb5\x33\xab\x72\x4b\x69\xe0\xfa\x9d\x60\x65\x0e\x97\x55\x82\x3b\xa7\x9b\x6c\xd0\x42\xd2\x39\x4c\x19\x55\xca\xb9\x01\x25\x4a\x99\xc0\xef\xa5\xd0\xb4\x09\x22\xa7\x5d\x09\x12\xd5\x01\xf7\x82\xe6\x4c\x0e\xfa\xa3\x90\xcb\x59\x83\x2a\xab\xfc\x7f\x76\xcf\x28\xe7\xc0\x0e\x46\x72\xc2\x40\xea\x43\x31\x17\xd5\xc6\x8e\x52\xb8\xcb\x1a\x6f\x1c\x68\x18\x13\x2c\x4b\x56\x4d\x93\x5c\xf0\x8e\xa4\xf9\x03\xee\x16\x42\x2c\xdf\x88\x25\xf0\x49\xa9\x17\xfc\x50\xde\xdc\xdc\xd1\xa4\x9a\xf0\xd9\x9c\x50\x13\xd0\xeb\xe9\xc5\xdb\xd9\xfb\xd9\xe4\xfa\x7c\x7a\x68\x89\xc9\xec\x5c\xd5\xa1\x7f\x41\x55\x96\x4c\xca\x34\xd3\x07\xa7\x6e\x3c\x9e\x68\x9d\x25\xe6\xa4\x42\x30\x76\xcb\x00\x8a\x4a\x26\xe5\x43\xad\x03\x7e\x67\xaa\xcf\xca\x3b\x96\x25\xe7\xb3\x16\x01\xec\xe8\xe8\xc9\x97\x7f\x02\x00\x00\xff\xff\x31\x48\x50\x18\xf9\x4a\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 19193, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
