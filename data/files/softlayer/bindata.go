// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package softlayer

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x5c\x5f\x73\xdb\xb6\xf2\x7d\xcf\xa7\xc0\xe8\x29\xbf\x19\xc6\x15\xff\x96\xe9\x9b\x62\x3b\xa9\x1b\x3b\x75\xad\x24\xfd\x75\xee\x74\x32\x30\xb9\x96\x10\x81\x80\x2e\x00\xda\x51\x3a\xf9\xee\x77\x48\xc9\x12\x45\x50\x4b\xb1\x41\x66\x32\x79\x69\x13\x12\xe6\x9e\xc5\x9e\x3d\x47\x8b\x98\xfa\xe7\x09\x21\x23\x41\x0b\x18\xfd\x42\x46\x5a\xde\x19\x4e\x57\xa0\x46\x5e\x75\x19\xc4\xfd\xe8\x17\xf2\x9f\x27\x84\x10\x32\xca\xe1\xbe\xbe\x4a\xc8\xe8\xbf\x74\xf4\x84\x90\xbf\xeb\x35\x0a\x66\x4c\x0a\xbd\x5d\xf7\x4f\xfd\x5f\x42\x46\x5c\x66\xd4\x30\x29\xaa\xe7\x4e\x0a\x6d\x40\xe5\xb4\xf0\xc8\x1b\x30\x73\x50\x9c\x8a\x5c\x6f\x1e\xb7\x7d\x48\xb5\x92\x16\x8d\xcb\x9f\xa5\x80\xdd\x93\xeb\x4b\xb4\xd0\x63\x7f\xbb\x62\x73\x21\x1c\x6d\xfe\xfe\x77\xfd\xff\x2f\xde\x61\x24\xa7\x73\x10\x82\x32\x8f\x5c\x88\x9c\xd1\x2e\x04\xd9\x1c\x50\x04\xd9\x1c\xc6\xfe\xf1\x01\xcf\x28\xe7\x54\x7b\xe4\xdd\x74\xd2\x15\x2d\xa7\x1c\x8d\x96\x53\xbe\x9f\x6f\x75\x21\x6e\x5f\x48\xda\x17\x9e\xb7\x2e\xf8\xe3\xe3\x11\xbf\x54\x54\x2c\xee\x4a\x65\x3c\xf2\x0a\x54\x41\xc5\xaa\x0b\xf8\x9d\xa2\x28\xf0\x3b\x45\xc7\xc1\xf1\x41\x7f\x95\x62\x46\x5e\x4b\x31\xf3\xc8\xe9\x9c\x89\xce\xca\xcc\x17\x33\x34\xe4\x7c\x31\x1b\x16\xb2\xd4\x46\x8a\x83\xa5\x99\xcb\x12\x0f\x27\xcb\x21\xe1\x2e\xa5\xc8\xeb\x68\xaf\xbb\x82\x71\x29\xd0\x60\x5c\x8a\x21\xc1\xae\x80\xdf\xca\x52\x09\xf0\xc8\xa4\xd4\x46\x51\xde\x4d\xf6\x02\x70\xfa\x15\xc0\x87\x90\xfd\x8f\x12\x14\x18\xaa\xa4\x47\xae\xe0\x13\xcb\x64\x77\xcc\x4f\x3d\x31\x3f\x0d\x89\x79\xc5\x38\x15\x1e\xb9\x30\x94\x77\x12\xb5\x60\x3d\x29\xb2\x41\x29\x5e\x49\x61\x14\x50\xee\x91\x53\x2a\x68\xde\xbd\xab\x3d\xc5\x2c\xa4\x18\x12\xf2\x77\xcd\xa5\x47\xde\x48\xf5\x40\x3b\x33\x94\x1a\xcf\x50\xea\x41\x19\x5e\x53\xc5\xb4\x47\x2a\x19\xc8\xa0\x2b\xde\x92\x2a\x34\xde\x92\xaa\x21\xf1\xa6\x54\x90\xdf\xa4\x86\x83\x8d\xa8\x3f\x66\x68\x3c\xfd\x31\xdb\xd7\xc8\xea\xc2\x00\x4f\x98\x52\x49\xae\x69\x59\x6d\xf2\x21\x04\x54\xe2\x08\xa8\x1c\x94\x31\xc8\x92\x7b\xe4\xb5\x54\xd0\xc9\x1f\x0d\x3d\xe1\x60\x60\x38\x6a\x0c\x47\xf6\x17\x70\x29\xd7\x40\x07\x85\x63\x62\x46\x97\x52\x81\x47\xb6\x7f\xec\x0c\x2b\x70\x39\xd7\x62\x36\x28\xec\x2a\x17\xb0\xea\xd1\x3b\xbd\xca\xf1\x98\xab\x7c\x48\xcc\xb7\x72\xb1\x92\x1e\xf9\x8d\x2e\xa9\xe8\x0a\x67\xe4\x02\x0d\x67\xe4\x62\x88\xaa\xbf\x95\x4a\x0a\x23\x31\xe9\x31\x12\xef\x4d\x23\x07\xf5\xe6\x9f\x54\xcf\x99\x98\xd5\x36\x79\x76\x7a\x90\x41\x0f\x39\xde\xa1\x0f\x79\xab\x43\xab\x0b\x51\x0b\xc6\xf6\x23\x25\x13\xda\x54\xda\xf3\x76\xb5\x84\x8e\x0f\x96\x7a\x51\x56\x31\xfd\xcc\x2f\x76\x41\x73\xd0\x99\x62\xcb\x47\xdc\x3e\xc9\xa4\x02\x42\x45\x4e\xfc\x57\x2f\xc8\xcd\xe4\x6a\xb7\x34\xa3\x06\x66\x52\xad\x36\x9f\x01\x14\x5f\x91\xf7\x4c\x99\x92\x72\x32\x05\x75\x0f\x8d\x0d\xcc\x96\x55\x28\x7f\x97\x31\x2d\xaa\xbf\x77\x6e\xdb\x16\x56\x70\x14\xac\xc0\x39\xac\x00\x87\x15\x1d\x05\x2b\x72\x0e\x2b\xc2\x61\x25\x47\xc1\x4a\x9c\xc3\x4a\x70\x58\xe9\x51\xb0\x52\xe7\xb0\x52\x1c\x96\x7f\x1c\xb9\x7c\xf7\xec\xf2\x7b\xe8\xe5\x1f\x57\x48\xdf\x7d\x25\x7d\xb4\x94\x01\x26\x13\x41\x0d\x4c\x3b\xd2\x89\x60\x88\x4e\x04\x98\x4e\x34\x71\x7d\x7d\x29\xdb\xb8\xd0\x4a\x06\x98\x50\x34\x71\x7d\xbd\x52\xb4\x71\xa1\x4a\x11\x60\x4a\xd1\xc4\xf5\xf5\x04\x6b\xe3\xea\xe1\x17\x22\x15\x4d\x5c\x5f\xaf\x15\x6d\x5c\xa8\x56\x04\xa8\x56\xec\x11\xdf\x3d\xc3\x70\xb1\x08\x50\xb1\xd8\x83\xe6\xbe\x98\xb8\x5a\x44\x98\x5a\x44\x4e\xd5\x22\x1a\xa2\x16\x11\xa6\x16\x91\x53\xb5\x68\xe3\x42\x4b\x19\x61\x6a\x11\x39\x55\x8b\x36\x2e\x54\x2d\x22\x4c\x2d\x22\xa7\x6a\xd1\xc6\xd5\xc3\x2f\x44\x2d\x22\xa7\x6a\xd1\xc6\x85\xaa\x45\x84\xaa\x45\xe4\x56\x2d\x2c\xe6\xf7\x50\x0c\x53\x8b\xc8\xad\x5a\x58\xd0\x7a\xaa\x19\x1e\xb9\x6b\xa1\xfb\x5d\x0b\xfb\x1a\xf3\x48\xa6\x45\xee\xa9\x16\xf5\x70\x2d\x39\x52\x34\x12\xf7\xaa\x91\xa0\xb2\x91\x62\xf2\x9f\x3a\x95\xff\x74\x88\xfc\xa7\x98\xfc\xa7\x4e\xe5\xbf\x8d\x0b\x65\x59\x8a\xc9\x7f\xea\x54\xfe\xdb\xb8\x7a\xea\x88\x48\x46\xea\x54\xfe\xdb\xb8\x50\xc1\x48\x31\xf9\x4f\x9d\xca\x7f\x1b\x17\xda\x92\x29\x2a\xff\xa9\x5b\xf9\xb7\x98\xdf\x43\x31\x4c\xfe\x53\xb7\xf2\x6f\x41\xeb\xa9\x26\x26\xff\xa9\x5b\xf9\x6f\x43\xc3\xe5\x3f\x45\xe5\x3f\x75\x2b\xff\x56\x6b\xf6\x70\x0d\x93\xff\xd4\xad\xfc\x5b\xdd\x89\x9f\x46\xa1\x87\x05\xbe\xdb\xd3\x02\x7f\xd0\x71\x81\x8f\x9e\x17\xf8\x6e\x0f\x0c\x2c\x68\xf8\xd9\x0f\x7a\x64\xe0\xbb\x3d\x33\xb0\xa0\xf5\x15\x14\x3b\x96\x72\x7b\x6c\x60\x41\xc3\x8f\x18\xd1\x83\x03\xdf\xed\xc9\x81\x05\x0d\x3f\x66\xc4\xcf\x0e\x7c\xc7\x87\x07\x76\x23\xf4\xd1\x0d\x3d\x6b\x74\x7c\x7e\x60\xa3\xeb\x2b\x2b\x66\x0a\x7b\xe8\x1c\xb8\x82\x85\x0e\xb7\x85\xaa\x55\x8f\x65\x9d\x03\x63\xb0\x9b\xb5\x8f\x77\x98\x35\xec\xb7\xeb\x37\x90\x92\x1e\x73\x48\x50\x73\x48\xdc\x9a\x43\x32\xc8\x1c\x12\xd4\x1c\x12\xb7\xe6\xd0\x86\x86\x33\x2e\x41\xcd\x21\x71\x6b\x0e\x6d\x68\x7d\x05\xc5\x74\x24\x71\x6b\x0e\x6d\x68\xb8\x8a\x24\xa8\x39\x24\x6e\xcd\xa1\x0d\x0d\x6f\xd2\x04\x37\x87\xc4\xb1\x39\x58\x8d\xd0\x47\x37\xd4\x1c\x12\xc7\xe6\x60\xa1\xeb\x2b\x2b\x6a\x0e\x89\x63\x73\x68\xa3\xeb\x31\x87\x04\x37\x87\xc4\xb1\x39\x58\xcd\xda\xc7\x3b\xd4\x1c\x12\xc7\xe6\x60\xf5\x6b\xaf\x39\x04\xc7\x6e\x9e\x1f\x7c\x83\xdd\xf3\x03\x74\xfb\x42\x74\xb4\x09\xdd\x8e\x36\xe1\xa0\xd1\x26\x44\x47\x9b\xd0\xed\x68\x63\x41\x43\x5b\x22\x44\x47\x9b\xd0\xed\x68\x63\x41\x43\x19\x17\xa2\xa3\x4d\xe8\x76\xb4\xb1\xa0\xa1\x32\x17\xa2\xa3\x4d\xe8\x76\xb4\xb1\xa0\xf5\xb6\xc1\xb1\x64\x73\xe0\x5e\x76\x23\xf4\xd1\x0d\x73\xaf\xd0\xf1\x68\x63\xa3\xeb\x2b\x2b\xe6\x5e\xa1\xe3\xd1\xc6\x42\x87\xbb\x57\x88\x8f\x36\xa1\xe3\xd1\xc6\x6e\xd6\x3e\xde\x61\xee\x15\x3a\x1e\x6d\xec\x7e\xed\xd3\x12\xd4\xbd\x5a\x6d\xf1\x0d\x76\xaf\xdf\xbd\x82\xe8\x68\x93\x88\xbe\x85\x4d\x44\x28\xfb\x62\x74\x38\x8c\xdd\x0e\x87\xf1\xa0\xe1\x30\x46\x87\xc3\xd8\xed\x70\x68\x41\xeb\xdb\x35\xa4\x29\x62\xb7\xc3\xa1\x05\x0d\x6d\x89\x18\x1d\x0e\x63\xb7\xc3\xa1\x05\x0d\xd5\xe1\x18\x1d\x0e\x63\xb7\xc3\xa1\x05\x0d\xed\xd3\x18\x1f\x0e\x63\xc7\xc3\xa1\xdd\x08\xbd\x4d\x7a\x6c\x51\x1d\xd8\xab\x8d\xae\xaf\xac\x98\xbd\xc6\x8e\x87\x43\x0b\x1d\x6e\xaf\x31\x3e\x1c\xc6\x8e\x87\x43\xbb\x59\xfb\x78\x87\xd9\x6b\xec\x78\x38\xb4\xfb\xb5\x4f\x4b\x50\x7b\x8d\x5d\x0f\x87\x1d\x7d\xd1\xb7\x7d\xa8\xbd\xee\x9b\x84\x03\x7b\xb5\x6d\x02\xb7\xd7\x0b\x61\x80\x93\xff\x07\x29\xc8\x79\xf8\xcc\x0f\x7e\x1e\x93\xfb\xf0\x20\xdc\x29\x13\x33\x0e\xa4\xf3\x87\xc8\xd3\x88\x9c\x56\xb9\x78\x24\x3c\x89\xc7\xe4\xd5\xaf\x9f\xff\x0f\x4d\xe4\x05\x55\x40\xae\xc0\x38\xfa\xbd\x9c\x06\x28\x72\x1e\x3f\x0b\x92\x00\x4d\xe5\xac\xda\xc3\xee\x9f\x21\x4f\xfd\xe0\x31\x95\xe0\x24\x72\x91\xca\xc0\x13\xf1\xe6\x06\x3f\xc2\x8a\xfe\x45\x2a\x11\x79\xea\x27\xbb\x54\x7c\x27\xa9\x0c\x6b\xd1\x1f\x92\x60\xff\xa2\x28\xdf\x6b\x4d\x2a\x58\xf1\xa0\x4e\xd9\xfd\x08\x79\x1a\x8c\x77\x99\x84\x2e\x32\x09\xc6\xc3\x04\xb6\x8d\xeb\xf9\xf0\x54\x9e\x6f\x52\x89\x76\xa9\x24\x4e\x52\xb1\x7f\x1b\x73\x70\x2a\x03\xf9\xf5\x7c\xcd\xaf\x20\x75\x9d\x8a\xfd\x9b\x45\x3f\x4c\x55\x86\xb5\xca\xf7\x9c\x49\x10\xa3\x1f\x83\x7f\x60\x7e\x7d\xcf\x52\xbc\x4d\x65\xfb\x16\x66\xa6\x20\x07\x61\x18\xe5\x1d\xef\x60\x2e\x95\xbc\x67\x39\xa8\xda\x0d\xf7\xbe\x34\x64\x9d\x1a\xd3\x4b\x4e\x57\x2f\xa5\x2a\xa8\xa9\xd6\xdc\x31\xe0\x8d\x37\x6f\xa9\x10\xd2\xd4\x2f\x99\x56\xcf\x7e\x7c\x6a\xf5\xdc\x39\x55\x05\xa8\x13\xba\x5c\xea\x4c\xe6\x70\x92\xc9\xe2\xa7\x8c\x97\xda\x80\x7a\xb6\x43\x54\x3d\xf2\xf1\xed\xd1\x2f\xdb\xa7\xd6\x41\xf6\xdf\x3c\xdd\x3d\x7a\xfd\x75\x26\x99\x14\x77\x6c\x56\xa3\xfe\xfd\xe5\xdb\xcb\xc9\x5f\xe7\x37\x1f\xde\x4d\xcf\x6f\xde\x4c\xae\xce\xb7\xf0\xd6\x0f\x93\xaa\xda\x97\xdd\x57\xa2\x7c\x28\x35\xa8\xfa\x8b\x52\xf6\xd6\x7d\xd4\xeb\xf2\x75\xdf\xe5\xf4\x16\x6a\xb4\xef\x3a\x6f\x33\xb1\x2c\xeb\xfd\x31\xf0\xc9\x8c\xb6\x77\xbe\x78\x83\x12\x98\x5c\x5f\x7c\x78\x7d\xfe\x57\x1f\x7e\xba\x64\x1f\x16\xb0\xea\x86\xdf\x79\x73\x8b\x7e\x72\x7d\x41\x5e\xb7\xef\x6e\xc1\x2f\xa9\xd6\x0f\x52\xe5\x8d\x04\x36\x7f\x6a\xbf\xd9\xbb\x28\x6f\x41\x09\x30\xa0\xdf\x83\xd2\xdd\xdf\x1b\x73\xbf\xbe\x53\xff\xab\xd9\xc9\xcf\x27\x87\x1b\xa6\x75\x77\xfd\x65\x35\x0d\x2e\xe5\x50\x5d\x30\xaa\x04\x8b\x29\x39\xdc\xd1\x92\x9b\xe9\x12\xb2\x16\xff\x64\x3e\x2d\x6f\x05\xd4\x79\xf9\xe3\x93\x20\x8a\x4e\xc6\x27\xe3\x9f\xfc\xbd\x6f\x58\xd1\xa0\xee\x59\x06\x7b\x2b\xc7\x1d\xeb\x28\xaf\xdf\xa5\x86\x37\x32\x87\x53\x96\x2b\xbd\xc1\xd3\x58\x02\x82\xde\x72\x38\x5d\x33\xfc\x4a\x0a\x66\xa4\x62\x62\xb6\x2e\xc9\xba\x07\x46\x87\x96\x5f\xca\xd9\x6c\xbd\xb6\xf3\xa1\x55\xd4\x83\x4b\xf8\xfa\xc6\x19\x68\xc3\xc4\xf6\x75\xef\xc7\x90\xcf\x80\x53\x6d\x58\xa6\x81\xaa\x6c\xbe\x07\xa0\x79\x63\xf3\xf4\x1b\x58\x72\x96\x51\xdd\x7c\x37\xb3\xda\x64\xa1\xd7\xe2\x73\x71\xdd\xd8\x23\x7f\x3c\xda\x5f\x73\x26\x0b\xca\xea\xe8\x9b\x3e\x3f\xa9\x36\x8d\xef\xed\x63\x5e\x30\x5d\x91\xe2\x54\x0a\xa3\x64\x4d\xc9\x37\xb4\x00\xbd\xa4\x19\x5c\xb2\x3b\xc8\x56\x19\x07\xef\x92\x15\xcc\xdc\x50\x31\x03\xe5\x4d\xd7\x25\x9a\x64\x99\x2c\x85\xf1\xae\x2b\x52\x69\x03\xc2\xbc\x97\xbc\x2c\xe0\xb2\x62\xb6\x77\xb6\xa1\x81\x91\x8a\xce\xe0\x94\x53\xad\xbd\x1b\xd0\xb2\x54\x19\xfc\x51\x4a\x43\x9b\x20\x0a\x5a\x81\x6b\xb1\x23\xa9\xab\x1e\x44\xcd\x85\x02\xcc\x83\x54\x8b\xeb\x86\x44\xde\x71\x2a\x04\xf0\x83\x95\x9c\x70\x50\xe6\x50\xcd\x65\xb5\xb1\xa3\x1c\x6e\x59\xe3\x4b\x06\x1a\x71\x24\x67\xd9\xaa\x19\x4d\x48\xd1\x41\x9a\x3f\xe1\x76\x2e\xe5\xe2\xad\x5c\x80\x98\x94\x66\x2e\x0e\xf1\xe6\xe6\x96\x66\xd5\x82\xcf\x87\x16\x4c\xae\x2f\x74\x5d\xd8\x17\x54\xb3\x6c\x52\xe6\xcc\x1c\x5c\xba\xc9\x67\x62\x0c\xcb\xec\x45\x4b\xc9\xf9\x94\x03\x2c\x2b\xdf\x53\xf7\xb5\xb0\x87\x9d\x44\xbe\x2e\x6f\x39\xcb\x6a\x26\x35\x3b\x7a\xa7\x2f\x4f\xbe\xfc\x2f\x00\x00\xff\xff\xd0\xbb\x43\x8d\xca\x4a\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 19146, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
