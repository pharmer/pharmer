// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package softlayer

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x5c\x5d\x53\xdc\x3a\x12\x7d\xe7\x57\xa8\xe6\x89\xad\x72\xd8\xf1\xe7\x35\xf7\x6d\x2e\x21\x09\x21\x24\x6c\x20\xbb\x9b\xda\x4a\x51\x8a\x2d\x66\x9c\xb1\xa5\x59\x49\x06\x26\x29\xfe\xfb\x2d\x1b\x98\x0f\xcb\xb4\xac\xd0\x54\xa5\xf2\x92\x80\x6c\xd4\xa7\xd5\xdd\xe7\x4c\x37\xd8\x3f\x76\x08\x19\x71\x5a\xb1\xd1\x9f\x64\xa4\xc4\xa5\x2e\xe9\x92\xc9\x91\xd7\x2c\x33\x7e\x35\xfa\x93\xfc\x6f\x87\x10\x42\x46\x39\xbb\x6a\x57\x09\x19\xfd\x9f\x8e\x76\x08\xf9\xd2\xde\x23\xd9\xb4\x10\x5c\xad\xee\xfb\xd1\xfe\x4b\xc8\xa8\x14\x19\xd5\x85\xe0\xcd\xbe\x93\x4a\x69\x26\x73\x5a\x79\xe4\x3d\xd3\x33\x26\x4b\xca\x73\x75\xbf\xdd\x6a\x93\xe6\x4e\x5a\x6d\x2c\x7f\x17\x9c\xad\x77\x6e\x97\x68\xa5\xc6\xfe\xea\x8e\xfb\x85\x70\x74\xff\xfd\x97\xf6\xff\x5b\xef\x71\x24\x07\x33\xc6\x39\x2d\x3c\x72\xc4\xf3\x82\xf6\x21\xc8\x66\x0c\x44\x90\xcd\xd8\xd8\x1f\x6e\xf0\x25\x2d\x4b\xaa\x3c\xf2\xe9\x6c\xd2\x67\x2d\xa7\x25\x68\x2d\xa7\xe5\xb6\xbf\xcd\x42\xdc\x5d\x48\xba\x0b\xfb\x9d\x05\x7f\x3c\x1c\xf1\x2b\x49\xf9\xfc\xb2\x96\xda\x23\xaf\x99\xac\x28\x5f\xf6\x01\xbf\x94\x14\x04\x7e\x29\xe9\x38\x18\x6e\xf4\x8d\xe0\x53\x72\x2c\xf8\xd4\x23\x07\xb3\x82\xf7\x46\x66\x36\x9f\x82\x26\x67\xf3\xa9\x9b\xc9\x5a\x69\xc1\x1f\x0d\xcd\x4c\xd4\xb0\x39\x51\xbb\x98\x7b\x27\x78\xde\x5a\x3b\xee\x33\x56\x0a\x0e\x1a\x2b\x05\x77\x31\x76\xc2\xca\xaf\xa2\x96\x9c\x79\x64\x52\x2b\x2d\x69\xd9\x9f\xec\x15\x83\xd3\xaf\x62\xa5\x4b\xb2\xff\xab\x66\x92\x69\x2a\x85\x47\x4e\xd8\x4d\x91\x89\x7e\x9b\x37\x16\x9b\x37\x2e\x36\x4f\x8a\x92\x72\x8f\x1c\x69\x5a\xf6\x26\x6a\x55\x58\x5c\x2c\x9c\x5c\x3c\x11\x5c\x4b\x46\x4b\x8f\x1c\x50\x4e\xf3\xfe\x53\xb5\x04\xb3\x12\xdc\xc5\xe4\x07\x55\x0a\x8f\xbc\x17\xf2\x9a\xf6\x7a\x28\x14\xec\xa1\x50\x4e\x1e\x9e\x52\x59\x28\x8f\x34\x34\x90\xb1\x3e\x7b\x0b\x2a\x41\x7b\x0b\x2a\x5d\xec\x9d\x51\x4e\xde\x0a\xc5\x1e\x2d\x44\xf5\x2d\x03\xed\xa9\x6f\xd9\x36\x47\x36\x0b\x0e\x9a\x70\x46\x05\x39\xa5\x75\x73\xc8\x8f\x21\xa0\x02\x46\x40\x85\x93\xc7\x4c\xd4\xa5\x47\x8e\x85\x64\xbd\xf9\xa3\x98\xc5\x1c\x73\x34\x47\xb5\x2e\x81\xf3\x65\x30\x95\x2b\x46\x9d\xcc\x15\x7c\x4a\x17\x42\x32\x8f\xac\xbe\xec\x35\xcb\x61\x3a\x57\x7c\xea\x64\x76\x99\x73\xb6\xb4\xf0\x9d\x5a\xe6\xb0\xcd\x65\xee\x62\xf3\x5c\xcc\x97\xc2\x23\x6f\xe9\x82\xf2\x3e\x73\x5a\xcc\x41\x73\x5a\xcc\x5d\x58\xfd\x5c\x48\xc1\xb5\x80\xa8\x47\x0b\xb8\x36\xb5\x70\xaa\xcd\xff\x50\x35\x2b\xf8\xb4\x95\xc9\x97\x07\x8f\x66\xd0\x75\x0e\x57\xe8\x75\xde\xa9\xd0\x66\x21\xea\xc0\x58\x7d\xa4\x2c\xb8\xd2\x0d\xf7\x9c\x2f\x17\xac\xe7\x83\xa5\x9a\xd7\x8d\x4d\x3f\xf3\xab\xb5\xd1\x9c\xa9\x4c\x16\x8b\x07\xdc\x3e\xc9\x84\x64\x84\xf2\x9c\xf8\xaf\xff\x22\x1f\x27\x27\xeb\x5b\x33\xaa\xd9\x54\xc8\xe5\xfd\x67\x00\x59\x2e\xc9\xbf\x0b\xa9\x6b\x5a\x92\x33\x26\xaf\xd8\xc6\x01\x66\x8b\xc6\x94\xbf\xf6\x98\x56\xcd\xf7\xbd\xc7\xb6\x82\x15\x0c\x82\x15\xa0\xc3\x0a\x60\x58\xd1\x20\x58\x11\x3a\xac\x08\x86\x95\x0c\x82\x95\xa0\xc3\x4a\x60\x58\xe9\x20\x58\x29\x3a\xac\x14\x86\xe5\x0f\x4b\x2e\x1f\x3f\xbb\x7c\x4b\x7a\xf9\xc3\x02\xe9\xe3\x47\xd2\x07\x43\x19\x40\x34\x11\xb4\xc0\x14\x12\x4f\x04\x2e\x3c\x11\x40\x3c\xb1\x89\xeb\xe9\xa1\xec\xe2\x02\x23\x19\x40\x44\xb1\x89\xeb\xe9\x4c\xd1\xc5\x05\x32\x45\x00\x31\xc5\x26\xae\xa7\x27\x58\x17\x97\x25\xbf\x00\xaa\xd8\xc4\xf5\x74\xae\xe8\xe2\x02\xb9\x22\x00\xb9\x62\x2b\xf1\xf1\x33\x0c\x26\x8b\x00\x24\x8b\x2d\x68\xf8\xc1\x84\xd9\x22\x82\xd8\x22\x42\x65\x8b\xc8\x85\x2d\x22\x88\x2d\x22\x54\xb6\xe8\xe2\x02\x43\x19\x41\x6c\x11\xa1\xb2\x45\x17\x17\xc8\x16\x11\xc4\x16\x11\x2a\x5b\x74\x71\x59\xf2\x0b\x60\x8b\x08\x95\x2d\xba\xb8\x40\xb6\x88\x40\xb6\x88\x70\xd9\xc2\xc8\x7c\x4b\x8a\x41\x6c\x11\xe1\xb2\x85\x01\xcd\x12\xcd\x70\xe0\xa9\x85\xf8\xa7\x16\xda\x0a\x73\x60\xa6\x45\xf8\xa9\x16\x59\x72\x2d\x19\x48\x1a\x09\x3e\x6b\x24\x20\x6d\xa4\x10\xfd\xa7\xa8\xf4\x9f\xba\xd0\x7f\x0a\xd1\x7f\x8a\x4a\xff\x5d\x5c\x60\x96\xa5\x10\xfd\xa7\xa8\xf4\xdf\xc5\x65\x89\x23\x40\x19\x29\x2a\xfd\x77\x71\x81\x84\x91\x42\xf4\x9f\xa2\xd2\x7f\x17\x17\x58\x92\x29\x48\xff\x29\x2e\xfd\x1b\x99\x6f\x49\x31\x88\xfe\x53\x5c\xfa\x37\xa0\x59\xa2\x09\xd1\x7f\x8a\x4b\xff\x5d\x68\x30\xfd\xa7\x20\xfd\xa7\xb8\xf4\x6f\x94\xa6\x25\xd7\x20\xfa\x4f\x71\xe9\xdf\xa8\x4e\x78\x1a\x05\x0e\x0b\x7c\xdc\x69\x81\xef\x34\x2e\xf0\xc1\x79\x81\x8f\x3b\x30\x30\xa0\xc1\xb3\x1f\x70\x64\xe0\xe3\xce\x0c\x0c\x68\xb6\x80\x42\x63\x29\xdc\xb1\x81\x01\x0d\x1e\x31\x82\x83\x03\x1f\x77\x72\x60\x40\x83\xc7\x8c\xf0\xec\xc0\x47\x1e\x1e\x98\x85\x60\x4b\x37\x70\xd6\x88\x3c\x3f\x30\xd1\xd9\xc2\x0a\x89\xc2\x16\x3a\x04\x55\x30\xd0\xc1\xb2\xd0\x94\xea\xd0\xac\x43\x10\x06\xb3\x58\x6d\x79\x07\x49\xc3\x76\xb9\x3e\x03\x95\x58\xc4\x21\x01\xc5\x21\xc1\x15\x87\xc4\x49\x1c\x12\x50\x1c\x12\x5c\x71\xe8\x42\x83\x33\x2e\x01\xc5\x21\xc1\x15\x87\x2e\x34\x5b\x40\x21\x1e\x49\x70\xc5\xa1\x0b\x0d\x66\x91\x04\x14\x87\x04\x57\x1c\xba\xd0\xe0\x22\x4d\x60\x71\x48\x90\xc5\xc1\x28\x04\x5b\xba\x81\xe2\x90\x20\x8b\x83\x81\xce\x16\x56\x50\x1c\x12\x64\x71\xe8\xa2\xb3\x88\x43\x02\x8b\x43\x82\x2c\x0e\x46\xb1\xda\xf2\x0e\x14\x87\x04\x59\x1c\x8c\x7a\xb5\x8a\x43\x30\xf4\xf0\xfc\xe0\x19\x4e\xcf\x0f\xc0\xe3\x0b\xc1\xd6\x26\xc4\x6d\x6d\x42\xa7\xd6\x26\x04\x5b\x9b\x10\xb7\xb5\x31\xa0\x81\x25\x11\x82\xad\x4d\x88\xdb\xda\x18\xd0\xc0\x8c\x0b\xc1\xd6\x26\xc4\x6d\x6d\x0c\x68\x20\xcd\x85\x60\x6b\x13\xe2\xb6\x36\x06\x34\x6b\x19\x0c\x4d\x36\x04\xf5\x32\x0b\xc1\x96\x6e\x90\x7a\x85\xc8\xad\x8d\x89\xce\x16\x56\x48\xbd\x42\xe4\xd6\xc6\x40\x07\xab\x57\x08\xb7\x36\x21\x72\x6b\x63\x16\xab\x2d\xef\x20\xf5\x0a\x91\x5b\x1b\xb3\x5e\x6d\x5c\x02\xaa\x57\xa7\x2c\x9e\xe1\xf4\xec\xea\x15\x44\x83\x45\x22\x7a\x0e\x99\x88\xc0\xec\x8b\xc1\xe6\x30\xc6\x6d\x0e\x63\xa7\xe6\x30\x06\x9b\xc3\x18\xb7\x39\x34\xa0\xd9\x4e\x0d\x28\x8a\x18\xb7\x39\x34\xa0\x81\x25\x11\x83\xcd\x61\x8c\xdb\x1c\x1a\xd0\x40\x1e\x8e\xc1\xe6\x30\xc6\x6d\x0e\x0d\x68\x60\x9d\xc6\x70\x73\x18\x23\x37\x87\x66\x21\x58\x8b\x74\x68\x50\x11\xe4\xd5\x44\x67\x0b\x2b\x24\xaf\x31\x72\x73\x68\xa0\x83\xe5\x35\x86\x9b\xc3\x18\xb9\x39\x34\x8b\xd5\x96\x77\x90\xbc\xc6\xc8\xcd\xa1\x59\xaf\x36\x2e\x01\xe5\x35\xc6\x6e\x0e\x7b\xea\xc2\x76\x7c\xa0\xbc\x6e\x8b\x04\x82\xbc\x9a\x32\x01\xcb\xeb\x11\xd7\xac\x24\xff\x65\x82\x93\xc3\xf0\x85\x1f\xfc\x31\x26\x57\xe1\xa3\x70\xcf\x0a\x3e\x2d\x19\xe9\xfd\x21\xb2\x1b\x91\x83\xc6\x17\x8f\x84\x7b\xf1\x98\xbc\x7e\xf3\xfd\x1f\xa0\x23\x7f\x51\xc9\xc8\x09\xd3\x48\x7f\x97\xb3\x01\x8a\x1c\xc6\x2f\x82\x24\x00\x5d\x79\xd9\x9c\x61\xff\xcf\x90\x5d\x3f\x78\x70\x25\xd8\x8b\x30\x5c\x71\x9c\x88\x6f\x1e\xf0\x03\xac\xe8\x27\x5c\x89\xc8\xae\x9f\xac\x5d\xf1\x51\x5c\x71\x2b\xd1\xdf\x32\xc1\x7e\x22\x28\xbf\x6a\x4c\x1a\x58\xb1\x53\xa5\xac\x7f\x84\xec\x06\xe3\xb5\x27\x21\x86\x27\xc1\xd8\x8d\x60\xbb\xb8\xf6\xdd\x5d\xd9\xbf\x77\x25\x5a\xbb\x92\xa0\xb8\x62\xfe\x35\xa6\xb3\x2b\x8e\xf9\xb5\x7f\x97\x5f\x41\x8a\xed\x8a\xf9\x97\x45\xbf\x4d\x54\xdc\x4a\xe5\x57\xf6\x24\x88\xc1\x8f\xc1\xbf\x71\x7e\xfd\xca\x54\xbc\x72\x65\xf5\x14\x66\x26\x59\xce\xb8\x2e\x68\xd9\xf3\x0c\xe6\x42\x8a\xab\x22\x67\xb2\x55\xc3\xad\x97\x86\xdc\xb9\x56\xa8\x45\x49\x97\xaf\x84\xac\xa8\x6e\xee\xb9\x2c\x58\xb9\xf1\xe4\x2d\xe5\x5c\xe8\xf6\x21\xd3\x66\xef\x87\x5d\x9b\x7d\x67\x54\x56\x4c\xee\xd1\xc5\x42\x65\x22\x67\x7b\x99\xa8\xfe\x99\x95\xb5\xd2\x4c\xbe\x58\x23\x6a\xb6\x7c\x78\x7a\xf4\x76\xb5\x6b\x6b\x64\xfb\xc9\xd3\xf5\xd6\x77\xaf\x33\xc9\x04\xbf\x2c\xa6\x2d\xea\x0f\xaf\xce\xdf\x4d\x3e\x1f\x7e\xbc\xf8\x74\x76\xf8\xf1\xfd\xe4\xe4\x70\x05\xef\x6e\x33\x21\x9b\x73\x59\xbf\x12\xe5\xa2\x56\x4c\xb6\x2f\x4a\xd9\xba\xef\x9b\xba\x0b\x5f\xff\xd5\x92\x7e\x65\x2d\xda\x4f\xbd\x97\x0b\xbe\xa8\xdb\xf3\xd1\xec\x46\x8f\x56\x57\x6e\x3d\x27\x07\x26\xa7\x47\x17\xc7\x87\x9f\x6d\xf8\xe9\xa2\xb8\x98\xb3\x65\x3f\xfc\xde\x8b\x2b\xf4\x93\xd3\x23\x72\xdc\xbd\xba\x02\xbf\xa0\x4a\x5d\x0b\x99\x6f\x38\x70\xff\x55\xf7\xc9\xde\x79\xfd\x95\x49\xce\x34\x5b\x87\x7d\x74\xc5\xa4\xda\x7a\x83\xcc\xa6\xd3\x0f\x57\xdb\xdf\xa1\xed\xfd\xb1\x17\x6d\x40\x30\x7e\xc7\xd6\xbd\x7e\xf7\xfa\x9a\xad\x13\xcc\x59\xb3\xa4\x65\xcd\x0c\xac\x77\xff\x37\x88\x6f\x77\x6e\xff\x0e\x00\x00\xff\xff\x91\x4a\x23\xec\x16\x47\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 18198, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
