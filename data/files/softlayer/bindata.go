// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package softlayer

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x5c\xdf\x73\xd3\x30\x12\x7e\xef\x5f\xa1\xc9\x53\x6f\xc6\xf4\xe2\x9f\xe7\xf2\x16\x4a\x81\x52\x0a\x3d\x5a\xb8\x63\x6e\x98\x8e\xb0\xd5\xc4\xc4\x96\x8c\x64\xb7\x0d\x4c\xff\xf7\x1b\x3b\x6d\x7e\x58\xee\xca\xa2\xdb\x19\x86\x17\x48\x65\xc7\xfb\xad\x76\xf7\xfb\xb2\x9b\xd8\xbf\x76\x08\x19\x71\x5a\xb0\xd1\x73\x32\x52\xe2\xb2\xca\xe9\x82\xc9\x91\xd3\x2c\x33\x7e\x35\x7a\x4e\xfe\xb7\x43\x08\x21\xa3\x94\x5d\xb5\xab\x84\x8c\x7e\xd0\xfb\x57\xa5\x14\xe9\x68\x87\x90\xaf\xed\xf9\x92\x4d\x33\xc1\xd5\xea\x3d\xbf\xda\x7f\x09\x19\xe5\x22\xa1\x55\x26\x78\x63\x63\x52\xa8\x8a\xc9\x94\x16\x0e\x79\xcf\xaa\x19\x93\x39\xe5\xa9\xba\xbb\xe0\xea\x22\xcd\x99\xb4\xd8\x58\xfe\x29\x38\x5b\x5f\xb9\x5d\xa2\x85\x1a\xbb\xab\x33\xee\x16\xfc\xd1\xdd\xdf\x5f\xdb\xff\x6f\x9d\x87\x91\x1c\xcc\x18\xe7\x34\x73\xc8\x11\x4f\x33\xda\x87\x20\x99\x31\x10\x41\x32\x63\x63\x77\xb8\xc1\x97\x34\xcf\xa9\x72\xc8\xa7\xb3\x49\x9f\xb5\x94\xe6\xa0\xb5\x94\xe6\xdb\xfe\x36\x0b\x61\x77\x21\xea\x2e\xec\x77\x16\xdc\xf1\x70\xc4\xaf\x24\xe5\xf3\xcb\x5a\x56\x0e\x79\xcd\x64\x41\xf9\xa2\x0f\xf8\xa5\xa4\x20\xf0\x4b\x49\xc7\xde\x70\xa3\x6f\x04\x9f\x92\x63\xc1\xa7\x0e\x39\x98\x65\xbc\x37\x32\xb3\xf9\x14\x34\x39\x9b\x4f\xed\x4c\xd6\xaa\x12\xfc\xc1\xd0\xcc\x44\x0d\x9b\x13\xb5\x8d\xb9\x77\x82\xa7\xad\xb5\xe3\x3e\x63\xb9\xe0\xa0\xb1\x5c\x70\x1b\x63\x27\x2c\xff\x26\x6a\xc9\x99\x43\x26\xb5\xaa\x24\xcd\xfb\x93\xbd\x60\x70\xfa\x15\x2c\xb7\x49\xf6\x7f\xd7\x4c\xb2\x8a\x4a\xe1\x90\x13\x76\x93\x25\xa2\xdf\xe6\x8d\xc1\xe6\x8d\x8d\xcd\x93\x2c\xa7\xdc\x21\x47\x15\xcd\x7b\x13\xb5\xc8\x0c\x2e\x66\x56\x2e\x9e\x08\x5e\x49\x46\x73\x87\x1c\x50\x4e\xd3\xfe\x5d\x35\x04\xb3\x10\xdc\xc6\xe4\x07\x95\x0b\x87\xbc\x17\xf2\x9a\xf6\x7a\x28\x14\xec\xa1\x50\x56\x1e\x9e\x52\x99\x29\x87\x34\x34\x90\xb0\x3e\x7b\x25\x95\xa0\xbd\x92\x4a\x1b\x7b\x67\x94\x93\xb7\x42\xb1\x07\x0b\x51\x7d\x4f\x40\x7b\xea\x7b\xb2\xcd\x91\xcd\x82\x85\x26\x9c\x51\x41\x4e\x69\xdd\x6c\xf2\x43\x08\xa8\x80\x11\x50\x61\xe5\x31\x13\x75\xee\x90\x63\x21\x59\x6f\xfe\x28\x66\x30\xc7\x2c\xcd\xd1\xaa\xca\x81\xfd\x65\x30\x95\x2b\x46\xad\xcc\x65\x7c\x4a\x4b\x21\x99\x43\x56\x2f\x7b\xcd\x72\x98\xce\x15\x9f\x5a\x99\x5d\xa4\x9c\x2d\x0c\x7c\xa7\x16\x29\x6c\x73\x91\xda\xd8\x3c\x17\xf3\x85\x70\xc8\x5b\x5a\x52\xde\x67\xae\x12\x73\xd0\x5c\x25\xe6\x36\xac\x7e\x2e\xa4\xe0\x95\x80\xa8\xa7\x12\x70\x6d\x56\xc2\xaa\x36\xff\x43\xd5\x2c\xe3\xd3\x56\x26\x5f\x1e\x3c\x98\x41\xd7\x29\x5c\xa1\xd7\x69\xa7\x42\x9b\x85\xa0\x03\x63\xf5\x91\x32\xe3\xaa\x6a\xb8\xe7\x7c\x51\xb2\x9e\x0f\x96\x6a\x5e\x37\x36\xdd\xc4\x2d\xd6\x46\x53\xa6\x12\x99\x95\xf7\xb8\x5d\x92\x08\xc9\x08\xe5\x29\x71\x5f\xbf\x20\x1f\x27\x27\xeb\x53\x13\x5a\xb1\xa9\x90\x8b\xbb\xcf\x00\x32\x5f\x90\xcf\x99\xac\x6a\x9a\x93\x33\x26\xaf\xd8\xc6\x06\x26\x65\x63\xca\x5d\x7b\x4c\x8b\xe6\xef\xde\x6d\x5b\xc1\xf2\x06\xc1\xf2\xd0\x61\x79\x30\xac\x60\x10\xac\x00\x1d\x56\x00\xc3\x8a\x06\xc1\x8a\xd0\x61\x45\x30\xac\x78\x10\xac\x18\x1d\x56\x0c\xc3\x72\x87\x25\x97\x8b\x9f\x5d\xae\x21\xbd\xdc\x61\x81\x74\xf1\x23\xe9\x82\xa1\xf4\x20\x9a\xf0\x5a\x60\x0a\x89\x27\x3c\x1b\x9e\xf0\x20\x9e\xd8\xc4\xf5\xf8\x50\x76\x71\x81\x91\xf4\x20\xa2\xd8\xc4\xf5\x78\xa6\xe8\xe2\x02\x99\xc2\x83\x98\x62\x13\xd7\xe3\x13\xac\x8b\xcb\x90\x5f\x00\x55\x6c\xe2\x7a\x3c\x57\x74\x71\x81\x5c\xe1\x81\x5c\xb1\x95\xf8\xf8\x19\x06\x93\x85\x07\x92\xc5\x16\x34\xfc\x60\xc2\x6c\x11\x40\x6c\x11\xa0\xb2\x45\x60\xc3\x16\x01\xc4\x16\x01\x2a\x5b\x74\x71\x81\xa1\x0c\x20\xb6\x08\x50\xd9\xa2\x8b\x0b\x64\x8b\x00\x62\x8b\x00\x95\x2d\xba\xb8\x0c\xf9\x05\xb0\x45\x80\xca\x16\x5d\x5c\x20\x5b\x04\x20\x5b\x04\xb8\x6c\xa1\x65\xbe\x21\xc5\x20\xb6\x08\x70\xd9\x42\x83\x66\x88\xa6\x3f\x70\xd7\x7c\xfc\x5d\xf3\x4d\x85\x39\x30\xd3\x02\xfc\x54\x0b\x0c\xb9\x16\x0d\x24\x8d\x08\x9f\x35\x22\x90\x36\x62\x88\xfe\x63\x54\xfa\x8f\x6d\xe8\x3f\x86\xe8\x3f\x46\xa5\xff\x2e\x2e\x30\xcb\x62\x88\xfe\x63\x54\xfa\xef\xe2\x32\xc4\x11\xa0\x8c\x18\x95\xfe\xbb\xb8\x40\xc2\x88\x21\xfa\x8f\x51\xe9\xbf\x8b\x0b\x2c\xc9\x18\xa4\xff\x18\x97\xfe\xb5\xcc\x37\xa4\x18\x44\xff\x31\x2e\xfd\x6b\xd0\x0c\xd1\x84\xe8\x3f\xc6\xa5\xff\x2e\x34\x98\xfe\x63\x90\xfe\x63\x5c\xfa\xd7\x4a\xd3\x90\x6b\x10\xfd\xc7\xb8\xf4\xaf\x55\x27\x3c\x8d\x02\x87\x05\x2e\xee\xb4\xc0\xb5\x1a\x17\xb8\xe0\xbc\xc0\xc5\x1d\x18\x68\xd0\xe0\xd9\x0f\x38\x32\x70\x71\x67\x06\x1a\x34\x53\x40\xa1\xb1\x14\xee\xd8\x40\x83\x06\x8f\x18\xc1\xc1\x81\x8b\x3b\x39\xd0\xa0\xc1\x63\x46\x78\x76\xe0\x22\x0f\x0f\xf4\x42\x30\xa5\x1b\x38\x6b\x44\x9e\x1f\xe8\xe8\x4c\x61\x85\x44\x61\x0b\x1d\x82\x2a\x68\xe8\x60\x59\x68\x4a\x75\x68\xd6\x21\x08\x83\x5e\xac\xa6\xbc\x83\xa4\x61\xbb\x5c\x9f\x80\x4a\x0c\xe2\x10\x81\xe2\x10\xe1\x8a\x43\x64\x25\x0e\x11\x28\x0e\x11\xae\x38\x74\xa1\xc1\x19\x17\x81\xe2\x10\xe1\x8a\x43\x17\x9a\x29\xa0\x10\x8f\x44\xb8\xe2\xd0\x85\x06\xb3\x48\x04\x8a\x43\x84\x2b\x0e\x5d\x68\x70\x91\x46\xb0\x38\x44\xc8\xe2\xa0\x15\x82\x29\xdd\x40\x71\x88\x90\xc5\x41\x43\x67\x0a\x2b\x28\x0e\x11\xb2\x38\x74\xd1\x19\xc4\x21\x82\xc5\x21\x42\x16\x07\xad\x58\x4d\x79\x07\x8a\x43\x84\x2c\x0e\x5a\xbd\x1a\xc5\xc1\x1b\xba\x79\xae\xf7\x04\xbb\xe7\x7a\xe0\xf6\xf9\x60\x6b\xe3\xe3\xb6\x36\xbe\x55\x6b\xe3\x83\xad\x8d\x8f\xdb\xda\x68\xd0\xc0\x92\xf0\xc1\xd6\xc6\xc7\x6d\x6d\x34\x68\x60\xc6\xf9\x60\x6b\xe3\xe3\xb6\x36\x1a\x34\x90\xe6\x7c\xb0\xb5\xf1\x71\x5b\x1b\x0d\x9a\xb1\x0c\x86\x26\x1b\x82\x7a\xe9\x85\x60\x4a\x37\x48\xbd\x7c\xe4\xd6\x46\x47\x67\x0a\x2b\xa4\x5e\x3e\x72\x6b\xa3\xa1\x83\xd5\xcb\x87\x5b\x1b\x1f\xb9\xb5\xd1\x8b\xd5\x94\x77\x90\x7a\xf9\xc8\xad\x8d\x5e\xaf\x26\x2e\x01\xd5\xab\x53\x16\x4f\xb0\x7b\x66\xf5\xf2\x82\xc1\x22\x11\x3c\x85\x4c\x04\x60\xf6\x85\x60\x73\x18\xe2\x36\x87\xa1\x55\x73\x18\x82\xcd\x61\x88\xdb\x1c\x6a\xd0\x4c\xbb\x06\x14\x45\x88\xdb\x1c\x6a\xd0\xc0\x92\x08\xc1\xe6\x30\xc4\x6d\x0e\x35\x68\x20\x0f\x87\x60\x73\x18\xe2\x36\x87\x1a\x34\xb0\x4e\x43\xb8\x39\x0c\x91\x9b\x43\xbd\x10\x8c\x45\x3a\x34\xa8\x08\xf2\xaa\xa3\x33\x85\x15\x92\xd7\x10\xb9\x39\xd4\xd0\xc1\xf2\x1a\xc2\xcd\x61\x88\xdc\x1c\xea\xc5\x6a\xca\x3b\x48\x5e\x43\xe4\xe6\x50\xaf\x57\x13\x97\x80\xf2\x1a\x62\x37\x87\x3d\x75\x61\xda\x3e\x50\x5e\xb7\x45\x02\x41\x5e\x75\x99\x80\xe5\xf5\x88\x57\x2c\x27\xff\x65\x82\x93\x43\xff\x99\xeb\xfd\x6b\x4c\xae\xfc\x07\xe1\x9e\x65\x7c\x9a\x33\xd2\xfb\x26\xb2\x1b\x90\x83\xc6\x17\x87\xf8\x7b\xe1\x98\xbc\x7e\xf3\xf3\x1f\xa0\x23\x2f\xa8\x64\xe4\x84\x55\x48\xbf\xcb\xd9\x00\x45\x0e\xc3\x67\x5e\xe4\x81\xae\xbc\x6c\xf6\xb0\xff\x3d\x64\xd7\xf5\xee\x5d\xf1\xf6\x02\x0c\x57\x2c\x27\xe2\x9b\x1b\x7c\x0f\x2b\xf8\x0d\x57\x02\xb2\xeb\x46\x6b\x57\x5c\x14\x57\xec\x4a\xf4\xaf\x4c\xb0\xdf\x08\xca\x9f\x1a\x93\x06\x56\x68\x55\x29\xeb\xb7\x90\x5d\x6f\xbc\xf6\xc4\xc7\xf0\xc4\x1b\xdb\x11\x6c\x17\xd7\xbe\xbd\x2b\xfb\x77\xae\x04\x6b\x57\x22\x14\x57\xf4\x5f\x63\x5a\xbb\x62\x99\x5f\xfb\xcb\xfc\xf2\x62\x6c\x57\xf4\x5f\x16\xfd\x35\x51\xb1\x2b\x95\x3f\xd9\x13\x2f\x04\x3f\x06\xff\xc5\xf9\xf5\x27\x53\xf1\xca\x95\xd5\x5d\x98\x89\x64\x29\xe3\x55\x46\xf3\x9e\x7b\x30\x4b\x29\xae\xb2\x94\xc9\x56\x0d\xb7\x1e\x20\xb2\x74\x2d\x53\x65\x4e\x17\xaf\x84\x2c\x68\xd5\x9c\x73\x99\xb1\x7c\xe3\xce\x5b\xca\xb9\xa8\xda\x9b\x4c\x9b\x6b\xdf\x5f\xb5\xb9\xee\x8c\xca\x82\xc9\x3d\x5a\x96\x2a\x11\x29\xdb\x4b\x44\xf1\xcf\x24\xaf\x55\xc5\xe4\xb3\x35\xa2\xe6\x92\xf7\x77\x8f\xde\xae\xae\xda\x1a\xd9\xbe\xf3\x74\x7d\xe9\xe5\xa3\x4d\x12\xc1\x2f\xb3\x69\x8b\xfa\xc3\xab\xf3\x77\x93\x2f\x87\x1f\x2f\x26\xa7\x47\x17\x9f\xce\x0e\x3f\xbe\x9f\x9c\x1c\xae\x20\x2e\x2f\x28\x64\xb3\x37\xeb\x47\xa4\x5c\xd0\x32\xbb\xa8\x15\x93\xed\xc3\x53\xb6\xce\xfd\xae\x96\x61\xec\x3f\x9a\xd3\x6f\xac\x45\x3d\x39\x3d\x22\x9f\x7a\x4f\xc9\x78\x59\xb7\x7b\x55\xb1\x9b\x6a\xb4\x3a\x72\xeb\x58\x3b\x73\x7c\xf8\x65\x88\x1f\x73\xb6\xe8\x77\x81\x96\xd9\x71\xf7\xd8\x96\x03\xda\xd1\x15\xf6\x92\x2a\x75\x2d\x64\xba\x81\xff\xee\x55\xf7\x26\xdf\x79\xfd\x8d\x49\xce\x2a\xa6\x3e\x33\xa9\xfa\x1f\x21\x73\xb5\x3c\xd2\x7e\x81\xb6\x17\xef\x8d\x1f\xfe\x7a\x6d\xfb\xe8\xf2\x19\x36\x1b\x69\x95\xb2\x66\xa1\x92\x35\x5b\xc3\x1e\xfd\xa0\xfa\x5a\xfb\x6c\x9b\xe5\xea\xce\x26\xfe\x16\xf7\xce\xed\xff\x03\x00\x00\xff\xff\xc2\xc3\x6b\x2c\x39\x47\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 18233, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
