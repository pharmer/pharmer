// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package softlayer

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x5c\xdf\x53\xd4\x48\x10\x7e\xe7\xaf\x98\xda\x27\xae\x2a\x72\x9b\x9f\x17\x7c\x5b\x11\x15\x11\xe5\x04\xbd\xb3\xae\x2c\x6a\x4c\x86\xdd\xb8\xc9\x4c\x9c\x49\x80\xd5\xe2\x7f\xbf\x4a\x80\xfd\x91\x09\x3d\x19\x69\xaa\x2c\x5f\x14\x26\x61\xfa\xeb\xe9\xee\xef\xdb\x6e\x48\x7e\x6c\x11\x32\xe2\xb4\x60\xa3\xa7\x64\xa4\xc4\x79\x95\xd3\x05\x93\x23\xa7\x59\x66\xfc\x62\xf4\x94\xfc\xb7\x45\x08\x21\xa3\x94\x5d\xb4\xab\x84\x8c\xbe\xd1\xd1\x16\x21\x9f\xdb\x7b\x24\x9b\x66\x82\xab\xe5\x7d\x3f\xda\x7f\x09\x19\xe5\x22\xa1\x55\x26\x78\xb3\xef\xa4\x50\x15\x93\x29\x2d\x1c\xf2\x96\x55\x33\x26\x73\xca\x53\x75\xbb\xdd\x72\x93\xe6\x4e\x5a\xac\x2d\x7f\x17\x9c\xad\x76\x6e\x97\x68\xa1\xc6\xee\xf2\x8e\xdb\x05\x7f\x74\xfb\xfd\xe7\xf6\xff\x6b\xe7\x7e\x24\x7b\x33\xc6\x39\xcd\x1c\x72\xc0\xd3\x8c\xf6\x21\x48\x66\x0c\x44\x90\xcc\xd8\xd8\x1d\x6e\xf0\x39\xcd\x73\xaa\x1c\xf2\xe1\x64\xd2\x67\x2d\xa5\x39\x68\x2d\xa5\xf9\xa6\xbf\xcd\x42\xd8\x5d\x88\xba\x0b\xbb\x9d\x05\x77\x3c\x1c\xf1\x0b\x49\xf9\xfc\xbc\x96\x95\x43\x5e\x32\x59\x50\xbe\xe8\x03\x7e\x2e\x29\x08\xfc\x5c\xd2\xb1\x37\xdc\xe8\x2b\xc1\xa7\xe4\x50\xf0\xa9\x43\xf6\x66\x19\xef\x8d\xcc\x6c\x3e\x05\x4d\xce\xe6\x53\x3b\x93\xb5\xaa\x04\xbf\x37\x34\x33\x51\xc3\xe6\x44\x6d\x63\xee\x8d\xe0\x69\x6b\xed\xb0\xcf\x58\x2e\x38\x68\x2c\x17\xdc\xc6\xd8\x11\xcb\xbf\x88\x5a\x72\xe6\x90\x49\xad\x2a\x49\xf3\xfe\x64\x2f\x18\x9c\x7e\x05\xcb\x6d\x92\xfd\xef\x9a\x49\x56\x51\x29\x1c\x72\xc4\xae\xb2\x44\xf4\xdb\xbc\x32\xd8\xbc\xb2\xb1\x79\x94\xe5\x94\x3b\xe4\xa0\xa2\x79\x6f\xa2\x16\x99\xc1\xc5\xcc\xca\xc5\x23\xc1\x2b\xc9\x68\xee\x90\x3d\xca\x69\xda\x7f\xaa\x86\x60\x16\x82\xdb\x98\x7c\xa7\x72\xe1\x90\xb7\x42\x5e\xd2\x5e\x0f\x85\x82\x3d\x14\xca\xca\xc3\x63\x2a\x33\xe5\x90\x86\x06\x12\xd6\x67\xaf\xa4\x12\xb4\x57\x52\x69\x63\xef\x84\x72\xf2\x5a\x28\x76\x6f\x21\xaa\xaf\x09\x68\x4f\x7d\x4d\x36\x39\xb2\x59\xb0\xd0\x84\x13\x2a\xc8\x31\xad\x9b\x43\xbe\x0f\x01\x15\x30\x02\x2a\xac\x3c\x66\xa2\xce\x1d\x72\x28\x24\xeb\xcd\x1f\xc5\x0c\xe6\x98\xa5\x39\x5a\x55\x39\x70\xbe\x0c\xa6\x72\xc5\xa8\x95\xb9\x8c\x4f\x69\x29\x24\x73\xc8\xf2\xcb\x5e\xb3\x1c\xa6\x73\xc5\xa7\x56\x66\x17\x29\x67\x0b\x03\xdf\xa9\x45\x0a\xdb\x5c\xa4\x36\x36\x4f\xc5\x7c\x21\x1c\xf2\x9a\x96\x94\xf7\x99\xab\xc4\x1c\x34\x57\x89\xb9\x0d\xab\x9f\x0a\x29\x78\x25\x20\xea\xa9\x04\x5c\x9b\x95\xb0\xaa\xcd\x7f\xa8\x9a\x65\x7c\xda\xca\xe4\xf3\xbd\x7b\x33\xe8\x32\x85\x2b\xf4\x32\xed\x54\x68\xb3\x10\x74\x60\x2c\x3f\x52\x66\x5c\x55\x0d\xf7\x9c\x2e\x4a\xd6\xf3\xc1\x52\xcd\xeb\xc6\xa6\x9b\xb8\xc5\xca\x68\xca\x54\x22\xb3\xf2\x0e\xb7\x4b\x12\x21\x19\xa1\x3c\x25\xee\xcb\x67\xe4\xfd\xe4\x68\x75\x6b\x42\x2b\x36\x15\x72\x71\xfb\x19\x40\xe6\x0b\xf2\x31\x93\x55\x4d\x73\x72\xc2\xe4\x05\x5b\x3b\xc0\xa4\x6c\x4c\xb9\x2b\x8f\x69\xd1\x7c\xdf\x7b\x6c\x4b\x58\xde\x20\x58\x1e\x3a\x2c\x0f\x86\x15\x0c\x82\x15\xa0\xc3\x0a\x60\x58\xd1\x20\x58\x11\x3a\xac\x08\x86\x15\x0f\x82\x15\xa3\xc3\x8a\x61\x58\xee\xb0\xe4\x72\xf1\xb3\xcb\x35\xa4\x97\x3b\x2c\x90\x2e\x7e\x24\x5d\x30\x94\x1e\x44\x13\x5e\x0b\x4c\x21\xf1\x84\x67\xc3\x13\x1e\xc4\x13\xeb\xb8\x1e\x1e\xca\x2e\x2e\x30\x92\x1e\x44\x14\xeb\xb8\x1e\xce\x14\x5d\x5c\x20\x53\x78\x10\x53\xac\xe3\x7a\x78\x82\x75\x71\x19\xf2\x0b\xa0\x8a\x75\x5c\x0f\xe7\x8a\x2e\x2e\x90\x2b\x3c\x90\x2b\x36\x12\x1f\x3f\xc3\x60\xb2\xf0\x40\xb2\xd8\x80\x86\x1f\x4c\x98\x2d\x02\x88\x2d\x02\x54\xb6\x08\x6c\xd8\x22\x80\xd8\x22\x40\x65\x8b\x2e\x2e\x30\x94\x01\xc4\x16\x01\x2a\x5b\x74\x71\x81\x6c\x11\x40\x6c\x11\xa0\xb2\x45\x17\x97\x21\xbf\x00\xb6\x08\x50\xd9\xa2\x8b\x0b\x64\x8b\x00\x64\x8b\x00\x97\x2d\xb4\xcc\x37\xa4\x18\xc4\x16\x01\x2e\x5b\x68\xd0\x0c\xd1\xf4\x07\x9e\x9a\x8f\x7f\x6a\xbe\xa9\x30\x07\x66\x5a\x80\x9f\x6a\x81\x21\xd7\xa2\x81\xa4\x11\xe1\xb3\x46\x04\xd2\x46\x0c\xd1\x7f\x8c\x4a\xff\xb1\x0d\xfd\xc7\x10\xfd\xc7\xa8\xf4\xdf\xc5\x05\x66\x59\x0c\xd1\x7f\x8c\x4a\xff\x5d\x5c\x86\x38\x02\x94\x11\xa3\xd2\x7f\x17\x17\x48\x18\x31\x44\xff\x31\x2a\xfd\x77\x71\x81\x25\x19\x83\xf4\x1f\xe3\xd2\xbf\x96\xf9\x86\x14\x83\xe8\x3f\xc6\xa5\x7f\x0d\x9a\x21\x9a\x10\xfd\xc7\xb8\xf4\xdf\x85\x06\xd3\x7f\x0c\xd2\x7f\x8c\x4b\xff\x5a\x69\x1a\x72\x0d\xa2\xff\x18\x97\xfe\xb5\xea\x84\xa7\x51\xe0\xb0\xc0\xc5\x9d\x16\xb8\x56\xe3\x02\x17\x9c\x17\xb8\xb8\x03\x03\x0d\x1a\x3c\xfb\x01\x47\x06\x2e\xee\xcc\x40\x83\x66\x0a\x28\x34\x96\xc2\x1d\x1b\x68\xd0\xe0\x11\x23\x38\x38\x70\x71\x27\x07\x1a\x34\x78\xcc\x08\xcf\x0e\x5c\xe4\xe1\x81\x5e\x08\xa6\x74\x03\x67\x8d\xc8\xf3\x03\x1d\x9d\x29\xac\x90\x28\x6c\xa0\x43\x50\x05\x0d\x1d\x2c\x0b\x4d\xa9\x0e\xcd\x3a\x04\x61\xd0\x8b\xd5\x94\x77\x90\x34\x6c\x96\xeb\x23\x50\x89\x41\x1c\x22\x50\x1c\x22\x5c\x71\x88\xac\xc4\x21\x02\xc5\x21\xc2\x15\x87\x2e\x34\x38\xe3\x22\x50\x1c\x22\x5c\x71\xe8\x42\x33\x05\x14\xe2\x91\x08\x57\x1c\xba\xd0\x60\x16\x89\x40\x71\x88\x70\xc5\xa1\x0b\x0d\x2e\xd2\x08\x16\x87\x08\x59\x1c\xb4\x42\x30\xa5\x1b\x28\x0e\x11\xb2\x38\x68\xe8\x4c\x61\x05\xc5\x21\x42\x16\x87\x2e\x3a\x83\x38\x44\xb0\x38\x44\xc8\xe2\xa0\x15\xab\x29\xef\x40\x71\x88\x90\xc5\x41\xab\x57\xa3\x38\x78\x43\x0f\xcf\xf5\x1e\xe1\xf4\x5c\x0f\x3c\x3e\x1f\x6c\x6d\x7c\xdc\xd6\xc6\xb7\x6a\x6d\x7c\xb0\xb5\xf1\x71\x5b\x1b\x0d\x1a\x58\x12\x3e\xd8\xda\xf8\xb8\xad\x8d\x06\x0d\xcc\x38\x1f\x6c\x6d\x7c\xdc\xd6\x46\x83\x06\xd2\x9c\x0f\xb6\x36\x3e\x6e\x6b\xa3\x41\x33\x96\xc1\xd0\x64\x43\x50\x2f\xbd\x10\x4c\xe9\x06\xa9\x97\x8f\xdc\xda\xe8\xe8\x4c\x61\x85\xd4\xcb\x47\x6e\x6d\x34\x74\xb0\x7a\xf9\x70\x6b\xe3\x23\xb7\x36\x7a\xb1\x9a\xf2\x0e\x52\x2f\x1f\xb9\xb5\xd1\xeb\xd5\xc4\x25\xa0\x7a\x75\xca\xe2\x11\x4e\xcf\xac\x5e\x5e\x30\x58\x24\x82\xc7\x90\x89\x00\xcc\xbe\x10\x6c\x0e\x43\xdc\xe6\x30\xb4\x6a\x0e\x43\xb0\x39\x0c\x71\x9b\x43\x0d\x9a\xe9\xd4\x80\xa2\x08\x71\x9b\x43\x0d\x1a\x58\x12\x21\xd8\x1c\x86\xb8\xcd\xa1\x06\x0d\xe4\xe1\x10\x6c\x0e\x43\xdc\xe6\x50\x83\x06\xd6\x69\x08\x37\x87\x21\x72\x73\xa8\x17\x82\xb1\x48\x87\x06\x15\x41\x5e\x75\x74\xa6\xb0\x42\xf2\x1a\x22\x37\x87\x1a\x3a\x58\x5e\x43\xb8\x39\x0c\x91\x9b\x43\xbd\x58\x4d\x79\x07\xc9\x6b\x88\xdc\x1c\xea\xf5\x6a\xe2\x12\x50\x5e\x43\xec\xe6\xb0\xa7\x2e\x4c\xc7\x07\xca\xeb\xa6\x48\x20\xc8\xab\x2e\x13\xb0\xbc\x1e\xf0\x8a\xe5\xe4\x5f\x26\x38\xd9\xf7\x9f\xb8\xde\x5f\x63\x72\xe1\xdf\x0b\xf7\x24\xe3\xd3\x9c\x91\xde\x1f\x22\xdb\x01\xd9\x6b\x7c\x71\x88\xbf\x13\x8e\xc9\xcb\x57\xdf\xff\x00\x1d\x79\x46\x25\x23\x47\xac\x42\xfa\xbb\x9c\x35\x50\x64\x3f\x7c\xe2\x45\x1e\xe8\xca\xf3\xe6\x0c\xfb\x7f\x86\x6c\xbb\xde\x9d\x2b\xde\x4e\x80\xe1\x8a\xe5\x44\x7c\xfd\x80\xef\x60\x05\x3f\xe1\x4a\x40\xb6\xdd\x68\xe5\x8a\x8b\xe2\x8a\x5d\x89\xfe\x96\x09\xf6\x13\x41\xf9\x55\x63\xd2\xc0\x0a\xad\x2a\x65\xf5\x23\x64\xdb\x1b\xaf\x3c\xf1\x31\x3c\xf1\xc6\x76\x04\xdb\xc5\xb5\x6b\xef\xca\xee\xad\x2b\xc1\xca\x95\x08\xc5\x15\xfd\xaf\x31\xad\x5d\xb1\xcc\xaf\xdd\x9b\xfc\xf2\x62\x6c\x57\xf4\xbf\x2c\xfa\x6d\xa2\x62\x57\x2a\xbf\xb2\x27\x5e\x08\x7e\x0c\xfe\x8d\xf3\xeb\x57\xa6\xe2\xa5\x2b\xcb\xa7\x30\x13\xc9\x52\xc6\xab\x8c\xe6\x3d\xcf\x60\x96\x52\x5c\x64\x29\x93\xad\x1a\x6e\xbc\x34\xe4\xc6\xb5\x4c\x95\x39\x5d\xbc\x10\xb2\xa0\x55\x73\xcf\x79\xc6\xf2\xb5\x27\x6f\x29\xe7\xa2\x6a\x1f\x32\x6d\xf6\xbe\xdb\xb5\xd9\x77\x46\x65\xc1\xe4\x0e\x2d\x4b\x95\x88\x94\xed\x24\xa2\xf8\x33\xc9\x6b\x55\x31\xf9\x64\x85\xa8\xd9\xf2\xee\xe9\xd1\xeb\xe5\xae\xad\x91\xcd\x27\x4f\x57\x5b\xdf\xbc\xce\x24\x11\xfc\x3c\x9b\xb6\xa8\xdf\xbd\x38\x7d\x33\xf9\xb4\xff\xfe\x6c\x72\x7c\x70\xf6\xe1\x64\xff\xfd\xdb\xc9\xd1\xfe\x12\xe2\xcd\x86\x42\x36\x67\xb3\x7a\x2d\xca\x19\x2d\xb3\xb3\x5a\x31\xd9\xbe\x30\x65\xe3\xde\xaf\xea\x26\x8c\xfd\x57\x73\xfa\x85\xb5\xa8\x27\xc7\x07\xe4\x43\xef\x2d\x19\x2f\xeb\xf6\xac\x2a\x76\x55\x8d\x96\x57\xae\x1d\x6b\x67\x0e\xf7\x3f\x0d\xf1\x63\xce\x16\xfd\x2e\xd0\x32\x3b\xec\x5e\xdb\x70\x40\xbb\xba\xc4\x5e\x52\xa5\x2e\x85\x4c\xd7\xf0\xdf\x7e\xd5\x7d\xc8\x77\x5e\x7f\x61\x92\xb3\x8a\xa9\x8f\x4c\xaa\xfe\x57\xc8\x5c\xdc\x5c\x69\x7f\x81\xb6\x13\xef\x8c\xef\xff\xf5\xda\xe6\xd5\x9b\xf7\xd6\xac\xa5\x55\xca\x9a\x85\x4a\xd6\x6c\x05\x7b\xf4\x8d\xea\x6b\xa5\x14\xe9\xed\xea\xd6\x3a\xfe\x16\xf7\xd6\xf5\xff\x01\x00\x00\xff\xff\x1f\x04\xcb\x2c\x2d\x47\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 18221, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
