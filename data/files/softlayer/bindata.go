// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package softlayer

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x5c\x5d\x73\xdb\xb6\x12\x7d\xcf\xaf\xc0\xe8\x29\x77\x86\x71\xc5\xcf\xcb\xf4\x4d\xb1\x9d\xd4\x8d\x9d\xba\x56\x92\xde\xce\x9d\x4e\x06\x26\xd7\x12\x22\x10\xd0\x05\x40\x3b\x4a\x27\xff\xfd\x0e\x29\x59\xa2\x08\x6a\x29\x36\xc8\x4c\x26\x2f\x6d\x42\xc2\xdc\xb3\xd8\xb3\xe7\x68\x11\x53\x7f\x3f\x21\x64\x24\x68\x01\xa3\x9f\xc9\x48\xcb\x3b\xc3\xe9\x0a\xd4\xc8\xab\x2e\x83\xb8\x1f\xfd\x4c\xfe\xfb\x84\x10\x42\x46\x39\xdc\xd7\x57\x09\x19\xfd\x8f\x8e\x9e\x10\xf2\x57\xbd\x46\xc1\x8c\x49\xa1\xb7\xeb\xfe\xae\xff\x4b\xc8\x88\xcb\x8c\x1a\x26\x45\xf5\xdc\x49\xa1\x0d\xa8\x9c\x16\x1e\x79\x03\x66\x0e\x8a\x53\x91\xeb\xcd\xe3\xb6\x0f\xa9\x56\xd2\xa2\x71\xf9\xb3\x14\xb0\x7b\x72\x7d\x89\x16\x7a\xec\x6f\x57\x6c\x2e\x84\xa3\xcd\xdf\xff\xaa\xff\xff\xc5\x3b\x8c\xe4\x74\x0e\x42\x50\xe6\x91\x0b\x91\x33\xda\x85\x20\x9b\x03\x8a\x20\x9b\xc3\xd8\x3f\x3e\xe0\x19\xe5\x9c\x6a\x8f\xbc\x9b\x4e\xba\xa2\xe5\x94\xa3\xd1\x72\xca\xf7\xf3\xad\x2e\xc4\xed\x0b\x49\xfb\xc2\xf3\xd6\x05\x7f\x7c\x3c\xe2\x97\x8a\x8a\xc5\x5d\xa9\x8c\x47\x5e\x81\x2a\xa8\x58\x75\x01\xbf\x53\x14\x05\x7e\xa7\xe8\x38\x38\x3e\xe8\x2f\x52\xcc\xc8\x6b\x29\x66\x1e\x39\x9d\x33\xd1\x59\x99\xf9\x62\x86\x86\x9c\x2f\x66\xc3\x42\x96\xda\x48\x71\xb0\x34\x73\x59\xe2\xe1\x64\x39\x24\xdc\xa5\x14\x79\x1d\xed\x75\x57\x30\x2e\x05\x1a\x8c\x4b\x31\x24\xd8\x15\xf0\x5b\x59\x2a\x01\x1e\x99\x94\xda\x28\xca\xbb\xc9\x5e\x00\x4e\xbf\x02\xf8\x10\xb2\xff\x5e\x82\x02\x43\x95\xf4\xc8\x15\x7c\x62\x99\xec\x8e\xf9\xa9\x27\xe6\xa7\x21\x31\xaf\x18\xa7\xc2\x23\x17\x86\xf2\x4e\xa2\x16\xac\x27\x45\x36\x28\xc5\x2b\x29\x8c\x02\xca\x3d\x72\x4a\x05\xcd\xbb\x77\xb5\xa7\x98\x85\x14\x43\x42\xfe\xa6\xb9\xf4\xc8\x1b\xa9\x1e\x68\x67\x86\x52\xe3\x19\x4a\x3d\x28\xc3\x6b\xaa\x98\xf6\x48\x25\x03\x19\x74\xc5\x5b\x52\x85\xc6\x5b\x52\x35\x24\xde\x94\x0a\xf2\xab\xd4\x70\xb0\x11\xf5\xc7\x0c\x8d\xa7\x3f\x66\xfb\x1a\x59\x5d\x18\xe0\x09\x53\x2a\xc9\x35\x2d\xab\x4d\x3e\x84\x80\x4a\x1c\x01\x95\x83\x32\x06\x59\x72\x8f\xbc\x96\x0a\x3a\xf9\xa3\xa1\x27\x1c\x0c\x0c\x47\x8d\xe1\xc8\xfe\x02\x2e\xe5\x1a\xe8\xa0\x70\x4c\xcc\xe8\x52\x2a\xf0\xc8\xf6\x8f\x9d\x61\x05\x2e\xe7\x5a\xcc\x06\x85\x5d\xe5\x02\x56\x3d\x7a\xa7\x57\x39\x1e\x73\x95\x0f\x89\xf9\x56\x2e\x56\xd2\x23\xbf\xd2\x25\x15\x5d\xe1\x8c\x5c\xa0\xe1\x8c\x5c\x0c\x51\xf5\xb7\x52\x49\x61\x24\x26\x3d\x46\xe2\xbd\x69\xe4\xa0\xde\xfc\x83\xea\x39\x13\xb3\xda\x26\xcf\x4e\x0f\x32\xe8\x21\xc7\x3b\xf4\x21\x6f\x75\x68\x75\x21\x6a\xc1\xd8\x7e\xa4\x64\x42\x9b\x4a\x7b\xde\xae\x96\xd0\xf1\xc1\x52\x2f\xca\x2a\xa6\x9f\xf9\xc5\x2e\x68\x0e\x3a\x53\x6c\xf9\x88\xdb\x27\x99\x54\x40\xa8\xc8\x89\xff\xea\x05\xb9\x99\x5c\xed\x96\x66\xd4\xc0\x4c\xaa\xd5\xe6\x33\x80\xe2\x2b\xf2\x9e\x29\x53\x52\x4e\xa6\xa0\xee\xa1\xb1\x81\xd9\xb2\x0a\xe5\xef\x32\xa6\x45\xf5\xf7\xce\x6d\xdb\xc2\x0a\x8e\x82\x15\x38\x87\x15\xe0\xb0\xa2\xa3\x60\x45\xce\x61\x45\x38\xac\xe4\x28\x58\x89\x73\x58\x09\x0e\x2b\x3d\x0a\x56\xea\x1c\x56\x8a\xc3\xf2\x8f\x23\x97\xef\x9e\x5d\x7e\x0f\xbd\xfc\xe3\x0a\xe9\xbb\xaf\xa4\x8f\x96\x32\xc0\x64\x22\xa8\x81\x69\x47\x3a\x11\x0c\xd1\x89\x00\xd3\x89\x26\xae\xaf\x2f\x65\x1b\x17\x5a\xc9\x00\x13\x8a\x26\xae\xaf\x57\x8a\x36\x2e\x54\x29\x02\x4c\x29\x9a\xb8\xbe\x9e\x60\x6d\x5c\x3d\xfc\x42\xa4\xa2\x89\xeb\xeb\xb5\xa2\x8d\x0b\xd5\x8a\x00\xd5\x8a\x3d\xe2\xbb\x67\x18\x2e\x16\x01\x2a\x16\x7b\xd0\xdc\x17\x13\x57\x8b\x08\x53\x8b\xc8\xa9\x5a\x44\x43\xd4\x22\xc2\xd4\x22\x72\xaa\x16\x6d\x5c\x68\x29\x23\x4c\x2d\x22\xa7\x6a\xd1\xc6\x85\xaa\x45\x84\xa9\x45\xe4\x54\x2d\xda\xb8\x7a\xf8\x85\xa8\x45\xe4\x54\x2d\xda\xb8\x50\xb5\x88\x50\xb5\x88\xdc\xaa\x85\xc5\xfc\x1e\x8a\x61\x6a\x11\xb9\x55\x0b\x0b\x5a\x4f\x35\xc3\x23\x77\x2d\x74\xbf\x6b\x61\x5f\x63\x1e\xc9\xb4\xc8\x3d\xd5\xa2\x1e\xae\x25\x47\x8a\x46\xe2\x5e\x35\x12\x54\x36\x52\x4c\xfe\x53\xa7\xf2\x9f\x0e\x91\xff\x14\x93\xff\xd4\xa9\xfc\xb7\x71\xa1\x2c\x4b\x31\xf9\x4f\x9d\xca\x7f\x1b\x57\x4f\x1d\x11\xc9\x48\x9d\xca\x7f\x1b\x17\x2a\x18\x29\x26\xff\xa9\x53\xf9\x6f\xe3\x42\x5b\x32\x45\xe5\x3f\x75\x2b\xff\x16\xf3\x7b\x28\x86\xc9\x7f\xea\x56\xfe\x2d\x68\x3d\xd5\xc4\xe4\x3f\x75\x2b\xff\x6d\x68\xb8\xfc\xa7\xa8\xfc\xa7\x6e\xe5\xdf\x6a\xcd\x1e\xae\x61\xf2\x9f\xba\x95\x7f\xab\x3b\xf1\xd3\x28\xf4\xb0\xc0\x77\x7b\x5a\xe0\x0f\x3a\x2e\xf0\xd1\xf3\x02\xdf\xed\x81\x81\x05\x0d\x3f\xfb\x41\x8f\x0c\x7c\xb7\x67\x06\x16\xb4\xbe\x82\x62\xc7\x52\x6e\x8f\x0d\x2c\x68\xf8\x11\x23\x7a\x70\xe0\xbb\x3d\x39\xb0\xa0\xe1\xc7\x8c\xf8\xd9\x81\xef\xf8\xf0\xc0\x6e\x84\x3e\xba\xa1\x67\x8d\x8e\xcf\x0f\x6c\x74\x7d\x65\xc5\x4c\x61\x0f\x9d\x03\x57\xb0\xd0\xe1\xb6\x50\xb5\xea\xb1\xac\x73\x60\x0c\x76\xb3\xf6\xf1\x0e\xb3\x86\xfd\x76\xfd\x06\x52\xd2\x63\x0e\x09\x6a\x0e\x89\x5b\x73\x48\x06\x99\x43\x82\x9a\x43\xe2\xd6\x1c\xda\xd0\x70\xc6\x25\xa8\x39\x24\x6e\xcd\xa1\x0d\xad\xaf\xa0\x98\x8e\x24\x6e\xcd\xa1\x0d\x0d\x57\x91\x04\x35\x87\xc4\xad\x39\xb4\xa1\xe1\x4d\x9a\xe0\xe6\x90\x38\x36\x07\xab\x11\xfa\xe8\x86\x9a\x43\xe2\xd8\x1c\x2c\x74\x7d\x65\x45\xcd\x21\x71\x6c\x0e\x6d\x74\x3d\xe6\x90\xe0\xe6\x90\x38\x36\x07\xab\x59\xfb\x78\x87\x9a\x43\xe2\xd8\x1c\xac\x7e\xed\x35\x87\xe0\xd8\xcd\xf3\x83\x6f\xb0\x7b\x7e\x80\x6e\x5f\x88\x8e\x36\xa1\xdb\xd1\x26\x1c\x34\xda\x84\xe8\x68\x13\xba\x1d\x6d\x2c\x68\x68\x4b\x84\xe8\x68\x13\xba\x1d\x6d\x2c\x68\x28\xe3\x42\x74\xb4\x09\xdd\x8e\x36\x16\x34\x54\xe6\x42\x74\xb4\x09\xdd\x8e\x36\x16\xb4\xde\x36\x38\x96\x6c\x0e\xdc\xcb\x6e\x84\x3e\xba\x61\xee\x15\x3a\x1e\x6d\x6c\x74\x7d\x65\xc5\xdc\x2b\x74\x3c\xda\x58\xe8\x70\xf7\x0a\xf1\xd1\x26\x74\x3c\xda\xd8\xcd\xda\xc7\x3b\xcc\xbd\x42\xc7\xa3\x8d\xdd\xaf\x7d\x5a\x82\xba\x57\xab\x2d\xbe\xc1\xee\xf5\xbb\x57\x10\x1d\x6d\x12\xd1\xb7\xb0\x89\x08\x65\x5f\x8c\x0e\x87\xb1\xdb\xe1\x30\x1e\x34\x1c\xc6\xe8\x70\x18\xbb\x1d\x0e\x2d\x68\x7d\xbb\x86\x34\x45\xec\x76\x38\xb4\xa0\xa1\x2d\x11\xa3\xc3\x61\xec\x76\x38\xb4\xa0\xa1\x3a\x1c\xa3\xc3\x61\xec\x76\x38\xb4\xa0\xa1\x7d\x1a\xe3\xc3\x61\xec\x78\x38\xb4\x1b\xa1\xb7\x49\x8f\x2d\xaa\x03\x7b\xb5\xd1\xf5\x95\x15\xb3\xd7\xd8\xf1\x70\x68\xa1\xc3\xed\x35\xc6\x87\xc3\xd8\xf1\x70\x68\x37\x6b\x1f\xef\x30\x7b\x8d\x1d\x0f\x87\x76\xbf\xf6\x69\x09\x6a\xaf\xb1\xeb\xe1\xb0\xa3\x2f\xfa\xb6\x0f\xb5\xd7\x7d\x93\x70\x60\xaf\xb6\x4d\xe0\xf6\x7a\x21\x0c\x70\xf2\x1f\x90\x82\x9c\x87\xcf\xfc\xe0\xdf\x63\x72\x1f\x1e\x84\x3b\x65\x62\xc6\x81\x74\xfe\x10\x79\x1a\x91\xd3\x2a\x17\x8f\x84\x27\xf1\x98\xbc\xfa\xe5\xf3\xbf\xd0\x44\x5e\x50\x05\xe4\x0a\x8c\xa3\xdf\xcb\x69\x80\x22\xe7\xf1\xb3\x20\x09\xd0\x54\xce\xaa\x3d\xec\xfe\x19\xf2\xd4\x0f\x1e\x53\x09\x4e\x22\x17\xa9\x0c\x3c\x11\x6f\x6e\xf0\x23\xac\xe8\x1f\xa4\x12\x91\xa7\x7e\xb2\x4b\xc5\x77\x92\xca\xb0\x16\xfd\x21\x09\xf6\x0f\x8a\xf2\xbd\xd6\xa4\x82\x15\x0f\xea\x94\xdd\x8f\x90\xa7\xc1\x78\x97\x49\xe8\x22\x93\x60\x3c\x4c\x60\xdb\xb8\x9e\x0f\x4f\xe5\xf9\x26\x95\x68\x97\x4a\xe2\x24\x15\xfb\xb7\x31\x07\xa7\x32\x90\x5f\xcf\xd7\xfc\x0a\x52\xd7\xa9\xd8\xbf\x59\xf4\xc3\x54\x65\x58\xab\x7c\xcf\x99\x04\x31\xfa\x31\xf8\x07\xe6\xd7\xf7\x2c\xc5\xdb\x54\xb6\x6f\x61\x66\x0a\x72\x10\x86\x51\xde\xf1\x0e\xe6\x52\xc9\x7b\x96\x83\xaa\xdd\x70\xef\x4b\x43\xd6\xa9\x31\xbd\xe4\x74\xf5\x52\xaa\x82\x9a\x6a\xcd\x1d\x03\xde\x78\xf3\x96\x0a\x21\x4d\xfd\x92\x69\xf5\xec\xc7\xa7\x56\xcf\x9d\x53\x55\x80\x3a\xa1\xcb\xa5\xce\x64\x0e\x27\x99\x2c\x7e\xca\x78\xa9\x0d\xa8\x67\x3b\x44\xd5\x23\x1f\xdf\x1e\xfd\xb2\x7d\x6a\x1d\x64\xff\xcd\xd3\xdd\xa3\xd7\x5f\x67\x92\x49\x71\xc7\x66\x35\xea\xdf\x5e\xbe\xbd\x9c\xfc\x79\x7e\xf3\xe1\xdd\xf4\xfc\xe6\xcd\xe4\xea\x7c\x0b\x6f\xfd\x30\xa9\xaa\x7d\xd9\x7d\x25\xca\x87\x52\x83\xaa\xbf\x28\x65\x6f\xdd\x47\xbd\x2e\x5f\xf7\x5d\x4e\x6f\xa1\x46\xfb\xae\xf3\x36\x13\xcb\xb2\xde\x1f\x03\x9f\xcc\x68\x7b\xe7\x8b\x37\x28\x81\xc9\xf5\xc5\x87\xd7\xe7\x7f\xf6\xe1\xa7\x4b\xf6\x61\x01\xab\x6e\xf8\x74\xc9\x5e\xb7\xef\x6d\xc1\x4f\xae\x2f\x88\x75\x77\x8b\x7d\x49\xb5\x7e\x90\x2a\x6f\xe0\xdf\xfc\xa9\xfd\x62\xef\xa2\xbc\x05\x25\xc0\x80\x7e\x0f\x4a\x77\x7f\x6d\xcc\xfd\xfa\x4e\xfd\x8f\x66\x27\xe9\xc9\xf8\xf0\x3f\xa9\xed\xdf\x5d\x7f\x57\x4d\x83\x4a\x39\x54\x17\x8c\x2a\xc1\x22\x4a\x0e\x77\xb4\xe4\x66\xba\x84\xac\x45\x3f\x99\x4f\xcb\x5b\x01\x75\x5e\xfe\xf8\x24\x88\xa2\x93\xf1\xc9\xf8\x27\x7f\xef\x0b\x56\x34\xa8\x7b\x96\xc1\xde\xca\x71\xc7\x3a\xca\xeb\x57\xa9\xe1\x8d\xcc\xe1\x94\xe5\x4a\x6f\xf0\x34\x96\x80\xa0\xb7\x1c\x4e\xd7\x04\xbf\x92\x82\x19\xa9\x98\x98\xad\x2b\xb2\x6e\x81\xd1\xa1\xe5\x97\x72\x36\x5b\xaf\xed\x7c\x68\x15\xf5\xe0\x12\xbe\xbe\x71\x06\xda\x30\xb1\x7d\xdb\xfb\x31\xe4\x33\xe0\x54\x1b\x96\x69\xa0\x2a\x9b\xef\x01\x68\xde\xd8\x3c\xfd\x06\x96\x9c\x65\x54\x37\x5f\xcd\xac\x36\x59\xe8\xb5\xf6\x5c\x5c\x37\xf6\xc8\x1f\x8f\xf6\xd7\x9c\xc9\x82\xb2\x3a\xfa\xa6\xcd\x4f\xaa\x4d\xe3\x7b\xfb\x98\x17\x4c\x57\xa4\x38\x95\xc2\x28\x59\x53\xf2\x0d\x2d\x40\x2f\x69\x06\x97\xec\x0e\xb2\x55\xc6\xc1\xbb\x64\x05\x33\x37\x54\xcc\x40\x79\xd3\x75\x89\x26\x59\x26\x4b\x61\xbc\xeb\x8a\x54\xda\x80\x30\xef\x25\x2f\x0b\xb8\xac\x98\xed\x9d\x6d\x68\x60\xa4\xa2\x33\x38\xe5\x54\x6b\xef\x06\xb4\x2c\x55\x06\xbf\x97\xd2\xd0\x26\x88\x82\x56\xe0\x5a\xec\x48\xea\xaa\x07\x51\x73\xa1\x00\xf3\x20\xd5\xe2\xba\xa1\x90\x77\x9c\x0a\x01\xfc\x60\x25\x27\x1c\x94\x39\x54\x73\x59\x6d\xec\x28\x87\x5b\xd6\xf8\x8e\x81\x46\x1c\xc9\x59\xb6\x6a\x46\x13\x52\x74\x90\xe6\x0f\xb8\x9d\x4b\xb9\x78\x2b\x17\x20\x26\xa5\x99\x8b\x43\xbc\xb9\xb9\xa5\x59\xb5\xe0\xf3\xa1\x05\x93\xeb\x0b\x5d\x17\xf6\x05\xd5\x2c\x9b\x94\x39\x33\x07\x97\x6e\xf2\x99\x18\xc3\x32\x7b\xd1\x52\x72\x3e\xe5\x00\xcb\xca\xf6\xd4\x7d\xad\xeb\x61\x27\x91\xaf\xcb\x5b\xce\xb2\x9a\x49\xcd\x8e\xde\xe9\xcb\x93\x2f\xff\x0f\x00\x00\xff\xff\x7a\x0c\x41\x4a\xc9\x4a\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 19145, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
