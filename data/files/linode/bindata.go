// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package linode

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x97\xdf\x6f\xa3\x38\x10\xc7\xdf\xf3\x57\x58\x3c\x73\x39\x6c\x08\x81\xbc\x55\xd7\xb4\x77\xed\x5d\x5a\xa9\xe9\xe9\xa4\x53\x55\xb9\x30\x4d\xd9\x80\x4d\x6d\x92\x2a\x5b\xe5\x7f\x5f\x41\xb2\x40\x0d\x98\x04\xed\x4b\x02\xfe\x31\xdf\x0f\x9e\x19\x7b\xfc\x39\x42\xc8\x60\x34\x01\x63\x86\x8c\x38\x62\x3c\x04\xc3\xcc\xdb\x80\x6d\x8d\x19\xfa\x7f\x84\x10\x42\x46\x08\xdb\xa2\x15\x21\xe3\x9d\x1a\x23\x84\x9e\x8a\x31\x02\x56\x11\x67\xb2\x1c\xf7\x59\xfc\x22\x64\xc4\x3c\xa0\x59\xc4\x59\x6e\xf4\x92\xc6\x31\x95\x26\x5a\xfe\x67\xa2\xc7\x87\x8b\xa3\x9d\x72\x76\x3e\x84\x54\x8d\xdf\x39\x83\xca\x60\xd1\x44\x8c\xe3\xf3\x53\xf1\xbf\x37\xbb\xb5\xae\x04\x24\x9c\x65\x26\xfa\xe3\xa2\x53\xcc\xd6\x8a\xd9\xa7\x8b\x5d\x64\x31\x65\x19\x35\xd1\x75\xb7\x98\xa3\x15\x73\x4e\x17\x5b\xc0\x07\x15\x6b\x13\x2d\x6e\x3a\xb5\x5c\xad\x96\x7b\xba\xd6\xdf\x9c\x85\x9c\x99\x68\xce\x56\x31\x65\xa1\x89\x1e\x6f\xdb\xf4\xa6\x5a\xbd\xe9\xe9\x7a\x4b\xbe\xde\x71\x13\xdd\xdc\xb7\xa9\x78\x5a\x15\xef\x74\x95\x87\x88\xad\x68\xca\x05\x98\xe8\xe1\xba\x4d\xc9\xd7\x2a\xf9\xe7\x44\x21\x65\xeb\xd7\x8d\xc8\x4c\x74\x39\x6f\x53\xc2\x96\x56\x0a\x5b\x67\xae\x1d\x22\x5d\xab\x87\xb1\x5e\x09\x2b\x4a\x65\x6a\x47\x4c\x66\x94\x05\xb0\xdc\xa5\xd0\x92\xe0\x72\xbd\x29\xcc\x57\xd6\x43\x90\x81\x88\xd2\x32\x86\x8a\xad\x04\x61\x8b\xd4\x52\x20\xa0\x19\xac\xb8\xd8\xe5\x03\xae\x81\x81\xa0\x31\xba\xdf\x88\x94\x4b\xa8\x0d\x4a\x73\xd3\xb8\xfa\x18\x9a\x7c\x79\x0f\x23\xb9\x36\x66\x88\x58\xad\x6b\x73\x04\x23\x7d\x60\xc4\x72\xbc\x5f\x02\x46\x54\x30\x5b\x0b\x66\xf7\x81\x39\x96\xef\x0e\x02\x23\x0a\x98\xa3\x82\x39\x9e\x0e\xcc\xe9\x03\xf3\xb0\x4f\x06\x81\x39\x0a\x98\xa7\x82\xf9\xae\x0e\x6c\xd2\x1b\x63\x84\x78\xc3\x7c\xe9\xaa\x41\xd6\x70\x26\xf6\x89\x8e\xcd\xed\x0d\x33\x67\x32\x1d\xe6\x4e\x4f\x8d\xb3\x86\x3f\x6d\xcf\xd1\xb1\x4d\x7b\x23\xcd\xc7\x93\x61\x1e\xc5\x8d\x58\x6b\xf8\x74\xea\x6a\xa3\xcd\xeb\x83\x73\x27\x13\x7b\xd8\xc2\x61\xd5\xab\x6e\x63\xe5\x30\x9e\x68\xdd\xea\x9f\x92\x0b\xd6\xb0\x2c\xb5\xd4\x6c\xb0\x1a\x74\x13\x5b\x9b\x10\xf5\xd3\xa3\x23\x23\x5c\xdb\xeb\xd8\x76\xff\x8c\x56\x6f\xe8\x1f\x48\xf2\xd7\xbe\x2d\xd7\x3d\x6f\xcf\xc5\xbd\xa7\x81\x4d\xa6\x6e\x47\xa6\x6a\xb8\xd4\x60\xb3\x1b\x59\xea\xe8\xb9\x7a\x0f\x03\x17\x3b\x4e\x87\x3b\x35\x5c\xea\xbe\xe6\x36\x3c\xe9\xeb\xb9\x7a\xcf\x82\xfc\xf4\xb4\xce\x07\x53\xb7\x0e\x6c\x35\xc8\x88\xa5\x47\xeb\x3d\x0d\xf2\xf3\x73\x00\x5a\x23\x39\x49\x93\xcd\xfe\xe9\xce\xb2\x18\x09\x04\x84\xc0\xb2\x88\xc6\x2d\xa5\x48\x2a\xf8\x36\x0a\x41\x54\x70\x46\xdd\x62\x1a\xd3\xdd\x15\x17\x09\xcd\xf2\x01\xaf\x11\xc4\x61\xd5\x4f\x19\xe3\x59\x51\x4b\xe5\x86\x3f\xab\xc2\x28\x7d\xa3\x22\x01\x31\xa6\x69\x2a\x03\x1e\xc2\x38\xe0\xc9\xef\x41\xbc\x91\x19\x88\xdf\x2a\x9c\xdc\x64\x69\xad\x6b\x5a\xc8\xa4\x3a\xe5\x38\x63\x5f\x82\x14\x5c\x5f\x8b\xb3\x8a\xe6\x70\x1b\x0b\x38\x7b\x8d\x56\xc5\x57\xfe\xb5\xb8\xbb\x9c\x3f\x2f\xef\x6e\xe7\x8b\x9a\x7a\x6e\x86\x8b\xa4\xba\xc8\x3d\x67\x7c\x0d\xec\xeb\x88\x6f\xf2\xe0\xc6\x96\xae\x98\xbe\x40\x7c\xac\x29\xd5\xbe\x88\xa5\x9b\x62\x01\x53\x2a\xe5\x07\x17\xa1\x51\xf6\xee\x8f\x4f\x6a\x05\xb9\xde\xbc\x80\x60\x90\x81\xfc\x17\x84\x6c\xbf\x27\x6e\x0f\x3d\x45\xc8\x8d\xbd\x71\xf7\xc6\xa6\xf4\x1e\x2e\xa7\x35\x7f\xe5\x17\xd4\x19\xca\xc4\x06\x6a\xde\x78\xa7\xcd\xb6\x54\xf0\xf0\xd8\x3a\xaa\xf3\x17\xdc\xa3\xfd\x8f\x00\x00\x00\xff\xff\xc8\x64\xc3\x65\x0f\x0f\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 3855, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
