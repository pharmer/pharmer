// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package linode

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x57\x5d\x73\xda\x38\x14\x7d\xcf\xaf\xd0\xf8\xd9\xa5\xfe\xc2\x40\xde\xd8\x90\x76\xd3\xa6\x94\x0d\x69\x77\x67\x76\x3a\x1d\x21\x5f\x88\x16\x59\xf2\x4a\x32\x1d\xda\xc9\x7f\xdf\xb1\x70\xb0\xf1\x27\x61\xf6\x25\xc1\xd6\xd5\x3d\xc7\xf7\x9c\xab\x8f\x5f\x57\x08\x59\x1c\xc7\x60\x5d\x23\x8b\x51\x2e\x22\xb0\xec\xec\x1d\xf0\x9d\x75\x8d\xfe\xbe\x42\x08\x21\x2b\x82\x9d\x79\x8b\x90\xf5\x2f\xb6\xae\x10\xfa\x66\x62\x24\x6c\xa8\xe0\xea\x18\xf7\xcb\xfc\x45\xc8\x62\x82\x60\x4d\x05\xcf\x92\xce\x30\x63\x58\xd9\xe8\xf1\x2f\x1b\x7d\x59\x4e\xf3\x3c\xc7\xd9\x59\x88\x57\xbc\xfc\x29\x38\x14\x09\xcd\x2b\xcf\xca\x7f\x7f\x33\xff\x9f\xed\x76\xac\x77\x12\x62\xc1\xb5\x8d\x6e\xa6\xad\x60\x7e\x27\x98\x7f\x3e\xd8\x54\x33\xcc\x35\xb6\xd1\xfb\x76\xb0\xa0\x13\x2c\x38\x1f\x6c\x0e\x3f\xb0\xdc\xda\x68\xfe\xa1\x15\x2b\xec\xc4\x0a\xcf\xc7\xba\x17\x3c\x12\xdc\x46\xb7\x7c\xc3\x30\x8f\x6c\xf4\xe5\x63\x13\xde\xa8\x13\x6f\x74\x3e\xde\xa3\xd8\xee\x85\x8d\x3e\x2c\x9a\x50\xc6\x9d\x28\xe3\xf3\x51\x96\x94\x6f\x70\x22\x24\xd8\x68\xf9\xbe\x09\x69\xd2\x89\x34\x79\x8d\x0b\x31\xdf\xae\x53\xa9\x6d\x34\xbb\x6d\x42\x72\x9d\x4e\x28\xd7\x79\x65\xed\x90\xd7\x56\x3d\xd7\xed\x46\x72\x2b\x48\xc7\xd6\xa6\x5c\x69\xcc\x09\x3c\xee\x13\x68\x68\x70\xb5\x4d\x4d\xfa\x22\x7b\x04\x8a\x48\x9a\x1c\x3d\x64\x96\x12\xe4\x3a\x5e\xa9\x05\x08\xd6\xb0\x11\x72\x9f\x05\xbc\x07\x0e\x12\x33\xb4\x48\x65\x22\x14\x94\x82\x92\x2c\xb5\x5b\x7c\x0c\x8e\x4f\x9e\x23\xaa\xb6\xd6\x35\xf2\x9c\xc6\xda\xe4\xc4\xbc\x3e\x62\x9e\x13\x8c\xff\x17\x62\x5e\x95\x98\xdf\x49\xcc\xef\x23\x16\x38\x93\xf0\x22\x62\x5e\x85\x58\x50\x25\x16\x8c\xbb\x88\x05\x7d\xc4\xc6\xee\xc4\xbb\x88\x58\x50\x21\x36\xae\x12\x9b\x84\x5d\xc4\x86\xbd\x1e\xf3\xbc\xf1\x65\x5a\x86\x55\x93\xd5\xc4\x74\x27\x5e\x17\xb7\xb0\xd7\x66\xc1\x70\x74\x99\x9c\xe3\xaa\xcf\x6a\x7a\xfa\xe3\xa0\x8b\xdb\xa8\xd7\x69\x13\x77\x78\x99\xa2\x6e\xcd\x6b\x35\x4d\x47\x61\xa7\xdb\xc6\x7d\xe4\xc2\xe1\xd0\xbf\xac\x70\x6e\x55\xd5\xb0\x56\x39\xd7\x1d\x76\xca\x3a\x39\xa7\x17\x9c\xcb\xba\xd4\xa9\x76\x83\x53\x63\x37\xf4\x3b\x1b\xa2\xbc\x7b\xb4\x74\x44\xe8\x8f\x5b\x96\xdd\xdf\xe9\xe6\x09\x7d\x82\x38\x7b\xec\x5b\x72\xc3\xd7\xad\xb9\x6e\xef\x6e\xe0\x7b\xa3\xb0\xa5\x53\x3b\x78\x55\xcd\xe6\xd7\xba\x34\xe8\xe6\xd5\xbb\x19\x84\x6e\x10\xb4\xc8\xd9\xc1\xab\xba\xae\x85\x35\x25\x27\xdd\xbc\x7a\xf7\x82\x6c\xf7\x74\x5e\x4f\xac\xba\x74\xb8\x4e\x8d\x99\xe7\x74\x53\xeb\xdd\x0d\xb2\xfd\xf3\x02\x6a\xb5\xe6\xf4\xea\xdc\xfc\x17\x39\x8f\x87\x11\x22\x21\x02\xae\x29\x66\x0d\x47\x91\x44\x8a\x1d\x8d\x40\x16\xe4\xac\x72\xc6\x84\xe1\xfd\x3b\x21\x63\xac\xb3\x80\x35\x05\x16\x15\xe3\x98\x73\xa1\xcd\x59\x2a\x4b\xfc\xab\x38\x18\x25\x4f\x58\xc6\x20\x07\x38\x49\x14\x11\x11\x0c\x88\x88\xdf\x12\x96\x2a\x0d\xf2\x4d\x41\x27\x4b\x79\xcc\xd6\x36\x2d\xe2\xaa\x3a\x25\x9f\xf1\x7c\x24\x62\x78\x9d\x1e\xce\x0a\x36\x87\xdb\x18\x11\x7c\x4d\x37\xe6\x2b\xef\xe6\x9f\x67\xb7\xdf\x1f\x3f\x7f\xbc\x9d\x97\xd0\xb3\x34\x42\xc6\xc5\x45\xee\xbb\x16\x5b\xe0\xa7\x11\xff\xa8\x83\x8c\x0d\x43\x0c\xaf\x80\xe5\x67\xca\xea\x18\xe5\x49\x6a\x0a\x98\x60\xa5\x7e\x08\x19\x59\xc7\xd1\xe7\xfc\x57\xf5\x04\xb9\x4d\x57\x20\x39\x68\x50\x5f\x41\xaa\xe6\x7b\xe2\xee\x30\x62\x2c\x37\x18\x0d\xda\x5d\x57\x19\x3d\x5c\x4e\x4b\x7a\x65\x17\xd4\x6b\xa4\x65\x0a\xb5\xd2\x46\xb0\xc6\x29\xd3\xcb\x04\xc8\xe9\x9c\x5c\xce\xbb\xe4\x01\xf3\x0d\x1c\x56\xd6\x81\x17\x04\x03\x67\xe0\xbc\x75\xc3\xb2\xae\x0a\xe4\x8e\x12\xb8\x69\x9a\xe1\x34\xc4\x63\x66\xce\xe8\x30\x17\x11\xdc\xd0\x48\xaa\x9c\x5c\x29\x04\x38\x5e\xb1\x97\x8c\x9f\x04\xa7\x5a\x48\xca\x8d\xbe\x2f\xee\xb1\xda\xc2\xef\xc5\x66\x73\x88\x6d\x4c\x9a\xa1\xb6\x86\xb0\xc3\xc0\x0c\x94\xa6\xfc\x78\x8d\x78\x81\x7c\x03\x0c\x2b\x4d\x89\x02\x2c\xc9\xd3\x09\x81\xf2\x40\x9e\xfd\x01\x12\x46\x09\x56\xe5\xcd\x23\xab\x38\x57\x4b\x90\x3b\x90\x77\x8b\x52\x8d\x4a\xdb\xd6\x21\x66\x26\x62\x4c\x0d\x7a\xae\xc4\x20\x2b\x1a\x3b\xa9\x63\x14\x53\x95\x39\xe4\x46\x70\x2d\x85\x71\xe7\x1c\xc7\xa0\x12\x4c\xe0\x9e\xae\x81\xec\x09\x03\xfb\x9e\xc6\x54\x1b\x4d\xa4\xbd\x3c\x48\x35\x25\x44\xa4\x5c\xdb\x8b\xcc\x61\x4a\x03\xd7\x5f\x05\x4b\x63\xb8\xcf\x4c\x6e\xcf\x72\x4f\x68\x21\xf1\x06\x6e\x18\x56\xca\x7e\x00\x25\x52\x49\xe0\x8f\x54\x68\x5c\x26\x11\xe3\x26\x9b\x84\x46\xf6\xd2\xed\x06\x21\x8b\x83\xfe\x21\xe4\x76\x51\x5a\x91\xd6\x0c\x73\x0e\xac\x55\xca\x29\x03\xa9\xdb\x44\x17\x59\x65\xad\x08\x56\x14\xf3\x26\x1c\xc1\x28\xd9\x97\xd1\xb8\xe0\x0d\xae\xf9\x13\x56\x4f\x42\x6c\x4d\x5b\x4f\x53\xfd\xc4\xdb\x8c\xf3\xb0\xc2\x24\x0b\xf8\xd9\x16\x30\x5d\xdc\x29\xa3\xec\x6f\x58\x51\x32\x4d\x23\xaa\x5b\x43\xf3\xef\x99\x6a\x4d\x49\x3d\x28\x11\x8c\x2d\x19\x40\x72\xc7\x35\xc8\x9d\x59\x17\xfd\x46\x27\x2f\xd2\x15\xa3\xc4\x58\xa9\xdc\xdf\xc5\x6a\x73\xf5\xfc\x5f\x00\x00\x00\xff\xff\x3e\xc8\x86\x28\xc5\x12\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 4805, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
