// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package linode

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x97\xdf\x6f\xa3\x38\x10\xc7\xdf\xf3\x57\x8c\xfc\x8c\x2a\x6c\x08\x81\xbc\x55\xd7\x1f\xa7\xde\x5d\x55\xa9\xad\x74\xd2\xaa\x0f\x6e\x98\x66\xd9\x10\x9b\x35\x4e\x77\xb3\x55\xfe\xf7\x15\x24\x05\x62\xc0\x24\x68\x5f\x12\xf0\x8f\xf9\x7e\xf0\xcc\x78\xec\x8f\x09\x00\x11\x7c\x8d\x64\x0e\x24\x4d\x84\x8c\x91\x38\x45\x1b\x8a\x77\x32\x87\x2f\x13\x00\x00\x12\xe3\x7b\xd9\x0a\x40\xbe\x73\x32\x01\x78\x29\xc7\x28\x5c\x26\x52\xe4\xd5\xb8\x8f\xf2\x17\x80\xa4\x72\xc1\x75\x22\x45\x61\xf4\x8a\xa7\x29\xcf\x1d\x78\xfa\xdf\x81\xe7\xc7\xcb\x83\x9d\x6a\x76\x31\x84\xd5\x8d\xbf\xa4\xc0\xda\x60\xd9\xc4\xc8\xe1\xf9\xa5\xfc\xdf\x39\xfd\x5a\x37\x0a\xd7\x52\x68\x07\xfe\xba\xec\x15\xf3\xac\x62\xde\xe9\x62\x97\x3a\xe5\x42\x73\x07\x6e\xfb\xc5\x7c\xab\x98\x7f\xba\xd8\x3d\xfe\xe0\x6a\xe5\xc0\xfd\x5d\xaf\x56\x60\xd5\x0a\x4e\xd7\xfa\x57\x8a\x58\x0a\x07\xae\xc5\x32\xe5\x22\x76\xe0\xf9\x9f\x2e\xbd\x99\x55\x6f\x76\xba\xde\x93\x5c\x6d\xa5\x03\x77\x0f\x5d\x2a\xa1\x55\x25\x3c\x5d\xe5\x31\x11\x4b\x9e\x49\x85\x0e\x3c\xde\x76\x29\x45\x56\xa5\xe8\x9c\x28\xe4\x62\xf5\xb6\x51\xda\x81\xab\xeb\x2e\x25\xea\x5a\xa5\xa8\x7b\xe6\xda\x01\xeb\x5b\x3d\x4a\xed\x4a\xd4\x50\xaa\x52\x3b\x11\xb9\xe6\x62\x81\x4f\xdb\x0c\x3b\x12\x3c\x5f\x6d\x4a\xf3\xb5\xf5\x18\xf3\x85\x4a\xb2\x2a\x86\xca\xad\x04\xa8\xcb\x1a\x29\xb0\xe0\x1a\x97\x52\x6d\x8b\x01\xb7\x28\x50\xf1\x14\x1e\x36\x2a\x93\x39\x36\x06\x65\x85\x69\x5a\x7f\x0c\x5f\x1f\xbd\xc7\x49\xbe\x22\x73\x60\x6e\xe7\xda\x1c\xc0\xd8\x10\x18\x73\xfd\xf0\x8f\x80\x31\x13\xcc\xb3\x82\x79\x43\x60\xbe\x1b\x05\xa3\xc0\x98\x01\xe6\x9b\x60\x7e\x68\x03\xf3\x87\xc0\x42\x1a\xb1\x51\x60\xbe\x01\x16\x9a\x60\x51\x60\x03\x9b\x0e\xc6\x18\x63\xe1\x38\x5f\x06\x66\x90\xb5\x9c\x49\x23\x66\x63\x0b\x06\xc3\xcc\x9f\xce\xc6\xb9\x33\x34\xe3\xac\xe5\x4f\x2f\xf4\x6d\x6c\xb3\xc1\x48\x8b\xe8\x74\x9c\x47\x69\x2b\xd6\x5a\x3e\x9d\x05\xd6\x68\x0b\x87\xe0\x82\xe9\xd4\x1b\xb7\x70\xd4\xf4\x6a\xd0\x5a\x39\x4a\xa7\x56\xb7\x46\xa7\xe4\x82\x3b\x2e\x4b\x5d\x33\x1b\xdc\x16\xdd\xd4\xb3\x26\x44\xb3\x7a\xf4\x64\x44\xe0\x85\x3d\xdb\xee\xdf\xc9\xf2\x2b\xfc\x87\xeb\xe2\x75\x68\xcb\x0d\xce\xdb\x73\xe9\x60\x35\xf0\xd8\x2c\xe8\xc9\x54\x0b\x97\x19\x6c\x5e\x2b\x4b\x7d\x3b\xd7\x60\x31\x08\xa8\xef\xf7\xb8\xd3\xc2\x65\xee\x6b\x41\xcb\x93\x91\x9d\x6b\xb0\x16\x14\xd5\xd3\x3d\x1f\xcc\xdc\x3a\xa8\xdb\x22\x63\xae\x1d\x6d\xb0\x1a\x14\xf5\x73\x04\x5a\x2b\x39\x59\x9b\xcd\xfb\x74\x67\x75\x18\x59\x28\x8c\x51\xe8\x84\xa7\x1d\x47\x11\xbd\xcd\xb0\x06\x23\x4d\x6b\x59\xca\xb7\x37\x52\xad\xb9\x2e\x06\xbc\x25\x98\xc6\x75\x7f\xf9\x7a\x7c\x1e\xfa\xa8\x9e\x00\xc8\xb7\x7c\xff\xc1\x5a\xae\x50\x54\xd3\xca\xae\xcf\xfb\x52\x47\x57\xca\x5f\x31\x3d\x1c\xcc\xcc\xbe\x44\x64\x9b\x92\x44\xe3\x4f\x4d\xaa\x9e\x5d\xcf\x11\x6c\xb5\x79\x45\x25\x50\x97\xe7\xaf\x3d\x1a\x79\x47\x95\x1f\x5d\xb9\x9a\xd0\x9f\xbd\xa5\x07\x2f\x66\x17\x7e\x43\xde\x74\x63\xab\x5f\x4b\x99\xd6\x42\x87\xc6\x02\x81\xc7\xeb\x7a\x42\x0d\xdd\x98\xba\xbf\x2a\x1e\x4d\x2c\x2e\x8c\x73\xd0\x6a\x83\xad\xcf\xdc\xff\x17\x1f\xbb\x9b\xec\x7e\x07\x00\x00\xff\xff\xec\x65\xa5\x67\x7f\x0e\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 3711, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
