// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package linode

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x57\x5d\x73\xda\x38\x14\x7d\xcf\xaf\xd0\xf8\xd9\xa5\xfe\xc2\x40\xde\x58\x48\xbb\xb4\x94\xb0\x21\xed\xee\xcc\x4e\xa7\x23\xe4\x0b\xd1\x22\x4b\x5e\x49\xa6\x43\x33\xf9\xef\x3b\x32\x04\x8c\x3f\x09\xb3\x2f\x09\x58\xd7\xf7\x1c\xee\x39\xf7\x4a\x7a\xbe\x41\xc8\xe2\x38\x06\xeb\x16\x59\x8c\x72\x11\x81\x65\x9b\x67\xc0\xb7\xd6\x2d\xfa\xfb\x06\x21\x84\xac\x08\xb6\xd9\x53\x84\xac\x7f\xb1\x75\x83\xd0\xf7\x2c\x46\xc2\x9a\x0a\xae\x8e\x71\xcf\xd9\x5f\x84\x2c\x26\x08\xd6\x54\x70\x93\x74\x8c\x19\xc3\xca\x46\x8f\x7f\xd9\xe8\xeb\x62\x78\xc8\x73\x7c\xdb\x84\x78\xa7\x87\xbf\x04\x87\x53\xc2\xec\x91\x67\x1d\x3e\x7f\xcf\xfe\xbf\xd8\xf5\x58\x1f\x24\xc4\x82\x6b\x1b\x8d\x86\xb5\x60\x7e\x23\x98\x7f\x39\xd8\x50\x33\xcc\x35\xb6\xd1\xc7\x7a\xb0\xa0\x11\x2c\xb8\x1c\x6c\x06\x3f\xb1\xdc\xd8\x68\xf6\xa9\x16\x2b\x6c\xc4\x0a\x2f\xc7\x9a\x0a\x1e\x09\x6e\xa3\x3b\xbe\x66\x98\x47\x36\xfa\xfa\xb9\x0a\xaf\xd7\x88\xd7\xbb\x1c\xef\x51\x6c\x76\xc2\x46\x9f\xe6\x55\x28\xfd\x46\x94\xfe\xe5\x28\x0b\xca\xd7\x38\x11\x12\x6c\xb4\xf8\x58\x85\x34\x68\x44\x1a\xbc\xc5\x85\x98\x6f\x56\xa9\xd4\x36\x1a\xdf\x55\x21\xb9\x4e\x23\x94\xeb\xbc\xb1\x76\xc8\xab\xab\x9e\xeb\x36\x23\xb9\x05\xa4\x63\x6b\x53\xae\x34\xe6\x04\x1e\x77\x09\x54\x34\xb8\xda\xa4\x59\xfa\x53\xf6\x08\x14\x91\x34\x39\x7a\x28\x1b\x25\xc8\x75\xbc\x5c\x0b\x10\xac\x61\x2d\xe4\xce\x04\x7c\x04\x0e\x12\x33\x34\x4f\x65\x22\x14\xe4\x82\x12\x93\xda\x3d\xfd\x18\x1c\x9f\x7d\x8f\xa8\xda\x58\xb7\xc8\x73\x2a\x6b\x73\x20\xe6\xb5\x11\xf3\x9c\xa0\xff\xbf\x10\xf3\x8a\xc4\xfc\x46\x62\x7e\x1b\xb1\xc0\x19\x84\x57\x11\xf3\x0a\xc4\x82\x22\xb1\xa0\xdf\x44\x2c\x68\x23\xd6\x77\x07\xde\x55\xc4\x82\x02\xb1\x7e\x91\xd8\x20\x6c\x22\xd6\x6d\xf5\x98\xe7\xf5\xaf\xd3\x32\x2c\x9a\xac\x24\xa6\x3b\xf0\x9a\xb8\x85\xad\x36\x0b\xba\xbd\xeb\xe4\xec\x17\x7d\x56\xd2\xd3\xef\x07\x4d\xdc\x7a\xad\x4e\x1b\xb8\xdd\xeb\x14\x75\x4b\x5e\x2b\x69\xda\x0b\x1b\xdd\xd6\x6f\x23\x17\x76\xbb\xfe\x75\x85\x73\x8b\xaa\x86\xa5\xca\xb9\x6e\xb7\x51\xd6\xc1\x25\xbd\xe0\x5c\xd7\xa5\x4e\xb1\x1b\x9c\x12\xbb\xae\xdf\xd8\x10\xf9\xdd\xa3\xa6\x23\x42\xbf\x5f\x33\x76\x7f\xa7\xeb\x27\xf4\x05\x62\xf3\xb5\x6d\xe4\x86\x6f\x9b\xb9\x6e\xeb\x6e\xe0\x7b\xbd\xb0\xa6\x53\x1b\x78\x15\xcd\xe6\x97\xba\x34\x68\xe6\xd5\xba\x19\x84\x6e\x10\xd4\xc8\xd9\xc0\xab\x38\xd7\xc2\x92\x92\x83\x66\x5e\xad\x7b\x81\xd9\x3d\x9d\xb7\x13\x2b\x8e\x0e\xd7\x29\x31\xf3\x9c\x66\x6a\xad\xbb\x81\xd9\x3f\xaf\xa0\x56\x6a\x4e\xaf\xcc\xcd\x7f\x95\xf3\x78\x18\x21\x12\x22\xe0\x9a\x62\x56\x71\x14\x49\xa4\xd8\xd2\x08\xe4\x89\x9c\x95\xcf\x98\x30\xbc\xfb\x20\x64\x8c\xb5\x09\x58\x51\x60\xd1\x69\x1d\x73\x2e\x74\x76\x96\x32\x89\x9f\x4f\x07\xa3\xe4\x09\xcb\x18\x64\x07\x27\x89\x22\x22\x82\x0e\x11\xf1\x7b\xc2\x52\xa5\x41\xbe\x3b\xd1\x31\x29\x8f\xd9\xea\x5e\x8b\xb8\x2a\xbe\x72\x78\xe3\xe5\x48\x24\xe3\x75\x7e\x38\x3b\xb1\xd9\xdf\xc6\x88\xe0\x2b\xba\xce\x7e\xe5\x64\x76\x3f\xbe\xfb\xf1\x78\xff\xf9\x6e\x96\x43\x37\x69\x84\x8c\x4f\x17\xb9\x1f\x5a\x6c\x80\x9f\x47\xfc\xa3\xf6\x32\x56\x2c\x31\xbc\x04\x76\x38\x53\x16\xd7\x28\x4f\xd2\xac\x80\x09\x56\xea\xa7\x90\x91\x75\x5c\x7d\x39\x7c\x2a\x9e\x20\x37\xe9\x12\x24\x07\x0d\xea\x1b\x48\x55\x7d\x4f\xdc\xee\x57\x32\xcb\x75\x7a\x9d\x7a\xd7\x15\x56\xf7\x97\xd3\x9c\x5e\xe6\x82\x7a\x8b\xb4\x4c\xa1\x54\xda\x08\x56\x38\x65\x7a\x91\x00\x39\x7f\xe7\x20\xe7\x24\x79\xc0\x7c\x0d\xfb\xc9\xda\xf1\x82\xa0\xe3\x74\x9c\xf7\x6e\x98\xd7\x55\x81\xdc\x52\x02\xa3\xaa\x37\x9c\x8a\x78\xcc\xb2\x33\x3a\xcc\x44\x04\x23\x1a\x49\x75\x20\x97\x0b\x01\x8e\x97\xec\x35\xe3\x17\xc1\xa9\x16\x92\xf2\x4c\xdf\x57\xf7\x58\x75\xe1\x53\xb1\x5e\xef\x63\x2b\x93\x1a\xd4\xda\x10\xb6\x5f\x18\x83\xd2\x94\x1f\xaf\x11\xaf\x90\xef\x80\x61\xa5\x29\x51\x80\x25\x79\x3a\x23\x90\x5f\x38\x64\x7f\x80\x84\x51\x82\x55\x7e\xf3\x30\x15\xe7\x6a\x01\x72\x6b\x0a\x95\xab\x51\x6e\xdb\xda\xc7\x8c\x45\x8c\x69\x86\xbe\xe9\x98\x72\xb1\xb3\x0a\x46\x31\x55\xc6\x1b\x23\xc1\xb5\x14\x99\x2f\x67\x38\x06\x95\x60\x02\x53\xba\x02\xb2\x23\x0c\xec\x29\x8d\xa9\xce\xd4\x90\xf6\x62\x2f\xd2\x90\x10\x91\x72\x6d\xcf\x8d\xb7\x94\x06\xae\xbf\x09\x96\xc6\x30\x35\xf6\xb6\xc7\x07\x37\x68\x21\xf1\x1a\x46\x0c\x2b\x65\x3f\x80\x12\xa9\x24\xf0\x47\x2a\x34\xce\x93\x88\x71\x95\x41\xc2\x4c\xf0\xdc\xbd\x06\x21\x8b\x83\xfe\x29\xe4\x66\x9e\x9b\x45\xc6\xff\xef\x56\x0c\x73\x0e\xac\x56\xc9\x21\x03\xa9\xeb\x34\x17\xa6\xb0\x56\x04\x4b\x8a\x79\x15\x98\x60\x94\xec\xf2\x90\x5c\xf0\x0a\xd3\xfc\x09\xcb\x27\x21\x36\x59\x57\x0f\x53\xfd\xc4\xeb\x7c\xf3\xb0\xc4\xc4\x04\xfc\x2a\x07\x2c\xee\x3f\x3c\x4e\xef\x47\x9f\xbf\xce\x7f\xcc\x87\xb3\xc9\xa8\x2e\xc5\x70\x3e\x51\x99\xf4\xbf\x61\x45\xc9\x30\x8d\xa8\xae\x0d\x3d\xfc\xe2\xa1\xd6\x94\x94\x83\x12\xc1\xd8\x82\x01\x24\x13\xae\x41\x6e\xb3\xc1\xe9\x57\x5a\x7d\x9e\x2e\x19\x25\x93\x79\x61\x00\x9c\xc6\xd1\xcd\xcb\x7f\x01\x00\x00\xff\xff\xb3\xc9\xca\x5e\xe6\x12\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 4838, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
