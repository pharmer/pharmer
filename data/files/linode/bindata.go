// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package linode

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x57\x5d\x73\xda\x38\x14\x7d\xcf\xaf\xd0\xf8\xd9\xa5\xfe\xc2\x98\xbc\xb1\x21\xed\xa6\x4d\x29\x1b\xd2\xee\xce\xec\x74\x3a\x42\xbe\x10\x2d\xb2\xe4\x95\x64\x3a\xb4\x93\xff\xbe\x23\x43\xb0\xf1\x27\x61\xf6\x25\x01\xeb\xfa\x9e\xc3\x3d\xe7\x5e\x49\xbf\xae\x10\xb2\x38\x4e\xc0\xba\x46\x16\xa3\x5c\xc4\x60\xd9\xe6\x19\xf0\xad\x75\x8d\xfe\xbe\x42\x08\x21\x2b\x86\x6d\xfe\x14\x21\xeb\x5f\x6c\x5d\x21\xf4\x2d\x8f\x91\xb0\xa6\x82\xab\x63\xdc\xaf\xfc\x2f\x42\x16\x13\x04\x6b\x2a\xb8\x49\x3a\xc5\x8c\x61\x65\xa3\xc7\xbf\x6c\xf4\x65\x31\x39\xe4\x39\xbe\x6d\x42\xbc\xe2\xe1\x4f\xc1\xa1\x48\x98\x3f\xf2\xac\xc3\xe7\x6f\xf9\xff\x67\xbb\x1d\xeb\x9d\x84\x44\x70\x6d\xa3\x9b\x49\x2b\x98\xdf\x09\xe6\x9f\x0f\x36\xd1\x0c\x73\x8d\x6d\xf4\xbe\x1d\x2c\xe8\x04\x0b\xce\x07\x9b\xc1\x0f\x2c\x37\x36\x9a\x7d\x68\xc5\x0a\x3b\xb1\xc2\xf3\xb1\xee\x05\x8f\x05\xb7\xd1\x2d\x5f\x33\xcc\x63\x1b\x7d\xf9\xd8\x84\x37\xea\xc4\x1b\x9d\x8f\xf7\x28\x36\x3b\x61\xa3\x0f\xf3\x26\x94\xa8\x13\x25\x3a\x1f\x65\x41\xf9\x1a\xa7\x42\x82\x8d\x16\xef\x9b\x90\xc6\x9d\x48\xe3\xd7\xb8\x10\xf3\xcd\x2a\x93\xda\x46\xd3\xdb\x26\x24\xd7\xe9\x84\x72\x9d\x57\xd6\x0e\x79\x6d\xd5\x73\xdd\x6e\x24\xb7\x82\x74\x6c\x6d\xca\x95\xc6\x9c\xc0\xe3\x2e\x85\x86\x06\x57\x9b\x2c\x4f\x5f\x64\x8f\x41\x11\x49\xd3\xa3\x87\xf2\x51\x82\x5c\xc7\x2b\xb5\x00\xc1\x1a\xd6\x42\xee\x4c\xc0\x7b\xe0\x20\x31\x43\xf3\x4c\xa6\x42\x41\x29\x28\x35\xa9\xdd\xe2\xc7\xe0\xe4\xe4\x7b\x4c\xd5\xc6\xba\x46\x9e\xd3\x58\x9b\x03\x31\xaf\x8f\x98\xe7\x04\xd1\xff\x42\xcc\xab\x12\xf3\x3b\x89\xf9\x7d\xc4\x02\x67\x1c\x5e\x44\xcc\xab\x10\x0b\xaa\xc4\x82\xa8\x8b\x58\xd0\x47\x2c\x72\xc7\xde\x45\xc4\x82\x0a\xb1\xa8\x4a\x6c\x1c\x76\x11\x1b\xf6\x7a\xcc\xf3\xa2\xcb\xb4\x0c\xab\x26\xab\x89\xe9\x8e\xbd\x2e\x6e\x61\xaf\xcd\x82\xe1\xe8\x32\x39\xa3\xaa\xcf\x6a\x7a\xfa\x51\xd0\xc5\x6d\xd4\xeb\xb4\xb1\x3b\xbc\x4c\x51\xb7\xe6\xb5\x9a\xa6\xa3\xb0\xd3\x6d\x51\x1f\xb9\x70\x38\xf4\x2f\x2b\x9c\x5b\x55\x35\xac\x55\xce\x75\x87\x9d\xb2\x8e\xcf\xe9\x05\xe7\xb2\x2e\x75\xaa\xdd\xe0\xd4\xd8\x0d\xfd\xce\x86\x28\xef\x1e\x2d\x1d\x11\xfa\x51\xcb\xd8\xfd\x9d\xae\x9f\xd0\x27\x48\xcc\xd7\xbe\x91\x1b\xbe\x6e\xe6\xba\xbd\xbb\x81\xef\x8d\xc2\x96\x4e\xed\xe0\x55\x35\x9b\x5f\xeb\xd2\xa0\x9b\x57\xef\x66\x10\xba\x41\xd0\x22\x67\x07\xaf\xea\x5c\x0b\x6b\x4a\x8e\xbb\x79\xf5\xee\x05\x66\xf7\x74\x5e\x4f\xac\x3a\x3a\x5c\xa7\xc6\xcc\x73\xba\xa9\xf5\xee\x06\x66\xff\xbc\x80\x5a\xad\x39\xbd\x3a\x37\xff\x45\xce\xe3\x61\x84\x48\x88\x81\x6b\x8a\x59\xc3\x51\x24\x95\x62\x4b\x63\x90\x05\x39\xab\x9c\x31\x65\x78\xf7\x4e\xc8\x04\x6b\x13\xb0\xa2\xc0\xe2\x62\x1d\x73\x2e\x74\x7e\x96\x32\x89\x7f\x15\x07\xa3\xf4\x09\xcb\x04\xe4\x00\xa7\xa9\x22\x22\x86\x01\x11\xc9\x5b\xc2\x32\xa5\x41\xbe\x29\xe8\x98\x94\xc7\x6c\x6d\xaf\xc5\x5c\x55\x5f\x39\xbc\xf1\x7c\x24\x92\xf3\x3a\x3d\x9c\x15\x6c\xf6\xb7\x31\x22\xf8\x8a\xae\xf3\x5f\x79\x37\xfb\x3c\xbd\xfd\xfe\xf8\xf9\xe3\xed\xac\x84\x6e\xd2\x08\x99\x14\x17\xb9\xef\x5a\x6c\x80\x9f\x46\xfc\xa3\xf6\x32\x36\x2c\x31\xbc\x04\x76\x38\x53\x56\xd7\x28\x4f\xb3\xbc\x80\x29\x56\xea\x87\x90\xb1\x75\x5c\x7d\x3e\x7c\xaa\x9e\x20\x37\xd9\x12\x24\x07\x0d\xea\x2b\x48\xd5\x7c\x4f\xdc\xee\x57\x72\xcb\x0d\xa2\x41\xfb\x60\xab\xac\xee\x2f\xa7\x25\xbd\xcc\x05\xf5\x1a\x69\x99\x41\xad\xb4\x31\xac\x70\xc6\xf4\x22\x05\x52\xd1\x58\xc4\x8b\x6c\xc9\x41\xef\x87\xea\xc0\x0b\x82\x81\x33\x70\xde\xba\x61\x59\x52\x05\x72\x4b\x09\x9c\x44\x3a\x0d\x71\x98\xe5\xc7\x72\x98\x89\x18\x6e\x68\x2c\xd5\x81\x4f\x29\x04\x38\x5e\x32\xb8\xd9\xbb\xe8\x93\xe0\x54\x0b\x49\x79\x2e\xe9\x8b\x61\xac\xb6\xf0\x7b\xb1\x5e\xef\x63\x1b\x93\x1a\xd4\xd6\x10\xb6\x5f\x98\x82\xd2\x94\x1f\x6f\x0e\x2f\x90\x6f\x80\x61\xa5\x29\x51\x80\x25\x79\x3a\x21\x50\x5e\x38\x64\x7f\x80\x94\x51\x82\x55\x79\xbf\x30\x45\xe6\x6a\x01\x72\x0b\xf2\x6e\x5e\xaa\x51\x69\xa7\xda\xc7\x4c\x45\x82\x69\x8e\x7e\xe8\xa5\x81\x29\x1a\x3b\xa9\x63\x9c\x50\x65\x4c\x71\x23\xb8\x96\x22\x37\xe4\x0c\x27\xa0\x52\x4c\xe0\x9e\xae\x80\xec\x08\x03\xfb\x9e\x26\x54\x3f\x60\xbe\x06\x69\x2f\xf6\x12\x4d\x08\x11\x19\xd7\xf6\xdc\x98\x4a\x69\xe0\xfa\xab\x60\x59\x02\xf7\xc6\xd7\xf6\xf4\x60\x03\x2d\x24\x5e\xc3\x0d\xc3\x4a\xd9\x0f\xa0\x44\x26\x09\xfc\x91\x09\x8d\xcb\x24\x12\x6c\xc8\x55\xdc\x11\xe6\xaa\x97\xee\x33\x08\x59\x1c\xf4\x0f\x21\x37\xf3\xd2\x0c\x5a\x31\xcc\x39\xb0\x56\x25\x27\x0c\xa4\x6e\xd3\x5c\x98\xc2\x5a\x31\x2c\x29\xe6\x4d\x38\x82\x51\xb2\x2b\xa3\x71\xc1\x1b\x4c\xf3\x27\x2c\x9f\x84\xd8\xe4\x8d\x3c\xc9\xf4\x13\x6f\xf3\xcd\xc3\x12\x13\x13\xf0\xb3\x2d\x60\x32\xbf\x53\xb9\xb0\xbf\x61\x45\xc9\x24\x8b\xa9\x6e\x0d\x3d\xfc\x9e\x89\xd6\x94\xd4\x83\x52\xc1\xd8\x82\x01\xa4\x77\x5c\x83\xdc\xe6\x93\xd0\x6f\x34\xf2\x3c\x5b\x32\x4a\x72\x27\x95\x3b\xba\x98\x2f\x57\xcf\xff\x05\x00\x00\xff\xff\x80\x39\x4d\x97\xb7\x12\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 4791, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
