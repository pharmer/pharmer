// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package linode

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x97\x5b\x6f\xb3\x36\x18\xc7\xef\xf3\x29\x2c\xae\x59\x86\x0d\x21\x90\xbb\x6a\x4d\xbb\xb5\x5b\x5a\xa9\xa9\x34\x69\xaa\x2a\x17\x9e\xa6\x2c\x60\x33\xe3\xa4\xca\xaa\x7c\xf7\x57\x90\x14\x88\x01\x93\xa0\xf7\x26\x07\x1f\x9e\xff\xcf\xcf\xc1\x87\xaf\x11\x42\x06\xa3\x09\x18\x33\x64\xc4\x11\xe3\x21\x18\x66\xde\x06\x6c\x6b\xcc\xd0\x3f\x23\x84\x10\x32\x42\xd8\x16\xad\x08\x19\xff\x51\x63\x84\xd0\x4b\x31\x46\xc0\x2a\xe2\x2c\x2b\xc7\x7d\x15\x9f\x08\x19\x31\x0f\xa8\x8c\x38\xcb\x8d\x5e\xd3\x38\xa6\x99\x89\x96\x7f\x9b\xe8\xf9\xe9\xea\x68\xa7\x9c\x9d\x0f\x21\x55\xe3\xff\x9c\x41\x65\xb0\x68\x22\xc6\xf1\xf7\x4b\xf1\xbd\x37\xbb\xb5\x6e\x04\x24\x9c\x49\x13\xfd\x76\xd5\x29\x66\x6b\xc5\xec\xf3\xc5\xae\x64\x4c\x99\xa4\x26\xba\xed\x16\x73\xb4\x62\xce\xf9\x62\x0b\xf8\xa4\x62\x6d\xa2\xc5\x5d\xa7\x96\xab\xd5\x72\xcf\xd7\xfa\x93\xb3\x90\x33\x13\xcd\xd9\x2a\xa6\x2c\x34\xd1\xf3\x7d\x9b\xde\x54\xab\x37\x3d\x5f\x6f\xc9\xd7\x3b\x6e\xa2\xbb\xc7\x36\x15\x4f\xab\xe2\x9d\xaf\xf2\x14\xb1\x15\x4d\xb9\x00\x13\x3d\xdd\xb6\x29\xf9\x5a\x25\xff\x92\x2c\xa4\x6c\xfd\xbe\x11\xd2\x44\xd7\xf3\x36\x25\x6c\x69\xa5\xb0\x75\xa1\xef\x10\xe9\xf2\x1e\xc6\x7a\x25\xac\x28\x95\xa5\x1d\xb1\x4c\x52\x16\xc0\x72\x97\x42\x4b\x81\x67\xeb\x4d\x61\xbe\xb2\x1e\x42\x16\x88\x28\x2d\x73\xa8\xd8\x4a\x10\xb6\x48\xad\x04\x02\x2a\x61\xc5\xc5\x2e\x1f\x70\x0b\x0c\x04\x8d\xd1\xe3\x46\xa4\x3c\x83\xda\xa0\x34\x37\x8d\xab\xc5\xd0\xe4\xe4\x7f\x18\x65\x6b\x63\x86\x88\xd5\xea\x9b\x23\x18\xe9\x03\x23\x96\xe3\xfd\x14\x30\xa2\x82\xd9\x5a\x30\xbb\x0f\xcc\xb1\x7c\x77\x10\x18\x51\xc0\x1c\x15\xcc\xf1\x74\x60\x4e\x1f\x98\x87\x7d\x32\x08\xcc\x51\xc0\x3c\x15\xcc\x77\x75\x60\x93\xde\x1c\x23\xc4\x1b\x16\x4b\x57\x4d\xb2\x46\x30\xb1\x4f\x74\x6c\x6e\x6f\x9a\x39\x93\xe9\xb0\x70\x7a\x6a\x9e\x35\xe2\x69\x7b\x8e\x8e\x6d\xda\x9b\x69\x3e\x9e\x0c\x8b\x28\x6e\xe4\x5a\x23\xa6\x53\x57\x9b\x6d\x5e\x1f\x9c\x3b\x99\xd8\xc3\x1c\x87\xd5\xa8\xba\x0d\xcf\x61\x3c\xd1\x86\xd5\x3f\xa7\x16\xac\x61\x55\x6a\xa9\xd5\x60\x35\xe8\x26\xb6\xb6\x20\xea\xa7\x47\x47\x45\xb8\xb6\xd7\xb1\xed\xfe\x1e\xad\x3e\xd0\x5f\x90\xe4\x7f\xfb\xb6\x5c\xf7\xb2\x3d\x17\xf7\x9e\x06\x36\x99\xba\x1d\x95\xaa\xe1\x52\x93\xcd\x6e\x54\xa9\xa3\xe7\xea\x3d\x0c\x5c\xec\x38\x1d\xe1\xd4\x70\xa9\xfb\x9a\xdb\x88\xa4\xaf\xe7\xea\x3d\x0b\xf2\xd3\xd3\xba\x1c\x4c\xdd\x3a\xb0\xd5\x20\x23\x96\x1e\xad\xf7\x34\xc8\xcf\xcf\x01\x68\x8d\xe2\x24\x4d\x36\xfb\x3b\x9c\xe5\x65\x24\x10\x10\x02\x93\x11\x8d\x5b\xae\x22\xa9\xe0\xdb\x28\x04\x51\xc1\x19\x75\x8b\x69\x4c\x77\x37\x5c\x24\x54\xe6\x03\xde\x23\x88\xc3\xaa\x9f\x32\xc6\x65\x71\x97\xca\x0d\x7f\x55\x17\xa3\xf4\x83\x8a\x04\xc4\x98\xa6\x69\x16\xf0\x10\xc6\x01\x4f\x7e\x0d\xe2\x4d\x26\x41\xfc\x52\xe1\xe4\x26\x4b\x6b\x5d\xd3\x42\x96\xa9\x53\x8e\x33\xf6\x25\x48\xc1\x75\x7a\x39\xab\x68\x0e\xaf\xb1\x80\xb3\xf7\x68\x55\xac\xf2\x8f\xc5\xc3\xf5\xfc\x75\xf9\x70\x3f\x5f\xd4\xd4\x73\x33\x5c\x24\xd5\x43\xee\x55\xf2\x35\xb0\xd3\x11\xff\x66\x87\x30\xb6\x74\xc5\xf4\x0d\xe2\xe3\x9d\x52\xed\x8b\x58\xba\x29\x1c\x98\xd2\x2c\xfb\xe4\x22\x34\xca\xde\xfd\xf1\x97\x7a\x83\x5c\x6f\xde\x40\x30\x90\x50\xb9\xd6\xd8\x82\xc8\x4e\x5e\x8c\xf5\x65\x7e\xf7\x16\x09\x38\x9e\x8e\x9d\xba\x67\x95\x2c\x6c\xf4\x4b\xce\xe3\xd3\x18\x1e\x11\x68\x98\x54\x13\x2a\xe8\xda\xd4\xc3\x4b\xf7\x64\x62\xfe\xde\x9d\x21\x29\x36\xd0\x58\xe6\xe1\x3b\x5f\xec\x7e\xb4\xff\x11\x00\x00\xff\xff\x17\x42\xa6\xbd\x3e\x0f\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 3902, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
