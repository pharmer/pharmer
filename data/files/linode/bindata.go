// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package linode

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x98\xcf\x93\xdb\x26\x14\xc7\xef\xfb\x57\x30\x3a\xc7\x5b\x81\x7e\x58\xda\x63\xa7\x69\xda\x69\xbb\xe9\x61\x6f\x9d\x4c\x86\x48\xac\xad\x58\x06\x05\x24\x67\xb6\x99\xfd\xdf\x33\x60\xd9\x92\x41\xce\x63\xd9\x5c\x76\x6d\xf4\xe0\xfb\x31\x7c\xdf\x13\xf0\xed\x06\xa1\x88\xd3\x3d\x8b\xee\x50\xd4\x36\x5c\xd4\x2c\x7a\xa3\xdb\x18\x3f\xa8\xe8\x0e\xfd\x77\x83\x10\x42\x51\xcd\x0e\xa6\x19\xa1\xe8\x0b\x3d\x7d\xea\xa4\xa8\xa3\x1b\x84\x3e\x98\x0e\x92\x6d\x1a\xc1\xa7\x3e\xdf\xcc\x5f\x84\xa2\x56\x54\xb4\x6f\x04\xd7\x0a\x9f\xbb\xb1\xf3\xb9\x83\x6e\xa5\xdd\x8a\x0b\xd9\x6f\x19\x55\xfd\xf4\xfc\x7f\xc1\xd9\x34\x9c\x69\xba\x08\x1c\x9b\x3f\x98\xff\xcf\x6f\x5e\x23\xba\xc2\xd4\x5b\x57\xc7\x7a\x4b\xab\xcd\x15\x69\x25\x86\x7e\x0b\x69\x1e\x83\xbc\xc5\xc6\xa5\xb3\xc4\xd8\xb0\xaa\x18\xef\x25\x6d\x7f\x28\x37\x0b\xf3\x16\x1c\x76\x57\x04\xbf\x32\x60\x21\x4f\x31\xfe\x52\x6a\x49\x6a\x50\x5e\xbf\x6d\x16\xf6\x7a\x41\xd0\xa4\xa7\x98\xd7\x4b\x99\xf5\xf7\xd1\x9b\x02\x5f\x2f\x0a\xae\xdd\x29\xe6\x52\xea\x5c\x07\x1a\xae\x7a\xca\x2b\xf6\xf0\xd4\xb1\x85\x6a\xa0\x76\x83\x16\xc2\x93\x44\xcd\x54\x25\x9b\xee\x04\xf6\xb7\x29\x42\x08\xc7\x24\x9d\x62\x2a\xda\xb3\x8d\x90\x4f\x3a\xe0\x1d\xe3\x4c\xd2\x16\xfd\x3b\xc8\x4e\xa8\x99\xe7\xab\x4e\x0f\x8d\xa7\x9f\x45\xf7\x17\xdf\xeb\x46\xed\xa2\x3b\x44\xe2\x99\x74\x27\x99\x1e\xbb\x8e\xee\x50\x2f\x07\xb6\x38\x6d\x27\xe4\x18\x64\xce\x93\xe2\x0a\xf4\x1f\xcd\x66\x8b\xfe\x61\x7b\xfd\x15\x02\xce\x7f\x1a\x31\x38\xcb\x09\x59\xe7\xc5\x8b\x89\x89\x45\x9c\x10\x9b\x38\x0d\x25\x26\x10\x71\x8e\xd3\x34\x7e\x31\x71\x6a\x11\xe7\xb1\x4d\x5c\x86\x12\x27\x3e\x4e\x8e\x5f\x8e\x5c\xd8\xb6\x88\x1d\x66\x12\x87\x42\xa7\x10\x34\x89\xd3\x22\x00\x7a\xe6\xdd\x23\x35\x71\xa9\x93\x50\x73\x80\xde\xd0\xd0\x3f\xa5\x66\x38\x7e\x4e\x02\x91\x41\x73\xa4\x71\x99\x07\x21\xdb\x39\x98\x3a\x29\x58\x84\x21\x83\xd6\x28\x70\x49\x82\x90\xed\x24\x2c\x9c\x1c\xcc\xc3\x90\x33\x30\x05\x09\x29\xc2\x9c\x61\xfb\x19\x3b\xd6\xc0\x25\x09\xa3\xce\x41\x3b\xa7\xd9\x3a\xcc\x1c\x76\xed\x20\x8e\x3b\x92\x22\x0d\xa3\x5e\x83\x8e\x2e\x71\x16\xe6\x0f\xec\x78\xda\x71\xc8\x3a\x0f\x74\x75\x01\xbe\x57\xb2\x2c\x09\x9b\x6c\xa7\xe6\xe5\xce\x6c\x63\x9c\x05\x9a\xa4\xf4\xc9\xc6\x2b\x75\x1a\xaa\x20\xb1\x9d\x8f\x4e\xa9\xc6\x59\x12\x98\x92\x9b\x7c\xb5\x6d\x36\xdb\x3d\xdb\xaf\xc0\x4d\x08\x49\xdf\xfd\x0a\x56\x64\x67\x4e\xcd\x1b\xca\x17\x01\xcc\xb5\x24\x8e\x17\x20\xec\x95\x4d\x96\xde\x66\x05\xce\x7d\x39\xc0\x37\x58\x5a\xb8\x14\x70\x56\xe8\x97\x88\x2f\x02\x58\xde\xcb\x85\x89\xb0\x2b\x77\xe9\x6e\x9f\x88\xff\x2c\x80\xb9\x88\xb3\x05\x06\x67\x3f\x94\x2d\xec\x87\xf4\xa6\x05\xa0\xe0\x54\x6b\xfc\xc0\x95\xf7\xf4\x08\x01\x9b\xd2\x3d\x5a\x64\x39\xa8\xaf\x4f\x47\x35\x95\xb5\x47\x5e\x78\xa4\x85\x4d\x90\x61\xf2\x02\x02\x30\x2d\xf2\xa5\xd4\xf4\xa8\x77\x09\x8e\xd7\xc4\x9b\x03\x4e\x0b\x8f\xac\xb0\x19\x4c\x61\xf4\x26\x00\xcf\x76\x65\xbe\xc0\x60\x57\xd0\xd2\x39\xba\xe1\x32\xcf\x63\xb0\x4e\x4d\x1c\x60\x7a\x62\xb2\x54\x22\xec\x04\xc5\xc4\x29\x12\x24\x27\xfa\xe8\xe4\x4b\x92\x80\x8b\x82\xcb\x05\x83\x26\xf6\xba\x5c\x6c\x8f\xc6\x92\x59\x26\x1e\xd5\xe2\x4c\x02\x6f\x48\xe1\x82\xe5\xcc\x86\x39\xaa\x7b\x23\x80\x79\x82\x17\xdc\xe1\x6c\x1d\x1d\x73\x98\xd3\xb7\x37\x04\x58\x36\x93\x85\xf5\xb0\xab\xa6\x7b\x54\x37\x1b\x9f\x11\xe2\x7c\x89\x53\x49\x56\x33\xde\x37\xb4\x5d\xb8\xc2\xe9\xa4\x38\x34\x35\x93\x93\x74\x34\x1f\xb4\x6b\xe9\xd3\xef\x42\xee\x69\xaf\x03\x1e\x1b\xd6\xd6\xd3\x73\xca\xb9\xe8\xcd\x25\x94\x1e\xf8\x34\xa4\x1e\x74\x4b\xe5\x9e\xc9\x5b\xda\x75\xaa\x12\x35\xbb\xad\xc4\xfe\x97\xaa\x1d\x54\xcf\xe4\x6a\xc2\xd1\x43\x9e\x47\xbb\xd6\xad\xe6\xca\xee\x32\xf6\x78\x3e\x83\x18\xae\xcb\x9b\xad\x89\xe6\x78\xff\x5d\x09\xfe\xd8\x6c\xcc\xaf\xfc\xf3\xfe\xfd\x6f\x6f\x3f\x3e\xbc\xff\xeb\xed\xfd\x4c\x5d\x0f\x23\xe4\x7e\xba\x3a\xff\xd8\x8b\x1d\xe3\x97\x11\x9f\xd5\x71\x91\x16\x1e\xb5\xf4\x13\x33\x78\x0f\xee\xb3\x86\x77\x83\x99\xc0\x8e\x2a\xf5\x55\xc8\x3a\x3a\x3f\x7d\x1e\x3f\xd9\x37\x6f\xbb\xe1\x13\x93\x9c\xf5\x4b\xd7\x6e\x07\x26\xd5\xe8\x16\x7c\x5b\xdc\xce\xca\xdd\x78\xd1\x3f\x5b\x8a\x9a\x1d\xc6\x1d\xde\x7c\xa2\xa5\xa8\xdd\xd6\x2f\x74\xbe\x17\x3c\xa1\xd9\x66\xbe\x10\x2f\x7d\xc4\x1f\x69\xab\x16\xd4\xed\x66\x23\x6f\x1a\x2f\xf5\xf5\x94\xdc\x3c\x7f\x0f\x00\x00\xff\xff\x64\xc8\xc6\x49\xdc\x18\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 6364, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
