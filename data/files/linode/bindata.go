// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package linode

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x97\x5d\x6f\xb3\x36\x14\xc7\xef\xf3\x29\x8e\xb8\x66\x19\x36\x84\x40\xee\xaa\x35\xed\xf6\x74\x4b\x2b\x35\x95\x26\x4d\x55\xe5\xc2\x69\xca\x02\x36\x35\x24\x55\x56\xe5\xbb\x4f\xd0\x34\x50\x03\x86\x44\xcf\x4d\x02\x7e\x39\xff\x1f\xe7\xc5\x3a\xfe\x18\x01\x18\x9c\x25\x68\xcc\xc0\x88\x23\x2e\x42\x34\xcc\x62\x0c\xf9\x36\x33\x66\xf0\xcf\x08\x00\xc0\x08\x71\x5b\x0e\x03\x18\x6f\xec\xeb\x29\x95\x22\x34\x46\x00\x8f\xe5\x06\x89\xab\x48\xf0\x6a\xcf\x47\xf9\x0b\x60\xc4\x22\x60\x79\x24\x78\xa1\x70\x25\x19\x5f\xbf\x6c\x64\x6e\xc2\xe5\xfc\x60\xe7\xb8\xb7\x58\x40\xac\x6a\xf4\x3f\xc1\xb1\xb2\x57\x0e\x11\xcb\x38\xbc\x3c\x96\xff\x7b\xb3\x5b\x6b\x29\xd6\x3b\x01\xd4\x84\x1f\x77\xad\x4a\x44\xaf\x44\x86\x2b\x5d\xb2\x38\x66\x99\x09\xcb\xbf\x4d\x78\xb8\xbf\x68\x53\xa3\x5a\x31\x3a\x5c\xeb\x4a\x62\x22\x78\x6e\xc2\x6f\x17\x9d\x62\xb6\x56\xcc\x1e\x2e\x76\x91\xc7\x8c\xe7\xcc\x84\xeb\x6e\x31\x47\x2b\xe6\x0c\x17\x5b\xe0\x3b\x93\x6b\x13\x16\x3f\x3a\xb5\x5c\xad\x96\x3b\x5c\xeb\x4f\xc1\x43\xc1\x4d\x98\xf3\x55\xcc\x78\x68\xc2\xc3\x4d\x9b\xde\x54\xab\x37\x3d\x31\x17\xbb\x32\xd1\xd3\xaa\x78\xc3\x55\xee\x23\xbe\x62\xa9\x90\x68\xc2\xfd\x75\x9b\x92\xaf\x55\xf2\x15\xa5\x63\x69\x47\x3c\xcb\x19\x0f\x70\xb9\x4b\xb1\xa5\xc0\xb3\xf5\xa6\x2c\xa8\xca\x78\x88\x59\x20\xa3\xf4\xe8\xed\xf2\x5c\x01\x62\xd1\x5a\xb2\x04\x2c\xc7\x95\x90\xbb\x62\xc1\x35\x72\x94\x2c\x86\xbb\x8d\x4c\x45\x86\xb5\x45\x69\x61\x9a\x54\x9f\xc2\x92\x6f\xef\x61\x94\xad\x8d\x19\x50\xab\xd5\x37\x5f\x60\x56\x2f\x99\x6b\x7b\x1d\x68\xbf\x47\xab\x57\xf8\x0b\x93\xe2\xb5\x0f\xcb\x3d\x91\xab\xd7\x63\x36\x9d\xba\xde\xc9\x5c\x54\xe1\xb2\xa9\xca\xe5\xe8\xb9\x68\x1f\x97\x4b\x1c\xc7\x3a\x99\xcb\x51\xb8\x5c\x4b\xe5\xf2\xf5\x5c\xf6\x90\x0c\xb3\x4e\x07\xf3\xd4\x40\x5a\x0d\x32\x6a\xe9\xd1\x9c\x3e\x34\x6a\x39\xde\x19\x68\xb5\x9c\xfa\x64\xa3\x4d\x36\x5b\x1f\xce\xde\x68\x16\x68\x3f\xa5\x2e\x1b\x79\x66\x6b\xc1\x7a\xc3\xe9\x58\xbe\x7b\x16\x98\x5a\x01\x4e\xa3\x00\x3c\x1d\x58\x6f\x30\x3d\xe2\xd3\xb3\xc0\xd4\x12\xf0\x1a\x15\xe0\xea\xc0\x26\xbd\x05\x40\xa9\x77\x5e\x2c\xd5\x3c\x23\x8d\x60\x12\x9f\xea\xd8\xdc\xde\x34\x73\x26\xd3\xf3\xc2\xa9\xd6\x27\x6d\xc4\xd3\xf6\x1c\x1d\xdb\xb4\x37\xd3\x7c\x32\x39\x2f\xa2\xa4\x91\x6b\x8d\x98\x4e\x5d\x6d\xb6\x79\xbd\xa7\xed\x64\x62\x9f\xe7\xb8\xc6\xe9\xe1\x36\x3c\x47\xc8\x44\x1b\x56\x7f\x48\x2d\x74\x9c\x6b\x7d\x55\x6a\xa9\xd5\xd0\x38\xda\xc8\xc4\x76\x95\x66\x24\x90\x18\x22\xcf\x23\x16\xb7\xb4\x22\xa9\x14\xdb\x28\x44\x59\xf1\x19\x75\x93\x69\xcc\x76\x57\x42\x26\x2c\x2f\x16\xbc\x44\x18\x87\xd5\x3c\xe3\x5c\xe4\x65\x2f\x55\x18\xfe\xa8\xfa\xa2\xf4\x95\xc9\x04\xe5\x98\xa5\x69\x16\x88\x10\xc7\x81\x48\x7e\x0d\xe2\x4d\x96\xa3\xfc\xa5\xc2\x29\x4c\x1e\xad\x75\x6d\x0b\x79\xa6\x6e\x39\xec\xd8\x1f\x41\x4a\xae\xef\xbd\x59\x45\xf3\x79\x35\x0b\x04\x7f\x89\x56\xe5\x57\xfe\xb1\xb8\xbd\x9c\x3f\x2d\x6f\x6f\xe6\x8b\x9a\x7a\x61\x46\xc8\xa4\xba\xd5\x3d\xe5\x62\x8d\xfc\xfb\x8a\x7f\xb3\xcf\x48\xb6\x4c\xc5\xec\x19\xe3\x43\xe7\xaa\xce\x45\x3c\xdd\x94\x0e\x4c\x59\x96\xbd\x0b\x19\x1a\xc7\xd9\xfd\xe1\x49\xed\x20\xd7\x9b\x67\x94\x1c\xf3\xb6\xf6\x71\x8b\x32\xfb\xba\x93\x8d\xbd\x71\x2d\x97\x0e\x77\xd0\x5a\x28\x8a\x7b\xe8\x0c\x72\xb9\xc1\xba\xa3\x8b\x7b\x68\x63\xf4\x8d\x1d\xc6\x46\x75\xb4\x12\x69\xb4\xff\x3f\x00\x00\xff\xff\x15\x87\x5f\xde\xf7\x0e\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 3831, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
