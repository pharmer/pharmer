// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package linode

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x97\x6f\x6f\xbb\x36\x10\xc7\x9f\xe7\x55\x9c\x78\xcc\x32\x6c\x08\x81\x3c\xab\xd6\xfc\xba\xb5\x5b\x5a\xa9\xa9\x34\x69\xaa\x2a\x17\xae\x29\x0b\xd8\xd4\x90\x54\x59\x95\xf7\x3e\x41\xd3\x40\x0d\x98\x04\xfd\x9e\x24\xe0\x3f\xf7\xfd\xe0\xbb\xb3\xcf\x1f\x23\x00\x83\xb3\x04\x8d\x19\x18\x71\xc4\x45\x88\x86\x59\xb4\x21\xdf\x66\xc6\x0c\xfe\x19\x01\x00\x18\x21\x6e\xcb\x66\x00\xe3\x8d\x7d\x3d\xa5\x52\x84\xc6\x08\xe0\xb1\x9c\x20\x71\x15\x09\x5e\xcd\xf9\x28\x7f\x01\x8c\x58\x04\x2c\x8f\x04\x2f\x14\x2e\x59\x1c\xb3\xcc\x84\xe5\xdf\x26\x3c\xdc\x5f\x1c\x2c\x1d\x67\x17\x43\x68\xd5\xf8\x9f\xe0\x58\x19\x2c\x9b\xa8\x71\x78\x7e\x2c\xff\xf7\x66\xb7\xd6\x0f\x89\x89\xe0\xb9\x09\xbf\x5d\x74\x8a\xd9\x5a\x31\xfb\x74\xb1\x8b\x3c\x66\x3c\x67\x26\x5c\x75\x8b\x39\x5a\x31\xe7\x74\xb1\x05\xbe\x33\xb9\x36\x61\x71\xdd\xa9\xe5\x6a\xb5\xdc\xd3\xb5\xfe\x14\x3c\x14\xdc\x84\x39\x5f\xc5\x8c\x87\x26\x3c\xdc\xb4\xe9\x4d\xb5\x7a\xd3\xd3\xf5\x96\x62\xbd\x13\x26\x5c\xdf\xb5\xa9\x78\x5a\x15\xef\x74\x95\xfb\x88\xaf\x58\x2a\x24\x9a\x70\x7f\xd5\xa6\xe4\x6b\x95\xfc\x73\xa2\x90\xf1\xf5\xcb\x46\xe6\x26\x5c\xce\xdb\x94\x88\xa5\x95\x22\xd6\x99\x6b\x07\xb4\x6b\xf5\x08\xd1\x2b\x11\x45\xe9\x98\xda\x11\xcf\x72\xc6\x03\x5c\xee\x52\x6c\x49\xf0\x6c\xbd\x29\xcd\x57\xd6\x43\xcc\x02\x19\xa5\xc7\x18\x2a\xf7\x15\x20\x16\xad\xa5\x40\xc0\x72\x5c\x09\xb9\x2b\x06\x5c\x21\x47\xc9\x62\xb8\xdb\xc8\x54\x64\x58\x1b\x94\x16\xa6\x49\xf5\x31\x2c\xf9\xf6\x1e\x46\xd9\xda\x98\x01\xb5\x5a\xd7\xe6\x00\x46\xfb\xc0\xa8\xe5\x78\x3f\x05\x8c\xaa\x60\xb6\x16\xcc\xee\x03\x73\x2c\xdf\x1d\x04\x46\x15\x30\x47\x05\x73\x3c\x1d\x98\xd3\x07\xe6\x11\x9f\x0e\x02\x73\x14\x30\x4f\x05\xf3\x5d\x1d\xd8\xa4\x37\xc6\x28\xf5\x86\xf9\xd2\x55\x83\xac\xe1\x4c\xe2\x53\x1d\x9b\xdb\x1b\x66\xce\x64\x3a\xcc\x9d\x9e\x1a\x67\x0d\x7f\xda\x9e\xa3\x63\x9b\xf6\x46\x9a\x4f\x26\xc3\x3c\x4a\x1a\xb1\xd6\xf0\xe9\xd4\xd5\x46\x9b\xd7\x07\xe7\x4e\x26\xf6\xb0\x85\x23\xaa\x57\xdd\xc6\xca\x11\x32\xd1\xba\xd5\x3f\x25\x17\xac\x61\x59\x6a\xa9\xd9\x60\x35\xe8\x26\xb6\x36\x21\xea\xa7\x47\x47\x46\xb8\xb6\xd7\xb1\xed\xfe\x1e\xad\x5e\xe1\x2f\x4c\x8a\xd7\xbe\x2d\xd7\x3d\x6f\xcf\x25\xbd\xa7\x81\x4d\xa7\x6e\x47\xa6\x6a\xb8\xd4\x60\xb3\x1b\x59\xea\xe8\xb9\x7a\x0f\x03\x97\x38\x4e\x87\x3b\x35\x5c\xea\xbe\xe6\x36\x3c\xe9\xeb\xb9\x7a\xcf\x82\xe2\xf4\xb4\xce\x07\x53\xb7\x0e\x62\x35\xc8\xa8\xa5\x47\xeb\x3d\x0d\x8a\xf3\x73\x00\x5a\x23\x39\x69\x93\xcd\xfe\x72\xe7\xb1\x18\x09\x24\x86\xc8\xf3\x88\xc5\x2d\xa5\x48\x2a\xc5\x36\x0a\x51\x56\x70\x46\xdd\x62\x1a\xb3\xdd\x0f\x21\x13\x96\x17\x03\x5e\x22\x8c\xc3\xaa\x9f\x71\x2e\xf2\xb2\x96\x2a\x0c\x7f\x54\x85\x51\xfa\xca\x64\x82\x72\xcc\xd2\x34\x0b\x44\x88\xe3\x40\x24\xbf\x06\xf1\x26\xcb\x51\xfe\x52\xe1\x14\x26\x8f\xd6\xba\xa6\x85\x3c\x53\xa7\x1c\x66\xec\x8f\x20\x25\xd7\xf7\xe2\xac\xa2\xf9\xbc\x9a\x05\x82\xbf\x44\xab\xf2\x2b\xff\x58\xdc\x5e\xce\x9f\x96\xb7\x37\xf3\x45\x4d\xbd\x30\x23\x64\x52\xdd\xea\x9e\x72\xb1\x46\xfe\x7d\xc4\xbf\xd9\xa7\x1b\x5b\xba\x62\xf6\x8c\xf1\xa1\xa6\x54\xfb\x22\x9e\x6e\xca\x05\x4c\x59\x96\xbd\x0b\x19\x1a\xc7\xde\xfd\xe1\x49\xad\x20\xd7\x9b\x67\x94\x1c\xf3\xb6\xf2\x71\x8b\x32\xfb\xaa\x50\xc7\xde\xb8\x7b\x43\x53\x7a\x0f\x37\xd4\x9a\xa3\x8a\x5b\xea\x0c\x72\xb9\xc1\x9a\x1b\xde\x58\xb3\xad\xbc\xb9\x7e\xb6\x8e\xea\xe0\x25\xf0\x68\xff\x7f\x00\x00\x00\xff\xff\xbd\xca\x31\x5f\x15\x0f\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 3861, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
