// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package linode

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x97\xdf\x6f\x9b\x30\x10\xc7\xdf\xf3\x57\x58\x3c\xb3\x0c\x1b\x42\x20\x6f\xd5\x9a\x76\x6b\xb7\xb4\x52\xd3\x69\xd2\x54\x55\x2e\x5c\x53\x16\xb0\x99\x4d\x52\x65\x55\xfe\xf7\x09\x92\x41\x6a\xc0\x24\x68\x2f\x09\xf8\xc7\x7d\x3f\xf8\xee\xec\xf3\xdb\x00\x21\x83\xd1\x04\x8c\x09\x32\xe2\x88\xf1\x10\x0c\x33\x6f\x03\xb6\x36\x26\xe8\xe7\x00\x21\x84\x8c\x10\xd6\x45\x2b\x42\xc6\x6f\x6a\x0c\x10\x7a\x28\xc6\x08\x58\x44\x9c\xc9\x72\xdc\x5b\xf1\x8b\x90\x11\xf3\x80\x66\x11\x67\xb9\xd1\x73\x1a\xc7\x54\x9a\x68\xfe\xc3\x44\xf7\x77\x67\x7b\x3b\xe5\xec\x7c\x08\xa9\x1a\xff\x70\x06\x95\xc1\xa2\x89\x18\xfb\xe7\x87\xe2\x7f\x6b\xb6\x6b\x5d\x08\x48\x38\xcb\x4c\xf4\xe9\xac\x55\xcc\xd6\x8a\xd9\xc7\x8b\x9d\x65\x31\x65\x19\x35\xd1\x65\xbb\x98\xa3\x15\x73\x8e\x17\x9b\xc1\x2b\x15\x4b\x13\xcd\xae\x5a\xb5\x5c\xad\x96\x7b\xbc\xd6\x57\xce\x42\xce\x4c\x34\x65\x8b\x98\xb2\xd0\x44\xf7\xd7\x4d\x7a\x63\xad\xde\xf8\x78\xbd\x39\x5f\x6e\xb8\x89\xae\x6e\x9b\x54\x3c\xad\x8a\x77\xbc\xca\x5d\xc4\x16\x34\xe5\x02\x4c\x74\x77\xd9\xa4\xe4\x6b\x95\xfc\x53\xa2\x90\xb2\xe5\xf3\x4a\x64\x26\x3a\x9f\x36\x29\x61\x4b\x2b\x85\xad\x13\xd7\x0e\x91\xb6\xd5\xc3\x58\xaf\x84\x15\xa5\x32\xb5\x23\x26\x33\xca\x02\x98\x6f\x52\x68\x48\x70\xb9\x5c\x15\xe6\x2b\xeb\x21\xc8\x40\x44\x69\x19\x43\xc5\x56\x82\xb0\x45\x0e\x52\x20\xa0\x19\x2c\xb8\xd8\xe4\x03\x2e\x81\x81\xa0\x31\xba\x5d\x89\x94\x4b\x38\x18\x94\xe6\xa6\x71\xf5\x31\x34\x79\xf7\x1e\x46\x72\x69\x4c\x10\xb1\x1a\xd7\x66\x0f\x46\xba\xc0\x88\xe5\x78\xff\x05\x8c\xa8\x60\xb6\x16\xcc\xee\x02\x73\x2c\xdf\xed\x05\x46\x14\x30\x47\x05\x73\x3c\x1d\x98\xd3\x05\xe6\x61\x9f\xf4\x02\x73\x14\x30\x4f\x05\xf3\x5d\x1d\xd8\xa8\x33\xc6\x08\xf1\xfa\xf9\xd2\x55\x83\xac\xe6\x4c\xec\x13\x1d\x9b\xdb\x19\x66\xce\x68\xdc\xcf\x9d\x9e\x1a\x67\x35\x7f\xda\x9e\xa3\x63\x1b\x77\x46\x9a\x8f\x47\xfd\x3c\x8a\x6b\xb1\x56\xf3\xe9\xd8\xd5\x46\x9b\xd7\x05\xe7\x8e\x46\x76\xbf\x85\xc3\xaa\x57\xdd\xda\xca\x61\x3c\xd2\xba\xd5\x3f\x26\x17\xac\x7e\x59\x6a\xa9\xd9\x60\xd5\xe8\x46\xb6\x36\x21\x0e\x4f\x8f\x96\x8c\x70\x6d\xaf\x65\xdb\xfd\x1c\x2d\x5e\xd0\x37\x48\xf2\xd7\xae\x2d\xd7\x3d\x6d\xcf\xc5\x9d\xa7\x81\x4d\xc6\x6e\x4b\xa6\x6a\xb8\xd4\x60\xb3\x6b\x59\xea\xe8\xb9\x3a\x0f\x03\x17\x3b\x4e\x8b\x3b\x35\x5c\xea\xbe\xe6\xd6\x3c\xe9\xeb\xb9\x3a\xcf\x82\xfc\xf4\xb4\x4e\x07\x53\xb7\x0e\x6c\xd5\xc8\x88\xa5\x47\xeb\x3c\x0d\xf2\xf3\xb3\x07\x5a\x2d\x39\x49\x9d\xcd\xfe\xe7\xce\xb2\x18\x09\x04\x84\xc0\xb2\x88\xc6\x0d\xa5\x48\x2a\xf8\x3a\x0a\x41\x54\x70\xc6\xa1\xc5\x34\xa6\x9b\x0b\x2e\x12\x9a\xe5\x03\x9e\x23\x88\xc3\xaa\x9f\x32\xc6\xb3\xa2\x96\xca\x0d\xbf\x55\x85\x51\xfa\x42\x45\x02\x62\x48\xd3\x54\x06\x3c\x84\x61\xc0\x93\x8f\x41\xbc\x92\x19\x88\x0f\x15\x4e\x6e\xb2\xb4\xd6\x36\x2d\x64\x52\x9d\xb2\x9f\xb1\x2d\x41\x0a\xae\xf7\xc5\x59\x45\xb3\xbb\x8d\x05\x9c\x3d\x47\x8b\xe2\x2b\xbf\xcc\x6e\xce\xa7\x8f\xf3\x9b\xeb\xe9\xec\x40\x3d\x37\xc3\x45\x52\x5d\xe4\x1e\x33\xbe\x04\xf6\x7e\xc4\x2f\xb9\x73\x63\x43\x57\x4c\x9f\x20\xde\xd7\x94\x6a\x5f\xc4\xd2\x55\xb1\x80\x29\x95\xf2\x95\x8b\xd0\x28\x7b\xb7\xfb\x27\xb5\x82\x5c\xae\x9e\x40\x30\xc8\x40\x7e\x07\x21\x9b\xef\x89\xeb\x5d\x4f\x11\x72\x43\x6f\xd8\xbe\xb1\x29\xbd\xbb\xcb\xe9\x81\xbf\xf2\x0b\xea\x04\x65\x62\x05\x83\x43\xaa\x82\x66\xb0\xfd\x1b\x00\x00\xff\xff\xa9\x4e\xff\xef\xe5\x0e\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 3813, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
