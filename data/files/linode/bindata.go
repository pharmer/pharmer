// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package linode

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x97\x5d\x6f\xb3\x36\x14\xc7\xef\xf3\x29\x8e\xb8\x66\x19\x36\x84\x40\xee\xaa\x35\x4f\xb7\xe7\xd9\xd2\x4a\x4d\xa5\x49\x53\x55\xb9\x70\x9a\xb2\x80\xcd\x0c\x49\x95\x55\xf9\xee\x13\x24\x85\xc4\x80\x49\xd0\x6e\x12\xf0\xcb\xf9\xff\x38\x2f\x7e\xf9\x1c\x01\x18\x9c\x25\x68\xcc\xc0\x88\x23\x2e\x42\x34\xcc\xa2\x0d\xf9\xd6\x98\xc1\x5f\x23\x00\x00\x23\xc4\x6d\xd9\x0a\x60\xfc\xc3\x8c\x11\xc0\x73\x39\x46\xe2\x2a\x12\x3c\xab\xc6\x7d\x96\xbf\x00\x46\x2c\x02\x96\x47\x82\x17\x46\x6f\x59\x1c\xb3\xcc\x84\xe5\x9f\x26\x3c\x3d\xde\x1c\xed\x54\xb3\x8b\x21\xb4\x6e\xfc\x57\x70\xac\x0d\x96\x4d\xd4\x38\x3e\x3f\x97\xff\x7b\xb3\x5b\xeb\x9b\xc4\x44\xf0\xdc\x84\x5f\x6e\x3a\xc5\x6c\xad\x98\x7d\xb9\xd8\x4d\x1e\x33\x9e\x33\x13\xee\xba\xc5\x1c\xad\x98\x73\xb9\xd8\x02\x3f\x98\x5c\x9b\xb0\xf8\xde\xa9\xe5\x6a\xb5\xdc\xcb\xb5\x7e\x17\x3c\x14\xdc\x84\x39\x5f\xc5\x8c\x87\x26\x3c\xfd\x68\xd3\x9b\x6a\xf5\xa6\x97\xeb\x2d\xc5\x7a\x27\x4c\xf8\xfe\xd0\xa6\xe2\x69\x55\xbc\xcb\x55\x1e\x23\xbe\x62\xa9\x90\x68\xc2\xe3\x5d\x9b\x92\xaf\x55\xf2\xaf\xc9\x42\xc6\xd7\x6f\x1b\x99\x9b\x70\x3b\x6f\x53\x22\x96\x56\x8a\x58\x57\xfa\x0e\x68\x97\xf7\x08\xd1\x2b\x11\x45\xa9\x2a\xed\x88\x67\x39\xe3\x01\x2e\x77\x29\xb6\x14\x78\xb6\xde\x94\xe6\x6b\xeb\x21\x66\x81\x8c\xd2\x2a\x87\xca\xa5\x04\x88\x45\x4f\x4a\x20\x60\x39\xae\x84\xdc\x15\x03\xee\x90\xa3\x64\x31\x3c\x6c\x64\x2a\x32\x3c\x19\x94\x16\xa6\x49\xfd\x31\x2c\x39\x7b\x0f\xa3\x6c\x6d\xcc\x80\x5a\xad\xbe\x39\x82\xd1\x3e\x30\x6a\x39\xde\xff\x02\x46\x55\x30\x5b\x0b\x66\xf7\x81\x39\x96\xef\x0e\x02\xa3\x0a\x98\xa3\x82\x39\x9e\x0e\xcc\xe9\x03\xf3\x88\x4f\x07\x81\x39\x0a\x98\xa7\x82\xf9\xae\x0e\x6c\xd2\x9b\x63\x94\x7a\xc3\x62\xe9\xaa\x49\xd6\x08\x26\xf1\xa9\x8e\xcd\xed\x4d\x33\x67\x32\x1d\x16\x4e\x4f\xcd\xb3\x46\x3c\x6d\xcf\xd1\xb1\x4d\x7b\x33\xcd\x27\x93\x61\x11\x25\x8d\x5c\x6b\xc4\x74\xea\x6a\xb3\xcd\xeb\x83\x73\x27\x13\x7b\x98\xe3\x88\x1a\x55\xb7\xe1\x39\x42\x26\xda\xb0\xfa\x97\xd4\x82\x35\xac\x4a\x2d\xb5\x1a\xac\x06\xdd\xc4\xd6\x16\xc4\xe9\xee\xd1\x51\x11\xae\xed\x75\x2c\xbb\xbf\x46\xab\x77\xf8\x03\x93\xe2\xb5\x6f\xc9\x75\xaf\x5b\x73\x49\xef\x6e\x60\xd3\xa9\xdb\x51\xa9\x1a\x2e\x35\xd9\xec\x46\x95\x3a\x7a\xae\xde\xcd\xc0\x25\x8e\xd3\x11\x4e\x0d\x97\xba\xae\xb9\x8d\x48\xfa\x7a\xae\xde\xbd\xa0\xd8\x3d\xad\xeb\xc1\xd4\xa5\x83\x58\x0d\x32\x6a\xe9\xd1\x7a\x77\x83\x62\xff\x1c\x80\xd6\x28\x4e\xda\x64\xb3\xbf\xc2\x59\x1d\x46\x02\x89\x21\xf2\x3c\x62\x71\xcb\x51\x24\x95\x62\x1b\x85\x28\x6b\x38\xe3\xd4\x62\x1a\xb3\xdd\x37\x21\x13\x96\x17\x03\xde\x22\x8c\xc3\xba\x9f\x71\x2e\xf2\xf2\x2c\x55\x18\xfe\xac\x0f\x46\xe9\x3b\x93\x09\xca\x31\x4b\xd3\x2c\x10\x21\x8e\x03\x91\xfc\x1c\xc4\x9b\x2c\x47\xf9\x53\x8d\x53\x98\xac\xac\x75\x4d\x0b\x79\xa6\x4e\x39\xce\xd8\x57\x20\x25\xd7\xf9\xe1\xac\xa6\x39\xdc\xc6\x02\xc1\xdf\xa2\x55\xf9\x95\xbf\x2d\xee\x6f\xe7\x2f\xcb\xfb\x1f\xf3\xc5\x89\x7a\x61\x46\xc8\xa4\xbe\xc8\xbd\xe4\x62\x8d\xfc\x7c\xc4\xdf\xd9\x21\x8c\x2d\x5d\x31\x7b\xc5\xf8\x78\xa6\x54\xfb\x22\x9e\x6e\x4a\x07\xa6\x2c\xcb\x3e\x84\x0c\x8d\xaa\x77\x7f\x7c\x52\x4f\x90\xeb\xcd\x2b\x4a\x8e\x39\xd6\xae\x35\xb6\x28\xb3\xb3\x1b\xe3\xe9\x67\x7e\xf5\x96\x09\x38\x9e\x8e\x9d\x53\xcf\x2a\x59\xd8\xe8\x3f\x5c\x57\xcf\x7c\x56\x5c\x5a\x67\x90\xcb\x0d\x36\x58\x0f\xff\x05\xf1\x7e\xb4\xff\x2f\x00\x00\xff\xff\x26\x8c\xb5\x28\x03\x0f\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 3843, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
