// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package linode

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x57\x5d\x73\xda\x38\x14\x7d\xcf\xaf\xd0\xf8\xd9\xa5\xfe\xc2\x40\xde\xd8\x90\x76\xd3\xa6\x94\x0d\x69\x77\x67\x76\x3a\x1d\x21\x5f\x88\x16\x59\xf2\x4a\x32\x1d\xda\xc9\x7f\xdf\x91\x71\xb0\xf1\x27\x61\xf6\x25\x01\xeb\xfa\x9e\xc3\x3d\xe7\x5e\x49\xbf\xae\x10\xb2\x38\x8e\xc1\xba\x46\x16\xa3\x5c\x44\x60\xd9\xe6\x19\xf0\x9d\x75\x8d\xfe\xbe\x42\x08\x21\x2b\x82\x5d\xf6\x14\x21\xeb\x5f\x6c\x5d\x21\xf4\x2d\x8b\x91\xb0\xa1\x82\xab\x63\xdc\xaf\xec\x2f\x42\x16\x13\x04\x6b\x2a\xb8\x49\x3a\xc3\x8c\x61\x65\xa3\xc7\xbf\x6c\xf4\x65\x39\xcd\xf3\x1c\xdf\x36\x21\x5e\xf1\xf0\xa7\xe0\x50\x24\xcc\x1e\x79\x56\xfe\xf9\x5b\xf6\xff\xd9\x6e\xc7\x7a\x27\x21\x16\x5c\xdb\xe8\x66\xda\x0a\xe6\x77\x82\xf9\xe7\x83\x4d\x35\xc3\x5c\x63\x1b\xbd\x6f\x07\x0b\x3a\xc1\x82\xf3\xc1\xe6\xf0\x03\xcb\xad\x8d\xe6\x1f\x5a\xb1\xc2\x4e\xac\xf0\x7c\xac\x7b\xc1\x23\xc1\x6d\x74\xcb\x37\x0c\xf3\xc8\x46\x5f\x3e\x36\xe1\x8d\x3a\xf1\x46\xe7\xe3\x3d\x8a\xed\x5e\xd8\xe8\xc3\xa2\x09\x65\xdc\x89\x32\x3e\x1f\x65\x49\xf9\x06\x27\x42\x82\x8d\x96\xef\x9b\x90\x26\x9d\x48\x93\xd7\xb8\x10\xf3\xed\x3a\x95\xda\x46\xb3\xdb\x26\x24\xd7\xe9\x84\x72\x9d\x57\xd6\x0e\x79\x6d\xd5\x73\xdd\x6e\x24\xb7\x82\x74\x6c\x6d\xca\x95\xc6\x9c\xc0\xe3\x3e\x81\x86\x06\x57\xdb\x34\x4b\x5f\x64\x8f\x40\x11\x49\x93\xa3\x87\xb2\x51\x82\x5c\xc7\x2b\xb5\x00\xc1\x1a\x36\x42\xee\x4d\xc0\x7b\xe0\x20\x31\x43\x8b\x54\x26\x42\x41\x29\x28\x31\xa9\xdd\xe2\xc7\xe0\xf8\xe4\x7b\x44\xd5\xd6\xba\x46\x9e\xd3\x58\x9b\x9c\x98\xd7\x47\xcc\x73\x82\xf1\xff\x42\xcc\xab\x12\xf3\x3b\x89\xf9\x7d\xc4\x02\x67\x12\x5e\x44\xcc\xab\x10\x0b\xaa\xc4\x82\x71\x17\xb1\xa0\x8f\xd8\xd8\x9d\x78\x17\x11\x0b\x2a\xc4\xc6\x55\x62\x93\xb0\x8b\xd8\xb0\xd7\x63\x9e\x37\xbe\x4c\xcb\xb0\x6a\xb2\x9a\x98\xee\xc4\xeb\xe2\x16\xf6\xda\x2c\x18\x8e\x2e\x93\x73\x5c\xf5\x59\x4d\x4f\x7f\x1c\x74\x71\x1b\xf5\x3a\x6d\xe2\x0e\x2f\x53\xd4\xad\x79\xad\xa6\xe9\x28\xec\x74\xdb\xb8\x8f\x5c\x38\x1c\xfa\x97\x15\xce\xad\xaa\x1a\xd6\x2a\xe7\xba\xc3\x4e\x59\x27\xe7\xf4\x82\x73\x59\x97\x3a\xd5\x6e\x70\x6a\xec\x86\x7e\x67\x43\x94\x77\x8f\x96\x8e\x08\xfd\x71\xcb\xd8\xfd\x9d\x6e\x9e\xd0\x27\x88\xcd\xd7\xbe\x91\x1b\xbe\x6e\xe6\xba\xbd\xbb\x81\xef\x8d\xc2\x96\x4e\xed\xe0\x55\x35\x9b\x5f\xeb\xd2\xa0\x9b\x57\xef\x66\x10\xba\x41\xd0\x22\x67\x07\xaf\xea\x5c\x0b\x6b\x4a\x4e\xba\x79\xf5\xee\x05\x66\xf7\x74\x5e\x4f\xac\x3a\x3a\x5c\xa7\xc6\xcc\x73\xba\xa9\xf5\xee\x06\x66\xff\xbc\x80\x5a\xad\x39\xbd\x3a\x37\xff\x45\xce\xe3\x61\x84\x48\x88\x80\x6b\x8a\x59\xc3\x51\x24\x91\x62\x47\x23\x90\x05\x39\xab\x9c\x31\x61\x78\xff\x4e\xc8\x18\x6b\x13\xb0\xa6\xc0\xa2\x62\x1d\x73\x2e\x74\x76\x96\x32\x89\x7f\x15\x07\xa3\xe4\x09\xcb\x18\xe4\x00\x27\x89\x22\x22\x82\x01\x11\xf1\x5b\xc2\x52\xa5\x41\xbe\x29\xe8\x98\x94\xc7\x6c\x6d\xaf\x45\x5c\x55\x5f\xc9\xdf\x78\x3e\x12\xc9\x78\x9d\x1e\xce\x0a\x36\x87\xdb\x18\x11\x7c\x4d\x37\xd9\xaf\xbc\x9b\x7f\x9e\xdd\x7e\x7f\xfc\xfc\xf1\x76\x5e\x42\x37\x69\x84\x8c\x8b\x8b\xdc\x77\x2d\xb6\xc0\x4f\x23\xfe\x51\x07\x19\x1b\x96\x18\x5e\x01\xcb\xcf\x94\xd5\x35\xca\x93\x34\x2b\x60\x82\x95\xfa\x21\x64\x64\x1d\x57\x9f\xf3\x4f\xd5\x13\xe4\x36\x5d\x81\xe4\xa0\x41\x7d\x05\xa9\x9a\xef\x89\xbb\xc3\x4a\x66\xb9\xc1\x68\xd0\xee\xba\xca\xea\xe1\x72\x5a\xd2\xcb\x5c\x50\xaf\x91\x96\x29\xd4\x4a\x1b\xc1\x1a\xa7\x4c\x2f\x13\x20\x15\x8d\x45\xb4\x4c\x57\x1c\xf4\x61\xa8\x0e\xbc\x20\x18\x38\x03\xe7\xad\x1b\x96\x25\x55\x20\x77\x94\xc0\x49\xa4\xd3\x10\x87\x59\x76\x2c\x87\xb9\x88\xe0\x86\x46\x52\xe5\x7c\x4a\x21\xc0\xf1\x8a\xc1\xcd\xc1\x45\x9f\x04\xa7\x5a\x48\xca\x33\x49\x5f\x0c\x63\xb5\x85\xdf\x8b\xcd\xe6\x10\xdb\x98\xd4\xa0\xb6\x86\xb0\xc3\xc2\x0c\x94\xa6\xfc\x78\x73\x78\x81\x7c\x03\x0c\x2b\x4d\x89\x02\x2c\xc9\xd3\x09\x81\xf2\x42\x9e\xfd\x01\x12\x46\x09\x56\xe5\xfd\xc2\x14\x99\xab\x25\xc8\x1d\xc8\xbb\x45\xa9\x46\xa5\x9d\xea\x10\x33\x13\x31\xa6\x19\x7a\xde\x4b\x03\x53\x34\x76\x52\xc7\x28\xa6\xca\x98\xe2\x46\x70\x2d\x45\x66\xc8\x39\x8e\x41\x25\x98\xc0\x3d\x5d\x03\xd9\x13\x06\xf6\x3d\x8d\xa9\x7e\xc0\x7c\x03\xd2\x5e\x1e\x24\x9a\x12\x22\x52\xae\xed\x85\x31\x95\xd2\xc0\xf5\x57\xc1\xd2\x18\xee\x8d\xaf\xed\x59\x6e\x03\x2d\x24\xde\xc0\x0d\xc3\x4a\xd9\x0f\xa0\x44\x2a\x09\xfc\x91\x0a\x8d\xcb\x24\x62\x6c\xc8\x55\xdc\x11\x66\xaa\x97\xee\x33\x08\x59\x1c\xf4\x0f\x21\xb7\x8b\xd2\x0c\x5a\x33\xcc\x39\xb0\x56\x25\xa7\x0c\xa4\x6e\xd3\x5c\x98\xc2\x5a\x11\xac\x28\xe6\x4d\x38\x82\x51\xb2\x2f\xa3\x71\xc1\x1b\x4c\xf3\x27\xac\x9e\x84\xd8\x66\x8d\x3c\x4d\xf5\x13\x6f\xf3\xcd\xc3\x0a\x13\x13\xf0\xb3\x2d\x60\xba\xb8\x53\x99\xb0\xbf\x61\x45\xc9\x34\x8d\xa8\x6e\x0d\xcd\x7f\xcf\x54\x6b\x4a\xea\x41\x89\x60\x6c\xc9\x00\x92\x3b\xae\x41\xee\xb2\x49\xe8\x37\x1a\x79\x91\xae\x18\x25\x99\x93\xca\x1d\x5d\xcc\x97\xab\xe7\xff\x02\x00\x00\xff\xff\xb1\x82\xfb\x16\xb7\x12\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 4791, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
