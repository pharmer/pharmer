// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package gke

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x9d\x5d\x73\xda\x38\x17\xc7\xef\xf3\x29\x34\xbe\x7a\x9e\x19\xf0\x83\x5f\x30\x34\x77\x0d\xcd\xd3\x6d\x67\xba\xcd\x24\xe9\xde\xec\x74\x32\xc2\x56\xc0\xc5\x48\xae\x64\xd3\x65\x3b\xf9\xee\x3b\x76\x00\x83\x5e\x40\x40\xda\x9d\xf5\x9e\x9b\xbe\xf8\x1c\x2b\x7f\x49\xf6\xef\x9c\xe0\xff\xe0\xef\x17\x08\x39\x14\xcf\x89\x73\x89\x9c\xc9\x8c\x38\x9d\xea\x00\xa1\x0b\xe1\x5c\xa2\xdf\x2f\x10\x42\xc8\x49\xc8\xa2\x3e\x8c\x90\xf3\x15\xaf\xff\x95\x73\x96\x38\x17\x08\x7d\xae\x4f\xe0\x64\x92\x32\xda\x9c\xf3\xbd\xfe\x13\x21\x27\x63\x31\x2e\x52\x46\xab\xe1\x47\x53\x4c\x27\xd3\x12\xa3\x11\x2b\x69\xb1\xec\xa0\x7b\x9c\x7e\xc3\x74\x35\xe2\x66\x94\x2a\x15\x8b\x14\x77\x09\x16\x85\xd7\x44\xff\x64\x94\x34\x3f\xa1\x3e\xd4\xa4\x75\xf1\x26\x71\xf7\xf8\xd8\x70\x3c\x76\x56\x87\x3f\xd7\x7f\x3f\x75\xcc\xba\xef\xd9\x6c\xc9\x3a\xe8\x3d\xce\xf7\x88\xa5\x8c\x17\x53\x4b\xc5\x4d\xae\x46\xf6\x56\x50\xd5\xbe\x15\x3c\x62\x02\x46\xd1\x82\x95\xc5\xd4\x42\xf0\x73\x9e\x46\xec\x2a\xa0\x0a\x5d\x05\x5e\x4c\xa4\xe5\xca\x36\xb9\x26\xb1\xeb\x95\x3d\x4f\x57\x29\x0a\x8e\xb3\x23\xc4\x69\x4e\x90\x14\xea\x32\xc6\x07\x33\x8e\x58\xe0\xbb\xc2\x45\x6f\xa7\xa9\xc8\x70\x4a\x3b\xe8\x8a\x64\x93\xb4\x9c\xeb\x66\x47\x4a\xce\x72\xd2\xfd\x46\x0e\xcd\x6a\x3b\x71\x57\xeb\x4e\x24\x36\x46\x92\xf3\xb6\x61\x6b\x2c\xdf\x56\xa8\xbf\xbb\xec\x3b\x11\xd3\x14\xfc\x73\xaf\xe3\xad\xb1\x02\x5b\xa1\x81\x51\x68\x60\x14\x1a\xbc\xa0\xd0\xd0\x56\x68\x68\x94\x13\x9e\x2b\xa7\xc6\x1d\x9e\x13\x9e\xc6\xd6\x84\x35\x9c\xb3\xbb\x9a\xa6\xa4\xb1\x4d\xd2\x99\x93\xaa\xef\xde\xf5\xb0\x87\xe7\xa3\xa6\xef\x4e\x45\x13\x1f\x1f\x88\x1f\x31\x81\xaa\x54\xc7\x69\x86\xae\xb2\xf2\xf1\x51\x74\xd0\x3b\xf6\x0d\xeb\x26\x55\x8a\x6e\x4c\x68\xc5\xa7\xfd\xb3\xd9\xca\xdb\x9d\xc6\x76\x60\x6c\x0a\xc4\xa6\xc0\xa3\xfd\x8c\xae\x08\x9f\x91\x8c\x2c\x37\x5d\xc8\x5d\xb5\x40\x68\x84\x39\xcb\x52\x6a\x9a\xdc\xe1\x7d\x5a\x27\x29\xea\xd7\x6b\xae\x3b\x7a\x26\x00\x57\xe3\xec\xbf\x55\xd7\x49\xca\x7a\x3f\x1f\xd5\xc9\x3d\xea\xc6\xbd\x9f\x12\xf4\x06\x67\x19\x11\x1d\xf4\xf1\xd6\x20\xf3\x70\x31\x59\x27\x29\x32\x35\xe5\x65\x73\x54\x96\xb9\x69\x48\x53\x2a\x0a\x4c\x63\x72\xbf\xcc\x89\xa6\x2d\x15\xb3\xb2\x12\xf6\xe8\x75\xe7\x69\xcc\x59\x23\x2c\x21\x22\xe6\x69\xbe\x9e\x9b\x87\x16\xa3\x9b\x4f\xe8\x3f\x62\x8a\x39\x49\x50\x3e\x5d\x8a\x34\xc6\x19\x8a\x19\x27\xff\x45\x98\x26\xa8\xe7\x46\xe8\xed\x15\xba\x7d\xfd\xa1\x19\x24\xce\xab\xd1\xbd\x66\x25\xf0\xdc\xb9\xac\x32\x9b\x1f\x93\x8a\x99\x73\x89\x82\xde\xc0\xff\x61\xfd\xed\x9e\xde\xf1\x9c\xae\xd3\xd0\xe9\x9d\xd2\x1b\xee\x69\xd0\x0e\x74\x6f\x87\xda\xa2\x97\x69\xad\x4c\x6d\xcb\x69\xad\x8e\xa9\xb7\x38\xad\x1f\x31\x35\x00\xa7\x35\x0d\xa6\xfa\xbd\xaf\xb2\x5b\x54\xca\x97\xac\xb9\xfb\x4b\xda\xf9\x25\xd1\x50\x59\x5e\xb4\x48\xe9\x4a\xc0\x71\xe5\x42\xc7\xea\xe3\xb8\xae\xc3\xe8\x39\xc8\xed\x68\xc9\x3a\xf1\xba\x62\x8e\xb3\xec\x0c\xb2\x7a\xee\x40\x25\x2b\x2e\xc8\x84\xf1\x65\xfd\xfb\xcc\xee\xf8\x7a\xe8\x7a\xee\x00\xa0\x0b\xd0\x05\xe8\x02\x74\xdb\x0f\x5d\xea\x75\xa7\xe9\x64\x1a\xe7\x65\xd7\x8b\xcc\xe4\x8d\x6a\xf4\x8a\x0e\xf2\x42\x37\xdc\x8b\xd8\x5f\xd2\xc9\x14\x8d\x6e\x3e\x29\x94\x8d\x64\xcc\x86\x6e\x28\x73\x36\xea\xf7\x83\x08\x40\x0b\xa0\x05\xd0\x1e\x4a\x02\xd0\xfe\x63\x41\xeb\x1b\x39\xeb\x6f\x30\xeb\x0e\x4f\xa2\xac\xaf\xf4\xb2\x43\x60\x2c\x30\x56\x8e\x00\x63\x81\xb1\xed\x66\x6c\x60\x86\x6c\xb0\xa1\xac\x3f\xd4\x61\xb6\x06\x69\x20\x93\xb4\xca\x05\x94\x02\x4a\xe5\x08\xa0\x14\x50\xda\x76\x94\x9a\x3f\x18\x30\xa5\xd9\xf4\xaa\x07\x10\x4b\x72\x4e\xaa\x61\x12\xe7\x12\x15\xbc\x24\x96\x6a\x43\xa3\xd6\x70\x8d\xfd\x40\xf7\xfc\xcd\x42\x70\x28\xe9\x0d\xd4\xa7\x73\x50\x11\x34\x01\xa8\x08\x50\x11\xa0\x22\xb4\xa8\x22\x44\x66\xc8\x46\x1b\xca\xf6\x07\x46\x9b\x43\x24\x93\xb4\xca\x05\x94\x02\x4a\xe5\x08\xa0\x14\x50\xda\x6e\x94\x0e\x8d\x24\x1d\xae\x41\x3a\x70\xfd\x93\xda\xd5\xa1\x04\xd9\x81\xeb\x03\x63\x81\xb1\x72\x04\x18\x0b\x8c\x6d\x37\x63\x5f\x99\x3f\xbf\x78\xb5\x31\x36\x0c\x4d\xcd\xea\x2b\xd9\xb8\x30\x8c\x7e\x82\x71\xe1\x87\xdd\xee\xd6\x37\xa8\xd5\x35\x78\xdc\x6e\x1e\xb1\x6f\x73\x32\xb7\x34\xa4\xf4\x2c\xfc\x28\x1f\xc8\xbc\xfa\xaf\xb4\xb3\xaa\x25\xa5\x07\x8e\x14\xa8\x90\x4a\x04\x2a\x24\x54\xc8\xf6\x56\xc8\x8a\xb4\x36\x8e\x94\xe0\x54\xcc\x2a\x9e\x94\x00\x20\x0b\x90\x95\x23\x00\x59\x80\x6c\xbb\x21\x6b\x67\x49\xe9\xd9\x3b\x52\x7a\x60\x48\x01\x90\x2a\x11\x00\x29\x80\xb4\xed\x20\x3d\x68\x48\x51\xd2\x2c\x7b\xd5\xfd\x90\x3d\xc1\x92\x52\x09\xb1\xb0\xa4\xf8\x16\x8e\x14\xbd\x62\xf9\x51\xaa\x0f\x0f\x52\xa1\x28\x28\x11\x28\x0a\x50\x14\xda\x5d\x14\xac\x3c\x29\xa1\x67\x6d\x49\x09\x3d\x00\x29\x80\x54\x89\x00\x48\x01\xa4\xed\x06\xa9\x85\x23\xa5\x6f\x61\x48\xd1\x77\xab\xb2\x27\xa5\x0f\x96\x14\x80\xac\x12\x01\xc8\x02\x64\xdb\x0d\x59\x2b\x4b\x4a\xe4\x6b\xac\x0d\x7a\x4f\x4a\xe4\x83\x25\xe5\x47\x5a\x52\x44\x81\x69\x82\x79\xd2\xf5\x8c\xfb\xf6\xfc\xed\x54\x1d\x14\xb8\x83\xfe\xfe\x2f\xa1\x5a\x8d\x25\x6f\xaa\xfc\x3d\x54\xd5\x40\x50\x1d\xa1\x3a\xca\x11\xa8\x8e\x50\x1d\xdb\x59\x1d\x1b\xca\xda\x38\xff\xa2\xde\x69\x98\x55\x6a\x67\x0f\x28\x0b\x94\x95\x23\x40\x59\xa0\x6c\xcb\x29\x6b\xe1\xfa\x1b\xb8\xa7\xf5\xb2\xf2\x63\xd4\x81\x0b\xad\x2c\x40\x56\x89\x00\x64\x01\xb2\x2d\x87\xac\x95\xeb\xcf\xf3\x35\xbd\xac\xde\x90\xe2\xf9\xd0\xae\x02\x49\x95\x08\x90\x14\x48\xda\x7a\x92\xee\xb5\xfd\xe9\xf3\x6c\x9a\xd5\xfd\x8c\x3d\xd2\xf4\xb7\x91\x61\xe1\xfa\xf3\x4e\x6b\xae\x65\xab\x8a\x07\xbd\x35\x54\x04\x25\x02\x15\x01\x2a\x42\xcb\x2b\x82\x95\xe7\xcf\x0f\x4d\xbd\xb5\xe2\xf9\xf3\x43\xe8\xad\x81\xa4\x4a\x04\x48\x0a\x24\x6d\x39\x49\x2d\x4c\x7f\xc1\x69\x8f\xdb\x64\xc7\x5f\x00\x88\x05\xc4\x2a\x11\x40\x2c\x20\xb6\xe5\x88\xb5\xb2\xfc\x05\x3a\x53\x83\xde\xf2\x17\xfc\x04\xdf\xc2\xbf\xc0\xf2\xb7\x79\xfd\x6f\xcc\x49\x42\x68\x91\xe2\x4c\xf3\xf2\xdf\x9c\xb3\x45\x9a\x10\x5e\xed\xd6\x5b\xc6\x26\x19\x19\x65\xac\xdc\x2a\x76\x49\x2a\xf2\x0c\x2f\xff\xcf\xf8\x1c\x17\x55\xd6\x17\xc1\x68\x13\xc6\x94\xb2\xa2\x7e\xfd\x71\x35\xf8\xf7\x46\x57\x3e\xc5\x7c\x4e\xb8\x8b\xf3\x5c\xc4\x2c\x21\x6e\xcc\xe6\xff\x8b\xb3\x52\x14\x84\x77\x1b\x49\x3b\x6f\x73\x36\x9d\x96\x50\x71\xec\x29\xa2\x60\x1c\x4f\x88\x7c\xda\xea\xac\xa7\x8d\xfe\xc7\x94\x64\xc9\xee\xc5\xd4\x4c\xa2\xda\x40\xba\x88\x19\x7d\x4c\x27\xf5\x02\x8d\xae\x1f\x6e\x6e\x3f\xbe\xbf\x1e\xdd\x3f\xbc\x7b\xb3\xa5\xa1\x1a\x88\xf1\x79\xfd\xb2\xcf\x98\x3c\xe4\x9c\x7d\x21\x71\xf1\x90\x26\xbb\x39\xf5\xd2\x5d\xd6\x8b\x5e\xc5\xe5\x21\x32\x3c\x26\x59\xb3\x11\xa8\xde\x09\x74\xf3\x9c\x8c\xe4\xec\x94\xe6\x65\xbd\x21\x05\xf9\xa3\x70\x36\x91\xa7\x8e\xe5\x44\xee\xae\x6f\x7f\x7b\x37\xba\x7e\x78\x3d\x1a\x7d\xfc\xf4\xeb\xbd\x79\x36\x82\xf0\x45\x1a\x93\x07\x1c\xc7\xac\xa4\x85\x7e\x4a\xab\xa4\xd7\xba\x1c\xfd\xbc\xee\x9e\xcf\x40\xda\x53\x76\x26\x87\x39\xc1\x5b\x13\x34\x5c\xe6\xb3\x72\x4c\x38\x25\x85\xee\x15\xd7\x0b\xc2\xc5\xda\x66\xe5\x0e\xdd\x7e\x77\x32\x23\x6e\xaf\xb9\x8a\x09\x5d\x48\x97\x6f\x42\x16\xab\x8f\x45\xb7\xaf\x34\xce\x12\xf5\xe8\x57\xbc\xfd\x01\xea\x5a\xa0\x0c\x4e\x49\x42\xf4\xf7\x4b\x18\xfc\x2c\x09\x9f\x2f\x9e\xfe\x0a\x00\x00\xff\xff\xd3\xe0\x41\xfa\x5b\x87\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 34651, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
