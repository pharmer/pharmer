// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package vultr

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\x5b\x73\xe2\x3a\x12\x7e\xcf\xaf\x70\xf9\xd9\x87\x23\x5f\x30\x90\x37\x12\x66\xb6\xb2\x9b\x64\xb3\x81\xcd\x3c\x6c\x4d\x4d\x09\xbb\x43\xb4\xc8\x92\x57\x92\x99\x62\xa6\xf2\xdf\xb7\x6c\xc0\xf8\x26\x63\x33\x4c\xea\xbc\xe4\x62\xc9\xfa\xba\xbf\x6e\x7d\xdd\x92\x7f\x5e\x19\x86\xc9\x70\x04\xe6\xb5\x61\x6e\x12\xaa\x84\x69\xa5\x8f\x80\x6d\xcc\x6b\xe3\x3f\x57\x86\x61\x18\x66\x08\x9b\xec\xa9\x61\x98\xff\xc3\xe6\x95\x61\x7c\xcd\xe6\x08\x58\x11\xce\x64\x3e\xef\x67\xf6\xd3\x30\x4c\xca\x03\xac\x08\x67\xe9\x9a\x8f\xf0\xdd\xf8\x3b\x08\x09\xdb\xfd\x12\xf9\x8b\xe9\xa8\x7d\x7c\xf8\x83\x33\x38\xae\x95\x3d\xb2\xcd\xfd\xdf\x5f\xb3\xdf\xef\x96\x1e\xe6\xf6\x8d\x04\x78\xc5\x9b\x30\x9c\x56\x0c\xa7\x3b\xc6\x0c\x53\x8a\x65\x13\x84\xdb\x0a\xe1\x76\x87\x98\x03\x56\x8a\x42\x13\x86\xd7\x8a\xe1\x75\xc7\xb8\xe7\xd2\x98\xb2\x15\x50\x68\xf4\x65\xd8\x8a\x33\xec\x8e\x33\x55\x14\x33\x85\x9b\x30\xfc\x56\x0c\xbf\x07\x46\x24\x15\x88\x10\x47\x4d\x28\xa3\x56\x94\x51\x1f\xc6\x58\xc8\x59\x13\xc4\xb8\x15\x62\xdc\x1d\xe2\xb3\xc0\x6c\xfd\x9a\x08\xd5\x84\x32\x69\x45\x99\xf4\x48\x2f\x42\x49\xc0\x99\xf1\x82\x29\xd5\x6c\xc8\xf6\xdd\x62\xf7\xd8\x2e\xf3\x6d\xc8\x34\x20\xed\x0e\xd9\x3d\x3c\x7a\xc2\x82\x34\xa6\xb1\xd3\xbe\x5f\x9c\x1e\x1b\x66\xc1\xd7\xdb\x66\x65\x69\xdf\x2b\x4e\x8f\xcd\xf2\x40\x70\x44\x1a\xa5\xa5\x9d\x2b\xb7\x57\xf4\xd9\x0a\xc7\x5c\x34\xcb\x0b\x6a\xd7\x17\x54\xc1\xc9\xab\x00\x61\x52\x61\x16\xc0\x62\x1b\x43\x43\x2d\x90\xeb\x24\x4b\xe1\x82\x44\x86\x20\x03\x41\xe2\x83\x59\x36\x72\x3c\xe3\xe1\xc6\x78\x9e\x3e\x58\x0e\x32\xfe\x76\x63\xcc\xe7\x33\xcb\x19\x20\x64\x2c\x6e\x8c\x9b\x2f\xc7\x17\x03\xac\x60\xc5\xc5\x36\x73\x66\x3e\x2b\x0c\xc4\x29\x88\x7d\x74\x0b\x47\xa5\xff\x43\x22\xd7\xe6\xb5\xe1\xa0\x82\x0d\xb1\x80\x74\xbd\xd0\xbc\x36\x94\x48\xa0\x91\xbd\x83\xf1\x9e\xd6\x78\x07\x79\xe3\x83\xf1\xde\xf0\x60\xbc\xdb\xdf\x78\xa7\x62\xbc\x53\x35\xde\x1b\x9e\x69\xfc\x50\x6b\xbc\x87\x26\xfe\xc1\xf8\x49\xce\xbc\xd7\xdf\x78\xaf\x62\xbc\x57\x35\x7e\x82\x2a\x29\x57\xab\xf4\x56\xb1\x5e\x5a\xc5\xc2\x66\x15\xab\x8f\x55\x2c\x13\x56\x51\xcd\xad\xa2\xee\x5a\x45\x79\xb4\x4a\xd2\x62\x95\x44\xc0\x2a\x6d\x25\xab\x31\xe1\xcf\xe4\xdd\xd7\xf2\x3e\xb6\x27\xce\x81\x77\x7b\x98\x13\x3f\xec\x4f\xbc\x5f\x21\x7e\x5c\x25\xde\x1e\x7e\x28\xf3\x1f\xc9\xef\x48\xaf\x28\xbe\x3b\xce\x25\xc5\x45\x39\xc1\x7e\x7f\x82\xc7\x55\x4d\xf1\xab\x0c\xbb\xe8\x6c\x86\xff\x82\xa4\x8e\xb5\xa4\xba\xce\xc8\xcf\xa5\xce\x3f\x92\x6a\xa3\x33\x94\xba\x9a\xb7\x6e\x4d\xee\xfc\xdf\x41\x6b\x1b\x93\xbf\xcc\x9d\x8d\x90\x96\x3c\x7f\x38\x74\x73\xa9\x1d\x15\xc8\x3b\x63\xcf\x3b\x55\xb5\xf5\x6b\x72\x3b\xea\x45\x5e\x0b\x45\xbf\x4e\x8a\xad\x2f\x3f\x25\x19\xb4\xbb\x27\xd4\xec\xd3\xec\xee\x76\xba\xf8\x74\xb2\x86\xd6\xd5\xd0\xee\xc3\xcb\xa9\xfe\x2d\x77\x51\xaf\xf4\x25\x25\x2a\xf8\xe8\x9c\xed\x63\x35\xf8\x75\x41\xea\xe0\x64\x37\xb7\xf4\x02\xeb\x78\xc3\x91\xdf\xe0\x96\x7b\xb6\x5b\x55\x41\x70\x6a\x39\x7d\x31\xb7\x3a\x4a\x5c\xc1\x2d\xef\x6c\xb7\xaa\xe5\xa3\xae\x73\x17\x72\x6b\xac\xf7\xaa\xd4\x5f\xef\xbb\x8d\xe9\x62\x7a\xba\xc3\x9e\x2e\xa6\xfd\x5b\xec\x5e\xfd\xc6\x50\x5b\xf3\x3a\xee\xbd\xf1\xa4\x53\x67\x3e\x44\x47\xb7\x4f\xf6\xe6\x1d\xdc\xae\x45\x71\xd8\x4b\x70\x7f\xd9\xed\x89\xbe\xd2\xb8\x68\x94\x8b\xea\xa8\x10\xed\x93\x5d\x7d\x83\xdb\x55\x3d\x75\x6b\x75\xe6\x63\xa3\x3d\xb1\x3b\x1d\x65\x6c\x54\x08\xf7\xc9\x02\xdb\xc1\xef\xba\x16\xa1\x8f\x8d\xb7\x83\xf4\x9e\x97\xb7\x77\x5e\x44\x7f\xc7\xf1\x79\xd8\x6e\xa3\xfe\x88\x5f\x8c\x8e\x8f\x2e\x78\x4a\xae\x45\xc6\x47\xed\x36\x3a\xdd\x4e\xf2\x97\xbc\x86\xa8\x9f\xe4\x4f\xd8\xa8\xef\x98\x4a\xed\x84\x83\x2e\x79\x72\xac\xf7\x11\x0e\x3a\x61\xa7\xfe\x56\xa4\xd4\xd9\xa1\x4b\xde\x2c\xd4\x5b\xba\x53\x56\xea\xbb\x98\x52\x53\xee\x5d\xf8\x44\x53\x6f\xca\xbd\x53\x96\xea\xdb\xc8\x52\x63\x72\xd9\x03\x6d\xbd\x23\x71\x4f\xd9\xa9\x6f\x35\x26\x63\x17\xe5\xf9\x39\xbe\xf0\x31\x67\x52\xcb\xd0\xf1\xc1\xd2\xfc\x32\x32\x10\x10\x02\x53\x04\xd3\x86\xab\xc8\x27\xc1\x37\x24\x04\x91\x02\xbe\xe4\x9f\xba\x0e\x0b\xc6\x14\x6f\x3f\x73\x11\x61\x95\x8e\xbf\x12\xa0\xe1\x71\x1c\x33\xc6\x55\x76\x91\x9a\xae\xfb\xf3\x28\xe0\xf1\x1b\x16\x11\x88\x01\x8e\x63\x19\xf0\x10\x06\x01\x8f\xfe\x0c\x68\x22\x15\x88\x3f\x8e\xd6\xa4\x4b\x16\x75\xbf\xf1\xb5\x90\xc9\xea\x2b\xfb\x37\xde\x73\x43\x32\xbb\xca\xb5\xe6\x68\xcd\xee\xbb\x5d\xc0\xd9\x2b\x59\x65\x4e\xfe\xfb\x7e\xf1\xfc\x6d\xf1\xcf\x7f\x7c\x7a\x2c\x80\xa7\xab\x70\x11\xe5\x1f\xfc\xbe\x29\xbe\x06\x56\x9e\xf0\x5f\xb9\x0b\x68\xc3\x10\xc5\x4b\xc8\x8c\x7b\x02\x21\x39\xc3\xd4\x98\x06\x01\x48\x69\x2c\xea\x73\x09\x8b\x93\x8c\xce\x18\x4b\xf9\x9d\x8b\xd0\xcc\x47\xdf\xcb\x75\x2f\x8f\xe0\x3a\x59\x82\x60\xa0\x40\xbe\x80\x90\xcd\xdf\x17\x37\xbb\x91\x4c\x11\x07\xe3\x81\xbe\x19\xaa\x8c\xee\x3e\x6a\x16\xa2\x17\xc2\xa6\x78\x86\x2d\x12\x1d\xc2\x2b\x4e\xa8\x9a\xc7\x10\x54\x22\xce\xc3\x79\xb2\x64\xa0\x76\xc5\x77\xe0\x78\xde\x00\x0d\xd0\x9f\x76\xe9\x18\x2d\x41\x6c\x48\x00\xa5\x99\xa8\x61\x1e\xa6\xd9\x0d\x3d\x3c\xf2\x10\x6e\x49\x28\xe4\xde\x9e\xc2\x14\x60\x78\x49\xe1\x76\x97\x53\x0f\x9c\x11\xc5\x05\x61\x59\x80\x0f\xe9\x63\xea\xa6\xdf\xf3\xd5\x6a\x37\xb7\x71\xd1\x14\x55\x3b\x85\xee\x06\x66\x20\x15\x61\xf9\x47\x84\x03\xe4\x1f\x40\xb1\x54\x24\x90\x80\x45\xf0\x56\x32\xa0\x38\xb0\x5f\xfd\x19\x62\x4a\x02\x2c\x8b\xe5\x31\x25\x99\xc9\x39\x88\x0d\x88\xbb\xa7\x02\x47\x36\x32\xcb\x73\x66\x3c\xc2\x24\x43\xdf\xef\xac\x41\x4a\x1a\x2d\xf1\x18\x46\x44\xa6\x49\x71\xcb\x99\x12\x3c\x4b\xd0\x47\x1c\x81\x8c\x71\x00\xf7\xe4\x15\x82\x6d\x40\xc1\xba\x27\x11\x51\xcf\x98\xad\x40\x58\xf3\x5d\x88\xa6\x41\xc0\x13\xa6\xac\x34\x9d\x89\x54\xc0\xd4\x0b\xa7\x49\x04\xf7\x69\x9e\x5b\xb3\x7d\x1a\x28\x2e\xf0\x0a\x6e\x29\x96\xd2\x7a\x06\xc9\x13\x11\xc0\xbf\x12\x5e\xf8\xbc\x69\x18\x66\x84\x53\xe3\x2a\xd9\xe1\x67\x51\x2f\xdf\x35\x31\x50\xdf\xb9\x58\x17\x05\xe9\x95\x62\xc6\x80\x6a\x23\x39\xa5\x20\x94\x2e\xe6\x3c\x25\xd6\x0c\x61\x49\x30\x6b\xc2\xe1\x94\x04\xdb\x22\x1a\xe3\xac\x21\x69\xbe\xc0\xf2\x8d\xf3\x75\xb6\x91\xa7\x89\x7a\x63\xba\xbc\x79\x5e\xe2\x20\x9d\xf0\x43\x37\x61\xfa\x74\x27\xb3\xc0\xde\x60\x49\x82\x69\x12\x12\xa5\x9d\xba\xf7\x67\xaa\x14\x09\xea\x93\x62\x4e\xe9\x9c\x02\xc4\x77\x4c\x81\xd8\x64\xba\xe8\x36\x26\xf2\x53\xb2\xa4\x24\xc8\x32\xa9\xb8\xa3\x8f\xfa\x72\xf5\xfe\xff\x00\x00\x00\xff\xff\x52\xd1\x05\xee\xee\x20\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 8430, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
