// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package vultr

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\xcb\x72\xdb\x36\x14\xdd\xfb\x2b\x30\x5c\xb3\x2a\xf8\x00\x1f\xde\xc9\xb1\xd3\x69\x1b\xa7\x99\x48\x4d\x17\x9d\x4c\x06\x21\x61\x85\x15\x05\x30\x20\xa5\x8c\xea\xf1\xbf\x77\xc8\x48\x7c\xe1\xc1\x87\x95\x8e\x37\xb6\x44\x0a\x3c\xf7\x9c\x7b\x71\xef\x21\xf9\x78\x05\x80\x41\xf1\x8e\x18\xd7\xc0\x38\xec\xd3\x82\x1b\x66\x79\x88\xd0\x43\x6e\x5c\x83\xbf\xaf\x00\x00\xc0\x88\xc9\xa1\x3a\x0c\x80\xf1\x15\x9f\x3f\x65\x9c\xc5\xc6\x15\x00\x1f\xab\x05\x9c\x6c\x12\x46\x9b\x35\x8f\xd5\x5f\x00\x8c\x94\x45\xb8\x48\x18\x2d\x01\xde\x92\x6f\xe0\x37\xc2\x73\x72\x3c\x5d\xa4\x5e\x58\x9e\xb5\x9a\x83\xff\x32\x4a\x9a\x6b\x55\x87\x2c\xe3\xf4\xf9\x63\xf5\xff\xc9\x54\xc3\xac\x92\x34\x89\x18\x05\x1f\x70\x9a\x2a\xa0\x6c\x3d\x96\x3d\x01\xec\x18\x53\x05\x48\xa8\x07\x09\xc7\x83\xbc\xfa\x92\x44\x78\xc3\x64\x28\x7a\x26\x13\x88\xbc\xc3\x3c\xc9\xa5\x08\xae\x1e\xc2\x1d\x8f\xb1\x66\xdb\xa3\x9c\x05\xd2\x63\xa0\xf1\x18\xb7\x38\x4d\xb1\x94\x88\xa3\xc5\x70\xc6\x43\xdc\x27\x78\x97\x48\x11\xf4\x29\x77\x26\xa4\x7c\x45\x70\x51\xa4\x44\x86\xa2\xcf\xc7\x84\x74\xac\x12\xba\xc1\x19\xe3\x72\x14\xa8\x87\x81\xe3\x71\xde\xb0\x1c\x2c\xe9\x86\xa4\x44\x9a\x17\x7d\xee\x27\xa4\x7e\x59\xa4\x98\x16\x58\x86\xe1\x69\x31\xbc\x09\x18\xbb\xbc\x20\x3c\xc6\x3b\x19\x8a\xaf\x45\xf1\xa7\x28\x46\x63\x46\x65\x10\x81\x16\x22\x18\x0f\xf1\x9a\x63\xba\x7d\xd8\xf3\x42\x86\xa2\xaf\xe3\x7e\x19\xd7\x53\x20\xa1\x79\x81\x69\x44\xd6\xc7\x8c\x48\x66\x41\xbe\xdd\x57\x8d\x11\xb6\x4a\x2b\x26\x79\xc4\x93\xec\x1c\x95\x87\x90\xe3\x81\xfb\x1b\xf0\x7e\x79\x6f\xfa\x10\x82\x5f\x6e\xc0\x6a\x75\x6b\x5a\x68\x01\x21\x58\xdf\x80\x9b\xbf\x9a\xb5\x11\x2e\xc8\x86\xf1\x63\x55\xcb\xab\xdb\xd6\x89\xac\x04\xb2\xdd\x86\x19\xde\x19\xd7\xc0\x6b\x0e\xc4\x49\xbe\x35\xae\x81\x0f\xa1\x7e\xe8\x98\x9d\x86\x6d\x76\xea\xdf\x94\x15\x50\x8b\x58\xc6\x49\x19\x61\x6c\x5c\x83\x82\xef\x89\x34\x23\x67\x49\x2c\xa4\x94\x24\xb0\x42\xfb\xac\x88\x65\x35\x8a\xc0\x01\x45\x6e\xef\x6e\x7f\x7d\xb5\x5c\xdf\x89\xba\xf4\x64\x09\xfa\xaa\x58\x96\x5e\x15\xbb\x4d\x7d\x60\xc4\xd4\x04\x3d\x25\x41\xcb\x73\x02\x57\xc2\xd0\x9e\xcd\xb0\x9f\x78\xcb\x9b\x4e\x71\x1c\x2b\x5f\xc9\xca\x76\x91\xef\x49\x58\x39\xb3\x59\x79\x3d\x56\xb6\x50\xce\x97\x62\x15\x28\x59\x39\xb6\xef\x05\x12\x56\xee\x6c\x56\x41\x8f\x95\x63\xff\x18\x56\x36\xb4\xd4\x15\x08\xed\xba\x00\x6d\x54\xef\xb0\xe9\x2d\xc7\xea\x17\x5e\x9f\x8b\x8d\xc6\xef\xac\x6e\xc3\xe9\x6e\x3a\xb7\xf3\x0d\xb5\xbf\x39\x9d\x2f\x61\xb7\x4d\x99\xed\x71\x64\xb6\x07\x87\xa9\xee\xef\x2a\x41\x6d\x75\xf1\x43\xb7\xae\x12\xb7\xd9\xd0\xcf\x17\x54\x28\x0e\x77\x42\xab\x7a\xf1\x82\x3a\x4a\x41\x5d\x18\xd6\xcd\xc4\x6b\x7a\xc9\x8c\xa1\xd8\x13\x54\xe8\x21\xde\xcb\x11\x74\x96\x86\xee\xb8\x41\xda\x58\x0b\x77\xba\x88\xfd\xf9\x22\x4e\xd0\x01\x5f\xa1\x53\x11\xc9\x8d\x85\x9e\xb5\xda\x3e\x74\xa6\xab\xdd\xd0\x9e\x61\xa8\xfa\x03\x48\x1c\xab\xf6\x00\xef\x70\x0e\x37\xb5\x73\xe8\x4c\x23\xa7\xe1\xe6\x4d\xe7\x36\x3c\x86\x9c\x41\x6e\xe3\xe8\xa8\x2d\x43\xc7\xfc\xba\x70\xbc\xd5\x93\x35\xce\x7e\xb2\x44\xf3\xeb\x42\xa8\x8f\x54\x6d\x03\xc2\xc0\x81\x75\x51\x05\x17\xb6\xe9\xa1\x50\x56\x81\x3e\xd2\x40\x2d\x29\xb2\x9a\x2d\x7f\x9a\xec\xcb\xf5\x72\x78\xb4\x2f\xd7\xcb\xa1\x51\x04\x17\x48\xd8\xf6\x36\xd2\xc6\xa9\x16\xb4\xeb\x40\x60\x1d\xe8\xe0\xc8\x1c\x11\xa8\xc4\x84\xe8\xe5\x0c\x47\xcd\x75\x04\x9b\x30\x07\x07\xd1\x88\x30\x85\x0d\x87\xf4\x59\x0f\xd5\x77\x91\x0e\xf4\xeb\xb4\xfb\x2d\x35\x07\x5b\xbd\x24\xcc\xfe\xc0\x74\xfa\x61\xfa\x7a\x35\x43\xb5\xed\x6c\x0f\x75\x0b\xb6\xe4\x1c\xdc\x45\x23\xe2\x14\x6f\x0e\xe0\x80\x9e\x6a\xf7\xd1\xa9\xce\x4b\xda\x39\xb1\x34\x61\x2b\x86\x09\x37\xd0\xa1\x7a\xec\x77\xbc\x28\xba\xa0\x75\x12\xbd\x28\x9a\x19\xbc\x7a\x7a\xb7\x4b\x24\xbc\xa4\x65\x11\xca\x23\x9c\xfb\x24\xa4\xeb\xf4\x34\xde\xce\x55\x3f\x3f\x41\xcf\x32\xd5\x33\x55\x57\xfb\x8a\x8e\x53\x44\x97\xb4\x4c\xa2\x53\x44\x2f\x55\xf7\x67\xaa\xab\x9e\xc9\x1d\x47\x7a\x59\xd7\x26\x3a\xd2\x21\xd7\x76\x09\x7d\xff\x2f\x49\x47\x3e\x96\xf1\x2e\xec\x1c\x45\x2b\xec\xfd\x08\x51\xb5\x32\x8e\x55\xae\x7e\x14\x1d\x71\x12\x13\x5a\x24\x38\x95\x3c\x88\xce\x38\x3b\x24\x31\xe1\xa5\x02\x1f\xea\xb7\x9e\x67\x86\x59\x8a\x8f\xaf\x19\xdf\xe1\xa2\x3c\xff\x90\x90\x34\x6e\xce\x63\x4a\x59\x51\x3d\x44\x2f\xaf\xfb\xd8\xc4\x98\x7d\xc1\x7c\x47\xf8\x02\x67\x59\x1e\xb1\x98\x2c\x22\xb6\xfb\x39\x4a\xf7\x79\x41\xf8\x4f\x4d\x34\xe5\x25\xdb\xd4\xa4\xcb\x62\x9a\xf7\x97\x9c\x56\x3c\xd5\x81\x54\x71\x75\x85\x6f\xa2\xf9\xfe\x0a\x37\x62\xf4\x21\xd9\x54\x24\xff\x7c\xb3\x7e\xff\x69\xfd\xc7\xef\x77\x6f\x5b\xe0\xe5\x55\x18\xdf\xd5\xef\x7e\x3f\x15\x6c\x4b\x68\xf7\x07\xff\xe4\xdf\x2b\x4c\x72\x2a\xc5\x9f\x49\x15\xdc\x3b\xc2\x73\x46\x71\x0a\x96\x51\x44\xf2\x1c\xac\xc5\xdf\x26\x34\xdb\x57\x72\x66\x38\xcf\xbf\x31\x1e\x1b\xf5\xd9\xa7\x73\x6e\x7b\x19\xdc\xee\x3f\x13\x4e\x49\x21\x7b\x93\x70\x20\x3c\x3f\x77\x93\x45\xb0\x68\x39\xc1\xd3\x9b\xeb\x56\x62\x62\x72\x38\x95\x48\x5b\x76\xce\x62\xf1\xe8\x57\xdc\x2e\xa6\x73\x68\x55\x48\x57\x4f\xff\x05\x00\x00\xff\xff\x78\x52\x31\x4d\x2c\x1f\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 7980, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
