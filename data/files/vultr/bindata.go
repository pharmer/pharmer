// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package vultr

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\x5d\x93\x9b\x36\x14\x7d\xdf\x5f\xa1\xe1\x99\xba\x42\x7c\x18\xf6\xcd\x1b\x27\x9d\xb6\xd9\x74\x27\x76\xb7\x0f\x9d\x4c\x46\x01\xad\x43\x8d\x25\x22\x61\x67\xdc\x9d\xfd\xef\x1d\x58\x03\x02\x24\x3e\xbc\xce\x4e\x5f\x12\x2f\x02\x9d\x73\xcf\x95\xce\xbd\x82\xc7\x2b\x00\x0c\x8a\x77\xc4\xb8\x06\xc6\x61\x9f\x64\xdc\x30\xf3\x4b\x84\x1e\x8c\x6b\xf0\xf7\x15\x00\x00\x18\x11\x39\x14\x57\x01\x30\xbe\xe1\xf2\x57\xca\x59\x64\x5c\x01\xf0\xa9\xb8\x9f\x93\x4d\xcc\xa8\xa8\x9e\x79\x2c\xfe\x05\xc0\x48\x58\x88\xb3\x98\xd1\x7c\xfe\x0f\xe4\x3b\xf8\x8d\x70\x41\x8e\xa7\x49\xaa\x07\xf3\x51\xab\xbe\xf8\x2f\xa3\xa4\x9e\xab\xb8\x64\x19\xa7\xdf\x9f\x8a\xff\x9f\x4c\x3d\xcc\x9b\xaf\x71\x88\x37\x4c\x85\x81\x7a\x31\xd0\x78\x8c\x25\x4e\x12\x2c\x54\x10\x76\x2f\x84\x3d\x1e\x62\x45\x70\x96\x25\x44\x85\xe1\xf4\x62\x38\xe3\x31\xde\x33\x01\x16\x74\x43\x12\xa2\x8c\xc5\xed\xc5\x71\xc7\xe3\x2c\xb2\x04\xd3\x0c\xab\x30\xbc\x5e\x0c\x6f\x02\xc6\x4e\x64\x84\x47\x78\xa7\x42\x99\xf7\xa2\xcc\xa7\x28\x46\x23\x46\x55\x10\x7e\x2f\x84\x3f\x1e\xe2\x1d\xc7\x74\xfb\xb0\xe7\x99\x0a\x25\xe8\x45\x09\x26\x2c\xaf\x38\x89\x43\x46\xc1\x3d\x4e\x12\xcd\x86\xec\xdf\x2d\xd6\x84\xed\xb2\x3a\x46\x54\x03\xd2\x1f\x90\x35\x21\xa2\x3b\xcc\x63\xe5\x32\x46\xfd\xfb\x05\x4d\xd8\x30\x6b\xb6\x3d\xaa\x9d\xa5\x7f\xaf\xa0\x09\x9b\xe5\x36\xc6\xbb\x58\x69\x2d\xfd\x5a\xd9\x93\xb2\x4f\x37\x38\x65\x5c\x6d\x2f\xb0\xdf\x5f\x60\x0b\xa7\xaa\x02\x31\x15\x19\xa6\x21\x59\x1f\x53\xa2\xa8\x05\x62\xbb\x2f\x96\xb0\x64\x91\x11\x11\x21\x8f\xd3\x92\x96\x05\x91\x03\x6e\x6f\xc0\xc7\xc5\xad\x89\x20\xf8\xe5\x06\xac\x56\x4b\x13\xcd\x20\x04\xeb\x1b\x70\xf3\x57\xfd\x60\x88\x33\xb2\x61\xfc\x58\x04\xb3\x5a\x4a\x03\x69\x0e\x62\xd5\x61\xe1\x5d\xe3\xef\x28\x16\x5b\xe3\x1a\x20\x28\x71\x48\x39\xc9\xe7\x8b\x8c\x6b\x90\xf1\x3d\x51\xaa\x57\x92\x77\xb4\xe4\x11\x74\xfc\x92\xbc\xe3\x96\xe4\xed\xe9\xe4\x51\x8b\x3c\x6a\x93\x77\xdc\x33\xc9\xbb\x5a\xf2\x0e\x0c\xbc\x92\x7c\x50\x29\xef\x4c\x27\xef\xb4\xc8\x3b\x6d\xf2\x01\x6c\x2d\xb9\x4e\xa5\x37\xe5\x7a\x69\xca\x85\xcd\x94\xab\x8f\x29\x97\x09\x53\x76\x73\x53\xf6\x5d\x53\xb6\x47\xb3\x61\x2d\x66\xc3\x04\xcc\xc6\x56\x32\x95\x0b\xfe\x4c\xdd\x3d\xad\xee\xbe\x15\xa0\x52\x77\xcb\xad\x84\x77\xa7\x0b\xef\xb5\x84\xf7\xdb\xc2\x5b\xee\xab\x2a\xff\x9a\xfa\xce\xf5\x8e\xe2\xd9\x7e\x65\x29\x36\xac\x04\xf6\xa6\x0b\xec\xb7\x3d\xc5\x6b\x2b\x6c\xc3\xb3\x15\xfe\x1f\x8a\xea\x6b\x45\xb5\xd1\xdc\xab\xac\xce\xab\x45\xb5\xe0\x19\x4e\xdd\x5e\xb7\x76\xc7\xee\xbc\x1f\x21\x6b\x9f\x92\x2f\xd6\xce\x82\x50\x2b\x9e\xe7\xba\x76\x65\xb5\x73\x49\xbc\x33\xf6\x3c\x6a\xbb\xad\xd7\xb1\xdb\xf9\x24\xf1\x7a\x24\x7a\xb9\x28\x96\xbe\xfc\x34\x6c\xd0\x1a\xbf\xa0\x96\x6f\x97\xbf\xbe\x59\xac\xdf\x0e\xd6\xd0\xae\x1b\x5a\x53\x74\x19\xea\xdf\xaa\x10\xf5\x4e\xdf\x70\x22\x29\x46\x74\x76\x8c\xed\xe4\x77\x0d\x69\x44\x90\xe3\xc2\xd2\x1b\x2c\x72\xdc\xb9\xa7\x08\xcb\x3e\x3b\xac\xb6\x21\xa0\xce\x9a\xbe\x58\x58\x23\x2d\x4e\x0a\xcb\x39\x3b\xac\x76\xf9\xe8\xfa\xdc\x85\xc2\xf2\xf5\x51\x35\xfa\xeb\x53\xb7\xb1\x58\x2f\x86\x3b\xec\xc5\x7a\x31\xbd\xc5\x9e\xd4\x6f\xb8\xda\x9a\x37\x72\xef\xf9\xc1\xa8\xce\xdc\x85\x75\xd8\x83\xbd\xf9\x88\xb0\x3b\x59\x74\x27\x19\xee\x8b\xc3\x0e\xf4\x95\xc6\x86\xf3\xca\x54\xe7\x52\xb6\x07\xbb\x7a\x45\xd8\x6d\x3f\xb5\x3b\x75\xe6\x75\xb3\x1d\x58\xa3\x8e\x32\x16\x94\xd2\x3d\x58\x60\x47\xc4\xdd\xf5\x22\xf8\xba\xf9\x46\x50\x1f\x79\x73\x7b\x57\x45\xf4\x47\x1c\x9f\xdd\x7e\x8e\xfa\x23\xbe\x9c\x1d\x0f\x5e\xf0\x94\xdc\xc9\x8c\x07\xfb\x39\xa2\x71\x27\xf9\x4b\xbe\x86\xe8\x9e\xe4\x07\x38\xea\x3b\xa6\x46\x3b\x81\xe0\x25\x4f\x8e\xdd\x3e\x02\xc1\x01\x9e\xfa\xb7\x22\x8d\xce\x0e\x5e\xf2\xcd\x42\xb7\xa5\x1b\x62\xa9\xef\x62\x1a\x4d\xb9\x73\xe1\x13\x4d\xb7\x29\x77\x86\x98\xea\xdb\xc8\x46\x63\x72\xd9\x03\x6d\xb7\x23\xb1\x87\x78\xea\x5b\x8d\xc0\xb7\x61\xb5\x3e\xfd\x0b\x1f\x73\x82\xce\x0a\xf5\x4b\xa6\xd5\xcb\xc8\x90\x93\x88\xd0\x2c\xc6\x89\xe2\x55\xe4\x1d\x67\x87\x38\x22\x3c\x07\xbc\xaf\x3e\x7b\x95\x13\xa6\x09\x3e\xbe\x63\x7c\x87\xb3\x7c\xfc\x21\x26\x49\x54\x8f\x63\x4a\x59\x56\xbc\x48\xcd\xe7\x7d\xac\x0d\x3c\xfd\x8a\xf9\x8e\xf0\x19\x4e\x53\x11\xb2\x88\xcc\x42\xb6\xfb\x39\x4c\xf6\x22\x23\xfc\xa7\x9a\x4d\x3e\xa5\xec\xfb\xca\xc7\x22\x2a\xda\x8f\x9c\x9e\x78\xaa\x88\x14\xbc\x9a\xb5\xa6\x66\xf3\xfc\x0d\x2f\x64\xf4\x21\xde\x14\x41\xfe\xf9\x7e\xfd\xf1\xf3\xfa\x8f\xdf\xdf\x7e\x90\xc0\xf3\x59\x18\xdf\x55\x1f\xff\x3e\x67\x6c\x4b\x68\xf3\x86\x7f\xc4\x73\x42\x15\x43\x09\xfe\x42\x0a\x72\x77\x84\x0b\x46\x71\x02\x16\x61\x48\x84\x00\xeb\xee\xbd\x31\x4d\xf7\x85\x9c\x29\x16\xe2\x3b\xe3\x91\x51\x8d\x3e\x35\xeb\x5e\x95\xc1\xed\xfe\x0b\xe1\x94\x64\x44\xdc\x13\x2e\xd4\xdf\x17\x0f\xcf\x23\x85\x23\xce\xfc\x99\xbe\x19\x6a\x8d\x3e\x7f\xe0\x94\xb2\x17\x91\xc3\xe9\x0c\x2b\xe5\xe6\x1b\xee\x5e\x2b\x3e\x7c\x4a\xa7\xdd\x92\x7f\xc1\xfb\xea\xe9\xbf\x00\x00\x00\xff\xff\x9a\xf4\x84\x50\x52\x1d\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 7506, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
