// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package vultr

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\xdd\x73\xa3\xb6\x17\x7d\xcf\x5f\xa1\xe1\x99\x5f\x7e\x42\x7c\x18\xf2\xe6\xac\xb3\x9d\xb6\x9b\x6d\x66\xed\xa6\x0f\x9d\x9d\x1d\x2d\x28\x5e\x6a\x2c\x51\x09\x7b\xc7\xcd\xe4\x7f\xef\x40\x62\x21\x40\xe2\xc3\xf1\x66\xfa\x92\x0f\x04\x3a\xe7\x9e\x2b\x9d\x7b\x05\x8f\x17\x00\x58\x14\x6f\x89\x75\x05\xac\xfd\x2e\x2b\xb8\x65\x97\x97\x08\xdd\x5b\x57\xe0\xcf\x0b\x00\x00\xb0\x12\xb2\xaf\xae\x02\x60\xfd\x8d\xad\x0b\x00\x3e\x57\xf7\x70\xb2\x4e\x19\x15\xf2\xbe\xc7\xea\x27\x00\x56\xc6\x62\x5c\xa4\x8c\x96\x73\x7e\x24\xdf\xc1\x2f\x84\x0b\x72\x78\x99\x42\x3e\x58\x8e\x3a\xf5\xc5\x7f\x18\x25\xf5\x5c\xd5\x25\xc7\x7a\xf9\xfb\x73\xf5\xfb\xc9\x36\xc3\xbc\xfb\x96\xc6\x78\xcd\x74\x18\xa8\x17\x03\x8d\xc7\x58\xe0\x2c\xc3\x42\x07\xe1\xf6\x42\xb8\xe3\x21\x96\x04\x17\x45\x46\x74\x18\x5e\x2f\x86\x37\x1e\xe3\x03\x13\x60\x4e\xd7\x24\x23\xda\x58\xfc\x5e\x1c\x7f\x3c\xce\xbc\xc8\x30\x2d\xb0\x0e\x23\xe8\xc5\x08\x26\x60\x6c\x45\x41\x78\x82\xb7\x3a\x94\x59\x2f\xca\x6c\x8a\x62\x34\x61\x54\x07\x11\xf6\x42\x84\xe3\x21\xde\x73\x4c\x37\x0f\x3b\x5e\xe8\x50\xa2\x5e\x94\x68\xc2\xf2\x4a\xb3\x34\x66\x14\xdc\xe3\x2c\x33\x6c\xc8\xfe\xdd\xe2\x4c\xd8\x2e\xcb\x43\x42\x0d\x20\xfd\x01\x39\x13\x22\xba\xc3\x3c\xd5\x2e\x63\xd4\xbf\x5f\xd0\x84\x0d\xb3\x62\x9b\x83\xde\x59\xfa\xf7\x0a\x9a\xb0\x59\x6e\x53\xbc\x4d\xb5\xd6\xd2\xaf\x95\x3b\x29\xfb\x74\x8d\x73\xc6\xf5\xf6\x02\xfb\xfd\x05\xb6\x70\x64\x15\x48\xa9\x28\x30\x8d\xc9\xea\x90\x13\x4d\x2d\x10\x9b\x5d\xb5\x84\x15\x8b\x4c\x88\x88\x79\x9a\x1f\x69\x39\x10\x79\xe0\xf6\x1a\x7c\x9a\xdf\xda\x08\x82\x9f\xae\xc1\x72\xb9\xb0\xd1\x25\x84\x60\x75\x0d\xae\xff\xa8\x1f\x8c\x71\x41\xd6\x8c\x1f\xaa\x60\x96\x0b\x65\x20\x2f\x41\x9c\x3a\x2c\xbc\x6d\xfc\x9f\xa4\x62\x63\x5d\x01\x04\x15\x0e\x39\x27\xe5\x7c\x89\x75\x05\x0a\xbe\x23\x5a\xf5\x8e\xe4\x3d\x23\x79\x04\xbd\xf0\x48\xde\xf3\x8f\xe4\xdd\xe9\xe4\x51\x8b\x3c\x6a\x93\xf7\xfc\x13\xc9\xfb\x46\xf2\x1e\x8c\x82\x23\xf9\x48\x2a\xef\x4d\x27\xef\xb5\xc8\x7b\x6d\xf2\x11\x6c\x2d\xb9\x4e\xa5\xb7\xd5\x7a\x69\xab\x85\xcd\x56\xab\x8f\xad\x96\x09\x5b\x75\x73\x5b\xf5\x5d\x5b\xb5\x47\xbb\x61\x2d\x76\xc3\x04\xec\xc6\x56\xb2\xb5\x0b\xfe\x44\xdd\x03\xa3\xee\xa1\x13\xa1\xa3\xee\x8e\x2f\x85\xf7\xa7\x0b\x1f\xb4\x84\x0f\xdb\xc2\x3b\xfe\x9b\x2a\xff\x96\xfa\xce\xcc\x8e\x12\xb8\xa1\xb4\x14\x17\x4a\x81\x83\xe9\x02\x87\x6d\x4f\x09\xda\x0a\xbb\xf0\x64\x85\xff\x83\xa2\x86\x46\x51\x5d\x34\x0b\xa4\xd5\x05\xb5\xa8\x0e\x3c\xc1\xa9\xdb\xeb\xd6\xed\xd8\x5d\xf0\x23\x64\xed\x53\xf2\xd5\xda\x39\x10\x1a\xc5\x0b\x7c\xdf\x95\x56\x3b\x53\xc4\x3b\x61\xcf\xa3\xb6\xdb\x06\x1d\xbb\x9d\x4d\x12\xaf\x47\xa2\xd7\x8b\xe2\x98\xcb\x4f\xc3\x06\x9d\xf1\x0b\x6a\x71\xb3\xf8\xf9\xdd\x7c\x75\x33\x58\x43\xbb\x6e\xe8\x4c\xd1\x65\xa8\x7f\x93\x21\x9a\x9d\xbe\xe1\x44\x4a\x8c\xe8\xe4\x18\xdb\xc9\xef\x1a\xd2\x88\x20\xc7\x85\x65\x36\x58\xe4\xf9\xb3\x40\x13\x96\x7b\x72\x58\x6d\x43\x40\x9d\x35\x7d\xb6\xb0\x46\x5a\x9c\x12\x96\x77\x72\x58\xed\xf2\xd1\xf5\xb9\x33\x85\x15\x9a\xa3\x6a\xf4\xd7\x2f\xdd\xc6\x7c\x35\x1f\xee\xb0\xe7\xab\xf9\xf4\x16\x7b\x52\xbf\xe1\x1b\x6b\xde\xc8\xbd\x17\x46\xa3\x3a\x73\x1f\xd6\x61\x0f\xf6\xe6\x23\xc2\xee\x64\xd1\x9f\x64\xb8\xaf\x0e\x3b\x32\x57\x1a\x17\xce\xa4\xa9\xce\x94\x6c\x0f\x76\xf5\x9a\xb0\xdb\x7e\xea\x76\xea\xcc\xdb\x66\x3b\x72\x46\x1d\x65\x1c\xa8\xa4\x7b\xb0\xc0\x8e\x88\xbb\xeb\x45\xf0\x6d\xf3\x8d\xa0\x39\xf2\xe6\xf6\x96\x45\xf4\x47\x1c\x9f\xfd\x7e\x8e\xe6\x23\xbe\x9a\x9d\x00\x9e\xf1\x94\xdc\xc9\x4c\x00\xfb\x39\xa2\x71\x27\xf9\x73\xbe\x86\xe8\x9e\xe4\x07\x38\x9a\x3b\xa6\x46\x3b\x81\xe0\x39\x4f\x8e\xdd\x3e\x02\xc1\x01\x9e\xe6\xb7\x22\x8d\xce\x0e\x9e\xf3\xcd\x42\xb7\xa5\x1b\x62\x69\xee\x62\x1a\x4d\xb9\x77\xe6\x13\x4d\xb7\x29\xf7\x86\x98\x9a\xdb\xc8\x46\x63\x72\xde\x03\x6d\xb7\x23\x71\x87\x78\x9a\x5b\x8d\x28\x74\xa1\x5c\x9f\xe1\x99\x8f\x39\x51\x67\x85\x86\x47\xa6\xf2\x65\x64\xcc\x49\x42\x68\x91\xe2\x4c\xf3\x2a\xf2\x8e\xb3\x7d\x9a\x10\x5e\x02\xde\xcb\x4f\x5d\xc7\x09\xf3\x0c\x1f\xde\x33\xbe\xc5\x45\x39\xfe\x90\x92\x2c\xa9\xc7\x31\xa5\xac\xa8\x5e\xa4\x96\xf3\x3e\xd6\x06\x9e\x7f\xc3\x7c\x4b\xf8\x25\xce\x73\x11\xb3\x84\x5c\xc6\x6c\xfb\xff\x38\xdb\x89\x82\xf0\xff\xd5\x6c\xca\x29\x55\xdf\xd7\x3e\x96\x50\xd1\x7e\xe4\xe5\x89\x27\x49\xa4\xe2\xd5\xac\x35\x35\x9b\xe7\xef\x76\x31\xa3\x0f\xe9\xba\x0a\xf2\xf7\x0f\xab\x4f\x5f\x56\xbf\xfd\x7a\xf3\x51\x01\x2f\x67\x61\x7c\x2b\x3f\xf8\x7d\x29\xd8\x86\xd0\xe6\x0d\x7f\x89\xe7\x84\x6a\x86\x32\xfc\x95\x54\xe4\xee\x08\x17\x8c\xe2\x0c\xcc\xe3\x98\x08\x01\x56\xdd\x7b\x53\x9a\xef\x2a\x39\x73\x2c\xc4\x77\xc6\x13\x4b\x8e\x3e\x35\xeb\x9e\xcc\xe0\x66\xf7\x95\x70\x4a\x0a\x22\xee\x09\x17\xfa\xef\x8b\xfb\xe7\x91\xca\x11\x2f\xc3\x4b\x73\x33\xd4\x1a\x7d\xfe\xa8\xa9\x64\x2f\x21\x7b\xf5\x0c\x7b\x64\x55\xb1\xb9\x78\xfa\x37\x00\x00\xff\xff\xe2\x6d\x4d\xb7\x1c\x1d\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 7452, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
