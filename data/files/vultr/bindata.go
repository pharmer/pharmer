// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package vultr

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\xcd\x6e\xe3\x36\x17\xdd\xe7\x29\x08\xad\x85\x80\xa2\xfe\xb3\x73\xc6\x33\x1f\xbe\xa2\x29\x8a\xda\x98\x2e\x8a\x59\x70\x2c\x8e\xab\x5a\xa6\x5c\x89\x76\xeb\x06\x79\xf7\xc2\x8a\x45\x51\x14\x49\x89\x8e\x26\xe8\x26\xb1\x45\x4b\xf7\x9c\x43\xf2\xdc\x7b\xa9\xe7\x3b\x00\x1c\x8a\xf7\xc4\x79\x00\xce\xe9\x58\xb0\xca\x71\x2f\x97\x08\x3d\x39\x0f\xe0\xb7\x3b\x00\x00\x70\x32\x72\x6a\xae\x02\xe0\xfc\x89\x9d\x3b\x00\xbe\x34\xbf\xa9\xc8\x36\x2f\x69\xcd\x7f\xf7\xdc\xfc\x05\xc0\x29\xca\x0d\x66\x79\x49\x2f\xcf\xfc\x89\xfc\x05\x7e\x20\x55\x4d\xce\xd7\x47\xf0\x1b\x2f\xa3\x5e\x77\xf1\x9f\x92\x92\xee\x59\xcd\x25\xcf\xb9\x7e\xfe\xd2\xfc\x7f\x71\xf5\x61\x3e\xfc\x9e\x6f\xf0\xb6\x54\xc5\x40\xc6\x18\x68\x7a\x8c\x25\x2e\x0a\x5c\xab\x42\xf8\xc6\x10\xfe\xf4\x10\x2b\x82\x19\x2b\x88\x2a\x46\x60\x8c\x11\x4c\x8f\xf1\x63\x59\x83\x05\xdd\x92\x82\x28\xb9\x84\xc6\x38\xe1\xf4\x38\x0b\x56\x60\xca\xb0\x2a\x46\x64\x8c\x11\x59\xc4\xd8\xd7\x8c\x54\x19\xde\xab\xa2\xc4\xc6\x28\xb1\x8d\x62\x34\x2b\xa9\x2a\x44\x62\x0c\x91\x4c\x0f\xf1\xa9\xc2\x74\xf7\xed\x58\x31\x55\x94\xd4\x18\x25\xb5\x58\x5e\x79\x91\x6f\x4a\x0a\x3e\xe3\xa2\xd0\x6c\x48\xf3\x6e\xf1\x2c\xb6\xcb\xea\x9c\x51\x4d\x10\x33\x21\xcf\x82\xd1\xcf\xb8\xca\x95\xcb\x18\x99\xf7\x0b\xb2\xd8\x30\xeb\x72\x77\x56\x3b\x8b\x79\xaf\x20\x8b\xcd\xf2\x94\xe3\x7d\xae\xb4\x16\xb3\x56\xbe\xd5\xec\xd3\x2d\x3e\x94\x95\xda\x5e\xa0\xd9\x5f\xa0\x14\x87\x67\x81\x9c\xd6\x0c\xd3\x0d\x59\x9f\x0f\x44\x91\x0b\xea\xdd\xb1\x59\xc2\x82\x45\x66\xa4\xde\x54\xf9\xa1\x85\xe5\x41\x14\x80\xa7\x47\xf0\xcb\xe2\xc9\x45\x10\xfc\xef\x11\xac\x56\x4b\x17\xdd\x43\x08\xd6\x8f\xe0\xf1\xd7\xee\xc6\x0d\x66\x64\x5b\x56\xe7\x86\xcc\x6a\x29\x0c\x1c\x2e\x41\xbc\x8e\x16\xde\xf7\xbe\x67\x79\xbd\x73\x1e\x00\x82\x02\x86\x43\x45\x2e\xcf\xcb\x9c\x07\xc0\xaa\x23\x51\xaa\xd7\x82\x0f\xb4\xe0\x11\x0c\x92\x16\x7c\x10\xb6\xe0\x7d\x7b\xf0\x48\x02\x8f\x64\xf0\x41\x78\x23\xf8\x50\x0b\x3e\x80\x69\xd4\x82\x4f\xb9\xf2\x81\x3d\xf8\x40\x02\x1f\xc8\xe0\x53\x28\x2d\xb9\x41\xa6\x77\xc5\x7c\xe9\x8a\x89\xcd\x15\xb3\x8f\x2b\xa6\x09\x57\x74\x73\x57\xf4\x5d\x57\xb4\x47\xb7\x67\x2d\x6e\xcf\x04\xdc\xde\x56\x72\x95\x0b\xfe\x46\xdd\x23\xad\xee\x89\x97\xa2\x56\x77\x2f\xe4\xc2\x87\xf6\xc2\x47\x92\xf0\x89\x2c\xbc\x17\xbe\xab\xf2\xef\xa9\x6f\xac\x77\x94\xc8\x4f\xb8\xa5\xf8\x90\x0b\x1c\xd9\x0b\x9c\xc8\x9e\x12\xc9\x0a\xfb\xf0\x66\x85\xff\x83\xa2\x26\x5a\x51\x7d\x14\x47\xdc\xea\xa2\x4e\x54\x0f\xde\xe0\xd4\xf2\xba\xf5\x07\x76\x17\x7d\x0f\x59\x4d\x4a\xbe\x59\x3b\x0f\x42\xad\x78\x51\x18\xfa\xdc\x6a\x63\x41\xbc\x1b\xf6\x3c\x92\xdd\x36\x1a\xd8\x6d\x6c\x25\x9e\x41\xa2\xb7\x8b\xe2\xe9\xd3\x4f\xcf\x06\xbd\xe9\x0b\x6a\xf9\x71\xf9\xff\x0f\x8b\xf5\xc7\xd1\x1c\x3a\x74\x43\xcf\x46\x97\xb1\xfa\x8d\x53\xd4\x3b\x7d\xcf\x89\x04\x8e\xe8\x66\x8e\xf2\xe4\x0f\x0d\x69\x02\xc9\x69\xb4\xf4\x06\x8b\x82\x30\x8e\x14\xb4\xfc\x9b\x69\xc9\x86\x80\x06\x6b\x7a\x36\x5a\x13\x2d\x4e\xa0\x15\xdc\x4c\x4b\x4e\x1f\x43\x9f\x9b\x89\x56\xa2\x67\xd5\xab\xaf\xaf\xd5\xc6\x62\xbd\x18\xaf\xb0\x17\xeb\x85\x7d\x89\x6d\x55\x6f\x84\xda\x9c\x37\x71\xef\x25\xe9\xa4\xca\x3c\x84\x1d\xed\xd1\xda\x7c\x02\xed\xc1\x2c\x86\x56\x86\xfb\x66\xda\xa9\x3e\xd3\xf8\x30\xe6\xa6\x1a\x0b\xb3\x3d\x5a\xd5\x2b\x68\xcb\x7e\xea\x0f\xf2\xcc\xfb\xce\x76\xea\x4d\x6a\x65\x3c\x28\x4c\xf7\x68\x82\x9d\xc0\x7b\xe8\x45\xf0\x7d\xe7\x1b\x41\x3d\xf3\xfe\xf6\xe6\x49\xf4\x7b\xb4\xcf\xa1\x19\xa3\xbe\xc5\x17\x67\x27\x82\x33\x76\xc9\x83\x99\x89\xa0\x19\x23\x9a\xd6\xc9\xcf\x79\x0c\x31\xec\xe4\x47\x30\xea\x2b\xa6\x5e\x39\x81\xe0\x9c\x9d\xe3\xb0\x8e\x40\x70\x04\xa7\xfe\x54\xa4\x57\xd9\xc1\x39\x4f\x16\x86\x25\xdd\x18\x4a\x7d\x15\xd3\x2b\xca\x83\x99\x3b\x9a\x61\x51\x1e\x8c\x21\xd5\x97\x91\xbd\xc2\x64\xde\x86\x76\x58\x91\xf8\x63\x38\xf5\xa5\x46\x9a\xf8\x90\xaf\xcf\x64\xe6\x36\x27\x1d\xac\xd0\xa4\x45\xca\x0f\x23\x37\x15\xc9\x08\x65\x39\x2e\x14\x47\x91\xec\x7c\x68\x5e\x73\x7d\xe6\xaf\xb9\xda\x87\x1d\x0a\x7c\xfe\x54\x56\x7b\xcc\x2e\xe3\xdf\x72\x52\x64\xdd\x78\xf3\xb5\x6f\xef\xcf\xfc\x13\x00\xce\x1f\xf5\x2b\x79\x56\xee\x08\x15\xcc\x5d\x78\xb1\xa6\x18\x2a\xf0\x57\x52\x5c\x4f\x97\xe5\xb1\x9c\x1e\x8e\x0d\x12\x46\xfe\x66\x0e\x1f\x79\xe9\xa7\x0a\x4e\x7a\x77\xfc\x4a\x2a\x4a\x58\x73\xfc\xfa\x0a\xcd\x39\x91\xaa\x96\xb2\x52\x07\xba\x1d\x6d\x2c\xe5\x3e\xbe\xef\xf5\xc1\xb2\xe5\xc8\xe3\xac\x2c\x8b\x2e\xd0\xf5\xe2\x05\x02\xce\xf6\xdd\x0d\x1d\x68\xe1\xd6\xd7\x97\x8a\xbd\x1b\x33\x72\x12\xbb\x48\x91\xe6\xeb\xff\x0b\xd9\x97\xbb\x97\x7f\x03\x00\x00\xff\xff\xd6\x65\xee\x1e\xa8\x1c\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 7336, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
