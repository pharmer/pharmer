// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package vultr

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\x5d\x73\xa3\x36\x14\x7d\xcf\xaf\xd0\xf0\x4c\x53\x21\x3e\x0c\x79\x73\x36\xbb\x9d\xb6\x9b\x6d\x66\xed\xa6\x0f\x9d\x9d\x1d\x2d\x28\x5e\x6a\x2c\xb1\x12\xf6\x8e\x9b\xc9\x7f\xef\x40\x6c\x10\x48\xe2\xc3\xf1\x66\xfa\x92\x0f\x04\x3a\xe7\x9e\x2b\x9d\x7b\x05\x8f\x17\x00\x58\x14\x6f\x88\x75\x05\xac\xdd\x36\x2b\xb8\x65\x97\x97\x08\xdd\x59\x57\xe0\xef\x0b\x00\x00\xb0\x12\xb2\xab\xae\x02\x60\x7d\xc3\xd6\x05\x00\x9f\xaa\x7b\x38\x59\xa5\x8c\x8a\xfa\xbe\xc7\xea\x27\x00\x56\xc6\x62\x5c\xa4\x8c\x96\x73\x7e\x20\xdf\xc1\x6f\x84\x0b\xb2\x3f\x4c\x51\x3f\x58\x8e\x3a\xcd\xc5\x7f\x19\x25\xcd\x5c\xd5\x25\xc7\x3a\xfc\xfd\xa9\xfa\xfd\x64\x9b\x61\xde\x7c\x4d\x63\xbc\x62\x3a\x0c\xd4\x8b\x81\xc6\x63\xdc\xe0\x2c\xc3\x42\x07\xe1\xf6\x42\xb8\xe3\x21\x16\x04\x17\x45\x46\x74\x18\x5e\x2f\x86\x37\x1e\xe3\x3d\x13\x60\x4e\x57\x24\x23\xda\x58\xfc\x5e\x1c\x7f\x3c\xce\xbc\xc8\x30\x2d\xb0\x0e\x23\xe8\xc5\x08\x26\x60\x6c\x44\x41\x78\x82\x37\x3a\x94\x59\x2f\xca\x6c\x8a\x62\x34\x61\x54\x07\x11\xf6\x42\x84\xe3\x21\xde\x71\x4c\xd7\x0f\x5b\x5e\xe8\x50\xa2\x5e\x94\x68\xc2\xf2\x4a\xb3\x34\x66\x14\xdc\xe3\x2c\x33\x6c\xc8\xfe\xdd\xe2\x4c\xd8\x2e\x8b\x7d\x42\x0d\x20\xfd\x01\x39\x13\x22\xba\xc3\x3c\xd5\x2e\x63\xd4\xbf\x5f\xd0\x84\x0d\xb3\x64\xeb\xbd\xde\x59\xfa\xf7\x0a\x9a\xb0\x59\x6e\x53\xbc\x49\xb5\xd6\xd2\xaf\x95\x3b\x29\xfb\x74\x85\x73\xc6\xf5\xf6\x02\xfb\xfd\x05\x76\x70\xea\x2a\x90\x52\x51\x60\x1a\x93\xe5\x3e\x27\x9a\x5a\x20\xd6\xdb\x6a\x09\x4b\x16\x99\x10\x11\xf3\x34\x3f\xd2\x72\x20\xf2\xc0\xed\x35\xf8\x38\xbf\xb5\x11\x04\xbf\x5c\x83\xc5\xe2\xc6\x46\x97\x10\x82\xe5\x35\xb8\xfe\xab\x79\x30\xc6\x05\x59\x31\xbe\xaf\x82\x59\xdc\x48\x03\x79\x09\xe2\x34\x61\xe1\x4d\xeb\xff\x24\x15\x6b\xeb\x0a\x20\x28\x71\xc8\x39\x29\xe7\x4b\xac\x2b\x50\xf0\x2d\xd1\xaa\x77\x24\xef\x19\xc9\x23\xe8\x85\x47\xf2\x9e\x7f\x24\xef\x4e\x27\x8f\x3a\xe4\x51\x97\xbc\xe7\x9f\x48\xde\x37\x92\xf7\x60\x14\x1c\xc9\x47\xb5\xf2\xde\x74\xf2\x5e\x87\xbc\xd7\x25\x1f\xc1\xce\x92\x53\x2a\xbd\x2d\xd7\x4b\x5b\x2e\x6c\xb6\x5c\x7d\x6c\xb9\x4c\xd8\xb2\x9b\xdb\xb2\xef\xda\xb2\x3d\xda\x2d\x6b\xb1\x5b\x26\x60\xb7\xb6\x92\xad\x5d\xf0\x27\xea\x1e\x18\x75\x0f\x9d\x08\x1d\x75\x77\xfc\x5a\x78\x7f\xba\xf0\x41\x47\xf8\xb0\x2b\xbc\xe3\xbf\xaa\xf2\xaf\xa9\xef\xcc\xec\x28\x81\x1b\xd6\x96\xe2\xc2\x5a\xe0\x60\xba\xc0\x61\xd7\x53\x82\xae\xc2\x2e\x3c\x59\xe1\xff\xa1\xa8\xa1\x51\x54\x17\xcd\x82\xda\xea\x82\x46\x54\x07\x9e\xe0\xd4\xdd\x75\xeb\x2a\x76\x17\xfc\x08\x59\xfb\x94\x7c\xb1\x76\x0e\x84\x46\xf1\x02\xdf\x77\x6b\xab\x9d\x49\xe2\x9d\xb0\xe7\x51\xd7\x6d\x03\xc5\x6e\x67\x93\xc4\xeb\x91\xe8\xe5\xa2\x38\xe6\xf2\xd3\xb2\x41\x67\xfc\x82\xba\x79\x7b\xf3\xeb\x9b\xf9\xf2\xed\x60\x0d\x55\xdd\xd0\x99\xa2\xcb\x50\xff\x56\x87\x68\x76\xfa\x96\x13\x49\x31\xa2\x93\x63\xec\x26\x5f\x35\xa4\x11\x41\x8e\x0b\xcb\x6c\xb0\xc8\xf3\x67\x81\x26\x2c\xf7\xe4\xb0\xba\x86\x80\x94\x35\x7d\xb6\xb0\x46\x5a\x9c\x14\x96\x77\x72\x58\xdd\xf2\xa1\xfa\xdc\x99\xc2\x0a\xcd\x51\xb5\xfa\xeb\x43\xb7\x31\x5f\xce\x87\x3b\xec\xf9\x72\x3e\xbd\xc5\x9e\xd4\x6f\xf8\xc6\x9a\x37\x72\xef\x85\xd1\xa8\xce\xdc\x87\x4d\xd8\x83\xbd\xf9\x88\xb0\x95\x2c\xfa\x93\x0c\xf7\xc5\x61\x47\xe6\x4a\xe3\xc2\x59\x6d\xaa\x33\x29\xdb\x83\x5d\xbd\x26\xec\xae\x9f\xba\x4a\x9d\x79\xdd\x6c\x47\xce\xa8\xa3\x8c\x03\xa5\x74\x0f\x16\xd8\x11\x71\xab\x5e\x04\x5f\x37\xdf\x08\x9a\x23\x6f\x6f\xef\xba\x88\xfe\x88\xe3\xb3\xdf\xcf\xd1\x7c\xc4\x97\xb3\x13\xc0\x33\x9e\x92\x95\xcc\x04\xb0\x9f\x23\x1a\x77\x92\x3f\xe7\x6b\x08\xf5\x24\x3f\xc0\xd1\xdc\x31\xb5\xda\x09\x04\xcf\x79\x72\x54\xfb\x08\x04\x07\x78\x9a\xdf\x8a\xb4\x3a\x3b\x78\xce\x37\x0b\x6a\x4b\x37\xc4\xd2\xdc\xc5\xb4\x9a\x72\xef\xcc\x27\x1a\xb5\x29\xf7\x86\x98\x9a\xdb\xc8\x56\x63\x72\xde\x03\xad\xda\x91\xb8\x43\x3c\xcd\xad\x46\x14\xba\xb0\x5e\x9f\xe1\x99\x8f\x39\x91\xb2\x42\xc3\x23\xd3\xfa\x65\x64\xcc\x49\x42\x68\x91\xe2\x4c\xf3\x2a\xf2\x8e\xb3\x5d\x9a\x10\x5e\x02\xde\xd7\x9f\xba\x8e\x13\xe6\x19\xde\xbf\x63\x7c\x83\x8b\x72\xfc\x21\x25\x59\xd2\x8c\x63\x4a\x59\x51\xbd\x48\x2d\xe7\x7d\x6c\x0c\x3c\xff\x8a\xf9\x86\xf0\x4b\x9c\xe7\x22\x66\x09\xb9\x8c\xd9\xe6\xe7\x38\xdb\x8a\x82\xf0\x9f\x1a\x36\xe5\x94\xb2\xef\x6b\x1f\x4b\xa8\xe8\x3e\x72\x78\xe2\xa9\x26\x52\xf1\x6a\xd7\x9a\x86\xcd\xf3\x77\xbb\x98\xd1\x87\x74\x55\x05\xf9\xe7\xfb\xe5\xc7\xcf\xcb\x3f\x7e\x7f\xfb\x41\x02\x2f\x67\x61\x7c\x53\x7f\xf0\xfb\x5c\xb0\x35\xa1\xed\x1b\xfe\x11\xcf\x09\xd5\x0c\x65\xf8\x0b\xa9\xc8\xdd\x11\x2e\x18\xc5\x19\x98\xc7\x31\x11\x02\x2c\xd5\x7b\x53\x9a\x6f\x2b\x39\x73\x2c\xc4\x77\xc6\x13\xab\x1e\x7d\x6a\xd7\xbd\x3a\x83\xeb\xed\x17\xc2\x29\x29\x88\xb8\x27\x5c\xe8\xbf\x2f\xee\x9e\x47\x2a\x47\xbc\x0c\x2f\xcd\xcd\x50\x67\xf4\xf9\xa3\xa6\x94\xbd\x84\xec\x0e\x67\x58\x29\x37\xdf\xb0\x7a\x2d\xe7\xac\x75\xda\x3d\xf2\xaf\x78\x5f\x3c\xfd\x17\x00\x00\xff\xff\x9b\xdb\xfa\x23\x46\x1d\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 7494, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
