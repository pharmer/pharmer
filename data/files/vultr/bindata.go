// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package vultr

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\x4b\x73\xdb\x38\x12\xbe\xfb\x57\xb0\x78\x66\x14\xf0\x21\x4a\xf2\x4d\xb6\x92\x2d\xef\xda\x5e\xaf\xa5\x75\x0e\x53\xa9\x14\x4c\xb6\x65\x8c\x40\x80\x03\x80\x4a\x29\x29\xff\xf7\x29\x52\x12\xc5\x17\x28\x52\x51\x5c\x73\xf1\x83\x00\xf1\x75\x7f\xdd\xf8\xba\x01\xfe\xbc\x30\x0c\x93\xe1\x08\xcc\x4b\xc3\x5c\x27\x54\x09\xd3\x4a\x1f\x01\x5b\x9b\x97\xc6\x1f\x17\x86\x61\x18\x66\x08\xeb\xec\xa9\x61\x98\x7f\x61\xf3\xc2\x30\xbe\x66\x73\x04\x2c\x09\x67\x32\x9f\xf7\x33\xfb\x69\x18\x26\xe5\x01\x56\x84\xb3\x74\xcd\x7b\xf8\x6e\xfc\x1b\x84\x84\xcd\x6e\x89\xfc\xc5\x74\xd4\x3e\x3c\xfc\xc1\x19\x1c\xd6\xca\x1e\xd9\xe6\xee\xef\xaf\xd9\xef\x37\x4b\x0f\x73\xfd\x4a\x02\xbc\xe4\x4d\x18\x4e\x2b\x86\xd3\x1d\x63\x86\x29\xc5\xb2\x09\xc2\x6d\x85\x70\xbb\x43\xcc\x01\x2b\x45\xa1\x09\xc3\x6b\xc5\xf0\xba\x63\xdc\x72\x69\x4c\xd9\x12\x28\x34\xfa\x32\x6c\xc5\x19\x76\xc7\x99\x2a\x8a\x99\xc2\x4d\x18\x7e\x2b\x86\xdf\x03\x23\x92\x0a\x44\x88\xa3\x26\x94\x51\x2b\xca\xa8\x0f\x63\x2c\xe4\xac\x09\x62\xdc\x0a\x31\xee\x0e\xf1\x59\x60\xb6\x7a\x49\x84\x6a\x42\x99\xb4\xa2\x4c\x7a\xa4\x17\xa1\x24\xe0\xcc\x78\xc2\x94\x6a\x36\x64\xfb\x6e\xb1\x7b\x6c\x97\xf9\x26\x64\x1a\x90\x76\x87\xec\x1e\x1e\x3d\x60\x41\x1a\xd3\xd8\x69\xdf\x2f\x4e\x8f\x0d\xb3\xe0\xab\x4d\xb3\xb2\xb4\xef\x15\xa7\xc7\x66\xb9\x23\x38\x22\x8d\xd2\xd2\xce\x95\xdb\x2b\xfa\x6c\x89\x63\x2e\x9a\xe5\x05\xb5\xeb\x0b\xaa\xe0\xe4\x55\x80\x30\xa9\x30\x0b\x60\xb1\x89\xa1\xa1\x16\xc8\x55\x92\xa5\x70\x41\x22\x43\x90\x81\x20\xf1\xde\x2c\x1b\x39\x9e\x71\x77\x65\x3c\x4e\xef\x2c\x07\x19\xff\xba\x32\xe6\xf3\x99\xe5\x0c\x10\x32\x16\x57\xc6\xd5\x97\xc3\x8b\x01\x56\xb0\xe4\x62\x93\x39\x33\x9f\x15\x06\xe2\x14\xc4\x3e\xb8\x85\xa3\xd2\xff\x21\x91\x2b\xf3\xd2\x70\x50\xc1\x86\x58\x40\xba\x5e\x68\x5e\x1a\x4a\x24\xd0\xc8\xde\xde\x78\x4f\x6b\xbc\x83\xbc\xf1\xde\x78\x6f\xb8\x37\xde\xed\x6f\xbc\x53\x31\xde\xa9\x1a\xef\x0d\x4f\x34\x7e\xa8\x35\xde\x43\x13\x7f\x6f\xfc\x24\x67\xde\xeb\x6f\xbc\x57\x31\xde\xab\x1a\x3f\x41\x95\x94\xab\x55\x7a\xab\x58\x2f\xad\x62\x61\xb3\x8a\xd5\xc7\x2a\x96\x09\xab\xa8\xe6\x56\x51\x77\xad\xa2\x3c\x5a\x25\x69\xb1\x4a\x22\x60\x95\xb6\x92\xd5\x98\xf0\x27\xf2\xee\x6b\x79\x1f\xdb\x13\x67\xcf\xbb\x3d\xcc\x89\x1f\xf6\x27\xde\xaf\x10\x3f\xae\x12\x6f\x0f\xdf\x95\xf9\xf7\xe4\x77\xa4\x57\x14\xdf\x1d\xe7\x92\xe2\xa2\x9c\x60\xbf\x3f\xc1\xe3\xaa\xa6\xf8\x55\x86\x5d\x74\x32\xc3\xff\x40\x52\xc7\x5a\x52\x5d\x67\xe4\xe7\x52\xe7\x1f\x48\xb5\xd1\x09\x4a\x5d\xcd\x5b\xb7\x26\x77\xfe\xef\xa0\xb5\x8d\xc9\x5f\xe6\xce\x46\x48\x4b\x9e\x3f\x1c\xba\xb9\xd4\x8e\x0a\xe4\x9d\xb0\xe7\x9d\xaa\xda\xfa\x35\xb9\x1d\xf5\x22\xaf\x85\xa2\x5f\x27\xc5\xd6\x97\x9f\x92\x0c\xda\xdd\x13\x6a\xf6\x69\x76\x73\x3d\x5d\x7c\x3a\x5a\x43\xeb\x6a\x68\xf7\xe1\xe5\x58\xff\x96\xbb\xa8\x57\xfa\x92\x12\x15\x7c\x74\x4e\xf6\xb1\x1a\xfc\xba\x20\x75\x70\xb2\x9b\x5b\x7a\x81\x75\xbc\xe1\xc8\x6f\x70\xcb\x3d\xd9\xad\xaa\x20\x38\xb5\x9c\x3e\x9b\x5b\x1d\x25\xae\xe0\x96\x77\xb2\x5b\xd5\xf2\x51\xd7\xb9\x33\xb9\x35\xd6\x7b\x55\xea\xaf\x77\xdd\xc6\x74\x31\x3d\xde\x61\x4f\x17\xd3\xfe\x2d\x76\xaf\x7e\x63\xa8\xad\x79\x1d\xf7\xde\x78\xd2\xa9\x33\x1f\xa2\x83\xdb\x47\x7b\xf3\x0e\x6e\xd7\xa2\x38\xec\x25\xb8\xbf\xec\xf6\x44\x5f\x69\x5c\x34\xca\x45\x75\x54\x88\xf6\xd1\xae\xbe\xc1\xed\xaa\x9e\xba\xb5\x3a\xf3\xbe\xd1\x9e\xd8\x9d\x8e\x32\x36\x2a\x84\xfb\x68\x81\xed\xe0\x77\x5d\x8b\xd0\xfb\xc6\xdb\x41\x7a\xcf\xcb\xdb\x3b\x2f\xa2\xbf\xe3\xf8\x3c\x6c\xb7\x51\x7f\xc4\x2f\x46\xc7\x47\x67\x3c\x25\xd7\x22\xe3\xa3\x76\x1b\x9d\x6e\x27\xf9\x73\x5e\x43\xd4\x4f\xf2\x47\x6c\xd4\x77\x4c\xa5\x76\xc2\x41\xe7\x3c\x39\xd6\xfb\x08\x07\x1d\xb1\x53\x7f\x2b\x52\xea\xec\xd0\x39\x6f\x16\xea\x2d\xdd\x31\x2b\xf5\x5d\x4c\xa9\x29\xf7\xce\x7c\xa2\xa9\x37\xe5\xde\x31\x4b\xf5\x6d\x64\xa9\x31\x39\xef\x81\xb6\xde\x91\xb8\xc7\xec\xd4\xb7\x1a\x93\xb1\x8b\xf2\xfc\x1c\x9f\xf9\x98\x33\xa9\x65\xe8\x78\x6f\x69\x7e\x19\x19\x08\x08\x81\x29\x82\x69\xc3\x55\xe4\x83\xe0\x6b\x12\x82\x48\x01\x9f\xf2\x4f\x5d\xfb\x05\x63\x8a\x37\x9f\xb9\x88\xb0\x4a\xc7\x5f\x08\xd0\xf0\x30\x8e\x19\xe3\x2a\xbb\x48\x4d\xd7\xfd\x79\x10\xf0\xf8\x15\x8b\x08\xc4\x00\xc7\xb1\x0c\x78\x08\x83\x80\x47\x1f\x03\x9a\x48\x05\xe2\xc3\xc1\x9a\x74\xc9\xa2\xee\x37\xbe\x16\x32\x59\x7d\x65\xf7\xc6\x5b\x6e\x48\x66\x57\xb9\xd6\x1c\xac\xd9\x7e\xb7\x0b\x38\x7b\x21\xcb\xcc\xc9\xff\xdf\x2e\x1e\xbf\x2d\xfe\xfb\x9f\x4f\xf7\x05\xf0\x74\x15\x2e\xa2\xfc\x83\xdf\x37\xc5\x57\xc0\xca\x13\xfe\x94\xdb\x80\x36\x0c\x51\xfc\x0c\x99\x71\x0f\x20\x24\x67\x98\x1a\xd3\x20\x00\x29\x8d\x45\x7d\x2e\x61\x71\x92\xd1\x19\x63\x29\xbf\x73\x11\x9a\xf9\xe8\x5b\xb9\xee\xe5\x11\x5c\x25\xcf\x20\x18\x28\x90\x4f\x20\x64\xf3\xf7\xc5\xf5\x76\x24\x53\xc4\xc1\x68\xa0\xd7\xa1\xca\xe8\xf6\xa3\x66\x21\x7a\x21\xac\x8b\x67\xd8\x22\xd1\x21\xbc\xe0\x84\xaa\x79\x0c\x41\xf9\x9d\x5d\x70\x6f\xe2\x47\xcc\x96\xb0\xad\xc0\x03\xc7\xf3\x06\x68\x80\x3e\xda\xa5\xb3\xb4\x04\xb1\x26\x01\x5c\x37\xbd\x81\x1a\xe6\x63\x9a\x5d\xd7\xc3\x3d\x0f\xe1\x9a\x84\x42\xee\x8c\x2b\x4c\x01\x86\x9f\xe9\x7e\xc5\x3b\xce\x88\xe2\x82\xb0\x2c\xda\xfb\x5c\x32\x75\xd3\x6f\xf9\x72\xb9\x9d\xdb\xb8\x68\x8a\xaa\x9d\x42\xb7\x03\x33\x90\x8a\xb0\xfc\x8b\xc2\x1e\xf2\x03\x50\x2c\x15\x09\x24\x60\x11\xbc\x96\x0c\x28\x0e\xec\x56\x7f\x84\x98\x92\x00\xcb\x62\xad\x4c\x19\x67\x72\x0e\x62\x0d\xe2\xe6\xa1\xc0\x91\x8d\xcc\xf2\x9c\x19\x8f\x30\xc9\xd0\x77\x91\x18\xa4\xa4\xd1\x12\x8f\x61\x44\x64\x9a\x21\xd7\x9c\x29\xc1\xb3\x6c\xbd\xc7\x11\xc8\x18\x07\x70\x4b\x5e\x20\xd8\x04\x14\xac\x5b\x12\x11\x95\xc5\x44\x58\xf3\x6d\xa8\xa6\x41\xc0\x13\xa6\xac\x34\xb7\x89\x54\xc0\xd4\x13\xa7\x49\x04\xb7\x69\xd2\x5b\xb3\x5d\x4e\x28\x2e\xf0\x12\xae\x29\x96\xd2\x7a\x04\xc9\x13\x11\xc0\xff\x12\x5e\xf8\xd6\x69\x18\x66\x84\x9b\xd2\xc4\xcf\xc2\x5e\xbe\x79\x62\xa0\xbe\x73\xb1\x2a\xca\xd3\x0b\xc5\x8c\x01\xd5\x86\x72\x4a\x41\x28\x5d\xd0\x79\xca\xac\x19\xc2\x33\xc1\xac\x09\x87\x53\x12\x6c\x8a\x68\x8c\xb3\x86\xac\xf9\x02\xcf\xaf\x9c\xaf\xb2\x6d\x3d\x4d\xd4\x2b\xd3\x25\xce\xe3\x33\x0e\xd2\x09\x3f\x74\x13\xa6\x0f\x37\x32\x8b\xec\x15\x96\x24\x98\x26\x21\x51\xda\xa9\x3b\x7f\xa6\x4a\x91\xa0\x3e\x29\xe6\x94\xce\x29\x40\x7c\xc3\x14\x88\x75\xa6\x92\x6e\x63\x26\x3f\x24\xcf\x94\x04\x59\x2a\x15\xf7\xf7\x41\x6d\x2e\xde\xfe\x0e\x00\x00\xff\xff\xb0\xa9\x0a\x2a\xfc\x20\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 8444, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
