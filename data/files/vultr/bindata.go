// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package vultr

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\x5d\x73\xa3\x36\x14\x7d\xcf\xaf\xd0\xf0\x4c\x5d\x21\x3e\x0c\x79\x73\xd6\xd9\x4e\xdb\xcd\x36\xb3\x76\xb7\x0f\x9d\x9d\x1d\x2d\x28\x5e\x6a\x2c\xb1\x02\x7b\xc7\xcd\xe4\xbf\x77\x60\x0d\x08\x24\xf1\xe1\x38\x99\xbe\x24\x36\xb2\x74\xce\x3d\x92\xce\xbd\x12\x8f\x57\x00\x18\x14\xef\x88\x71\x0d\x8c\xc3\x3e\xc9\xb9\x61\x16\x8f\x08\x3d\x64\xc6\x35\xf8\xfb\x0a\x00\x00\x8c\x88\x1c\xca\xc7\x00\x18\xdf\x70\xf5\x29\xe5\x2c\x32\xae\x00\xf8\x54\x76\xe0\x64\x13\x33\xda\xf4\x79\x2c\xff\x02\x60\x24\x2c\xc4\x79\xcc\x68\x01\xf0\x9e\x7c\x07\xbf\x11\x9e\x91\xe3\x69\x90\xba\x63\xd1\x6a\x35\x0f\xff\x65\x94\x34\x63\x95\x8f\x2c\xe3\xf4\xf9\x53\xf9\xff\xc9\xd4\xc3\xbc\xf9\x1a\x87\x78\xc3\x54\x18\xa8\x17\x03\x8d\xc7\x58\xe2\x24\xc1\x99\x0a\xc2\xee\x85\xb0\xc7\x43\xac\x08\xce\xf3\x84\xa8\x30\x9c\x5e\x0c\x67\x3c\xc6\x3b\x96\x81\x05\xdd\x90\x84\x28\x63\x71\x7b\x71\xdc\xf1\x38\x8b\x3c\xc1\x34\xc7\x2a\x0c\xaf\x17\xc3\x9b\x80\xb1\xcb\x72\xc2\x23\xbc\x53\xa1\xcc\x7b\x51\xe6\x53\x14\xa3\x11\xa3\x2a\x08\xbf\x17\xc2\x1f\x0f\xf1\x96\x63\xba\x7d\xd8\xf3\x5c\x85\x12\xf4\xa2\x04\x13\x96\x57\x9c\xc4\x21\xa3\xe0\x23\x4e\x12\xcd\x86\xec\xdf\x2d\xd6\x84\xed\xb2\x3a\x46\x54\x03\xd2\x1f\x90\x35\x21\xa2\x7b\xcc\x63\xe5\x32\x46\xfd\xfb\x05\x4d\xd8\x30\x6b\xb6\x3d\xaa\x9d\xa5\x7f\xaf\xa0\x09\x9b\xe5\x2e\xc6\xbb\x58\x69\x2d\xfd\x5a\xd9\x93\x66\x9f\x6e\x70\xca\xb8\xda\x5e\x60\xbf\xbf\xc0\x0e\x4e\x9d\x05\x62\x9a\xe5\x98\x86\x64\x7d\x4c\x89\x22\x17\x64\xdb\x7d\xb9\x84\x05\x8b\x8c\x48\x16\xf2\x38\xad\x68\x59\x10\x39\xe0\xee\x06\x7c\x58\xdc\x99\x08\x82\x5f\x6e\xc0\x6a\xb5\x34\xd1\x0c\x42\xb0\xbe\x01\x37\x7f\x35\x1d\x43\x9c\x93\x0d\xe3\xc7\x32\x98\xd5\x52\x68\x48\x0b\x10\xab\x09\x0b\xef\x5a\xdf\xa3\x38\xdb\x1a\xd7\x00\x41\x81\x43\xca\x49\x31\x5e\x64\x5c\x83\x9c\xef\x89\x52\xbd\x8a\xbc\xa3\x25\x8f\xa0\xe3\x57\xe4\x1d\xb7\x22\x6f\x4f\x27\x8f\x3a\xe4\x51\x97\xbc\xe3\x9e\x49\xde\xd5\x92\x77\x60\xe0\x55\xe4\x83\x5a\x79\x67\x3a\x79\xa7\x43\xde\xe9\x92\x0f\x60\x67\xc9\x49\x99\xde\x14\xf3\xa5\x29\x26\x36\x53\xcc\x3e\xa6\x98\x26\x4c\xd1\xcd\x4d\xd1\x77\x4d\xd1\x1e\xcd\x96\xb5\x98\x2d\x13\x30\x5b\x5b\xc9\x54\x2e\xf8\x33\x75\xf7\xb4\xba\xfb\x56\x80\x2a\xdd\x2d\xb7\x16\xde\x9d\x2e\xbc\xd7\x11\xde\xef\x0a\x6f\xb9\xaf\xaa\xfc\x6b\xea\x3b\xd7\x3b\x8a\x67\xfb\xb5\xa5\xd8\xb0\x16\xd8\x9b\x2e\xb0\xdf\xf5\x14\xaf\xab\xb0\x0d\xcf\x56\xf8\x7f\x28\xaa\xaf\x15\xd5\x46\x73\xaf\xb6\x3a\xaf\x11\xd5\x82\x67\x38\x75\x77\xdd\xda\x92\xdd\x79\x2f\x21\x6b\x9f\x92\xcf\xd6\xce\x82\x50\x2b\x9e\xe7\xba\x76\x6d\xb5\x73\x41\xbc\x33\xf6\x3c\xea\xba\xad\x27\xd9\xed\x7c\x92\x78\x3d\x12\x3d\x5f\x14\x4b\x9f\x7e\x5a\x36\x68\x8d\x5f\x50\xcb\xdb\xe5\xaf\x6f\x16\xeb\xdb\xc1\x1c\x2a\xbb\xa1\x35\x45\x97\xa1\xfa\xad\x0e\x51\xef\xf4\x2d\x27\x12\x62\x44\x67\xc7\xd8\x9d\x7c\xd9\x90\x46\x04\x39\x2e\x2c\xbd\xc1\x22\xc7\x9d\x7b\x8a\xb0\xec\xb3\xc3\xea\x1a\x02\x92\xd6\xf4\xc5\xc2\x1a\x69\x71\x42\x58\xce\xd9\x61\x75\xd3\x87\xec\x73\x17\x0a\xcb\xd7\x47\xd5\xaa\xaf\x4f\xd5\xc6\x62\xbd\x18\xae\xb0\x17\xeb\xc5\xf4\x12\x7b\x52\xbd\xe1\x6a\x73\xde\xc8\xbd\xe7\x07\xa3\x2a\x73\x17\x36\x61\x0f\xd6\xe6\x23\xc2\x96\x66\xd1\x9d\x64\xb8\xcf\x0e\x3b\xd0\x67\x1a\x1b\xce\x6b\x53\x9d\x0b\xb3\x3d\x58\xd5\x2b\xc2\xee\xfa\xa9\x2d\xe5\x99\xd7\x9d\xed\xc0\x1a\x75\x94\xb1\xa0\x30\xdd\x83\x09\x76\x44\xdc\xb2\x17\xc1\xd7\x9d\x6f\x04\xf5\x91\xb7\xb7\x77\x9d\x44\x5f\xe2\xf8\xec\xf6\x73\xd4\x1f\xf1\xc5\xd9\xf1\xe0\x05\x4f\xc9\xd2\xcc\x78\xb0\x9f\x23\x1a\x77\x92\xbf\xe4\x35\x84\x7c\x92\x1f\xe0\xa8\xaf\x98\x5a\xe5\x04\x82\x97\x3c\x39\xca\x75\x04\x82\x03\x3c\xf5\xb7\x22\xad\xca\x0e\x5e\xf2\x66\x41\x2e\xe9\x86\x58\xea\xab\x98\x56\x51\xee\x5c\xf8\x44\x23\x17\xe5\xce\x10\x53\x7d\x19\xd9\x2a\x4c\x2e\x7b\xa0\x95\x2b\x12\x7b\x88\xa7\xbe\xd4\x08\x7c\x1b\xd6\xeb\xd3\xbf\xf0\x31\x27\x90\x56\xa8\x5f\x31\xad\x2f\x23\x43\x4e\x22\x42\xf3\x18\x27\x8a\xab\xc8\x7b\xce\x0e\x71\x44\x78\x01\xf8\xb1\x7e\xef\x55\x0d\x98\x26\xf8\xf8\x96\xf1\x1d\xce\x8b\xf6\x87\x98\x24\x51\xd3\x8e\x29\x65\x79\x79\x91\x5a\x8c\xfb\xd8\x18\x78\xfa\x15\xf3\x1d\xe1\x33\x9c\xa6\x59\xc8\x22\x32\x0b\xd9\xee\xe7\x30\xd9\x67\x39\xe1\x3f\x35\x6c\x8a\x21\x45\xdf\x57\x76\x8b\x68\xd6\xed\x72\xea\xf1\x54\x13\x29\x79\xb5\x73\x4d\xc3\xe6\xc7\x4b\xbc\x90\xd1\x87\x78\x53\x06\xf9\xe7\xbb\xf5\x87\xcf\xeb\x3f\x7e\xbf\x7d\x2f\x80\x17\xa3\x30\xbe\xab\xdf\xfe\x7d\xce\xd9\x96\xd0\xf6\x0f\xfe\xc9\x7e\x4c\xa8\xa2\x29\xc1\x5f\x48\x49\xee\x9e\xf0\x8c\x51\x9c\x80\x45\x18\x92\x2c\x03\x6b\xf9\xb7\x31\x4d\xf7\xa5\x9c\x29\xce\xb2\xef\x8c\x47\x46\xdd\xfa\xd4\xce\x7b\xf5\x0c\x6e\xf7\x5f\x08\xa7\x24\x57\xdd\x25\x1f\x08\xcf\x2a\x27\x9c\xf9\x33\x7d\x11\xd4\x69\x3d\xbd\xd9\x14\xa6\x2d\x22\x87\xd3\xe1\x55\x98\x94\x6f\x58\x7e\x56\xbe\xf1\x14\x8e\xb9\x15\xf1\x92\xf0\xd5\xd3\x7f\x01\x00\x00\xff\xff\x0d\x88\xaa\x09\x4c\x1d\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 7500, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
