// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package vultr

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\x5d\x93\x9b\x36\x14\x7d\xdf\x5f\xa1\xe1\x99\x6e\x85\xf8\xde\x37\x6f\xbc\xe9\xb4\xcd\xa6\x3b\xb1\x9b\x3e\x74\x32\x19\x05\xb4\x0e\x35\x96\xa8\xc0\xce\xb8\x3b\xfe\xef\x1d\x58\x1b\x84\x90\xf8\xf0\x3a\x3b\x79\x89\xb3\x08\x74\xce\x3d\x92\xce\xbd\x17\x9e\xae\x00\x30\x28\xde\x10\xe3\x06\x18\xbb\x6d\x5a\x70\xc3\x2c\x2f\x11\xba\x33\x6e\xc0\xdf\x57\x00\x00\x60\xc4\x64\x57\x5d\x05\xc0\xf8\x17\x1b\x57\x00\x7c\xaa\xee\xe1\x64\x95\x30\x9a\xd7\xf7\x3d\x55\xff\x02\x60\xa4\x2c\xc2\x45\xc2\x68\x39\xe7\x7b\xf2\x0d\xfc\x46\x78\x4e\xf6\xc7\x29\xea\x07\xcb\x51\xab\xb9\xf8\x1f\xa3\xa4\x99\xab\xba\x64\x19\xc7\xff\x7f\xaa\x7e\x0f\xa6\x1e\xe6\xcd\xd7\x24\xc2\x2b\xa6\xc2\x40\xbd\x18\x68\x3c\xc6\x1c\xa7\x29\xce\x55\x10\x76\x2f\x84\x3d\x1e\x62\x41\x70\x51\xa4\x44\x85\xe1\xf4\x62\x38\xe3\x31\xde\xb1\x1c\xcc\xe8\x8a\xa4\x44\x19\x8b\xdb\x8b\xe3\x8e\xc7\x99\x15\x29\xa6\x05\x56\x61\x78\xbd\x18\xde\x04\x8c\x4d\x5e\x10\x1e\xe3\x8d\x0a\xc5\xef\x45\xf1\xa7\x28\x46\x63\x46\x55\x10\x41\x2f\x44\x30\x1e\xe2\x2d\xc7\x74\xfd\xb8\xe5\x85\x0a\x25\xec\x45\x09\x27\x6c\xaf\x24\x4d\x22\x46\xc1\x47\x9c\xa6\x9a\x03\xd9\x7f\x5a\xac\x09\xc7\x65\xb1\x8f\xa9\x06\xa4\x3f\x20\x6b\x42\x44\x0f\x98\x27\xca\x6d\x8c\xfa\xcf\x0b\x9a\x70\x60\x96\x6c\xbd\x57\x3b\x4b\xff\x59\x41\x13\x0e\xcb\x7d\x82\x37\x89\xd2\x5a\xfa\xb5\xb2\x27\xad\x3e\x5d\xe1\x8c\x71\xb5\xbd\xc0\x7e\x7f\x81\x12\x4e\x9d\x05\x12\x9a\x17\x98\x46\x64\xb9\xcf\x88\x22\x17\xe4\xeb\x6d\xb5\x85\x05\x8b\x8c\x49\x1e\xf1\x24\x3b\xd1\xb2\x20\x72\xc0\xfd\x2d\xf8\x30\xbb\x37\x11\x04\xbf\xdc\x82\xc5\x62\x6e\xa2\x6b\x08\xc1\xf2\x16\xdc\xfe\xd5\x3c\x18\xe1\x82\xac\x18\xdf\x57\xc1\x2c\xe6\xc2\x40\x56\x82\x58\x4d\x58\x78\xd3\xfa\x3b\x4e\xf2\xb5\x71\x03\x10\x14\x38\x64\x9c\x94\xf3\xc5\xc6\x0d\x28\xf8\x96\x28\xd5\x3b\x91\x77\xb4\xe4\x11\x74\x82\x13\x79\xc7\x3d\x91\xb7\xa7\x93\x47\x12\x79\x24\x93\x77\xdc\x33\xc9\xbb\x5a\xf2\x0e\x0c\xbd\x13\xf9\xb0\x56\xde\x99\x4e\xde\x91\xc8\x3b\x32\xf9\x10\x4a\x5b\xae\x93\xe9\x4d\x31\x5f\x9a\x62\x62\x33\xc5\xec\x63\x8a\x69\xc2\x14\xdd\xdc\x14\x7d\xd7\x14\xed\xd1\x6c\x59\x8b\xd9\x32\x01\xb3\x75\x94\x4c\xe5\x86\x3f\x53\x77\x4f\xab\x7b\x60\x85\xe8\xa4\xbb\xe5\xd6\xc2\xbb\xd3\x85\xf7\x24\xe1\x03\x59\x78\xcb\x7d\x55\xe5\x5f\x53\x5f\x5f\xef\x28\x9e\x1d\xd4\x96\x62\xc3\x5a\x60\x6f\xba\xc0\x81\xec\x29\x9e\xac\xb0\x0d\xcf\x56\xf8\x07\x14\x35\xd0\x8a\x6a\x23\xdf\xab\xad\xce\x6b\x44\xb5\xe0\x19\x4e\x2d\xef\x5b\xbb\x63\x77\xde\xf7\x90\xb5\x4f\xc9\x17\x6b\x67\x41\xa8\x15\xcf\x73\x5d\xbb\xb6\x5a\x5f\x10\xef\x8c\x33\x8f\x64\xb7\xf5\x3a\x76\xeb\x4f\x12\xaf\x47\xa2\x97\x8b\x62\xe9\xd3\x4f\xcb\x06\xad\xf1\x1b\x6a\x7e\x37\xff\xf5\xcd\x6c\x79\x37\x98\x43\xbb\x6e\x68\x4d\xd1\x65\xa8\x7e\xab\x43\xd4\x3b\x7d\xcb\x89\x84\x18\xd1\xd9\x31\xca\x8b\xdf\x35\xa4\x11\x41\x8e\x0b\x4b\x6f\xb0\xc8\x71\x7d\x4f\x11\x96\x7d\x76\x58\xb2\x21\xa0\xce\x9e\xbe\x58\x58\x23\x2d\x4e\x08\xcb\x39\x3b\x2c\x39\x7d\x74\x7d\xee\x42\x61\x05\xfa\xa8\x5a\xf5\xf5\xb1\xda\x98\x2d\x67\xc3\x15\xf6\x6c\x39\x9b\x5e\x62\x4f\xaa\x37\x5c\x6d\xce\x1b\x79\xf6\x82\x70\x54\x65\xee\xc2\x26\xec\xc1\xda\x7c\x44\xd8\x9d\x55\x74\x27\x19\xee\x8b\xc3\x0e\xf5\x99\xc6\x86\x7e\x6d\xaa\xbe\xb0\xda\x83\x55\xbd\x22\x6c\xd9\x4f\xed\x4e\x9e\x79\xdd\xd5\x0e\xad\x51\xad\x8c\x05\x85\xe5\x1e\x4c\xb0\x23\xe2\xee\x7a\x11\x7c\xdd\xf5\x46\x50\x1f\x79\xfb\x78\xd7\x49\xf4\x7b\xb4\xcf\x6e\x3f\x47\x7d\x8b\x2f\xae\x8e\x07\x2f\xd8\x25\x77\x56\xc6\x83\xfd\x1c\xd1\xb8\x4e\xfe\x92\xaf\x21\xba\x9d\xfc\x00\x47\x7d\xc5\xd4\x2a\x27\x10\xbc\x64\xe7\xd8\xad\x23\x10\x1c\xe0\xa9\x7f\x2b\xd2\xaa\xec\xe0\x25\xdf\x2c\x74\x4b\xba\x21\x96\xfa\x2a\xa6\x55\x94\x3b\x17\xee\x68\xba\x45\xb9\x33\xc4\x54\x5f\x46\xb6\x0a\x93\xcb\x36\xb4\xdd\x8a\xc4\x1e\xe2\xa9\x2f\x35\xc2\xc0\x86\xf5\xfe\x0c\x2e\xdc\xe6\x84\x9d\x1d\x1a\x9c\x98\xd6\x2f\x23\x23\x4e\x62\x42\x8b\x04\xa7\x8a\x57\x91\x0f\x9c\xed\x92\x98\xf0\x12\xf0\x63\xfd\xa9\xeb\x34\x61\x96\xe2\xfd\x5b\xc6\x37\xb8\x28\xc7\x1f\x13\x92\xc6\xcd\x38\xa6\x94\x15\xd5\x8b\xd4\x72\xde\xa7\xc6\xc0\xb3\xaf\x98\x6f\x08\xbf\xc6\x59\x96\x47\x2c\x26\xd7\x11\xdb\xfc\x1c\xa5\xdb\xbc\x20\xfc\xa7\x86\x4d\x39\xa5\xe8\xfb\xca\xc7\x62\x9a\xcb\x8f\x1c\x9f\x38\xd4\x44\x2a\x5e\xed\x5c\xd3\xb0\x79\xfe\x6e\x17\x31\xfa\x98\xac\xaa\x20\xff\x7c\xb7\xfc\xf0\x79\xf9\xc7\xef\x77\xef\x05\xf0\x72\x16\xc6\x37\xf5\x07\xbf\xcf\x05\x5b\x13\xda\xbe\xe1\x9f\xfc\x79\x41\x15\x43\x29\xfe\x42\x2a\x72\x0f\x84\xe7\x8c\xe2\x14\xcc\xa2\x88\xe4\x39\x58\x76\xef\x4d\x68\xb6\xad\xe4\xcc\x70\x9e\x7f\x63\x3c\x36\xea\xd1\x43\x3b\xef\xd5\x2b\xb8\xde\x7e\x21\x9c\x92\x82\x34\x42\x1b\x3b\xc2\x73\x29\xc5\x0a\x4b\x70\x1c\xad\xfc\xf1\xda\xbf\x6e\x35\xf5\xb2\x7f\xca\xe3\xcf\x9f\x39\x5b\x0a\xc6\x64\x27\xf6\xb5\x22\xd7\xe7\xdf\x92\xf1\xe1\xea\xf0\x7f\x00\x00\x00\xff\xff\x51\xe6\x6b\xf5\x3a\x1d\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 7482, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
