// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package vultr

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\x5d\x93\x9b\x36\x14\x7d\xdf\x5f\xa1\xe1\xd9\x75\xc5\x87\x30\xec\x9b\x37\xbb\xe9\xb4\xcd\xa6\x99\xd8\x4d\x1f\x3a\x99\x8c\x02\x5a\x87\x1a\x4b\x44\xc2\xce\xb8\x3b\xfb\xdf\x3b\x10\x1b\x10\x48\xe2\x63\x9d\xce\xbe\x24\x6b\x61\x71\xee\x39\xf7\xea\xde\x63\x78\xbc\x02\xc0\xa2\x78\x47\xac\x6b\x60\x1d\xf6\x69\xce\xad\x59\xb1\x44\xe8\x41\x58\xd7\xe0\xef\x2b\x00\x00\xb0\x62\x72\x28\x97\x01\xb0\xbe\xe2\xf3\x5f\x19\x67\xb1\x75\x05\xc0\xc7\x72\x03\x27\x9b\x84\xd1\x7a\xcf\x63\xf9\x2f\x00\x56\xca\x22\x9c\x27\x8c\x16\x00\x6f\xc9\x37\xf0\x1b\xe1\x82\x1c\x4f\x37\xa9\x36\x16\x57\xed\x7a\xf1\x5f\x46\x49\x7d\xaf\x72\xc9\xb6\x4e\x7f\x7f\x2c\xff\x7f\x9a\xe9\x61\x56\x49\x9a\x44\x8c\x82\x0f\x38\x4d\x35\x50\x8e\x19\xcb\x19\x01\x76\x8c\xa9\x06\x24\x34\x83\x84\xc3\x41\x5e\x7d\x49\x22\xbc\x61\x2a\x14\x33\x93\x11\x44\xde\x61\x9e\x08\x25\x82\x67\x86\xf0\x86\x63\xac\xd9\xf6\xa8\x66\x81\xcc\x18\x68\x38\xc6\x2d\x4e\x53\xac\x24\xe2\x1a\x31\xdc\xe1\x10\xf7\x09\xde\x25\x4a\x04\x73\xca\xdd\x11\x29\x5f\x11\x9c\xe7\x29\x51\xa1\x98\xf3\x31\x22\x1d\xab\x84\x6e\x70\xc6\xb8\x1a\x05\x9a\x61\xe0\x70\x9c\x37\x4c\x80\x25\xdd\x90\x94\x28\xf3\x62\xce\xfd\x88\xd4\x2f\xf3\x14\xd3\x1c\xab\x30\x7c\x23\x86\x3f\x02\x63\x27\x72\xc2\x63\xbc\x53\xa1\x2c\x8c\x28\x8b\x31\x8a\xd1\x98\x51\x15\x44\x60\x84\x08\x86\x43\xbc\xe6\x98\x6e\x1f\xf6\x3c\x57\xa1\x98\xeb\xb8\x5d\xc6\xd5\x14\x48\xa8\xc8\x31\x8d\xc8\xfa\x98\x11\xc5\x2c\x10\xdb\x7d\xd9\x18\x61\xa3\xb4\x62\x22\x22\x9e\x64\xe7\xa8\x7c\x84\x5c\x1f\xdc\xdf\x80\xf7\xcb\xfb\xd9\x02\x42\xf0\xcb\x0d\x58\xad\x6e\x67\x36\x9a\x43\x08\xd6\x37\xe0\xe6\xaf\x7a\x6f\x84\x73\xb2\x61\xfc\x58\xd6\xf2\xea\xb6\x71\x21\x2b\x80\x1c\xaf\x66\x86\x77\xd6\x35\xf0\xeb\x85\x38\x11\x5b\xeb\x1a\x2c\x20\x34\x0f\x9d\x99\xd4\xb0\x67\x52\xfd\xcf\x54\x05\xd4\x20\x96\x71\x52\x44\x18\x5b\xd7\x20\xe7\x7b\xa2\xcc\xc8\x59\x12\x1b\x69\x25\x09\xec\xd0\x39\x2b\x62\xdb\xb5\x22\xb0\x47\x91\xdb\xbb\xdb\x5f\x5f\x2d\xd7\x77\x5d\x5d\x5a\xb2\x04\x6d\x55\x6c\xdb\xac\x8a\xd3\xa4\xde\x33\x62\x2a\x82\xbe\x96\xa0\xed\xbb\x81\xa7\x60\xe8\x4c\x66\xd8\x4e\xbc\xed\x8f\xa7\x38\x8c\xd5\x42\xcb\xca\xf1\xd0\xc2\x57\xb0\x72\x27\xb3\xf2\x5b\xac\x9c\x4e\x39\x5f\x8a\x55\xa0\x65\xe5\x3a\x0b\x3f\x50\xb0\xf2\x26\xb3\x0a\x5a\xac\x5c\xe7\xc7\xb0\x72\xa0\xad\xaf\x40\xe8\x54\x05\xe8\xa0\xea\x84\x8d\x6f\x39\x76\xbb\xf0\xda\x5c\x1c\x34\xfc\x64\xc9\x0d\x47\x3e\x74\x9e\xf4\x09\x35\x3f\xb9\xd2\x87\x50\x6e\x53\xb3\xe6\x38\x9a\x35\x07\xc7\x4c\xdf\xdf\x75\x82\x3a\xfa\xe2\x87\x5e\x55\x25\x5e\x7d\xa0\x9f\x2f\x68\xa7\x38\xbc\x11\xad\xea\xc5\x0b\xea\x6a\x05\xf5\x60\x58\x35\x13\xbf\xee\x25\x13\x86\x62\x4b\xd0\x4e\x0f\xf1\x5f\x8e\xa0\x93\x34\xf4\x86\x0d\xd2\xda\x5a\x78\xe3\x45\x6c\xcf\x97\xee\x04\xed\xf1\x15\x26\x15\x91\xda\x58\x98\x59\xeb\xed\x83\x34\x5d\x9d\x9a\xf6\x04\x43\xd5\x1e\x40\xdd\xb1\xea\xf4\xf0\x0e\xa7\x70\xd3\x3b\x07\x69\x1a\xb9\x35\x37\x7f\x3c\xb7\xfe\x31\xe4\xf6\x72\x1b\x46\x47\x6f\x19\x24\xf3\xeb\xc1\xe1\x56\x4f\xd5\x38\xdb\xc9\xea\x9a\x5f\x0f\x42\x73\xa4\x7a\x1b\x10\x06\x2e\xac\x8a\x2a\xb8\xb0\x4d\x0f\x3b\x65\x15\x98\x23\x0d\xf4\x92\x22\xbb\x3e\xf2\xa7\xc9\xbe\x5c\x2f\xfb\x47\xfb\x72\xbd\xec\x1b\x45\x70\x8e\x3a\xc7\xde\x41\xc6\x38\xf5\x82\xca\x0e\x04\x56\x81\xf6\x8e\xcc\x01\x81\x2a\x4c\x88\x59\xce\x70\xd0\x5c\x47\xb0\x0e\xb3\x77\x10\x0d\x08\xb3\x73\xe0\x90\x39\xeb\xa1\xfe\x57\xa4\x0b\x17\x55\xda\x17\x0d\x35\x7b\x5b\xbd\x22\xcc\xf6\xc0\x74\xdb\x61\x2e\xcc\x6a\x86\x7a\xdb\xd9\x1c\xea\x36\x6c\xc8\xd9\x7b\x8a\x06\xc4\xd9\xfd\x71\x00\x7b\xf4\xd4\xbb\x0f\xa9\x3a\x2f\x69\xe7\xba\xa5\x09\x1b\x31\x8c\xf8\x01\x1d\xea\xc7\xbe\xe4\x45\xd1\x05\xad\x53\xd7\x8b\xa2\x89\xc1\xeb\xa7\x77\xb3\x44\xc2\x4b\x5a\x96\x4e\x79\x84\x53\x9f\x84\xc8\x4e\xcf\xe0\xed\x3c\xfd\xf3\x13\xf4\x2c\x53\x3d\x51\x75\xbd\xaf\x90\x9c\x22\xba\xa4\x65\xea\x3a\x45\xf4\x52\x75\x7f\xa6\xba\xfa\x99\x2c\x39\xd2\xcb\xba\xb6\xae\x23\xed\x73\x6d\x97\xd0\xf7\xff\x92\x74\xe0\x63\x19\xff\xc2\xce\xb1\x6b\x85\xfd\x1f\x21\xaa\x51\xc6\xa1\xca\x55\x8f\xa2\x23\x4e\x62\x42\xf3\x04\xa7\x8a\x07\xd1\x19\x67\x87\x24\x26\xbc\x50\xe0\x43\xf5\xd6\xf3\xcc\x30\x4b\xf1\xf1\x35\xe3\x3b\x9c\x17\xd7\x1f\x12\x92\xc6\xf5\x75\x4c\x29\xcb\xcb\x87\xe8\xc5\x7d\x1f\xeb\x18\xb3\x2f\x98\xef\x08\x9f\xe3\x2c\x13\x11\x8b\xc9\x3c\x62\xbb\x9f\xa3\x74\x2f\x72\xc2\x7f\xaa\xa3\x29\x6e\xd9\xa4\xa6\xdc\x16\x53\xd1\xde\x72\xda\xf1\x54\x05\x52\xc6\x25\x0b\x5f\x47\xf3\xfd\x15\x6e\xc4\xe8\x43\xb2\x29\x49\xfe\xf9\x66\xfd\xfe\xd3\xfa\x8f\xdf\xef\xde\x36\xc0\x8b\xbb\x30\xbe\xab\xde\xfd\x7e\xca\xd9\x96\x50\xf9\x0b\xff\x88\xef\x15\xa6\xb8\x94\xe2\xcf\xa4\x0c\xee\x1d\xe1\x82\x51\x9c\x82\x65\x14\x11\x21\xc0\xba\xfb\xdd\x84\x66\xfb\x52\xce\x0c\x0b\xf1\x8d\xf1\xd8\xaa\xae\x3e\x9d\x73\xdb\xca\xe0\x76\xff\x99\x70\x4a\x72\xd5\x9b\x84\x03\xe1\xe2\xdc\x4d\xe6\xc1\xbc\xe1\x04\x4f\x6f\xae\x1b\x89\x89\xc9\xe1\x54\x22\x4d\xd9\x39\x8b\xbb\xab\x5f\x71\xb3\x98\xce\xa1\xb5\x8f\xa3\x04\x1e\x0e\x01\x7f\xc0\xa9\x50\xa0\xb7\x97\x4b\xf8\x72\x51\xc6\x2f\x24\xb9\x7a\xfa\x2f\x00\x00\xff\xff\x1b\x3b\xef\xfd\xac\x1f\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 8108, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
