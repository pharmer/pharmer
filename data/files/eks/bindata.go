// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package eks

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x9c\x5b\x6f\xdc\xb6\x12\xc7\xdf\xfd\x29\x04\x3d\xc7\x3a\xa6\xf6\x66\xfb\x2d\xf0\xf1\x39\x08\x82\x22\x45\x9d\xb4\x28\x8a\xc0\x60\x24\x5a\x56\xbd\xba\x84\xd4\xda\xde\x04\xfe\xee\x85\xf6\x2a\x93\xb3\xfc\x2f\xc1\x30\x7d\x69\x0d\xea\x27\xe9\x4f\x72\x66\x38\x1c\xae\xf2\xfd\x24\x8a\xe2\x9a\x57\x22\xbe\x8c\x62\xfe\xa4\xe2\x37\x7d\x83\xa8\x1f\x55\x7c\x19\xfd\x75\x12\x45\x51\x14\xe7\xe2\x71\xd5\x1c\x45\xf1\x57\xbe\xfd\xab\x95\x4d\x1e\x9f\x44\xd1\xe7\xd5\x0d\x52\x14\x65\x53\xef\xef\xf9\xbe\xfa\x6f\x14\xc5\xf3\x26\xe3\x5d\xd9\xd4\xfd\xe3\x7f\x2f\x65\x51\xd6\xe5\xf6\x11\xbb\xdb\xfa\x6b\x0b\x75\x2a\xb8\xea\x4e\xd9\xfe\xe2\xb7\xa6\x16\xfb\x27\xae\x9a\x76\xd4\xfe\x19\xc3\xd6\x2f\x64\x6b\x46\xb6\xe6\x64\xab\x20\x5b\xef\xe2\x4d\xe3\xe7\xd5\xff\x5f\xde\x1c\xee\xe3\x07\x29\x8a\xa6\x3e\xd0\xc3\x27\xa1\xba\xd3\x14\xf5\x70\x4d\xe9\x3d\x5c\xb7\xea\x3d\x5c\xb7\x66\x9a\xbe\xdd\xb4\x94\xb5\xea\x78\x9d\x89\x8f\xcb\x56\x10\x93\xa3\x1e\x16\xbd\xb2\x8c\x25\x95\xc8\xcb\x45\xb5\x57\x96\x0b\x95\xc9\xb2\xdd\xf6\x8a\x20\x32\xde\x89\xa2\x91\xcb\xfe\xf2\x55\x53\xb5\x8b\x4e\x44\x4d\xdb\x95\x55\xf9\x4d\xe4\x03\xac\xed\x5f\x91\xee\xc7\x83\x57\xf1\x65\xc4\x92\x19\x39\x92\x7b\x41\xcf\x73\x2e\x0b\x61\x13\xa4\x13\x4e\x82\xce\x35\x41\x76\x39\xa3\x24\x45\x7a\x08\xc4\x4b\x10\x9b\x00\x45\x63\xac\xc8\x40\x9c\x14\xb1\xa9\x26\x69\x74\x06\x24\x9d\x63\x49\x06\xe2\x24\x69\xa4\xdb\xd1\x14\x49\x82\x82\x7c\xe4\xe8\x6a\x46\xc9\x0c\xcd\x1a\x1e\x21\xaf\x01\x1a\xeb\x66\x9d\xd8\x05\x8d\xb1\x61\x13\x48\x48\xc3\x1e\x63\xc3\x26\x90\xa0\x86\x3d\xc6\x86\x4d\x20\x6e\x86\xad\x4b\x02\x86\x3d\x46\x86\x6d\x00\x61\x0d\x7b\x0c\x0d\xdb\x24\x82\x1a\xf6\x24\x61\x70\xd2\x28\xc6\x49\xd4\xcc\x58\xd6\xc6\x63\xa0\x0a\xba\x1b\x81\xf8\xb9\xdb\x14\x28\x82\xee\x46\x20\x9e\xee\x96\x02\x49\x17\x58\x92\x81\xf8\xb9\xdb\x0c\x49\x82\x82\x7e\xa4\xbb\x21\x23\xc2\xc3\xf3\x43\x7d\xed\xdc\x2a\x27\x4b\x71\x78\xa4\x18\xdf\x85\x1f\x04\x80\x82\x61\xcb\xa6\x98\xa1\xac\xff\xff\xfa\x29\xda\x66\xd0\x0a\x9a\x75\x9a\x02\x49\x92\xe1\x91\xa2\x98\xa1\xa4\x5f\x44\xd5\xc8\xa5\xc3\x40\xa5\xf6\x90\x94\xa7\x30\x24\x51\xc8\x50\xd2\x4d\xd7\x48\x5e\x38\x84\xa4\x29\x03\x8a\xd0\xc4\x51\x88\x93\x22\x63\xee\x58\x6a\x0d\x00\x39\xb6\x71\x0a\x71\xd2\x64\xc4\x24\x3c\x73\x58\x92\x97\x22\x3d\x0e\x8c\x80\xcf\xdd\xb1\x84\x4d\x81\x26\x92\x19\xaa\x7a\x9b\x65\x62\x2e\x24\xef\x44\x1e\x65\xab\xb0\x50\xd6\x85\xae\x6c\xaa\x4b\xbb\x98\x59\x97\xb9\x3b\x06\xad\x9c\x42\x9c\x75\x19\x8b\xaf\xdd\xac\x0a\xec\x7c\x14\xa2\x87\xa8\x0f\x3f\x26\xf5\x2e\xb0\x91\x53\xc8\xd1\x6a\x1c\x37\x6f\xc5\x08\x5b\x13\xc9\xf8\x5b\xd3\xf8\xdc\xba\xe4\x15\x78\xf3\x4d\x21\xce\xba\x5c\xa3\x54\x81\x77\xe0\x14\xe2\xac\xcb\x75\x8d\xb9\x3f\x22\x2e\x90\x8c\x53\xb4\x32\x66\x31\x9d\x58\x63\xc2\x3d\x8e\x09\x14\xe2\xb5\xf2\xd9\x33\xdf\x7b\x9c\xb2\x50\x88\xdf\xca\x37\x45\x53\x87\x4c\x8a\x42\xdc\x16\x3e\x63\x17\x95\x5a\xdd\xef\x5e\x1d\x21\x8a\x62\x3c\x53\x04\x66\xad\x11\x96\x38\x96\x53\x48\xc0\x44\xaa\xc4\x89\x14\x85\x04\x4d\xa4\x4a\xbc\xc6\x50\x88\x9f\x3d\x81\xf0\x54\xc2\x44\x8a\x20\x82\x26\x52\xe5\x11\x4b\x1f\xc9\xf8\x05\x4c\xb0\xec\x95\xb8\x0a\x4e\x21\x21\x2d\x1c\x2f\xc4\x14\x12\xd6\xc2\xf1\x22\x4c\x21\x61\x2d\x1c\xd5\xc1\x4d\xc0\x49\x8f\x11\xc0\x27\x49\x8a\x0c\xbc\x12\x1d\x9f\xdb\x04\x69\xc0\x50\xd0\xa7\xfa\xa1\x6e\x9e\x6a\x5d\xc6\x29\xd3\x74\x4c\x18\x9a\x2a\x3c\x53\x3f\xd5\xf1\x2b\x06\x26\xca\x04\x5e\xa5\xdf\xa2\x16\x92\xcf\xa3\x76\x21\xdb\x46\x09\x34\x4d\xa0\x86\x5a\xc1\x53\x41\x82\x70\x90\xa3\xcf\x16\x2a\x32\x57\x2c\x51\x15\x9f\x1f\x36\x1a\x13\xf0\x50\x03\x4e\x28\x2b\x78\x42\x49\x10\x0e\x72\x74\xcb\xb1\x6f\xdd\x2a\x9c\x7c\x50\x88\x4b\x61\xc9\x30\xe5\x71\x62\x75\xae\x0a\x67\x1f\x14\xe2\x22\xc9\x58\x2c\xce\x13\x6b\x18\xac\xe0\x42\x4f\x10\x2e\x82\x8c\x38\x38\x4b\xac\xeb\x57\x85\x57\x54\x0a\x71\x30\x23\x63\x03\x62\xdd\x72\x57\x68\x9d\x30\x81\x80\xe1\x67\x04\xc3\x8f\x49\x84\x0c\x3f\x70\xb5\x20\x88\x70\x1e\x3f\x4e\xd8\x19\xd2\x43\x31\x2e\x8a\xce\x74\x49\xf6\x8a\x4d\xff\x3e\x94\xb6\x92\x8c\x83\x26\xd7\x5d\x7e\x85\x4f\xb8\x29\xc4\xc7\xc5\xec\x61\x11\x9f\x6f\x53\x88\x8b\x5d\xbb\xed\xf0\x2b\x74\x94\x6c\x02\x1e\x3e\x6f\xdd\x60\x54\xf0\x14\x99\x20\x7c\x3c\xcc\x6e\x39\x93\x84\x41\xd3\xa1\x18\x17\x45\x46\x85\xf6\xc2\x6e\x3d\x93\x24\x85\xe6\x43\x31\x0e\x9a\x2e\x8c\xe3\xda\x73\xbb\x01\xe1\x43\x6d\x0a\x09\xe7\x61\xf8\x48\x9b\x42\x02\x7a\x18\x3a\x3d\x36\x81\x60\x1e\x06\xcf\x8e\x09\x22\x98\x87\xb5\x29\x5e\x2f\x48\xc6\xbf\xc2\x3f\xb3\xdb\x50\x8b\xcb\x54\x14\xe2\x5f\x49\x07\x25\x98\x16\x66\xb0\x04\xe1\xac\x4a\x1f\x2c\x7b\x11\xa6\x3d\xa2\x58\x45\x32\xc1\xcf\x69\x5a\x9c\x5e\x53\x88\xf7\xa9\x1f\x1c\x2f\x68\x5b\xff\xc6\x29\x8d\xc4\xa3\x45\x21\x5e\x1b\x36\xeb\x40\x49\x5c\xdd\xa3\x10\x17\x41\xae\xc5\x3d\x89\xe7\x8e\x42\x42\xfe\x80\x43\xa2\x3d\x9b\x09\x78\x6d\x69\x51\x69\x4f\xc2\x6d\x12\x41\x78\x15\x22\x40\x4d\x4d\x1e\xb1\x2b\x21\x19\x17\x51\xae\xa1\x49\xe2\x6d\x09\x85\x04\x74\x36\xbc\x2f\xa1\x90\xa0\xce\x86\x7f\x77\x4b\x21\x41\x9d\x0d\x6d\x96\x4c\x20\xac\xb3\xc1\x1d\x13\x41\x84\x74\xb6\x8e\x25\x55\x99\xc9\xe6\xa0\x1e\x13\x78\x25\x47\xbb\x44\x16\x6a\xce\x92\x29\x1b\x59\x45\xe0\x6a\x28\x85\x04\xdb\x91\x74\x29\xb0\x1a\x13\x08\xb5\x01\xe8\x52\x54\x54\x23\x08\x0f\x31\x56\x6f\xea\x5f\x65\x37\x16\x03\xf0\x29\xe8\x03\x29\x35\xaf\xad\x4a\x5e\x5f\xf7\x10\x82\x5c\x28\x05\xc7\x1c\x26\xe0\x21\x06\x19\x2e\xf6\xa3\x9f\xb6\x5d\x7c\x3e\xe2\x67\x44\x24\xe3\xb5\x90\x83\x5f\x16\x3e\xb3\x64\x84\x82\x0d\xc9\x38\xad\x9c\xa9\x59\x27\x9a\x58\x67\xee\x99\x89\x63\x06\x8b\x82\xbc\x46\xeb\x18\x5d\x78\xb8\x08\xc6\x27\xf3\x01\x8b\x7a\xff\xbe\x23\xe6\x90\x82\xfc\x26\x71\x74\x71\x06\x85\xa1\xa4\x8c\x64\xbc\xb2\x32\x90\xb9\xf6\x2f\x44\x69\x19\xc9\x78\xe5\x65\xd0\x0b\x05\x8a\x54\x14\xe2\x93\x09\xed\x92\xd7\xdd\xb7\xb6\x99\x14\xb9\xa8\xbb\x92\xcf\x89\x2f\x6d\x5b\xd9\x3c\x96\xb9\x90\xab\xed\xfb\x1f\x37\x03\x99\xa5\x6a\xe7\x7c\xf9\xbf\x46\x56\xbc\xeb\xaf\xde\x95\x62\x3e\x78\x3b\xaf\xeb\xa6\x5b\x7d\x5d\xdc\x3f\x75\xfb\xbc\xfe\x89\xf7\x5c\x56\x42\x26\xbc\x6d\x55\xd6\xe4\x22\xc9\x9a\xea\x3f\xd9\x7c\xa1\x3a\x21\x4f\xf7\x5a\xfa\x47\xee\x9e\x76\xe8\xb6\xbc\x56\xae\xb7\xa8\xf5\x6f\x1f\xf4\xdb\x36\x77\xbd\xec\xf4\xaf\xba\xf3\xfa\x1b\xe7\x7d\x27\xd6\x5f\x9a\x67\x4d\x7d\x57\x16\x9b\x91\xb9\x7d\x7b\x75\x75\x7d\x73\x73\xfb\xfe\xfa\xcf\xdb\x77\xff\x1d\xc8\xe8\x9f\xd5\xc8\x7e\xe8\x63\xfe\xa4\x6e\x79\x96\x09\xa5\x6e\x1f\xc4\xf2\xb6\xcc\x5f\x63\x7f\xab\xf5\x94\xaf\x91\xf7\x62\xa9\x3f\x67\xce\xbf\x88\xf9\xb6\x90\xa2\x54\xf4\x5e\x2c\xa3\x77\xda\x43\xca\xba\x5d\xac\xe6\xa3\x13\xcf\x5d\xbc\xbb\xf2\xf2\xe6\xc8\x6e\xdc\x5c\x5f\xfd\x76\xfd\x71\xd0\x9b\xc3\x5d\x51\x22\x93\xa2\x1b\xf4\x88\xee\xce\x1a\x7b\xbb\xed\xd4\x81\x2e\xdd\xac\xa8\x68\xdf\xb3\x03\xdd\x6a\xb9\x52\x4f\x8d\xcc\x07\x5d\xdb\xfc\xa5\x7f\x43\xfe\xb0\xf8\x22\x64\x2d\x3a\xea\x03\xf2\x47\x21\xd5\xc6\xc1\x58\xc2\xce\xf6\x66\xbb\xf9\x07\x04\x06\xf6\x9a\x8b\xc7\xf8\x32\xea\xe4\x42\x0c\x4d\x4b\x36\xb9\xd9\xfa\x95\x6f\xda\x4e\x86\xca\x56\x43\xff\xf9\xe4\xe5\x9f\x00\x00\x00\xff\xff\x56\x43\xf2\x18\xb2\x40\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 16562, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
