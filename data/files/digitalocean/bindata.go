// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package digitalocean

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x98\x51\x6f\xda\x3a\x14\xc7\xdf\xf9\x14\x56\x9e\x5b\x2e\x24\xb9\x5c\x6e\xdf\xd8\xd6\x76\xd5\xba\xb6\xd2\x78\x99\xa6\xaa\x32\xce\x21\xf5\x48\x7c\x32\xdb\x50\xb1\x8a\xef\x3e\xd9\x50\x92\x38\xa9\x89\x10\x0f\x7b\x29\x4a\xce\xb1\xff\x3f\x9f\x73\xec\x1c\xf7\xb5\x47\x48\x20\x68\x0e\xc1\x05\x09\x12\x9e\x72\x4d\x33\x64\x40\x45\x70\x66\x2c\x20\x56\xc1\x05\xf9\xd1\x23\x84\x90\x20\x81\x95\x7d\x4b\x48\xf0\x8b\x06\x3d\x42\x1e\xad\x8f\x84\x94\xa3\x50\x7b\xbf\x57\xfb\x97\x90\x20\x43\x46\x35\x47\x61\xa6\x9e\xe4\x4a\x83\x4c\x68\xbe\x9b\x61\x3f\xce\x18\x69\xae\xc2\xf2\xfd\x6f\x14\x50\xce\x66\x5f\x59\x87\xdd\xe3\xa3\xfd\xdd\x9c\x1d\xaf\x15\x1d\xd2\x8a\xba\x6b\x7d\xa0\x22\xa5\x19\x4a\x68\xd3\x9a\x65\x72\xe8\xd5\xb2\x0e\x9d\xb5\xae\x24\x15\x8b\xf9\x52\xea\x36\xad\xb9\xa4\x7e\x2d\xeb\xd0\x59\xeb\x16\x45\x82\xa2\x4d\x28\x43\xe1\x17\xb2\x0e\x9d\x85\xee\xe0\x85\x7c\x47\xb9\x68\x93\x12\x6b\xe6\x97\xb2\x0e\xa7\x92\xf2\x97\xa0\x75\x38\x95\x94\xbf\x02\xad\x43\x67\xa9\x6f\x54\x10\x53\x19\x8c\x2b\x86\x6d\x7a\x6a\x8e\xfe\x28\x5a\x87\x93\xea\xf9\x43\x69\x1d\xba\xeb\x71\x91\xd2\xe2\x9d\x1d\xa6\xd2\xe2\xc0\xda\x8c\x43\x67\xad\x29\x4a\x14\xba\x75\x55\x1a\x0f\xec\x65\xeb\x50\x57\xda\x1f\x91\x5c\x28\x4d\x05\x83\xe9\xba\x80\x96\x83\x52\x2d\x96\x46\x62\x98\xce\x4a\x85\x04\x14\x93\xbc\x78\x23\xab\xd9\x18\xd5\x90\xa2\x5c\x1b\xc3\x35\x08\x90\x34\x23\x0f\x4b\x59\xa0\xaa\x04\x89\x15\x66\xd2\x61\xb9\x14\x9a\xd7\x9e\x13\xae\x16\xc1\x05\x89\x06\xad\x51\xd9\x21\x85\x1e\xa4\xf0\x48\xa4\xd0\x41\x0a\x5d\xa4\xd8\x8b\x14\x7b\x90\xe2\x13\x21\xc5\x2e\xd2\xc8\x8b\x34\xf6\x20\x8d\x8f\x44\x8a\x1d\xa4\xb1\x8b\x34\xf6\x22\x0d\x47\xbe\x62\x1a\x1d\x09\x35\x76\xab\x69\xe4\x52\x0d\xfd\x91\xca\xcf\xbd\x60\xae\xb9\x8a\xf6\x99\xa7\xcf\xe4\x2b\xe4\xe6\xf1\x40\xfa\x9a\x58\xfe\x2a\x8f\x7c\x65\x1e\x1d\x5b\xe7\x43\x17\x2b\x6a\x54\x7a\x14\x1e\x88\x96\x97\xcc\x35\x77\x8c\x96\x5b\x59\x4d\xac\xff\xfd\x1b\xd0\x57\xee\xf1\xb1\xf5\x5e\xc9\xd9\x6e\x0f\x36\x2a\x3e\xf6\x97\xfc\xc8\x77\x32\x8c\x8e\x3e\x1a\x06\x0e\xd7\xa8\x79\x38\xf8\x0f\xac\xfc\xdc\x4b\xe6\x9a\x3b\x66\xd1\xdd\x8a\x4d\xac\x70\x70\x68\x2b\x86\xbe\x4c\x36\xec\x1d\xc1\x1a\x89\x1c\x86\x8d\x4c\x46\xf1\xc0\xf9\xc4\xb6\x35\xc6\x67\xe5\x73\xad\xbb\x25\x4e\x13\x4a\x9c\x4e\x91\x38\x3d\x16\x71\x7a\x92\xf6\x8f\xf5\x7b\x51\x0a\x43\x7f\xf6\x1c\x7b\xc7\x28\x45\x8d\xaf\x60\xd8\x48\xe0\xbf\x83\xbf\x2f\x4a\xfb\x96\x86\x49\x48\x40\x68\x4e\xb3\x96\x86\xa6\x90\xb8\xe2\x09\x48\x13\x84\x4f\xdb\x4b\xe5\xfd\xfe\x52\xf9\xb6\xc4\x22\xa3\xeb\x2b\x94\x39\xd5\xf6\xfe\xc2\x21\x4b\x4a\x3b\x15\x02\xb5\xed\xcb\xcc\xf4\xaf\x25\x53\xf1\x4c\x65\x0e\xb2\x4f\x8b\x42\x31\x4c\xa0\xcf\x30\xff\x87\x65\x4b\x73\xe5\x3b\x2f\xa1\xcc\x94\xd5\xa5\xb4\x0e\x4b\x84\x72\x87\xec\x46\x6c\xf6\x20\x96\xab\x1e\xf7\x92\x66\x7b\x43\x66\x28\xe6\x3c\xb5\x6b\xbd\xb9\xbe\x99\x4e\x6e\xef\x3f\x5e\x4e\xee\x9e\xa6\xf7\x5f\x2e\xef\x2a\x0c\x66\x32\x94\xb9\x7b\xd1\x7e\xd2\xb8\x00\x51\xf7\xfb\xa9\xde\x9a\xce\x86\x29\xa3\x33\xb0\xa8\x0f\x20\x15\x0a\x9a\x91\x09\x63\xa0\x14\x99\x36\x7d\xb9\x28\x96\x36\xb8\x05\x55\xea\x05\x65\x12\xec\xad\x9b\x77\xd2\xba\x58\xce\x40\x0a\xd0\x50\x86\x3d\x58\x81\x54\x4e\xf1\x55\x12\xb2\xb3\xda\xbe\xa2\xff\x5f\x3f\xae\x46\xdd\xed\x3b\x5c\xbb\x46\xcc\xea\xf9\xdd\x21\xd0\x24\x2f\x07\x94\xd0\x95\xa1\xdb\xff\x4c\xd4\x06\x26\x60\x5e\x69\xb9\x84\xc6\x32\xb7\xbf\x66\xb1\x9b\xde\xe6\x4f\x00\x00\x00\xff\xff\x19\x2e\x34\xaa\xf4\x10\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 4340, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
