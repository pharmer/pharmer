// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package digitalocean

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x98\xdf\x6f\xda\x30\x10\xc7\xdf\xf9\x2b\xac\x3c\xb7\x8c\xfc\x18\x62\x7d\x63\x5b\xdb\x55\xeb\xda\x4a\x43\x93\xa6\xa9\xaa\x8c\x73\xa4\x1e\x89\x9d\xd9\x86\x8a\x55\xfc\xef\x93\x0d\x25\xe0\x84\x23\x42\x3c\xec\xa5\x55\x72\x67\x7f\x3f\xbe\x3b\x3b\x67\x5e\x3b\x84\x04\x82\x16\x10\x5c\x90\x20\xe5\x19\x37\x34\x97\x0c\xa8\x08\xce\xac\x05\xc4\x3c\xb8\x20\xbf\x3a\x84\x10\x12\xa4\x30\x77\x6f\x09\x09\xfe\xd0\xa0\x43\xc8\xa3\xf3\x51\x90\x71\x29\xf4\xc6\xef\xd5\xfd\x25\x24\xc8\x25\xa3\x86\x4b\x61\xa7\x1e\x16\xda\x80\x4a\x69\xb1\x9e\x61\x33\xce\x1a\x69\xa1\xa3\xea\xfd\x5f\x29\xa0\x9a\xcd\xbd\x72\x0e\xeb\xc7\x47\xf7\x7f\x79\x76\xbc\x56\x7c\x48\x2b\x6e\xaf\xf5\x91\x8a\x8c\xe6\x52\x41\x93\xd6\x38\x57\x21\xaa\xe5\x1c\x5a\x6b\x5d\x29\x2a\xa6\x93\x99\x32\x4d\x5a\x13\x45\x71\x2d\xe7\xd0\x5a\xeb\x56\x8a\x54\x8a\x26\xa1\x5c\x0a\x5c\xc8\x39\xb4\x16\xba\x83\x17\xf2\x53\xaa\x69\x93\x94\x58\x30\x5c\xca\x39\x9c\x4a\x0a\x2f\x41\xe7\x70\x2a\x29\xbc\x02\x9d\x43\x6b\xa9\xef\x54\x10\x5b\x19\x8c\x6b\x26\x9b\xf4\xf4\x44\xe2\x51\x74\x0e\x27\xd5\xc3\x43\xe9\x1c\xda\xeb\x71\x91\xd1\x72\xcf\x0e\xd3\x59\x79\x60\x6d\xd6\xa1\xb5\xd6\x48\x2a\x29\x4c\xe3\xaa\x8c\x3c\xb0\x97\x9d\xc3\xae\xd2\xe6\x88\xe4\x42\x1b\x2a\x18\x8c\x16\x25\x34\x1c\x94\x7a\x3a\xb3\x12\x61\x36\xae\x14\x52\xd0\x4c\xf1\xf2\x8d\x6c\xc7\xc6\xa8\x81\x4c\xaa\x85\x35\x5c\x83\x00\x45\x73\xf2\x30\x53\xa5\xd4\x5b\x41\x62\xa5\x9d\x34\xac\x96\x42\x8b\x9d\xe7\x94\xeb\x69\x70\x41\xe2\x5e\x63\x54\xd6\x48\x11\x82\x14\x1d\x89\x14\x79\x48\x91\x8f\x94\xa0\x48\x09\x82\x94\x9c\x08\x29\xf1\x91\xfa\x28\xd2\x00\x41\x1a\x1c\x89\x94\x78\x48\x03\x1f\x69\x80\x22\x85\x7d\xac\x98\xfa\x47\x42\x0d\xfc\x6a\xea\xfb\x54\x21\x1e\xa9\xe2\x1c\x05\xf3\xcd\xdb\x68\x5f\x78\xf6\x4c\xbe\x41\x61\x1f\x0f\xa4\xaf\x8e\x85\x57\x79\x8c\x95\x79\x7c\x6c\x9d\x87\x3e\x56\x5c\xab\xf4\x38\x3a\x10\x2d\x94\xcc\x37\xb7\x8c\x96\x5f\x59\x75\xac\x0f\xf8\x06\xc4\xca\x3d\x39\xb6\xde\xb7\x72\xb6\xde\x83\xb5\x8a\x4f\xf0\x92\xef\x63\x27\x43\xff\xe8\xa3\xa1\xe7\x71\xf5\xeb\x87\x03\x7e\x60\x15\xe7\x28\x99\x6f\x6e\x99\x45\x7f\x2b\xd6\xb1\xa2\xde\xa1\xad\x18\x61\x99\xac\xd9\x5b\x82\xd5\x12\x19\x46\xb5\x4c\xc6\x49\xcf\xfb\xc4\x36\x35\xc6\x67\xd5\xf3\x4e\x77\x4b\xbc\x26\x94\x78\x9d\x22\xf1\x7a\x2c\xe2\xf5\x24\xcd\x1f\xeb\x7d\x51\x8a\x22\x3c\x7b\x9e\xbd\x65\x94\xe2\xda\x57\x30\xaa\x25\xf0\x7d\xef\xff\x8b\xd2\xa6\xa5\x61\x0a\x52\x10\x86\xd3\xbc\xa1\xa1\x29\x95\x9c\xf3\x14\x94\x0d\xc2\xe7\xd5\xa5\xf2\x7e\x73\xa9\x7c\x5b\x62\x99\xd3\xc5\x95\x54\x05\x35\xee\xfe\xc2\x21\x4f\x2b\x3b\x15\x42\x1a\xd7\x97\xd9\xe9\x5f\x2b\xa6\xf2\x99\xaa\x02\x54\x97\x96\xa5\x66\x32\x85\x2e\x93\xc5\x3b\x96\xcf\xec\x95\xef\xbc\x82\xb2\x53\x6e\x2f\xa5\x71\x58\x2a\xb4\x3f\x64\x3d\x62\xb9\x01\x71\x5c\xbb\x71\xaf\x68\x56\x37\x64\x26\xc5\x84\x67\x6e\xad\x37\xd7\x37\xa3\xe1\xed\xfd\xa7\xcb\xe1\xdd\xd3\xe8\xfe\xeb\xe5\xdd\x16\x83\x9d\x4c\xaa\xc2\xbf\x68\x3f\x19\x39\x05\xb1\xeb\xf7\x5b\xbf\x35\x9d\x35\x53\x4e\xc7\xe0\x50\x1f\x40\x69\x29\x68\x4e\x86\x8c\x81\xd6\x64\x54\xf7\xe5\xa2\x9c\xb9\xe0\x96\x54\xeb\x17\xa9\xd2\x60\x63\x5d\xee\x49\xeb\x74\x36\x06\x25\xc0\x80\xfe\x01\x4a\x37\xdf\xeb\xe7\x2b\x8b\x9d\x78\x1e\x76\x07\xdd\xde\xde\xdd\xe1\x9b\x57\x3f\x27\x6c\x65\x33\x05\xfb\xc2\xa8\x19\x74\xb6\xb9\x1c\x4f\x67\xf9\x2f\x00\x00\xff\xff\xc4\xd3\xc5\x43\x9d\x10\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 4253, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
