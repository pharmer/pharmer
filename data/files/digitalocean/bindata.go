// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package digitalocean

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x97\xcd\x72\xd3\x30\x10\xc7\xef\x79\x8a\x1d\x9d\xdb\x4e\xfc\x81\x09\xb9\xc1\xa1\x70\x00\x86\x19\x7a\x61\x98\x1e\x14\x7b\x6b\x44\x6c\xc9\x48\x4a\x21\x74\xf2\xee\x8c\x95\x34\x76\x24\x77\xe3\xf1\xe4\xc0\xa5\xa9\xbc\x6b\xff\x7f\xda\x5d\x49\xab\xa7\x19\x00\x93\xbc\x46\xb6\x04\x56\x88\x52\x58\x5e\xa9\x1c\xb9\x64\x57\xad\x05\xe5\x23\x5b\xc2\xf7\x19\x00\x00\x2b\xf0\xd1\x3d\x05\x60\xbf\x38\x9b\x01\xdc\x3b\x1f\x8d\xa5\x50\xd2\x1c\xfd\x9e\xdc\x5f\x00\x56\xa9\x9c\x5b\xa1\x64\xfb\xe9\xb7\xb5\xb1\xa8\x0b\x5e\x1f\xbe\x70\x7c\xaf\x35\xf2\xda\xc4\xdd\xf3\xbf\x4a\x62\xf7\x35\xf7\xc8\x39\x1c\x86\xf7\xee\x77\x77\x35\x5d\x2b\x39\xa7\x95\x8c\xd7\x7a\xc7\x65\xc9\x2b\xa5\x71\x48\x6b\x55\xe9\x88\xd4\x72\x0e\xa3\xb5\x6e\x35\x97\xeb\x87\x8d\xb6\x43\x5a\x0f\x9a\xd3\x5a\xce\x61\xb4\xd6\x47\x25\x0b\x25\x87\x84\x2a\x25\x69\x21\xe7\x30\x5a\xe8\x33\xfe\x86\x6f\x4a\xaf\x87\xa4\xe4\x36\xa7\xa5\x9c\xc3\xa5\xa4\xe8\x12\x74\x0e\x97\x92\xa2\x2b\xd0\x39\x8c\x96\xfa\xca\x25\xb4\x95\x91\x0b\x93\xab\x21\x3d\xf3\xa0\xe8\x28\x3a\x87\x8b\xea\xd1\xa1\x74\x0e\xe3\xf5\x84\x2c\x79\xf3\xc2\x0a\x33\x65\x73\x66\x6e\xad\xc3\x68\xad\x3b\xa5\x95\xb4\x83\xb3\xb2\xea\xcc\x5a\x76\x0e\xa7\x4a\xc7\x2d\x52\x48\x63\xb9\xcc\xf1\x6e\xdb\xe0\xc0\x46\x69\xd6\x9b\x56\x22\x2a\x57\x9d\x42\x81\x26\xd7\xa2\x79\x26\x3b\xb1\xe5\xdc\x62\xa9\xf4\xb6\x35\xbc\x47\x89\x9a\x57\xf0\x65\xa3\x1b\x65\x7a\x41\xca\x9b\xf6\xa3\x51\x37\x15\x5e\x9f\x8c\x0b\x61\xd6\x6c\x09\xc9\x7c\x30\x2a\x07\xa4\x98\x40\x8a\x27\x22\xc5\x1e\x52\xec\x23\xa5\x24\x52\x4a\x20\xa5\x17\x42\x4a\x7d\xa4\x8c\x44\x5a\x10\x48\x8b\x89\x48\xa9\x87\xb4\xf0\x91\x16\x24\x52\x94\x51\xc5\x94\x4d\x84\x5a\xf8\xd5\x94\xf9\x54\x11\x1d\xa9\xfa\x9a\x04\xf3\xcd\x7d\xb4\x0f\xa2\xfc\x01\x9f\xb0\x6e\x87\x67\xd2\x17\x62\xd1\x55\x9e\x50\x65\x9e\x4c\xad\xf3\xc8\xc7\x4a\x82\x4a\x4f\xe2\x33\xd1\x22\xc9\x7c\xf3\xc8\x68\xf9\x95\x15\x62\xbd\xa1\x17\x20\x55\xee\xe9\xd4\x7a\xef\xe5\xec\xb0\x06\x83\x8a\x4f\xe9\x92\xcf\xa8\x9d\x21\x9b\xbc\x35\xcc\x3d\xae\x2c\xdc\x1c\xe8\x0d\xab\xbe\x26\xc9\x7c\xf3\xc8\x2c\xfa\x4b\x31\xc4\x8a\xe7\xe7\x96\x62\x4c\x65\x32\xb0\x8f\x04\x0b\x12\x19\xc5\x41\x26\x93\x74\xee\x1d\xb1\x43\x8d\xf1\x55\x37\x3e\xe9\x6e\xc1\x6b\x42\xc1\xeb\x14\xc1\xeb\xb1\xc0\xeb\x49\x86\x0f\xeb\x97\xa2\x14\xc7\x74\xf6\x3c\xfb\xc8\x28\x25\xc1\x29\x18\x07\x09\x7c\x35\xff\xff\xa2\x74\x6c\x69\x72\x8d\x05\x4a\x2b\x78\x35\xd0\xd0\x14\xc2\x34\x15\xdf\xde\x2a\x5d\x73\xeb\x6e\x27\x02\xab\xa2\x8b\x81\x1b\x9e\x4e\xe6\xe9\xf8\x1f\x00\xfb\x69\x9e\x9b\xae\x35\xca\x1e\x51\xef\xae\x3a\x60\xaa\xf8\x0a\xab\x7d\x1b\x17\xd8\x84\x6c\x36\x8e\xc4\xe2\x1f\xcb\x8e\x96\xdd\x0b\xb3\x5b\x6f\x56\xa8\x25\x5a\xd7\xad\xed\xd1\xd8\x23\x6a\xe3\xe5\xa0\x83\x7e\xb6\xba\xe3\xf5\xe6\xf5\x4d\xda\x8f\xa3\x7f\xfc\xfa\x76\xab\x54\xd5\x09\x1d\x1e\xb6\x08\xbc\xa8\xbb\x17\x3a\xe8\xde\xab\xfb\x0b\xfa\xc9\x8b\xed\x35\x7d\x09\x56\x6f\x30\x98\xe6\xfe\xb7\x9d\xec\x6e\xb6\xfb\x17\x00\x00\xff\xff\x2a\xf8\x62\x26\xfb\x0f\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 4091, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
