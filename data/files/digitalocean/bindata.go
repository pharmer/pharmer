// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package digitalocean

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x9a\x5f\x8f\xa3\x36\x10\xc0\xdf\xf7\x53\x58\x3c\x2f\x69\x30\x04\xd1\x7d\xdb\xb6\x77\xd7\x53\xaf\xbb\x27\x35\x2f\x55\x75\x3a\x79\x8d\xc3\xd1\x80\xcd\xd9\x24\xab\x74\xb5\xdf\xbd\xc2\xf9\x03\xd8\x8e\x71\xd0\xf6\xa1\xe1\xe5\x6e\x61\x06\xcf\xf0\xf3\x78\xec\x21\xf3\x72\x03\x80\x47\x51\x49\xbc\x3b\xe0\xa5\x79\x96\xd7\xa8\x60\x98\x20\xea\xdd\x36\x12\x42\xb7\xc2\xbb\x03\x7f\xdd\x00\x00\x80\x97\x92\xad\xbc\x0d\x80\xf7\x1d\x1d\xff\xaa\x38\x4b\xbd\x1b\x00\xbe\xc8\x07\x38\xc9\x72\x46\xdb\x67\x5e\xe4\xbf\x00\x78\x05\xc3\xa8\xce\x19\x6d\xec\xdc\x97\xa2\x26\x3c\x45\x25\x08\x0f\xa3\x9c\x9e\x6c\xc4\xa8\x14\x9d\xfb\xff\x30\x4a\xda\xf1\xe4\x2d\xa9\x70\xb8\xfc\x22\xff\x7f\xbd\x3d\x6f\xed\x27\x44\x33\x54\x30\x4e\x40\x60\xb2\xf6\x54\xf0\xc0\x6a\x4d\x2a\x38\x5b\x7b\xcf\x11\x5d\xaf\x36\xbc\x36\x5b\x5b\x71\x64\xb7\x26\x15\x9c\xad\x7d\x62\x34\x65\xd4\x6c\xaa\x60\xd4\x6e\x4a\x2a\x38\x9b\x7a\x20\xcf\xe0\x4f\xc6\xd7\x66\x63\x74\x87\xed\xc6\xa4\xc2\xe5\xc6\x8c\x01\x42\x77\xd8\x1e\x20\x52\xc1\xd9\xd8\x1f\x88\x82\x66\xda\x70\x2e\x30\x03\xd0\x64\x51\xac\x18\xb4\x5a\x94\x0a\xee\x16\x73\x9a\xa1\xea\x6c\x48\x8a\xac\xb2\xc3\x94\x0a\xce\xd6\x96\x8c\x33\x5a\x33\xb3\xad\x9a\x0d\x84\xbf\x54\xe8\xdb\x3a\xad\xf6\x9c\x8a\x1a\x51\x4c\x96\xbb\x8a\x18\xd6\xbc\x58\x6f\x1a\x13\x41\x9c\x3d\xb5\x26\x52\x22\x30\xcf\xab\xa3\x73\x7d\x21\x46\x35\xc9\x18\xdf\x35\x92\x0f\x84\x12\x8e\x0a\xf0\x79\xc3\x2b\x26\x48\x47\xa9\x6a\x86\x4d\xda\x97\x41\xa5\x77\x07\x82\xb8\x35\x91\x8b\xb5\xbc\x33\x1f\xc8\x22\xed\x9c\x02\x25\xed\x00\x25\x31\x00\x65\xe9\x02\x65\x7d\x01\x65\x09\xec\xaf\xa1\x72\xdd\x1b\x5f\xac\x58\xa0\x5c\xf7\xf4\x7b\x51\x60\x9e\x88\x5b\x33\x6f\x1b\xee\x91\xb4\x03\x95\xb6\x0a\x3b\x9c\x26\x6b\x68\x61\x0d\x47\xb2\x86\x0a\x6b\xa8\xb2\x8e\xa6\xc9\x3a\xb4\xc1\x0e\xc7\xd2\x0e\x54\xdc\xa1\xc6\x3b\x84\xd3\x04\x1e\x25\x16\xe0\x7d\xe1\x25\xc0\x63\x05\x78\x94\x68\x01\x9e\xcc\x3b\x66\x2b\x4e\x9a\xe1\x53\xef\x0e\xd4\x7c\x43\xac\x1e\xdb\x1c\x7e\xa3\xe5\x18\xa9\xde\x4e\x74\x9b\x59\x04\xb0\x3c\x4f\x5b\x91\x9a\x77\x91\xf9\x6c\xa1\xc2\x9c\xe8\x52\x8b\x6d\x91\x1b\x8f\x0e\xdd\xb9\x02\x3c\xd6\x83\x37\x1a\xb9\xd4\x6c\xb9\x61\x6c\x6a\x88\x14\x77\xb5\xc4\x90\x4c\x33\x3a\xb0\x1f\xc4\x67\x61\xf7\x85\x67\x72\xac\xbe\xa9\xc1\xf9\x10\xcb\xb7\x66\xa7\xb2\x7a\x2b\x36\xd0\x82\x06\x5e\x9c\xcd\xe1\xe2\x4a\xb0\x44\x16\x2c\xd1\xc5\x2b\x6f\x71\x2d\xd1\x92\x58\xb0\x24\x2a\x16\x87\x22\xf3\x4a\x96\x51\xe9\x07\xd0\x96\xd2\x35\x79\x37\xad\xff\x9a\x67\xdf\xc0\xef\xa4\x6c\x2e\x87\x32\x51\x00\xb5\xd8\x0a\xed\x05\xcd\x7f\xcd\xac\xc7\x68\xdc\x66\x58\xfa\xd6\x8f\x1c\xaa\xd8\x91\x9d\x9a\xab\xf4\xe8\x0b\x47\x6e\xde\xa5\x0f\xa1\xed\xc4\xa1\xc9\x1d\x3d\x0e\xb5\xda\x15\x6a\x09\x76\x61\x5f\x31\xff\x8b\xd9\xb6\x96\xa2\xaa\xd8\x91\x9d\x9a\x82\xf5\x2d\xfb\xc7\xd1\xb3\x6d\x3d\x5e\xaa\x62\x47\x7f\xd5\xdc\xa8\x9f\x2d\xbb\x47\x8c\x8b\x1c\x16\x7e\xb0\xc5\xd5\xc6\xb7\x7d\xc9\x32\xea\x38\x7e\xac\x1a\xdc\xe3\xaf\xf3\x18\x79\x44\x66\x0b\x5e\xa3\x8e\x19\xab\x16\x9f\x83\x67\x84\xeb\xc6\x1a\x3a\x60\x0d\x87\xb1\x86\x2a\xd6\x89\x7e\x5f\x10\x3e\x74\x88\x56\x83\x8e\xe3\x57\xd4\x89\x63\xb5\xed\x08\x46\x1d\xc7\xfa\x69\xa2\x25\xba\xf0\x43\x87\x2d\xcb\xa0\x73\x38\x38\x0d\x6d\x59\x93\x8d\xd6\x48\x22\xb3\x95\x26\x46\x1d\xc7\xb2\x76\xaa\xbf\x11\x0a\x3f\xde\x87\xa2\xad\x6c\x31\x2b\xed\xc9\x6a\x65\x9d\x5e\x9b\x4c\xf4\x53\xae\xf0\x93\xfd\x56\x6f\xdf\xb8\x4c\x4a\xe6\x83\xb5\x5e\x08\xc4\x57\xff\x0b\xe0\xa9\xc5\x00\x73\x92\x12\x5a\xe7\xa8\x30\x34\x18\x54\x9c\x6d\xf3\x94\xf0\x86\xe8\x2f\xfb\xe6\xa5\xc7\x53\xf3\xd2\x11\x58\x55\xa0\xdd\x7b\xc6\x4b\x54\xcb\x06\x9c\x9c\x14\x69\x2b\x47\x94\xb2\x5a\x76\x4a\x34\xc3\xbf\xb4\x3e\x55\xdf\x10\x2f\x09\x9f\xa1\xaa\x12\x98\xa5\x64\x86\x59\xf9\x03\x2e\x36\xa2\x26\xdc\x6f\x9d\x6a\x86\xec\xbe\x8a\xf1\xb1\x94\x0a\xf5\x91\xc3\x13\xaf\x27\x47\xa4\x5f\xfd\x79\x6c\xbd\xd9\x77\x62\x61\x46\x57\x79\x26\xdf\xf5\xe3\x87\x8f\xcb\xfb\x4f\x8f\x3f\xbf\xbb\x7f\xf8\xba\x7c\xfc\xed\xdd\x43\xc7\x87\x66\x30\xc6\x4b\xb5\xa1\xeb\x6b\xcd\xd6\x84\xf6\xf5\xfe\x16\xc7\x26\x10\x4d\x54\xa0\x27\x22\x5d\xfd\x4c\xb8\x60\x14\x15\xe0\x1e\x63\x22\x04\x58\xea\xba\x39\xad\x36\x12\x6e\x85\x84\x78\x66\x3c\xf5\x4e\xd2\xd7\x33\xd3\xba\xde\x3c\x11\x4e\x49\x6d\x6a\x1b\xd9\x12\x2e\x8e\xed\x0a\xb3\x64\x36\x6f\x67\xeb\xd0\x8e\xd6\x99\xa6\x94\x6c\x0f\xf5\x64\x77\x12\x38\x4b\xf5\xbb\xdf\x51\xb7\xf2\x3c\xba\x26\x5d\xba\x79\xfd\x37\x00\x00\xff\xff\x00\xdd\x70\x4a\x08\x27\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 9992, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
