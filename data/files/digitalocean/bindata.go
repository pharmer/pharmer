// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package digitalocean

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x98\xdf\x6f\xda\x3a\x14\xc7\xdf\xf9\x2b\xac\x3c\xb7\x5c\xf2\xe3\x22\x2e\x6f\xdc\xad\xed\xaa\x75\x6d\xa5\xf1\x32\x4d\x55\x65\x9c\x43\xea\x91\xd8\xa9\x1d\xa8\x58\xc5\xff\x3e\xc5\x05\x12\xec\x70\x88\x22\x1e\xf6\xb2\x35\x39\xc7\xfe\x7e\x7c\xce\xb1\x73\xcc\x7b\x8f\x10\x4f\xd0\x0c\xbc\x31\xf1\x62\x9e\xf0\x82\xa6\x92\x01\x15\xde\x45\x69\x01\xb1\xd2\xde\x98\xfc\xec\x11\x42\x88\x17\xc3\xca\xbc\x26\xc4\x7b\xa5\xbb\xbf\x72\x25\x63\xaf\x47\xc8\x93\x19\xa0\x20\xe1\x52\x54\x63\xde\xcd\xbf\x84\x78\xa9\x64\xb4\xe0\x52\x94\x3a\x93\x4c\x17\xa0\x62\x9a\x6d\xe7\xd8\x8f\x2b\x8d\x34\xd3\x41\xf5\xfe\xb7\x14\x50\xcd\x66\x5e\x19\x87\xed\xe3\x93\xf9\x7f\x73\xd1\x5d\x2b\x3c\xa5\x15\xb6\xd7\xfa\x9f\x8a\x84\xa6\x52\x41\x93\xd6\x2c\x55\x3e\xaa\x65\x1c\x5a\x6b\x5d\x2b\x2a\x16\xf3\xa5\x2a\x9a\xb4\xe6\x8a\xe2\x5a\xc6\xa1\xb5\xd6\x9d\x14\xb1\x14\x4d\x42\xa9\x14\xb8\x90\x71\x68\x2d\x74\x0f\x6f\xe4\x87\x54\x8b\x26\x29\xb1\x66\xb8\x94\x71\x38\x97\x14\x5e\x82\xc6\xe1\x5c\x52\x78\x05\x1a\x87\xd6\x52\xdf\xa9\x20\x65\x65\x30\xae\x99\x6c\xd2\xd3\x73\x89\x47\xd1\x38\x9c\x55\x0f\x0f\xa5\x71\x68\xaf\xc7\x45\x42\xf3\x23\x3b\x4c\x27\xf9\x89\xb5\x95\x0e\xad\xb5\xa6\x52\x49\x51\x34\xae\xaa\x90\x27\xf6\xb2\x71\x38\x54\xda\x1f\x91\x5c\xe8\x82\x0a\x06\xd3\x75\x0e\x0d\x07\xa5\x5e\x2c\x4b\x09\x3f\x99\x55\x0a\x31\x68\xa6\x78\xbe\x23\x3b\xb0\x31\x5a\x40\x22\xd5\xba\x34\xdc\x80\x00\x45\x53\xf2\xb8\x54\xb9\xd4\xb5\x20\xb1\xbc\x9c\xd4\xaf\x96\x42\xb3\x83\xe7\x98\xeb\x85\x37\x26\xe1\xa0\x31\x2a\x5b\xa4\x00\x41\x0a\x3a\x22\x05\x16\x52\x60\x23\x45\x28\x52\x84\x20\x45\x67\x42\x8a\x6c\xa4\x21\x8a\x34\x42\x90\x46\x1d\x91\x22\x0b\x69\x64\x23\x8d\x50\x24\x7f\x88\x15\xd3\xb0\x23\xd4\xc8\xae\xa6\xa1\x4d\xe5\xe3\x91\xca\x2e\x51\x30\xdb\x5c\x47\xfb\xc2\x93\x17\xf2\x0d\xb2\xf2\xf1\x44\xfa\x5c\x2c\xbc\xca\x43\xac\xcc\xc3\xae\x75\xee\xdb\x58\xa1\x53\xe9\x61\x70\x22\x5a\x28\x99\x6d\x6e\x19\x2d\xbb\xb2\x5c\xac\xff\xf0\x0d\x88\x95\x7b\xd4\xb5\xde\x6b\x39\xdb\xee\x41\xa7\xe2\x23\xbc\xe4\x87\xd8\xc9\x30\xec\x7c\x34\x0c\x2c\xae\xa1\x7b\x38\xe0\x07\x56\x76\x89\x92\xd9\xe6\x96\x59\xb4\xb7\xa2\x8b\x15\x0c\x4e\x6d\xc5\x00\xcb\xa4\x63\x6f\x09\xe6\x24\xd2\x0f\x9c\x4c\x86\xd1\xc0\xfa\xc4\x36\x35\xc6\x17\xd5\xf3\x41\x77\x4b\xac\x26\x94\x58\x9d\x22\xb1\x7a\x2c\x62\xf5\x24\xcd\x1f\xeb\x63\x51\x0a\x02\x3c\x7b\x96\xbd\x65\x94\x42\xe7\x2b\x18\x38\x09\xfc\x77\xf0\xf7\x45\x69\xdf\xd2\x30\x05\x31\x88\x82\xd3\xb4\xa1\xa1\xc9\x95\x5c\xf1\x18\x54\x19\x84\xcf\x1f\x37\xcc\x87\xfd\x0d\x73\xb7\xc4\x3c\xa5\xeb\x6b\xa9\x32\x5a\x98\xfb\x0b\x87\x34\xae\xec\x54\x08\x59\x98\xbe\xac\x9c\xfe\xbd\x62\xca\x5f\xa8\xca\x40\xf5\x69\x9e\x6b\x26\x63\xe8\x33\x99\xfd\xc3\xd2\x65\x79\xe5\xbb\xac\xa0\xca\x29\xeb\x4b\x69\x1c\x16\x0b\x6d\x0f\xd9\x8e\xd8\xec\x41\x0c\xd7\x61\xdc\x2b\x9a\x8f\xeb\x32\x93\x62\xce\x13\xb3\xd6\xdb\x9b\xdb\xe9\xe4\xee\xe1\xd3\xd5\xe4\xfe\x79\xfa\xf0\xf5\xea\xbe\xc6\x50\x4e\x26\x55\x66\xdf\xba\x9f\x0b\xb9\x00\x71\xe8\xf7\x4b\xef\x9a\x4e\xc7\x94\xd2\x19\x18\xd4\x47\x50\x5a\x0a\x9a\x92\x09\x63\xa0\x35\x99\xba\xbe\x5c\xe4\x4b\x13\xdc\x9c\x6a\xfd\x26\x55\xec\xed\xad\x9b\x23\x69\x5d\x2c\x67\xa0\x04\x14\x4d\x6d\xea\x0a\x94\xde\x96\xfd\xca\xef\x8f\xfa\x83\xa3\xbb\xc2\x36\x6f\x7f\x53\xa8\xa5\x31\x86\x95\x37\x26\x85\x5a\x42\x2d\x49\xaf\xd4\x7d\x67\x7e\x6b\xf8\x78\xdb\xab\xa3\x1b\xe4\xde\xe6\x4f\x00\x00\x00\xff\xff\x4e\xbd\x50\xf6\xcd\x10\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 4301, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
