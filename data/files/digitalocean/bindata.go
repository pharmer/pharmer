// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package digitalocean

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\x5f\x6f\x1a\xb9\x17\x7d\xcf\xa7\xb0\xe6\x99\x50\x18\xe6\xc7\x2f\xdb\x37\x4a\xda\x2e\x2a\x25\x6c\x60\xbb\x5a\xad\xaa\xca\x78\x2e\x13\x2f\x1e\xdf\x59\xdb\x43\x44\xa3\x7c\xf7\x95\xcd\xbf\xf9\x87\x41\x28\x0f\xfb\x92\x68\xe6\x1e\xfb\x1c\xdf\x7b\xec\xb9\xe6\xe5\x86\x90\x40\xd2\x14\x82\xf7\x24\x88\x79\xc2\x0d\x15\xc8\x80\xca\xa0\x65\x23\x20\xd7\xc1\x7b\xf2\xd7\x0d\x21\x84\x04\x31\xac\xdd\x5b\x42\x82\x7f\x68\x70\x43\xc8\x77\x87\x51\x90\x70\x94\xfa\x80\x7b\x71\x7f\x09\x09\x04\x32\x6a\x38\x4a\x3b\xf5\x20\xd5\x06\x54\x4c\xd3\xdd\x0c\x87\x71\x36\x48\x53\x1d\x1e\xdf\xff\x44\x09\xc7\xd9\xdc\x2b\x07\xd8\x3d\x7e\x77\xff\x5f\x5b\xd7\x73\xf5\xce\x71\xf5\x2e\xe7\xfa\x40\x65\x42\x05\x2a\x68\xe2\x5a\x08\xd5\xf5\x72\x39\xc0\xc5\x5c\x9f\x14\x95\xab\x65\xae\x4c\x13\xd7\x52\x51\x3f\x97\x03\x5c\xcc\x35\x46\x19\xa3\x6c\x22\x12\x28\xfd\x44\x0e\x70\x31\xd1\x04\x9e\xc9\x9f\xa8\x56\x4d\x54\x72\xc3\xfc\x54\x0e\xf0\x56\x54\x7e\x0b\x3a\xc0\x5b\x51\xf9\x1d\xe8\x00\x17\x53\xcd\xa8\x24\xd6\x19\x8c\x6b\x86\x4d\x7c\x7a\x89\xfe\x2c\x3a\xc0\x9b\xf2\xf9\x53\xe9\x00\x97\xf3\x71\x99\xd0\xec\xc4\x0e\xd3\x49\x76\x66\x6d\x16\x70\x31\xd7\x1c\x15\x4a\xd3\xb8\x2a\x83\x67\xf6\xb2\x03\x94\x99\x0e\x47\x24\x97\xda\x50\xc9\x60\xbe\xc9\xa0\xe1\xa0\xd4\xab\xdc\x52\x74\x93\xc5\x91\x21\x06\xcd\x14\xcf\xf6\xca\x4a\x31\x46\x0d\x24\xa8\x36\x36\xf0\x19\x24\x28\x2a\xc8\x34\x57\x19\xea\x42\x92\x58\x66\x27\xed\x1e\x97\x42\xd3\xd2\x73\xcc\xf5\x2a\x78\x4f\x7a\x9d\xc6\xac\xec\x24\x85\x1e\x49\xe1\x95\x92\xc2\x8a\xa4\xb0\x2a\x29\xf2\x4a\x8a\x3c\x92\xa2\x37\x92\x14\x55\x25\xf5\xbd\x92\xee\x3c\x92\xee\xae\x94\x14\x55\x24\xdd\x55\x25\xdd\x79\x25\x75\xfb\x3e\x33\xf5\xaf\x14\x75\x57\x75\x53\xbf\xaa\xaa\xeb\xcf\x54\x7a\xeb\x15\x56\x0d\x17\xa5\xfd\xca\x93\x27\xf2\x15\x52\xfb\x78\xa6\x7c\x75\x59\x7e\x97\xf7\x7c\x36\xef\x5d\xeb\xf3\x6e\x55\x56\xaf\xe6\xf4\x5e\x78\x26\x5b\x5e\x65\xd5\xf0\x85\xd9\xaa\x3a\xab\x2e\xeb\x17\xff\x06\xf4\xd9\x3d\xba\xd6\xef\x85\x9a\xed\xf6\x60\xcd\xf1\x91\xdf\xf2\x7d\xdf\xc9\xd0\xbf\xfa\x68\xe8\x54\x74\xf5\xeb\x87\x83\xff\xc0\x4a\x6f\xbd\xca\xaa\xe1\x0b\xab\x58\xdd\x8a\x75\x59\x61\xe7\xdc\x56\x0c\x7d\x95\xac\xc5\x2f\x14\x56\x2b\x64\x37\xac\x55\xb2\x17\x75\x2a\x9f\xd8\xa6\xc6\xb8\x75\x7c\x2e\x75\xb7\xa4\xd2\x84\x92\x4a\xa7\x48\x2a\x3d\x16\xa9\xf4\x24\xcd\x1f\xeb\x53\x59\x0a\x43\x7f\xf5\x2a\xf1\x0b\xb3\xd4\xab\x7d\x05\xc3\x5a\x01\xff\xd7\xf9\xef\x65\xe9\xd0\xd2\x30\x05\x31\x48\xc3\xa9\x68\x68\x68\x32\x85\x6b\x1e\x83\xb2\x49\xb8\xdf\x5e\x2a\x1f\x0e\x97\xca\xfd\x12\x33\x41\x37\x9f\x50\xa5\xd4\xb8\xfb\x0b\x07\x11\x1f\xe3\x54\x4a\x34\xae\x2f\xb3\xd3\xbf\x1c\x35\x65\x4f\x54\xa5\xa0\xda\x34\xcb\x34\xc3\x18\xda\x0c\xd3\x77\x4c\xe4\xf6\xca\x77\x7b\x14\x65\xa7\x2c\x2e\xa5\x71\x58\x2c\x75\x75\xc8\x6e\xc4\xeb\x41\x88\xd3\x55\xce\xfb\x51\xcd\xf6\x86\xcc\x50\x2e\x79\xe2\xd6\x3a\xfa\x3c\x9a\x0f\xc6\x0f\xc3\x8f\x83\xc9\x8f\xf9\xc3\x97\x8f\x93\x82\x06\x3b\x19\xaa\xb4\x7a\xd1\xfe\x61\x70\x05\xb2\x8c\xfb\x5b\xef\x9b\xce\x5a\x48\xd0\x05\x38\xa9\x53\x50\x1a\x25\x15\x64\xc0\x18\x68\x4d\xe6\x75\x2c\x97\x59\xee\x92\x9b\x51\xad\x9f\x51\xc5\xc1\x21\xfa\x7a\xa2\xac\xab\x7c\x01\x4a\x82\x01\xfd\x0d\x94\x6e\xbe\xd7\xaf\xb7\x11\xd7\x49\xb4\xff\xdf\x8e\x4e\xf7\x19\xe5\xe8\xf6\xc7\x84\x42\x2d\x63\xb0\x2f\x8c\xca\xa1\x96\xf6\x18\x96\x34\x17\x66\x96\x01\x2b\x8f\xd9\x95\x7a\x94\x3d\x52\x99\xb8\x5f\x2d\xba\x9d\x76\x18\x45\xed\x4e\xbb\xf3\xae\xdb\x2f\xd9\x19\xd4\x9a\x33\x18\x36\x8d\xe8\x34\xe0\xa9\x70\x77\x01\x98\x60\x0c\x43\x1e\x2b\xbd\x13\x57\x80\x80\xa4\x0b\xb1\x9f\xf1\x2b\x4a\x6e\x50\x71\xe9\x6a\xbf\x77\x56\x70\x0a\x3e\xc6\x24\xd9\x62\x1b\x27\xb5\xac\x27\x21\x62\x1b\xb8\x07\x6d\xb8\x3c\x5c\x57\xf6\x94\xb7\x20\xa8\x36\x9c\x69\xa0\x8a\x3d\x95\x04\x14\x03\xbb\xd9\x1f\x21\x13\x9c\x51\x5d\xbc\x0d\xd8\x8c\x4b\x3d\x03\xb5\xb6\x89\x2a\xe4\xa8\xdb\x09\xca\x98\x7b\x4c\x29\x77\xec\xab\xb6\x4d\x97\x28\x65\x30\x4e\xb9\xb6\xde\x18\xa2\x34\x0a\x9d\x4f\x27\x34\x05\x9d\x51\x06\x63\xbe\x04\xb6\x61\x02\x5a\x63\x9e\x72\xe3\xaa\xa1\x5a\xb3\x6d\x91\x06\x8c\x61\x2e\x4d\xcb\xba\x9a\x6b\x03\xd2\x7c\x43\x91\xa7\x30\xb6\x76\x6f\xdd\xef\xdc\x60\x50\xd1\x04\x86\x82\x6a\xdd\x7a\x04\x8d\xb9\x62\xf0\x5b\x8e\x86\x16\x45\xa4\xb4\xc9\x20\x7d\x57\xf0\x30\x2a\x9d\x7f\x60\x9e\x51\xad\xa6\x85\xd3\xca\xfa\xff\x76\x29\xa8\x94\x20\x4e\x56\x72\x20\x40\x99\x53\x35\x47\xed\x76\x38\x2c\x38\x95\x4d\x64\x28\x38\xdb\x14\x29\x25\xca\x06\xd3\xfc\x01\x8b\x27\xc4\x95\xdb\xd5\x83\xdc\x3c\xc9\x53\xbe\x79\x5c\x50\x66\x01\x3f\xeb\x80\xd9\xc3\xa7\xf9\xf8\x61\xf8\xe5\xf7\xe9\x8f\xe9\x60\x32\x1a\x9e\x9a\x62\x30\x1d\x69\x57\xfa\x0f\x54\x73\x36\xc8\x63\x6e\x4e\x42\x77\x2b\x1e\x18\xc3\x59\x1d\x94\xa1\x10\x33\x01\x90\x8d\xa4\x01\xb5\x76\x87\x6a\xaf\xd1\xea\xd3\x7c\x21\x38\x1b\x4d\x2b\x07\xc0\xf1\x38\xba\x79\xfd\x37\x00\x00\xff\xff\x5a\xbe\x67\x4a\x9c\x14\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 5276, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
