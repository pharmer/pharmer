// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package digitalocean

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\x51\x6f\xe2\x38\x10\x7e\xef\xaf\xb0\xf2\x4c\x59\x08\x1c\xe2\xfa\xc6\xb6\xbb\x7b\xd5\xb1\x2d\x57\xaa\x3d\x9d\x4e\xab\x95\x71\x86\xd4\x87\xe3\xc9\xd9\x0e\x15\x5b\xf5\xbf\x9f\x6c\x28\x24\x4e\x30\x11\xea\xc3\xbd\xec\x2a\x99\x2f\xfe\x3e\xcf\x7c\x63\x3c\x7d\xb9\x20\x24\x92\x34\x83\xe8\x8a\x44\x09\x4f\xb9\xa1\x02\x19\x50\x19\x75\x6c\x04\xe4\x3a\xba\x22\x7f\x5f\x10\x42\x48\x94\xc0\xda\xbd\x25\x24\xfa\x97\x46\x17\x84\x7c\x77\x18\x05\x29\x47\xa9\xf7\xb8\x17\xf7\x2f\x21\x91\x40\x46\x0d\x47\x69\x97\x9e\x64\xda\x80\x4a\x68\xb6\x5b\x61\xff\x9d\x0d\xd2\x4c\xc7\x87\xf7\x3f\x51\xc2\x61\x35\xf7\xca\x01\x76\x8f\xdf\xdd\xff\xaf\x9d\xf3\xb9\x06\xa7\xb8\x06\xed\xb9\x3e\x52\x99\x52\x81\x0a\x9a\xb8\x16\x42\xf5\x83\x5c\x0e\xd0\x9a\xeb\xb3\xa2\x72\xb5\x2c\x94\x69\xe2\x5a\x2a\x1a\xe6\x72\x80\xd6\x5c\x53\x94\x09\xca\x26\x22\x81\x32\x4c\xe4\x00\xad\x89\xee\xe0\x99\xfc\x85\x6a\xd5\x44\x25\x37\x2c\x4c\xe5\x00\xef\x45\x15\xb6\xa0\x03\xbc\x17\x55\xd8\x81\x0e\xd0\x9a\x6a\x4e\x25\xb1\xce\x60\x5c\x33\x6c\xe2\xd3\x4b\x0c\x67\xd1\x01\xde\x95\x2f\x9c\x4a\x07\x68\xcf\xc7\x65\x4a\xf3\x23\x1d\xa6\xd3\xfc\xc4\xde\x2c\xa0\x35\xd7\x23\x2a\x94\xa6\x71\x57\x06\x4f\xf4\xb2\x03\x54\x99\xf6\x47\x24\x97\xda\x50\xc9\xe0\x71\x93\x43\xc3\x41\xa9\x57\x85\xa5\xe8\xa7\x8b\x03\x43\x02\x9a\x29\x9e\xbf\x29\xab\xc4\x18\x35\x90\xa2\xda\xd8\xc0\x17\x90\xa0\xa8\x20\xb3\x42\xe5\xa8\x4b\x49\x62\xb9\x5d\xb4\x7f\xd8\x0a\xcd\x2a\xcf\x09\xd7\xab\xe8\x8a\x0c\x7a\x8d\x59\xd9\x49\x8a\x03\x92\xe2\x33\x25\xc5\x9e\xa4\xd8\x97\x34\x0c\x4a\x1a\x06\x24\x0d\xdf\x49\xd2\xd0\x97\x34\x0a\x4a\x1a\x07\x24\x8d\xcf\x94\x34\xf4\x24\x8d\x7d\x49\xe3\xa0\xa4\xfe\x28\x64\xa6\xd1\x99\xa2\xc6\xbe\x9b\x46\xbe\xaa\x7e\x38\x53\xd9\x65\x50\x98\x1f\x2e\x4b\xfb\x8d\xa7\x4f\xe4\x2b\x64\xf6\xf1\x44\xf9\xea\xb2\xc2\x2e\x1f\x84\x6c\x3e\x38\xd7\xe7\x7d\x5f\xd6\xa0\xe6\xf4\x41\x7c\x22\x5b\x41\x65\x7e\xb8\x65\xb6\x7c\x67\xd5\x65\xfd\x1a\x6e\xc0\x90\xdd\x87\xe7\xfa\xbd\x54\xb3\x5d\x0f\xd6\x1c\x3f\x0c\x5b\x7e\x14\x3a\x19\x46\x67\x1f\x0d\x3d\x4f\xd7\xa8\x7e\x38\x84\x0f\xac\xec\x32\xa8\xcc\x0f\xb7\xac\xa2\xdf\x8a\x75\x59\x71\xef\x54\x2b\xc6\xa1\x4a\xd6\xe2\x2d\x85\xd5\x0a\xd9\x8f\x6b\x95\x1c\x0c\x7b\xde\x4f\x6c\xd3\xc5\xb8\x73\x78\xae\xdc\x6e\x89\x77\x09\x25\xde\x4d\x91\x78\x77\x2c\xe2\xdd\x49\x9a\x7f\xac\x8f\x65\x29\x8e\xc3\xd5\xf3\xe2\x2d\xb3\x34\xa8\xfd\x0a\xc6\xb5\x02\xfe\xd2\xfb\xff\x65\x69\x7f\xa5\x61\x0a\x12\x90\x86\x53\xd1\x70\xa1\xc9\x15\xae\x79\x02\xca\x26\xe1\x66\x3b\x54\xde\xef\x87\xca\xb7\x2d\xe6\x82\x6e\x3e\xa3\xca\xa8\x71\xf3\x0b\x07\x91\x1c\xe2\x54\x4a\x34\xee\x5e\x66\x97\x7f\x39\x68\xca\x9f\xa8\xca\x40\x75\x69\x9e\x6b\x86\x09\x74\x19\x66\x1f\x98\x28\xec\xc8\x77\x79\x10\x65\x97\x2c\x6f\xa5\xf1\xb3\x44\x6a\xff\x93\xdd\x17\xaf\x7b\x21\x4e\x57\x35\xef\x07\x35\xdb\x09\x99\xa1\x5c\xf2\xd4\xed\xf5\xf6\xcb\xed\xe3\x64\x7a\x7f\xfd\x69\x72\xf7\xe3\xf1\xfe\xf7\x4f\x77\x25\x0d\x76\x31\x54\x99\x3f\x68\xff\x30\xb8\x02\x59\xc5\xfd\xa3\xdf\x2e\x9d\xb5\x90\xa0\x0b\x70\x52\x67\xa0\x34\x4a\x2a\xc8\x84\x31\xd0\x9a\x3c\xd6\xb1\x5c\xe6\x85\x4b\x6e\x4e\xb5\x7e\x46\x95\x44\xfb\xe8\xeb\x91\xb2\xae\x8a\x05\x28\x09\x06\xf4\x37\x50\xba\x79\xae\x5f\x6f\x23\x76\xe1\x75\xbf\x3b\xee\xf6\x8e\x76\x87\x1f\xde\xfe\x39\xa1\x54\xcd\x04\xec\x0b\xa3\x0a\xa8\x25\x3e\x81\x25\x2d\x84\x99\xe7\xc0\x3c\x07\x60\x32\x2f\x16\x12\xdc\xce\xfa\xbd\x6e\x3c\x1c\x76\x7b\xdd\xde\x87\xfe\xa8\xe2\x65\x50\x6b\xce\xa0\x82\xec\x35\xe0\xa8\x70\x03\x00\xdc\x61\x02\xd7\x3c\x51\x7a\xa7\xa7\x04\x01\x49\x17\x02\xae\xb7\x1e\xfb\x8a\x92\x1b\x54\x5c\xba\x82\xbf\xd9\x29\x3a\x06\x9f\x62\x9a\x6e\xb1\x8d\x8b\x5a\xd6\xa3\x10\xb1\x0d\xdc\x80\x36\x5c\xee\x67\x94\x37\xca\x4b\x10\x54\x1b\xce\x34\x50\xc5\x9e\x2a\x02\xca\x81\xdd\xea\x0f\x90\x0b\xce\xa8\x2e\x8f\x00\x36\xc9\x52\xcf\x41\xad\x41\xdd\xce\x4a\x39\xea\xf7\xa2\x2a\xe6\x06\x33\xca\x1d\xfb\xae\xd3\xba\x36\x69\xa2\x92\xc7\x24\xe3\xda\xda\xe2\x1a\xa5\x51\xe8\x2c\x7a\x47\x33\xd0\x39\x65\x30\xe5\x4b\x60\x1b\x26\xa0\x33\xe5\x19\x37\x0f\x54\xa6\xa0\x3a\xf3\x6d\x89\x26\x8c\x61\x21\x4d\xc7\x1a\x9a\x6b\x03\xd2\x7c\x43\x51\x64\x30\xb5\x4e\xef\xdc\xec\x6c\x60\x50\xd1\x14\xae\x05\xd5\xba\xf3\x00\x1a\x0b\xc5\xe0\x8f\x02\x0d\x2d\x8b\xc8\xa8\x15\xe7\xb9\x63\xe4\xaa\x1e\x0f\x2b\x27\x1f\x98\x67\x54\xab\x59\xe9\x9c\x5a\x0a\x2a\x25\x88\xa3\x95\x9c\x08\x50\xe6\x58\xcd\x51\xbb\xb6\x86\x05\xa7\xb2\x89\x07\x05\x67\x9b\x32\x9b\x44\xd9\x60\x9a\x3f\x61\xf1\x84\xb8\x72\xad\x3c\x29\xcc\x93\x3c\xe6\x9b\x87\x05\x65\x16\xf0\xf3\x18\x60\x32\xbb\xd5\xae\xb0\x1f\xa9\xe6\x6c\x52\x24\xdc\x1c\x85\xee\xf6\x33\x31\x86\xb3\x3a\x28\x47\x21\xe6\x02\x20\xbf\x95\x06\xd4\xda\x9d\x93\x83\x46\x23\xcf\x8a\x85\xe0\xcc\x39\xa9\xdc\xd1\x87\x13\xe6\xe2\xf5\xbf\x00\x00\x00\xff\xff\xc8\x9f\x57\x4d\x6f\x14\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 5231, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
