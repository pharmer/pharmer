// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package digitalocean

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\x51\x6f\xdb\x36\x10\x7e\xcf\xaf\x20\xf4\xec\xb8\xb6\xec\x7a\x59\xdf\xdc\xa4\xed\x82\xb9\xa9\x17\x07\x1d\x86\xa1\x28\x68\xea\xac\x70\xa6\x78\x1a\x49\xb9\x70\x83\xfc\xf7\x81\xb4\x63\x4b\x94\x44\x0b\x46\x1e\xf6\xd2\x42\xba\x4f\xfc\x3e\xde\x7d\x47\xf3\xf2\x74\x41\x48\x24\x69\x06\xd1\x3b\x12\x25\x3c\xe5\x86\x0a\x64\x40\x65\xd4\xb3\x11\x90\x9b\xe8\x1d\xf9\xfb\x82\x10\x42\xa2\x04\x36\xee\x2d\x21\xd1\xbf\x34\xba\x20\xe4\x9b\xc3\x28\x48\x39\x4a\x7d\xc0\x3d\xb9\x7f\x09\x89\x04\x32\x6a\x38\x4a\xbb\xf4\x34\xd3\x06\x54\x42\xb3\xfd\x0a\x87\xef\x6c\x90\x66\x3a\x3e\xbe\xff\x89\x12\x8e\xab\xb9\x57\x0e\xb0\x7f\xfc\xe6\xfe\x7f\xee\x9d\xcf\x35\x3a\xc5\x35\xea\xce\xf5\x9e\xca\x94\x0a\x54\xd0\xc4\xb5\x14\x6a\x18\xe4\x72\x80\xce\x5c\x1f\x15\x95\xeb\x55\xa1\x4c\x13\xd7\x4a\xd1\x30\x97\x03\x74\xe6\x9a\xa1\x4c\x50\x36\x11\x09\x94\x61\x22\x07\xe8\x4c\x74\x07\x3f\xc8\x5f\xa8\xd6\x4d\x54\x72\xcb\xc2\x54\x0e\xf0\x5a\x54\x61\x0b\x3a\xc0\x6b\x51\x85\x1d\xe8\x00\x9d\xa9\x16\x54\x12\xeb\x0c\xc6\x35\xc3\x26\x3e\xbd\xc2\x70\x16\x1d\xe0\x55\xf9\xc2\xa9\x74\x80\xee\x7c\x5c\xa6\x34\x6f\xe9\x30\x9d\xe6\x27\xf6\x66\x01\x9d\xb9\x1e\x50\xa1\x34\x8d\xbb\x32\x78\xa2\x97\x1d\xa0\xca\x74\x38\x22\xb9\xd4\x86\x4a\x06\x0f\xdb\x1c\x1a\x0e\x4a\xbd\x2e\x2c\xc5\x30\x5d\x1e\x19\x12\xd0\x4c\xf1\xfc\x45\x59\x25\xc6\xa8\x81\x14\xd5\xd6\x06\x3e\x81\x04\x45\x05\x99\x17\x2a\x47\x5d\x4a\x12\xcb\xed\xa2\xc3\xe3\x56\x68\x56\x79\x4e\xb8\x5e\x47\xef\xc8\x68\xd0\x98\x95\xbd\xa4\x38\x20\x29\x3e\x53\x52\xec\x49\x8a\x7d\x49\xe3\xa0\xa4\x71\x40\xd2\xf8\x95\x24\x8d\x7d\x49\x93\xa0\xa4\xab\x80\xa4\xab\x33\x25\x8d\x3d\x49\x57\xbe\xa4\xab\xa0\xa4\xe1\x24\x64\xa6\xc9\x99\xa2\xae\x7c\x37\x4d\x7c\x55\xc3\x70\xa6\xb2\xcb\xa0\x30\x3f\x5c\x96\xf6\x1b\x4f\x1f\xc9\x67\xc8\xec\xe3\x89\xf2\xd5\x65\x85\x5d\x3e\x0a\xd9\x7c\x74\xae\xcf\x87\xbe\xac\x51\xcd\xe9\xa3\xf8\x44\xb6\x82\xca\xfc\x70\xc7\x6c\xf9\xce\xaa\xcb\xfa\x35\xdc\x80\x21\xbb\x8f\xcf\xf5\x7b\xa9\x66\xfb\x1e\xac\x39\x7e\x1c\xb6\xfc\x24\x74\x32\x4c\xce\x3e\x1a\x06\x9e\xae\x49\xfd\x70\x08\x1f\x58\xd9\x65\x50\x99\x1f\xee\x58\x45\xbf\x15\xeb\xb2\xe2\xc1\xa9\x56\x8c\x43\x95\xac\xc5\x3b\x0a\xab\x15\x72\x18\xd7\x2a\x39\x1a\x0f\xbc\x9f\xd8\xa6\x8b\x71\xef\xf8\x5c\xb9\xdd\x12\xef\x12\x4a\xbc\x9b\x22\xf1\xee\x58\xc4\xbb\x93\x34\xff\x58\xb7\x65\x29\x8e\xc3\xd5\xf3\xe2\x1d\xb3\x34\xaa\xfd\x0a\xc6\xb5\x02\xbe\x1d\xfc\xff\xb2\x74\xb8\xd2\x30\x05\x09\x48\xc3\xa9\x68\xb8\xd0\xe4\x0a\x37\x3c\x01\x65\x93\x70\xb3\x1b\x2a\xbf\x1c\x86\xca\x97\x2d\xe6\x82\x6e\x3f\xa2\xca\xa8\x71\xf3\x0b\x07\x91\x1c\xe3\x54\x4a\x34\xee\x5e\x66\x97\x7f\x3a\x6a\xca\x1f\xa9\xca\x40\xf5\x69\x9e\x6b\x86\x09\xf4\x19\x66\x6f\x98\x28\xec\xc8\x77\x79\x14\x65\x97\x2c\x6f\xa5\xf1\xb3\x44\x6a\xff\x93\xfd\x17\xcf\x07\x21\x4e\x57\x35\xef\x47\x35\xbb\x09\x99\xa1\x5c\xf1\xd4\xed\xf5\xf6\xd3\xed\xc3\x74\xf6\xe5\xfa\xc3\xf4\xee\xfb\xc3\x97\xdf\x3f\xdc\x95\x34\xd8\xc5\x50\x65\xfe\xa0\xfd\xdd\xe0\x1a\x64\x15\xf7\x8f\x7e\xb9\x74\xd6\x42\x82\x2e\xc1\x49\x9d\x83\xd2\x28\xa9\x20\x53\xc6\x40\x6b\xf2\x50\xc7\x72\x99\x17\x2e\xb9\x39\xd5\xfa\x07\xaa\x24\x3a\x44\x9f\x5b\xca\xba\x2e\x96\xa0\x24\x18\xd0\x5f\x41\xe9\xe6\xb9\x7e\xb3\x8b\xd8\x85\x37\xc3\xfe\x2f\xfd\xb7\xad\xdd\xe1\x87\x77\x7f\x4e\x28\x55\x33\x01\xfb\xc2\xa8\x02\x6a\x89\x4f\x60\x45\x0b\x61\x16\x39\x30\xcf\x01\x98\x2c\x8a\xa5\x04\xb7\xb3\xe1\xa0\x1f\x8f\xc7\xfd\x41\x7f\xf0\x66\x38\xa9\x78\x19\xd4\x86\x33\xa8\x20\x07\x0d\x38\x2a\xdc\x00\x00\x77\x98\xc0\x35\x4f\x94\xde\xeb\x29\x41\x40\xd2\xa5\x80\xeb\x9d\xc7\x3e\xa3\xe4\x06\x15\x97\xae\xe0\x2f\x76\x8a\xda\xe0\x33\x4c\xd3\x1d\xb6\x71\x51\xcb\xda\x0a\x11\xbb\xc0\x0d\x68\xc3\xe5\x61\x46\x79\xa1\xbc\x04\x41\xb5\xe1\x4c\x03\x55\xec\xb1\x22\xa0\x1c\xd8\xaf\x7e\x0f\xb9\xe0\x8c\xea\xf2\x08\x60\x93\x2c\xf5\x02\xd4\x06\xd4\xed\xbc\x94\xa3\xe1\x20\xaa\x62\x6e\x30\xa3\xdc\xb1\xef\x3b\xad\x6f\x93\x26\x2a\x79\x4c\x32\xae\xad\x2d\xae\x51\x1a\x85\xce\xa2\x77\x34\x03\x9d\x53\x06\x33\xbe\x02\xb6\x65\x02\x7a\x33\x9e\x71\x73\x4f\x65\x0a\xaa\xb7\xd8\x95\x68\xca\x18\x16\xd2\xf4\xac\xa1\xb9\x36\x20\xcd\x57\x14\x45\x06\x33\xeb\xf4\xde\xcd\xde\x06\x06\x15\x4d\xe1\x5a\x50\xad\x7b\xf7\xa0\xb1\x50\x0c\xfe\x28\xd0\xd0\xb2\x88\x8c\x5a\x71\x9e\x3b\x26\xae\xea\xf1\xb8\x72\xf2\x81\xf9\x81\x6a\x3d\x2f\x9d\x53\x2b\x41\xa5\x04\xd1\x5a\xc9\xa9\x00\x65\xda\x6a\x8e\xda\xb5\x35\x2c\x39\x95\x4d\x3c\x28\x38\xdb\x96\xd9\x24\xca\x06\xd3\xfc\x09\xcb\x47\xc4\xb5\x6b\xe5\x69\x61\x1e\x65\x9b\x6f\xee\x97\x94\x59\xc0\xcf\x36\xc0\x74\x7e\xab\x5d\x61\xdf\x53\xcd\xd9\xb4\x48\xb8\x69\x85\xee\xf7\x33\x35\x86\xb3\x3a\x28\x47\x21\x16\x02\x20\xbf\x95\x06\xd4\xc6\x9d\x93\xa3\x46\x23\xcf\x8b\xa5\xe0\xcc\x39\xa9\xdc\xd1\xc7\x13\xe6\xe2\xf9\xbf\x00\x00\x00\xff\xff\x11\xd5\x76\x22\x6f\x14\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 5231, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
