// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package digitalocean

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x98\x6f\x6f\xda\x3e\x10\xc7\x9f\xf3\x2a\xac\x3c\x6e\xf9\x91\x3f\x3f\xc4\xfa\x8c\x6d\x6d\x57\xad\x6b\x2b\x0d\x4d\x9a\xa6\xaa\x32\xce\x91\x7a\x24\x76\x6a\x07\x2a\x56\xf1\xde\x27\x1b\x4a\x82\x13\x8e\x28\xe2\xc1\x9e\xb4\x8a\xef\xe2\xef\xc7\x77\x67\xe7\xcc\x5b\x8f\x10\x4f\xd0\x0c\xbc\x0b\xe2\xc5\x3c\xe1\x05\x4d\x25\x03\x2a\xbc\x33\x63\x01\xb1\xf4\x2e\xc8\xaf\x1e\x21\x84\x78\x31\x2c\xed\x28\x21\xde\x0b\xf5\x7a\x84\x3c\x5a\x1f\x05\x09\x97\x42\xef\xfc\xde\xec\x5f\x42\xbc\x54\x32\x5a\x70\x29\xcc\xd4\xe3\x4c\x17\xa0\x62\x9a\x6d\x67\xd8\xbd\x67\x8c\x34\xd3\x41\x39\xfe\x47\x0a\x28\x67\xb3\x43\xd6\x61\xfb\xf8\x68\xff\xaf\xcf\xba\x6b\x85\xc7\xb4\xc2\xf6\x5a\x1f\xa9\x48\x68\x2a\x15\x34\x69\x4d\x53\xe5\xa3\x5a\xd6\xa1\xb5\xd6\x95\xa2\x62\x3e\x5b\xa8\xa2\x49\x6b\xa6\x28\xae\x65\x1d\x5a\x6b\xdd\x4a\x11\x4b\xd1\x24\x94\x4a\x81\x0b\x59\x87\xd6\x42\x77\xf0\x4a\x7e\x4a\x35\x6f\x92\x12\x2b\x86\x4b\x59\x87\x53\x49\xe1\x25\x68\x1d\x4e\x25\x85\x57\xa0\x75\x68\x2d\xf5\x9d\x0a\x62\x2a\x83\x71\xcd\x64\x93\x9e\x9e\x49\x3c\x8a\xd6\xe1\xa4\x7a\x78\x28\xad\x43\x7b\x3d\x2e\x12\x9a\x1f\xd8\x61\x3a\xc9\x8f\xac\xcd\x38\xb4\xd6\x9a\x48\x25\x45\xd1\xb8\xaa\x42\x1e\xd9\xcb\xd6\x61\x5f\x69\x77\x44\x72\xa1\x0b\x2a\x18\x4c\x56\x39\x34\x1c\x94\x7a\xbe\x30\x12\x7e\x32\x2d\x15\x62\xd0\x4c\xf1\xfc\x9d\x6c\xcf\xc6\x68\x01\x89\x54\x2b\x63\xb8\x06\x01\x8a\xa6\xe4\x61\xa1\x72\xa9\x2b\x41\x62\xb9\x99\xd4\x2f\x97\x42\xb3\xbd\xe7\x98\xeb\xb9\x77\x41\xc2\x41\x63\x54\xb6\x48\x01\x82\x14\x74\x44\x0a\x1c\xa4\xc0\x45\x8a\x50\xa4\x08\x41\x8a\x4e\x84\x14\xb9\x48\x43\x14\x69\x84\x20\x8d\x3a\x22\x45\x0e\xd2\xc8\x45\x1a\xa1\x48\xfe\x10\x2b\xa6\x61\x47\xa8\x91\x5b\x4d\x43\x97\xca\xc7\x23\x95\x9d\xa3\x60\xae\xb9\x8a\xf6\x85\x27\xcf\xe4\x1b\x64\xe6\xf1\x48\xfa\xea\x58\x78\x95\x87\x58\x99\x87\x5d\xeb\xdc\x77\xb1\xc2\x5a\xa5\x87\xc1\x91\x68\xa1\x64\xae\xb9\x65\xb4\xdc\xca\xaa\x63\x7d\xc0\x37\x20\x56\xee\x51\xd7\x7a\xaf\xe4\x6c\xbb\x07\x6b\x15\x1f\xe1\x25\x3f\xc4\x4e\x86\x61\xe7\xa3\x61\xe0\x70\x0d\xeb\x87\x03\x7e\x60\x65\xe7\x28\x99\x6b\x6e\x99\x45\x77\x2b\xd6\xb1\x82\xc1\xb1\xad\x18\x60\x99\xac\xd9\x5b\x82\xd5\x12\xe9\x07\xb5\x4c\x86\xd1\xc0\xf9\xc4\x36\x35\xc6\x67\xe5\xf3\x5e\x77\x4b\x9c\x26\x94\x38\x9d\x22\x71\x7a\x2c\xe2\xf4\x24\xcd\x1f\xeb\x43\x51\x0a\x02\x3c\x7b\x8e\xbd\x65\x94\xc2\xda\x57\x30\xa8\x25\xf0\xff\xc1\xbf\x17\xa5\x5d\x4b\xc3\x14\xc4\x20\x0a\x4e\xd3\x86\x86\x26\x57\x72\xc9\x63\x50\x26\x08\x9f\x37\x97\xca\xfb\xdd\xa5\xf2\x7d\x89\x79\x4a\x57\x57\x52\x65\xb4\xb0\xf7\x17\x0e\x69\x5c\xda\xa9\x10\xb2\xb0\x7d\x99\x99\xfe\xad\x64\xca\x9f\xa9\xca\x40\xf5\x69\x9e\x6b\x26\x63\xe8\x33\x99\xfd\xc7\xd2\x85\xb9\xf2\x9d\x97\x50\x66\xca\xea\x52\x1a\x5f\x8b\x85\x76\x5f\xd9\xbe\xb1\xde\x81\x58\xae\xfd\xb8\x97\x34\x9b\x1b\x32\x93\x62\xc6\x13\xbb\xd6\x9b\xeb\x9b\xc9\xf8\xf6\xfe\xd3\xe5\xf8\xee\x69\x72\xff\xf5\xf2\xae\xc2\x60\x26\x93\x2a\x73\x2f\xda\x4f\x85\x9c\x83\xd8\xf7\xfb\xad\xdf\x9b\xce\x9a\x29\xa5\x53\xb0\xa8\x0f\xa0\xb4\x14\x34\x25\x63\xc6\x40\x6b\x32\xa9\xfb\x72\x91\x2f\x6c\x70\x73\xaa\xf5\xab\x54\xb1\xb7\xb3\xae\x0f\xa4\x75\xbe\x98\x82\x12\x50\x80\xfe\x01\x4a\x37\xdf\xeb\x97\x1b\x8b\x99\x78\xe9\xf7\x47\xfd\xc1\xc1\xdd\xe1\x9a\x37\x3f\x27\x54\xb2\x19\x83\x19\x28\xd4\x02\x2a\xb9\x7a\xa1\xf5\xb1\x5c\xc9\x78\x3b\xda\xab\xae\xc0\x92\xf7\xd6\x7f\x03\x00\x00\xff\xff\xfe\xf4\x6d\x9d\xc7\x10\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 4295, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
