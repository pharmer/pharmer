// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package digitalocean

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\x41\x6f\xdb\x38\x13\xbd\xe7\x57\x10\x3a\x3b\xae\x2d\xeb\xf3\x97\xed\xcd\x4d\xda\x6e\xb0\x6e\xea\x8d\x83\x2e\x16\x8b\xa2\xa0\xa9\xb1\xc2\x35\xc5\xd1\x92\x94\x03\x37\xc8\x7f\x5f\x90\x76\x6c\x89\x92\x69\xc1\xc8\x61\x2f\x2d\xa4\x79\xe2\x7b\x9c\x79\x1c\x0f\xf3\x7c\x41\x48\x24\x69\x0e\xd1\x7b\x12\xa5\x3c\xe3\x86\x0a\x64\x40\x65\xd4\xb3\x11\x90\xeb\xe8\x3d\xf9\xeb\x82\x10\x42\xa2\x14\xd6\xee\x2d\x21\xd1\x3f\x34\xba\x20\xe4\xbb\xc3\x28\xc8\x38\x4a\xbd\xc7\x3d\xbb\x7f\x09\x89\x04\x32\x6a\x38\x4a\xbb\xf4\x24\xd7\x06\x54\x4a\xf3\xdd\x0a\xfb\xef\x6c\x90\xe6\x3a\x3e\xbc\xff\x89\x12\x0e\xab\xb9\x57\x0e\xb0\x7b\xfc\xee\xfe\x7f\xe9\x9d\xcf\x35\x3a\xc5\x35\xea\xce\xf5\x81\xca\x8c\x0a\x54\xd0\xc6\xb5\x10\x6a\x18\xe4\x72\x80\xce\x5c\x9f\x14\x95\xab\x65\xa9\x4c\x1b\xd7\x52\xd1\x30\x97\x03\x74\xe6\x9a\xa2\x4c\x51\xb6\x11\x09\x94\x61\x22\x07\xe8\x4c\x74\x07\x4f\xe4\x4f\x54\xab\x36\x2a\xb9\x61\x61\x2a\x07\x78\x2b\xaa\xb0\x05\x1d\xe0\xad\xa8\xc2\x0e\x74\x80\xce\x54\x73\x2a\x89\x75\x06\xe3\x9a\x61\x1b\x9f\x5e\x62\x38\x8b\x0e\xf0\xa6\x7c\xe1\x54\x3a\x40\x77\x3e\x2e\x33\x5a\x1c\x39\x61\x3a\x2b\x4e\xec\xcd\x02\x3a\x73\x3d\xa0\x42\x69\x5a\x77\x65\xf0\xc4\x59\x76\x80\x3a\xd3\xbe\x45\x72\xa9\x0d\x95\x0c\x1e\x36\x05\xb4\x34\x4a\xbd\x2a\x2d\xc5\x30\x5b\x1c\x18\x52\xd0\x4c\xf1\xe2\x55\x59\x2d\xc6\xa8\x81\x0c\xd5\xc6\x06\x3e\x83\x04\x45\x05\x99\x95\xaa\x40\x5d\x49\x12\x2b\xec\xa2\xc3\xc3\x56\x68\x5e\x7b\x4e\xb9\x5e\x45\xef\xc9\x68\xd0\x9a\x95\x9d\xa4\x38\x20\x29\x3e\x53\x52\xec\x49\x8a\x7d\x49\x49\x50\x52\x12\x90\x94\xbc\x91\xa4\xc4\x97\x34\x0e\x4a\xba\x0a\x48\xba\x3a\x53\x52\xe2\x49\xba\xf2\x25\x5d\x05\x25\x0d\xc7\x21\x33\x8d\xcf\x14\x75\xe5\xbb\x69\xec\xab\x1a\x86\x33\x95\x5f\x06\x85\xf9\xe1\xaa\xb4\x5f\x79\xf6\x48\xbe\x40\x6e\x1f\x4f\x94\xaf\x29\x2b\xec\xf2\x51\xc8\xe6\xa3\x73\x7d\x3e\xf4\x65\x8d\x1a\x4e\x1f\xc5\x27\xb2\x15\x54\xe6\x87\x3b\x66\xcb\x77\x56\x53\xd6\x2f\xe1\x03\x18\xb2\x7b\x72\xae\xdf\x2b\x35\xdb\x9d\xc1\x86\xe3\x93\xb0\xe5\xc7\xa1\xce\x30\x3e\xbb\x35\x0c\x3c\x5d\xe3\x66\x73\x08\x37\xac\xfc\x32\xa8\xcc\x0f\x77\xac\xa2\x7f\x14\x9b\xb2\xe2\xc1\xa9\xa3\x18\x87\x2a\xd9\x88\x77\x14\xd6\x28\xe4\x30\x6e\x54\x72\x94\x0c\xbc\x9f\xd8\xb6\xc1\xb8\x77\x78\xae\x4d\xb7\xc4\x1b\x42\x89\x37\x29\x12\x6f\xc6\x22\xde\x4c\xd2\xfe\x63\x7d\x2c\x4b\x71\x1c\xae\x9e\x17\xef\x98\xa5\x51\xe3\x57\x30\x6e\x14\xf0\x7f\x83\xff\x5e\x96\xf6\x23\x0d\x53\x90\x82\x34\x9c\x8a\x96\x81\xa6\x50\xb8\xe6\x29\x28\x9b\x84\x9b\xed\xa5\xf2\xeb\xfe\x52\xf9\xba\xc5\x42\xd0\xcd\x27\x54\x39\x35\xee\xfe\xc2\x41\xa4\x87\x38\x95\x12\x8d\x9b\xcb\xec\xf2\xcf\x07\x4d\xc5\x23\x55\x39\xa8\x3e\x2d\x0a\xcd\x30\x85\x3e\xc3\xfc\x1d\x13\xa5\xbd\xf2\x5d\x1e\x44\xd9\x25\xab\x5b\x69\xfd\x2c\x95\xda\xff\x64\xf7\xc5\xcb\x5e\x88\xd3\x55\xcf\xfb\x41\xcd\xf6\x86\xcc\x50\x2e\x79\xe6\xf6\x7a\xfb\xf9\xf6\x61\x32\xfd\x7a\xfd\x71\x72\xf7\xe3\xe1\xeb\x6f\x1f\xef\x2a\x1a\xec\x62\xa8\x72\xff\xa2\xfd\xc3\xe0\x0a\x64\x1d\xf7\xb7\x7e\x1d\x3a\x1b\x21\x41\x17\xe0\xa4\xce\x40\x69\x94\x54\x90\x09\x63\xa0\x35\x79\x68\x62\xb9\x2c\x4a\x97\xdc\x82\x6a\xfd\x84\x2a\x8d\xf6\xd1\x97\x23\x65\x5d\x95\x0b\x50\x12\x0c\xe8\x6f\xa0\x74\xfb\xbd\x7e\xbd\x8d\xb8\x49\xa2\xff\xff\x7e\x72\x7c\xce\xa8\x47\xb7\x7f\x4c\xa8\xd4\x32\x05\xfb\xc2\xa8\x12\x1a\x69\x4f\x61\x49\x4b\x61\xe6\x05\x30\xaf\xfe\x98\xce\xcb\x85\x04\xb7\xaf\xe1\xa0\x1f\x27\x49\x7f\xd0\x1f\xbc\x1b\x8e\x6b\x4e\x06\xb5\xe6\x0c\x6a\xc8\x41\x0b\x8e\x0a\x37\xfe\xc3\x1d\xa6\x70\xcd\x53\xa5\x77\x7a\x2a\x10\x90\x74\x21\xe0\x7a\xeb\xb0\x2f\x28\xb9\x41\xc5\xa5\x2b\xf7\xab\x99\xa2\x63\xf0\x29\x66\xd9\x16\xdb\xba\xa8\x65\x3d\x0a\x11\xdb\xc0\x0d\x68\xc3\xe5\xfe\x86\xf2\x4a\x79\x09\x82\x6a\xc3\x99\x06\xaa\xd8\x63\x4d\x40\x35\xb0\x5b\xfd\x1e\x0a\xc1\x19\xd5\xd5\x0b\x80\x4d\xb2\xd4\x73\x50\x6b\x50\xb7\xb3\x4a\x8e\x86\x83\xa8\x8e\xb9\xc1\x9c\x72\xc7\xbe\x3b\x67\x7d\x9b\x34\x51\xcb\x63\x9a\x73\x6d\x4d\x71\x8d\xd2\x28\x74\x06\xbd\xa3\x39\xe8\x82\x32\x98\xf2\x25\xb0\x0d\x13\xd0\x9b\xf2\x9c\x9b\x7b\x2a\x33\x50\xbd\xf9\xb6\x44\x13\xc6\xb0\x94\xa6\x67\xed\xcc\xb5\x01\x69\xbe\xa1\x28\x73\x98\x5a\x9f\xf7\x6e\x76\x36\x30\xa8\x68\x06\xd7\x82\x6a\xdd\xbb\x07\x8d\xa5\x62\xf0\x7b\x89\x86\x56\x45\xe4\xd4\x8a\xf3\xdc\x31\x76\x55\x8f\x93\x5a\xdf\x03\xf3\x84\x6a\x35\xab\x74\xa9\xa5\xa0\x52\x82\x38\x5a\xc9\x89\x00\x65\x8e\xd5\x1c\xb5\x3b\xd4\xb0\xe0\x54\xb6\xf1\xa0\xe0\x6c\x53\x65\x93\x28\x5b\x4c\xf3\x07\x2c\x1e\x11\x57\xee\x20\x4f\x4a\xf3\x28\x8f\xf9\xe6\x7e\x41\x99\x05\xfc\x3c\x06\x98\xcc\x6e\xb5\x2b\xec\x07\xaa\x39\x9b\x94\x29\x37\x47\xa1\xbb\xfd\x4c\x8c\xe1\xac\x09\x2a\x50\x88\xb9\x00\x28\x6e\xa5\x01\xb5\x76\x5d\x72\xd4\x6a\xe4\x59\xb9\x10\x9c\x39\x27\x55\x4f\xf4\xa1\xbf\x5c\xbc\xfc\x1b\x00\x00\xff\xff\xe8\x43\x73\x2f\x6d\x14\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 5229, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
