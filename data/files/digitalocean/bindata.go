// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package digitalocean

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x98\x51\x6f\xda\x3a\x14\xc7\xdf\xf9\x14\x56\x9e\x5b\x2e\x24\xb9\x5c\x6e\xdf\xd8\xd6\x76\xd5\xba\xb6\xd2\x78\x99\xa6\xaa\x32\xce\x21\xf5\x48\xec\xcc\x36\x54\xac\xe2\xbb\x4f\x36\x94\x80\x9d\x1e\x22\xc4\xc3\x5e\x8a\x92\x73\xec\xff\xcf\xe7\x1c\x3b\xc7\x7d\xed\x10\x12\x09\x5a\x42\x74\x41\xa2\x8c\xe7\xdc\xd0\x42\x32\xa0\x22\x3a\xb3\x16\x10\x8b\xe8\x82\xfc\xe8\x10\x42\x48\x94\xc1\xc2\xbd\x25\x24\xfa\x45\xa3\x0e\x21\x8f\xce\x47\x41\xce\xa5\xd0\x5b\xbf\x57\xf7\x97\x90\xa8\x90\x8c\x1a\x2e\x85\x9d\x7a\x54\x6a\x03\x2a\xa3\xe5\x66\x86\xed\x38\x6b\xa4\xa5\x8e\xeb\xf7\xbf\xa5\x80\x7a\x36\xf7\xca\x39\x6c\x1e\x1f\xdd\xef\xea\xec\x78\xad\xe4\x90\x56\xd2\x5e\xeb\x03\x15\x39\x2d\xa4\x82\x26\xad\x49\xa1\xfa\xa8\x96\x73\x68\xad\x75\xa5\xa8\x98\x4d\xe7\xca\x34\x69\x4d\x15\xc5\xb5\x9c\x43\x6b\xad\x5b\x29\x32\x29\x9a\x84\x0a\x29\x70\x21\xe7\xd0\x5a\xe8\x0e\x5e\xc8\x77\xa9\x66\x4d\x52\x62\xc9\x70\x29\xe7\x70\x2a\x29\xbc\x04\x9d\xc3\xa9\xa4\xf0\x0a\x74\x0e\xad\xa5\xbe\x51\x41\x6c\x65\x30\xae\x99\x6c\xd2\xd3\x53\x89\x47\xd1\x39\x9c\x54\x0f\x0f\xa5\x73\x68\xaf\xc7\x45\x4e\xab\x77\x76\x98\xce\xab\x03\x6b\xb3\x0e\xad\xb5\xc6\x52\x49\x61\x1a\x57\x65\xe4\x81\xbd\xec\x1c\xf6\x95\xb6\x47\x24\x17\xda\x50\xc1\x60\xbc\xac\xa0\xe1\xa0\xd4\xb3\xb9\x95\xe8\xe7\x93\x5a\x21\x03\xcd\x14\xaf\xde\xc8\xf6\x6c\x8c\x1a\xc8\xa5\x5a\x5a\xc3\x35\x08\x50\xb4\x20\x0f\x73\x55\x49\xbd\x13\x24\x56\xd9\x49\xfb\xf5\x52\x68\xb9\xf7\x9c\x71\x3d\x8b\x2e\x48\xd2\x6b\x8c\xca\x06\x29\x46\x90\xe2\x23\x91\x62\x0f\x29\xf6\x91\x52\x14\x29\x45\x90\xd2\x13\x21\xa5\x3e\xd2\x00\x45\x1a\x22\x48\xc3\x23\x91\x52\x0f\x69\xe8\x23\x0d\x51\xa4\xfe\x00\x2b\xa6\xc1\x91\x50\x43\xbf\x9a\x06\x3e\x55\x1f\x8f\x54\x79\x8e\x82\xf9\xe6\x5d\xb4\xcf\x3c\x7f\x26\x5f\xa1\xb4\x8f\x07\xd2\x17\x62\xe1\x55\x9e\x60\x65\x9e\x1c\x5b\xe7\x7d\x1f\x2b\x09\x2a\x3d\x89\x0f\x44\x0b\x25\xf3\xcd\x2d\xa3\xe5\x57\x56\x88\xf5\x3f\xbe\x01\xb1\x72\x4f\x8f\xad\xf7\x9d\x9c\x6d\xf6\x60\x50\xf1\x29\x5e\xf2\x03\xec\x64\x18\x1c\x7d\x34\xf4\x3c\xae\x41\x78\x38\xe0\x07\x56\x79\x8e\x92\xf9\xe6\x96\x59\xf4\xb7\x62\x88\x15\xf7\x0e\x6d\xc5\x18\xcb\x64\x60\x6f\x09\x16\x24\xb2\x1f\x07\x99\x4c\xd2\x9e\xf7\x89\x6d\x6a\x8c\xcf\xea\xe7\xbd\xee\x96\x78\x4d\x28\xf1\x3a\x45\xe2\xf5\x58\xc4\xeb\x49\x9a\x3f\xd6\xef\x45\x29\x8e\xf1\xec\x79\xf6\x96\x51\x4a\x82\xaf\x60\x1c\x24\xf0\xdf\xde\xdf\x17\xa5\x6d\x4b\xc3\x14\x64\x20\x0c\xa7\x45\x43\x43\x53\x29\xb9\xe0\x19\x28\x1b\x84\x4f\xeb\x4b\xe5\xfd\xf6\x52\xf9\xb6\xc4\xaa\xa0\xcb\x2b\xa9\x4a\x6a\xdc\xfd\x85\x43\x91\xd5\x76\x2a\x84\x34\xae\x2f\xb3\xd3\xbf\xd6\x4c\xd5\x33\x55\x25\xa8\x2e\xad\x2a\xcd\x64\x06\x5d\x26\xcb\x7f\x58\x31\xb7\x57\xbe\xf3\x1a\xca\x4e\xb9\xbb\x94\xc6\x61\x99\xd0\xfe\x90\xcd\x88\xd5\x16\xc4\x71\xed\xc7\xbd\xa6\x59\xdf\x90\x99\x14\x53\x9e\xbb\xb5\xde\x5c\xdf\x8c\x47\xb7\xf7\x1f\x2f\x47\x77\x4f\xe3\xfb\x2f\x97\x77\x3b\x0c\x76\x32\xa9\x4a\xff\xa2\xfd\x64\xe4\x0c\xc4\xbe\xdf\x4f\xfd\xd6\x74\x06\xa6\x82\x4e\xc0\xa1\x3e\x80\xd2\x52\xd0\x82\x8c\x18\x03\xad\xc9\x38\xf4\xe5\xa2\x9a\xbb\xe0\x56\x54\xeb\x17\xa9\xb2\x68\x6b\x5d\xbd\x93\xd6\xd9\x7c\x02\x4a\x80\x81\x3a\xec\xd1\x02\x94\xf6\x8a\x6f\x27\x21\x1b\xab\xeb\x2b\xba\xff\x75\xd3\xdd\xa8\xfb\x7d\x87\x6f\x5f\xff\x7b\x61\x2f\x9e\x19\xd8\x57\x46\xcd\x21\x60\x5d\xff\x5a\xe2\x55\x67\xf5\x27\x00\x00\xff\xff\x92\x33\x04\xdf\xb9\x10\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 4281, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
