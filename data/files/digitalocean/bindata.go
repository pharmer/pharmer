// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package digitalocean

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\xdd\x6e\xe3\x36\x13\xbd\xcf\x53\x10\xba\x76\xbc\xb6\xac\xcf\x5f\x9a\x3b\x6f\xb2\xbb\x35\xea\x4d\xdc\x24\xd8\xa2\x28\x16\x8b\x31\x35\x56\x58\x53\x1c\x95\xa4\x1c\x78\x83\xbc\x7b\x21\xfa\x4f\x7f\xa6\x0d\x23\x17\xbd\x49\x20\xcd\x21\xcf\xe1\xcc\x21\x35\xf4\xeb\x05\x63\x81\x82\x14\x83\x6b\x16\xc4\x22\x11\x16\x24\x71\x04\x15\x74\x8a\x08\xaa\x65\x70\xcd\xfe\xba\x60\x8c\xb1\x20\xc6\xa5\x7b\xcb\x58\xf0\x0f\x04\x17\x8c\x7d\x77\x18\x8d\x89\x20\x65\x76\xb8\x57\xf7\x97\xb1\x40\x12\x07\x2b\x48\x15\x53\x8f\x52\x63\x51\xc7\x90\x6e\x66\xd8\x8d\x2b\x82\x90\x9a\x70\xff\xfe\x27\x29\xdc\xcf\xe6\x5e\x39\xc0\xe6\xf1\xbb\xfb\xff\xd6\x39\x9f\x6b\x70\x8c\x6b\x70\x3a\xd7\x47\x50\x09\x48\xd2\xd8\xc6\x35\x93\xba\xef\xe5\x72\x80\x93\xb9\x3e\x6b\x50\x8b\x79\xae\x6d\x1b\xd7\x5c\x83\x9f\xcb\x01\x4e\xe6\x9a\x90\x8a\x49\xb5\x11\x49\x52\x7e\x22\x07\x38\x99\xe8\x0e\x5f\xd8\x9f\xa4\x17\x6d\x54\x6a\xc5\xfd\x54\x0e\xf0\x5e\x54\x7e\x0b\x3a\xc0\x7b\x51\xf9\x1d\xe8\x00\x27\x53\x3d\x82\x62\x85\x33\xb8\x30\x9c\xda\xf8\xcc\x9c\xfc\x59\x74\x80\x77\xe5\xf3\xa7\xd2\x01\x4e\xe7\x13\x2a\x81\xec\xc0\x0e\x33\x49\x76\x64\x6d\x05\xe0\x64\xae\x27\xd2\xa4\x6c\xeb\xaa\x2c\x1d\xd9\xcb\x0e\x50\x65\xda\x1d\x91\x42\x19\x0b\x8a\xe3\xd3\x2a\xc3\x96\x83\xd2\x2c\xf2\x82\xa2\x9f\xcc\xf6\x0c\x31\x1a\xae\x45\xb6\x55\x56\x89\x71\xb0\x98\x90\x5e\x15\x81\x2f\xa8\x50\x83\x64\xd3\x5c\x67\x64\x4a\x49\xe2\x59\x31\x69\x7f\xbf\x14\x48\x2b\xcf\xb1\x30\x8b\xe0\x9a\x0d\x7a\xad\x59\xd9\x48\x0a\x3d\x92\xc2\x33\x25\x85\x35\x49\x61\x5d\x52\xe4\x95\x14\x79\x24\x45\xef\x24\x29\xaa\x4b\x1a\x7a\x25\x5d\x79\x24\x5d\x9d\x29\x29\xaa\x49\xba\xaa\x4b\xba\xf2\x4a\xea\x0f\x7d\x66\x1a\x9e\x29\xea\xaa\xee\xa6\x61\x5d\x55\xdf\x9f\xa9\xf4\xd2\x2b\xac\x1e\x2e\x4b\xfb\x55\x24\xcf\xec\x2b\xa6\xc5\xe3\x91\xf2\x35\x65\xf9\x5d\x3e\xf0\xd9\x7c\x70\xae\xcf\xfb\x75\x59\x83\x86\xd3\x07\xe1\x91\x6c\x79\x95\xd5\xc3\x27\x66\xab\xee\xac\xa6\xac\x5f\xfc\x1b\xd0\x67\xf7\xe8\x5c\xbf\x97\x6a\xb6\xd9\x83\x0d\xc7\x47\x7e\xcb\x0f\x7d\x27\xc3\xf0\xec\xa3\xa1\x57\xd3\x35\x6c\x1e\x0e\xfe\x03\x2b\xbd\xf4\x2a\xab\x87\x4f\xac\x62\x7d\x2b\x36\x65\x85\xbd\x63\x5b\x31\xf4\x55\xb2\x11\x3f\x51\x58\xa3\x90\xfd\xb0\x51\xc9\x41\xd4\xab\x7d\x62\xdb\x1a\xe3\xce\xfe\xb9\xd2\xdd\xb2\x5a\x13\xca\x6a\x9d\x22\xab\xf5\x58\xac\xd6\x93\xb4\x7f\xac\x0f\x65\x29\x0c\xfd\xd5\xab\xc5\x4f\xcc\xd2\xa0\xf1\x15\x0c\x1b\x05\xfc\x5f\xef\xbf\x97\xa5\x5d\x4b\xc3\x35\xc6\xa8\xac\x00\xd9\xd2\xd0\x64\x9a\x96\x22\x46\x5d\x24\xe1\x76\x7d\xa9\xbc\xdf\x5d\x2a\xb7\x4b\xcc\x24\xac\x3e\x93\x4e\xc1\xba\xfb\x8b\x40\x19\xef\xe3\xa0\x14\x59\xd7\x97\x15\xd3\xbf\xee\x35\x65\xcf\xa0\x53\xd4\x5d\xc8\x32\xc3\x29\xc6\x2e\xa7\xf4\x03\x97\x79\x71\xe5\xbb\xdc\x8b\x2a\xa6\x2c\x2f\xa5\x75\x58\xac\x4c\x7d\xc8\x66\xc4\xdb\x4e\x88\xd3\x55\xcd\xfb\x5e\xcd\xfa\x86\xcc\x49\xcd\x45\xe2\xd6\x3a\xfe\x32\x7e\x1a\x4d\xee\x6f\x3e\x8d\xee\x7e\x3c\xdd\xff\xf6\xe9\xae\xa4\xa1\x98\x8c\x74\x5a\xbf\x68\xff\xb0\xb4\x40\x55\xc5\xfd\x6d\xb6\x4d\x67\x23\x24\x61\x86\x4e\xea\x14\xb5\x21\x05\x92\x8d\x38\x47\x63\xd8\x53\x13\x2b\x54\x96\xbb\xe4\x66\x60\xcc\x0b\xe9\x38\xd8\x45\xdf\x0e\x94\x75\x91\xcf\x50\x2b\xb4\x68\xbe\xa1\x36\xed\xf7\xfa\xe5\x3a\xe2\x3a\x89\xee\xff\xbb\xd1\xe1\x3e\xa3\x1a\x5d\xff\x98\x50\xaa\x65\x8c\xc5\x0b\xab\x73\x6c\xa4\x3d\xc6\x39\xe4\xd2\x3e\x66\xc8\xab\x63\x36\xa5\x1e\x67\x0f\xa0\x12\xf7\xab\x45\xbf\xd7\x0d\xa3\xa8\xdb\xeb\xf6\x3e\xf4\x87\x15\x3b\xa3\x5e\x0a\x8e\x37\x6d\x23\x7a\x2d\x78\x90\xee\x2e\x80\x77\x14\xe3\x8d\x88\xb5\xd9\x88\x2b\x41\x50\xc1\x4c\x6e\x67\xfc\x4a\x4a\x58\xd2\x42\xb9\xda\x6f\x9d\x15\x1c\x82\x4f\x28\x49\xd6\xd8\xd6\x49\x0b\xd6\x83\x10\xb9\x0e\xdc\xa2\xb1\x42\xed\xae\x2b\x5b\xca\x4b\x94\x60\xac\xe0\x06\x41\xf3\xe7\x8a\x80\x72\x60\x33\xfb\x03\x66\x52\x70\x30\xe5\xdb\x40\x91\x71\x65\x1e\x51\x2f\x51\x8f\xa7\xa5\x1c\xf5\x7b\x41\x15\x73\x4b\x29\x08\xc7\xbe\xa9\x44\xb7\x48\x9a\xac\xe4\x31\x4e\x85\x29\x1c\x72\x43\xca\x6a\x72\x6e\xbd\x83\x14\x4d\x06\x1c\x27\x62\x8e\x7c\xc5\x25\x76\x26\x22\x15\xd6\xd5\x44\x77\x1e\xd7\xa5\x1a\x71\x4e\xb9\xb2\x9d\xc2\xdb\xc2\x58\x54\xf6\x1b\xc9\x3c\xc5\x49\x61\xfa\xce\xed\xc6\x13\x96\x34\x24\x78\x23\xc1\x98\xce\x03\x1a\xca\x35\xc7\xdf\x73\xb2\x50\x16\x91\x42\x9b\x4d\x86\xae\xec\x61\x54\x39\x05\xd1\xbe\x90\x5e\x4c\x4b\x67\xd6\x5c\x82\x52\x28\x0f\x96\x72\x24\x51\xdb\x43\x45\x27\xe3\xb6\x38\xce\x04\xa8\x36\x1e\x92\x82\xaf\xca\x6c\x8a\x54\x8b\x6b\xfe\xc0\xd9\x33\xd1\xc2\x6d\xeb\x51\x6e\x9f\xd5\x21\xe3\x3c\xcc\x80\x17\x80\x9f\x87\x00\xa3\xe9\xd8\xb8\xca\x7e\x04\x23\xf8\x28\x8f\x85\x3d\x08\xdd\xac\x67\x64\xad\xe0\x4d\x50\x46\x52\x3e\x4a\xc4\x6c\xac\x2c\xea\xa5\x3b\x33\x07\xad\x4e\x9e\xe6\x33\x29\xb8\xb3\x52\x79\x7f\xef\x4f\x9b\x8b\xb7\x7f\x03\x00\x00\xff\xff\x5d\xfd\x46\x54\x7b\x14\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 5243, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
