// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package rackspace

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x98\xdb\x6e\xe2\x38\x18\xc7\xef\x79\x8a\x4f\xb9\x9a\x95\x28\x43\x0c\x64\xa0\x77\x88\x66\x18\x34\xa4\xa9\xa0\x9d\x83\x56\xbd\xf0\x82\x45\xa3\x06\x9b\x71\x02\x12\x1d\xf5\x95\xe6\x21\xfa\x64\x2b\x87\x40\xc0\xc6\xc6\xa1\x68\xb5\x37\x1c\x6c\x27\xdf\xef\xff\x9d\x12\xfb\x77\x05\xc0\xa1\x78\x4e\x9c\x6b\x70\x38\x9e\x3c\x27\x0b\x3c\x21\x4e\x55\x0c\x13\xba\x4a\x9c\x6b\xf8\xbb\x02\x00\xe0\x4c\xc9\x2a\x1b\x06\x70\x7e\xe1\xed\xaf\x05\x67\x53\xa7\x02\xf0\x98\x5d\xc0\xc9\x2c\x62\xb4\xb8\xe6\x77\xf6\x09\xe0\xc4\x6c\x82\xd3\x88\x51\x61\xe4\x06\xc7\x31\x4e\xae\x3e\x33\x9e\xc2\x77\xc6\xd3\xa7\x2a\xdc\xff\xa8\xc2\xc3\xb8\x9b\xdf\x74\x77\xa3\x6c\xf5\xe7\xef\xc5\xf0\x0b\xa3\xa4\xb8\x7b\x36\x24\xe6\xf3\x7f\x8f\xd9\xf7\x6b\x55\x6f\xba\xf7\x14\x4d\xf0\x8c\x69\x8d\x85\xa3\x1b\xa3\x31\x31\x6f\x6d\xec\x56\x68\x23\x9c\xc2\xb7\x88\xcf\x22\x1a\x61\xad\xd9\x41\xd7\x6c\x56\xcc\x5b\x9b\x1d\xaf\xa7\x94\xac\xab\xd0\x5d\x26\x29\xc7\x71\x84\x8f\x59\x1c\xff\x34\x5b\x14\xf3\xd6\x16\xbf\x30\x3a\x83\xaf\x8c\xce\x8e\x59\xfa\xf2\xb5\x6f\xb4\x24\xe6\x0f\x2d\xed\xb2\x29\xa2\x49\x8a\xe9\x84\xdc\xaf\x17\xe4\x48\x4e\x25\xcf\x4b\x61\xa0\xef\xdf\xfa\xa3\xee\xd0\xbd\x72\x0b\x3b\x53\x92\x4c\x78\xb4\xd8\x02\xf6\x09\x25\x1c\xc7\x70\xb0\x66\x82\x53\x32\x63\x7c\xbd\xbf\xe0\x6e\xc9\x17\x2c\x21\x22\x62\xe9\x12\xc7\x30\x26\x7c\x45\x78\x71\xcd\x6a\xb2\x10\x36\xdd\x42\x27\x9e\x1f\xfc\x9f\x46\xc9\xb3\x73\x0d\xa8\x7e\xd4\x69\x32\x31\xb2\x20\x46\x17\x21\x46\x12\x31\x92\x89\x5d\xcf\x0e\xb9\x69\x81\xdc\xbc\x08\x72\x53\x42\x6e\xca\xc8\x6d\x3b\xe2\xb6\x05\x71\xfb\x22\xc4\x6d\x89\xb8\x5d\xd2\xc9\xbd\x30\xb8\x7b\xb8\xf7\x4d\x4e\xee\xb1\xf9\x62\x99\x12\xbd\x93\xb7\x0b\xc2\x45\x1a\xcd\xa3\x17\x32\x2d\x9b\x19\x8d\xda\xa7\x96\x15\xa4\xde\xaf\x05\xa4\xc6\xaf\xa5\x21\xe5\x5c\xf8\x54\xb3\x63\x74\x5b\x16\x90\xfb\x8b\xde\x45\x29\xc7\xdf\xb5\x83\x6c\xd4\x2d\x20\xf7\x17\xbd\x0b\xd2\xf5\xe4\x80\xdb\xe5\xa4\x67\x43\xe9\x5d\x8a\xb2\x21\xa7\xa5\xb9\x72\x06\x1f\x43\x63\xb0\x07\x1f\x43\x43\xa0\xc5\xec\xd9\xa9\xe8\xb6\x94\x2a\xef\x9c\x66\x35\xc4\x7c\xc3\xaa\x8b\x77\x29\x56\x39\x21\x1b\x75\x99\xb5\xd1\x3c\xcd\x6a\x88\xfc\x86\x55\x17\xf5\x52\xac\x4a\x5e\x7a\x0a\xac\x67\x01\xdb\x39\x05\xdb\xb9\x04\x2c\x92\xb3\xa0\xa3\xc0\x76\x2c\x60\x5d\x74\x8a\xf6\x60\xc5\xd9\xb8\x4a\x35\xb9\x48\xe1\x75\xbd\xba\x11\x38\xf0\x83\x70\xf4\xd3\x58\x65\x01\x99\x33\xbe\x36\x14\x5a\xbe\xe0\xec\x67\x93\xb9\xa1\x6e\x09\x0d\xb5\xb5\x23\xd4\x95\x57\x59\x42\x39\x0f\xcc\xcd\x74\x4b\x68\xa8\xa8\x1d\xa1\xae\xa8\xca\x12\xca\x3d\xc0\xdc\x48\x77\x51\x36\x64\x66\x11\x66\x5d\x72\x96\x65\x54\x6a\xdf\x35\xbf\x40\x6f\x29\x51\xd3\x82\xf2\x60\xd1\x7b\x28\x95\x2a\x42\xe6\x12\x0f\x6f\x03\xff\xbe\x3b\x84\xfc\x4d\x14\xee\x1e\x46\x77\xe1\xd8\x87\x15\x82\x71\xd0\x1d\x0e\xb5\xe8\xe3\x88\xce\x62\x02\x03\x9a\x92\xf8\xed\x0f\xfc\x20\x8c\xbe\xfd\x01\xbf\x75\x85\x3c\x54\x87\x55\x03\x3e\x78\xd0\x63\x9c\x54\x01\xd5\x9a\xfd\xa7\x97\xbf\x8e\xeb\x0b\x69\x40\x52\x1c\x43\x2f\x66\xcb\x69\x2e\x2a\x81\x6f\xfb\x1b\x8a\x4c\x97\xf2\x42\xa0\x6c\x0e\xda\xe6\xd6\x60\x10\x1a\xf8\x37\x83\x87\x40\xab\xf4\x46\xb8\xfb\xbf\xd2\xe9\x2a\xef\x14\x47\xb6\x14\xe7\x0a\x1d\x76\x47\x7d\xff\x7f\xaa\xd3\x45\xca\x4e\xc4\x52\xa8\x78\xca\xac\xf4\xfb\x6a\xad\xac\x76\x5d\xf8\xe4\x83\x5b\x3f\x5f\x97\x6c\x3a\xd7\x56\x3f\xad\xad\x81\xac\xa5\xe9\x37\xe0\x5a\x69\xde\x26\x62\x7b\xd2\xbc\xb3\xa4\x29\x61\x43\x16\xd2\x2c\x3b\xce\xa6\x3f\x9e\x15\xb9\xc6\x26\x72\xde\xf9\xea\xf2\xb6\xaa\xc6\x4e\xee\x33\x2d\x57\x69\x34\x76\xa1\xcb\xf7\x24\x17\xca\xcc\x76\x59\x81\xdb\xcd\x8c\x45\x76\xaa\xad\x74\xab\x70\x77\xc8\xf5\xbc\xfc\x87\x70\x4a\xd2\xec\x84\x6b\xa3\xd8\x11\x66\x0e\xce\x51\x0b\x5f\x14\xb3\x02\xd0\xad\xb5\x6b\xc5\xd3\x4d\x75\x83\x32\x9f\x9f\xe8\x16\x77\xcb\xcf\x75\xaf\x21\xe5\x4b\xb2\xb7\xf0\x17\x56\xc7\xb2\xb3\xde\xcd\xe8\x6e\xf0\xb5\xb2\xff\xfd\x58\x11\xbf\x5e\xff\x0d\x00\x00\xff\xff\x59\xea\xf4\x8a\x54\x16\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 5716, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
