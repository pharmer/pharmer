// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package rackspace

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x98\xdd\x6e\xe2\x38\x14\xc7\xef\x79\x8a\xa3\x5c\xcd\x4a\x94\xc1\x06\x52\xe8\x1d\xa2\x0c\x83\x86\x34\x15\xb4\xf3\xa1\x55\x2f\xbc\x60\xd1\xa8\xc1\x46\x4e\x40\xa2\xa3\xbe\xd2\x3c\x44\x9f\x6c\xe5\xf0\x11\xb0\xb1\x71\x28\x5a\xed\x4d\x29\x39\x4e\xce\xef\x7f\xbe\x88\xfd\xbb\x04\xe0\x31\x32\xa3\xde\x0d\x78\x82\x8c\x5f\x92\x39\x19\x53\xaf\x2c\x2f\x53\xb6\xf4\x6e\xe0\xef\x12\x00\x80\x37\xa1\x4b\xaf\x04\xf0\x94\x59\x04\x9d\x46\x9c\x25\x3b\xeb\xef\xec\x2f\x80\x17\xf3\x31\x49\x23\xce\xe4\xd3\x6e\x49\x1c\x93\xe4\xea\x0b\x17\x29\xfc\xe0\x22\x7d\x2e\xc3\xc3\xcf\x32\x3c\x8e\xda\xd9\xe3\xb3\xf5\xeb\x07\x65\xab\xbf\xfc\xc8\x2f\xbf\x72\x46\xf3\xa7\x67\x97\xa4\x7d\xf3\xed\x29\xfb\x7c\x2b\x9b\x5d\x77\x9e\xa3\x31\x99\x72\xa3\xb3\x70\x78\x6b\x75\x26\xed\xce\xce\xee\xa4\x36\x2a\x18\x7c\x8f\xc4\x34\x62\x11\x31\xba\xed\xb7\xed\x6e\xa5\xdd\xd9\xed\x68\x35\x61\x74\x55\x86\xf6\x22\x49\x05\x89\x23\x72\xcc\xe3\xe8\x97\xdd\xa3\xb4\x3b\x7b\xfc\xca\xd9\x14\xbe\x71\x36\x3d\xe6\xe9\xeb\xb7\x9e\xd5\x93\xb4\x1f\x7a\xda\x55\x53\xc4\x92\x94\xb0\x31\x7d\x58\xcd\xe9\x91\x9a\x4a\x5e\x16\xd2\x41\xaf\x7b\xd7\x1d\xb6\x07\xe8\x0a\xe5\x7e\x26\x34\x19\x8b\x68\xbe\x05\xec\x51\x46\x05\x89\xe1\x60\xcd\x98\xa4\x74\xca\xc5\x6a\x7f\xc1\xfd\x42\xcc\x79\x42\x65\xc6\xd2\x05\x89\x61\x44\xc5\x92\x8a\xfc\x9e\xe5\x78\x2e\x7d\xa2\x5c\x27\x99\x1d\x7c\x9f\x44\xc9\x8b\x77\x03\xb8\x7a\x34\x68\x2a\x31\x76\x20\xc6\x17\x21\xc6\x0a\x31\x56\x89\x91\xef\x86\x5c\x77\x40\xae\x5f\x04\xb9\xae\x20\xd7\x55\xe4\xa6\x1b\x71\xd3\x81\xb8\x79\x11\xe2\xa6\x42\xdc\x2c\x18\xe4\x4e\x18\xdc\x3f\x3e\x74\x6d\x41\xee\xf0\xd9\x7c\x91\x52\x73\x90\xb7\x0b\xc2\x79\x1a\xcd\xa2\x57\x3a\x29\x5a\x19\xb5\xca\x75\xc3\x09\xd2\x1c\xd7\x1c\xd2\x10\xd7\xc2\x90\x6a\x2d\x5c\x57\xdc\x18\x51\xc3\x01\x72\x7f\xd1\x87\x28\xd5\xfc\x23\x37\xc8\x5a\xd5\x01\x72\x7f\xd1\x87\x20\x91\xaf\x26\xdc\xad\x26\x7d\x17\x4a\xff\x52\x94\x35\xb5\x2c\xed\x9d\xd3\xff\x1c\x5a\x93\xdd\xff\x1c\x5a\x12\x2d\xad\x67\x97\x22\x6a\x68\x5d\xde\x3a\xcd\x6a\xc9\xf9\x9a\xd5\x94\xef\x42\xac\x6a\x41\xd6\xaa\x2a\x6b\xad\x7e\x9a\xd5\x92\xf9\x35\xab\x29\xeb\x85\x58\xb5\xba\xf4\x35\x58\xdf\x01\xb6\x75\x0a\xb6\x75\x09\x58\xac\x56\x41\x4b\x83\x6d\x39\xc0\x22\x7c\x8a\xf6\x60\xc5\xd9\xb8\x5a\x37\x21\xac\xf1\x22\xbf\x6a\x05\x0e\xba\x41\x38\xfc\x65\xed\xb2\x80\xce\xb8\x58\x59\x1a\x6d\xb3\xe0\xec\xdf\x26\xfb\x40\xdd\x12\x5a\x7a\x6b\x47\x68\x6a\xaf\xa2\x84\x6a\x1d\xd8\x87\xe9\x96\xd0\xd2\x51\x3b\x42\x53\x53\x15\x25\x54\x67\x80\x7d\x90\xee\xb2\x6c\xa9\xcc\x3c\xcd\xa6\xe2\x2c\xca\xa8\xf5\x3e\xb2\xbf\x40\x6f\x29\x71\xdd\x81\xf2\x60\xd1\x47\x28\xb5\x2e\xc2\xf6\x16\x0f\xef\x82\xee\x43\x7b\x00\x9b\x37\x51\xb8\x7f\x1c\xde\x87\xa3\x2e\x2c\x31\x8c\x82\xf6\x60\x60\x44\x1f\x45\x6c\x1a\x53\xe8\xb3\x94\xc6\xef\x7f\xe0\x27\xe5\xec\xfd\x0f\x74\x1b\x57\xd8\xc7\x55\x58\xd6\xe0\x93\x0f\x1d\x2e\x68\x19\x70\xa5\xde\x7b\x7e\xfd\xeb\xb8\xbe\x90\x05\x34\x25\x31\x74\x62\xbe\x98\x6c\x44\x25\xf0\x7d\x7f\x43\x91\xe9\xd2\x5e\x08\xb4\xcd\x41\xd3\x3e\x1a\x2c\x42\x83\xee\x6d\xff\x31\x30\x2a\xbd\x95\xe1\xfe\xaf\x74\x22\xed\x9d\xe2\xc8\x96\xe2\x5c\xa1\x83\xf6\xb0\xd7\xfd\x9f\xea\x44\x58\xdb\x89\x38\x0a\x95\xbf\x32\x4b\xf3\xbe\xda\x28\xab\x59\x95\x31\xf9\x84\xaa\xe7\xeb\x52\x5d\x6f\xb4\x55\x4f\x6b\xab\x61\x67\x69\xe6\x0d\xb8\x51\x9a\xbf\xce\xd8\x9e\x34\xff\x2c\x69\x5a\xda\xb0\x83\x34\xc7\x89\xb3\x9e\x8f\x67\x65\xae\xb6\xce\x9c\x7f\xbe\xba\xcd\x58\xd5\x73\xa7\xce\x99\x06\xd2\x06\x8d\x5b\xea\x36\x7b\x92\x0b\x55\x66\xb3\xa8\xc0\xed\x66\xc6\xa1\x3a\xf5\x51\xba\x55\xb8\x3b\xe4\x7a\x59\xfc\x43\x05\xa3\x69\x76\xc2\xb5\x56\xec\x49\x37\x07\xe7\xa8\x79\x2c\x72\xab\x04\x44\x95\xeb\x4a\x7e\x10\xa0\x87\x41\xb3\xa7\x9c\xc7\xb9\xa3\xcd\x45\x89\x40\x26\xb3\xfc\x86\x9d\xf1\x6d\xef\xd6\xf5\xa9\xef\xc1\x8d\x13\x2a\x2f\xa5\x62\x41\xf3\x3b\x4a\xfb\x9f\x4f\x25\xf9\xdf\xdb\xbf\x01\x00\x00\xff\xff\x3d\xd0\x94\x9f\x4d\x16\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 5709, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
