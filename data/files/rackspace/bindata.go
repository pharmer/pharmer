// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package rackspace

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x98\xdf\x6e\xda\x3a\x1c\xc7\xef\xfb\x14\x3f\xe5\x6a\x47\xa2\x0c\x1b\xc8\x42\xef\x10\xcd\x18\x1a\x69\x2a\x68\xf7\x47\x47\xbb\xf0\x01\x8b\x46\x0d\x36\x73\x02\x12\x9d\xfa\x4a\x7b\x88\x3d\xd9\x51\x20\x21\x60\x63\xe3\x50\x74\x74\x6e\xb6\x62\x3b\xf9\x7e\xbe\xfe\xfd\x49\x9c\x5f\x57\x00\x0e\x23\x73\xea\xdc\x80\x23\xc8\xe4\x39\x59\x90\x09\x75\x6a\xd9\x30\x65\xab\xc4\xb9\x81\xbf\xaf\x00\x00\x9c\x29\x5d\x6d\x86\x01\x9c\x9f\xa4\xf8\x6b\x21\xf8\xd4\xb9\x02\xf8\xb1\xb9\x40\xd0\x59\xc4\x59\x79\xcd\xaf\xcd\xbf\x00\x4e\xcc\x27\x24\x8d\x38\xcb\x44\x6e\x49\x1c\x93\xe4\xfa\x23\x17\x29\x7c\xe5\x22\x7d\xaa\xc1\xc3\xb7\x1a\x3c\x8e\xbb\xf9\x4d\x77\x37\xda\xac\xfe\xf8\xb5\x1c\x7e\xe1\x8c\x96\x77\xdf\x0c\x65\xf3\xf9\xaf\x1f\x9b\xff\x5f\x6b\x7a\xe9\xde\x53\x34\x21\x33\xae\x15\x0b\x47\xb7\x46\xb1\x6c\xde\x5a\xec\x2e\xf3\x46\x05\x83\x2f\x91\x98\x45\x2c\x22\x5a\xd9\x41\xd7\x2c\x9b\xcd\x5b\xcb\x8e\xd7\x53\x46\xd7\x35\xe8\x2e\x93\x54\x90\x38\x22\xc7\x14\xc7\xdf\xcd\x8a\xd9\xbc\xb5\xe2\x27\xce\x66\xf0\x99\xb3\xd9\x31\xa5\x4f\x9f\xfb\x46\xa5\x6c\xfe\x50\x69\x97\x4d\x11\x4b\x52\xc2\x26\xf4\x61\xbd\xa0\x47\x72\x2a\x79\x5e\x66\x02\x7d\xff\xce\x1f\x75\x87\xe8\x1a\x95\x3a\x53\x9a\x4c\x44\xb4\x28\x00\xfb\x94\x51\x41\x62\x38\x58\x33\x21\x29\x9d\x71\xb1\xde\x5f\x70\xbf\x14\x0b\x9e\xd0\x2c\x62\xe9\x92\xc4\x30\xa6\x62\x45\x45\x79\xcd\x6a\xb2\xc8\x34\x51\xe9\x93\xcc\x0f\x7e\x4f\xa3\xe4\xd9\xb9\x01\xdc\x38\xba\x69\x32\x31\xb6\x20\xc6\x17\x21\xc6\x12\x31\x96\x89\x91\x6b\x87\xdc\xb2\x40\x6e\x5d\x04\xb9\x25\x21\xb7\x64\x64\xcf\x8e\xd8\xb3\x20\xf6\x2e\x42\xec\x49\xc4\x5e\xc5\x4d\xee\x85\xc1\xfd\xe3\x83\x6f\xda\xe4\x1e\x9f\x2f\x96\x29\xd5\x6f\x72\xb1\x20\x5c\xa4\xd1\x3c\x7a\xa1\xd3\xaa\x99\xd1\xac\x7f\x68\x5b\x41\xea\xf7\xb5\x84\xd4\xec\x6b\x65\x48\x39\x17\x3e\xd4\xed\x18\x51\xdb\x02\x72\x7f\xd1\x9b\x28\xe5\xf8\x23\x3b\xc8\x66\xc3\x02\x72\x7f\xd1\x9b\x20\x91\x2b\x07\xdc\x2e\x27\x5d\x1b\x4a\xf7\x52\x94\x4d\x39\x2d\xcd\x95\x33\x78\x1f\x1a\x83\x3d\x78\x1f\x1a\x02\x9d\xcd\x9e\x9d\x8a\xa8\xad\x54\x79\xe7\x34\xab\x21\xe6\x5b\x56\x5d\xbc\x2b\xb1\xca\x09\xd9\x6c\xc8\xac\xcd\xd6\x69\x56\x43\xe4\xb7\xac\xba\xa8\x57\x62\x55\xf2\xd2\x55\x60\x5d\x0b\xd8\xce\x29\xd8\xce\x25\x60\xb1\x9c\x05\x1d\x05\xb6\x63\x01\x8b\xf0\x29\xda\x83\x15\x67\xe3\x2a\xd5\x84\xb0\xc2\x8b\xdc\x86\x11\x38\xf0\x83\x70\xf4\xdd\x58\x65\x01\x9d\x73\xb1\x36\x14\x5a\xbe\xe0\xec\x67\x93\xb9\xa1\x16\x84\x86\xda\xda\x11\xea\xca\xab\x2a\xa1\x9c\x07\xe6\x66\x5a\x10\x1a\x2a\x6a\x47\xa8\x2b\xaa\xaa\x84\x72\x0f\x30\x37\xd2\x5d\x94\x0d\x99\x59\x86\x59\x97\x9c\x55\x19\x95\xda\x47\xe6\x17\xe8\x82\x12\xb7\x2c\x28\x0f\x16\xbd\x85\x52\xa9\x22\x6c\x2e\xf1\xf0\x2e\xf0\x1f\xba\x43\xc8\xdf\x44\xe1\xfe\x71\x74\x1f\x8e\x7d\x58\x61\x18\x07\xdd\xe1\x50\x8b\x3e\x8e\xd8\x2c\xa6\x30\x60\x29\x8d\xff\xfc\x86\x6f\x94\xb3\x3f\xbf\xc1\x6f\x5f\x63\x17\x37\x60\xd5\x84\x77\x2e\xf4\xb8\xa0\x35\xc0\xf5\x56\xff\xe9\xe5\xaf\xe3\xfe\x42\x16\xd0\x94\xc4\xd0\x8b\xf9\x72\x9a\x9b\x4a\xe0\xcb\xfe\x81\x62\xe3\x4b\x79\x21\x50\x0e\x07\x9e\xb9\x35\x18\x8c\x06\xfe\xed\xe0\x31\xd0\x3a\xbd\xcd\xb6\xfb\xbf\xf2\x89\x94\x77\x8a\x23\x47\x8a\x73\x8d\x0e\xbb\xa3\xbe\xff\x3f\xf5\x89\xb0\x72\x12\xb1\x34\x9a\x3d\x65\x56\xfa\x73\xb5\xd6\x96\xd7\xc8\xf6\xe4\x1d\x6a\x9c\xef\x4b\x96\xce\xbd\x35\x4e\x7b\x6b\x62\x6b\x6b\xfa\x03\xb8\xd6\x9a\xbb\x8d\xd8\x9e\x35\xf7\x2c\x6b\x4a\xd8\xb0\x85\x35\xcb\x8e\xb3\xed\x8f\x67\x45\xae\xb9\x8d\x9c\x7b\xbe\xbb\xbc\xad\xaa\xb1\x93\xfb\x4c\x1b\x29\x8d\xc6\x2e\x74\xf9\x99\xe4\x42\x99\xe9\x55\x35\x58\x1c\x66\x2c\xb2\x53\x6d\xa5\x85\xc3\xdd\x47\xae\xe7\xe5\x3f\x54\x30\x9a\x1e\xfb\xc2\x95\xc9\xe5\x86\x50\xdd\xab\xeb\x1f\x76\xd2\x6c\xfe\xdd\xb6\xb8\x4f\xfe\xed\xf6\x06\x52\xb1\xa4\xb5\x72\xf0\x27\x51\xc7\x36\xdf\x73\xb7\xa3\xf9\xe0\x6b\x09\x7c\xf5\xfa\x6f\x00\x00\x00\xff\xff\x00\x2a\xf8\x90\x2e\x16\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 5678, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
