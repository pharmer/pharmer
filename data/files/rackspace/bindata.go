// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package rackspace

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x98\xdd\x6e\xe2\x38\x14\xc7\xef\x79\x8a\xa3\x5c\xcd\x4a\x94\x21\x06\x32\xd0\x3b\x44\x33\x0c\x1a\xd2\x54\xd0\xce\x87\x56\xbd\xf0\x82\x45\xa3\x06\x9b\x71\x02\x12\x1d\xf5\x95\xe6\x21\xfa\x64\x2b\x87\x40\xc0\xc6\xc6\xa1\x68\xb5\x37\x7c\xd8\x27\x39\xbf\xbf\xcf\x47\x62\xff\xae\x00\x38\x14\xcf\x89\x73\x0d\x0e\xc7\x93\xe7\x64\x81\x27\xc4\xa9\x8a\x61\x42\x57\xce\x35\xfc\x5d\x01\x00\x70\xa6\x64\x95\x8d\x02\x38\xbf\xf0\xf6\xd7\x82\xb3\xa9\x53\x01\x78\xcc\xec\x39\x99\x45\x8c\x26\xbb\x6b\x7e\x67\x9f\x00\x4e\xcc\x26\x38\x8d\x18\x15\x3e\x6e\x70\x1c\xe3\xe4\xea\x33\xe3\x29\x7c\x67\x3c\x7d\xaa\xc2\xfd\x8f\x2a\x3c\x8c\xbb\xf9\x4d\x77\x37\xca\xac\x3f\x7f\x2f\x86\x5f\x18\x25\xc5\xdd\xb3\x21\x31\x9f\xff\x7b\xcc\xbe\x5f\xab\x7a\xd7\xbd\xa7\x68\x82\x67\x4c\xeb\x2c\x1c\xdd\x18\x9d\x89\x79\x6b\x67\xb7\x42\x1b\xe1\x14\xbe\x45\x7c\x16\xd1\x08\x6b\xdd\x0e\xba\x66\xb7\x62\xde\xda\xed\x78\x3d\xa5\x64\x5d\x85\xee\x32\x49\x39\x8e\x23\x7c\xcc\xe3\xf8\xa7\xd9\xa3\x98\xb7\xf6\xf8\x85\xd1\x19\x7c\x65\x74\x76\xcc\xd3\x97\xaf\x7d\xa3\x27\x31\x7f\xe8\x69\x97\x4d\x11\x4d\x52\x4c\x27\xe4\x7e\xbd\x20\x47\x72\x2a\x79\x5e\x0a\x07\x7d\xff\xd6\x1f\x75\x87\xee\x95\x5b\xf8\x99\x92\x64\xc2\xa3\xc5\x16\xb0\x4f\x28\xe1\x38\x86\x03\x9b\x09\x4e\xc9\x8c\xf1\xf5\xbe\xc1\xdd\x92\x2f\x58\x42\x44\xc4\xd2\x25\x8e\x61\x4c\xf8\x8a\xf0\xe2\x9a\xd5\x64\x21\x7c\xba\x85\x4e\x3c\x3f\xf8\x3f\x8d\x92\x67\xe7\x1a\x50\xfd\xe8\xa2\xc9\xc4\xc8\x82\x18\x5d\x84\x18\x49\xc4\x48\x26\x76\x3d\x3b\xe4\xa6\x05\x72\xf3\x22\xc8\x4d\x09\xb9\x29\x23\xb7\xed\x88\xdb\x16\xc4\xed\x8b\x10\xb7\x25\xe2\x76\xc9\x45\xee\x85\xc1\xdd\xc3\xbd\x6f\x5a\xe4\x1e\x9b\x2f\x96\x29\xd1\x2f\xf2\xd6\x20\x5c\xa4\xd1\x3c\x7a\x21\xd3\xb2\x99\xd1\xa8\x7d\x6a\x59\x41\xea\xd7\xb5\x80\xd4\xac\x6b\x69\x48\x39\x17\x3e\xd5\xec\x18\xdd\x96\x05\xe4\xbe\xd1\xbb\x28\xe5\xf8\xbb\x76\x90\x8d\xba\x05\xe4\xbe\xd1\xbb\x20\x5d\x4f\x0e\xb8\x5d\x4e\x7a\x36\x94\xde\xa5\x28\x1b\x72\x5a\x9a\x2b\x67\xf0\x31\x34\x06\x7b\xf0\x31\x34\x04\x5a\xcc\x9e\x9d\x8a\x6e\x4b\xa9\xf2\xce\x69\x56\x43\xcc\x37\xac\xba\x78\x97\x62\x95\x13\xb2\x51\x97\x59\x1b\xcd\xd3\xac\x86\xc8\x6f\x58\x75\x51\x2f\xc5\xaa\xe4\xa5\xa7\xc0\x7a\x16\xb0\x9d\x53\xb0\x9d\x4b\xc0\x22\x39\x0b\x3a\x0a\x6c\xc7\x02\xd6\x45\xa7\x68\x0f\x2c\xce\xc6\x55\xaa\xc9\x45\x0a\xaf\xeb\xd5\x8d\xc0\x81\x1f\x84\xa3\x9f\xc6\x2a\x0b\xc8\x9c\xf1\xb5\xa1\xd0\x72\x83\xb3\x9f\x4d\xe6\x86\xba\x25\x34\xd4\xd6\x8e\x50\x57\x5e\x65\x09\xe5\x3c\x30\x37\xd3\x2d\xa1\xa1\xa2\x76\x84\xba\xa2\x2a\x4b\x28\xf7\x00\x73\x23\xdd\x45\xd9\x90\x99\x45\x98\x75\xc9\x59\x96\x51\xa9\x7d\xd7\xfc\x02\xbd\xa5\x44\x4d\x0b\xca\x03\xa3\xf7\x50\x2a\x55\x84\xcc\x25\x1e\xde\x06\xfe\x7d\x77\x08\xf9\x9b\x28\xdc\x3d\x8c\xee\xc2\xb1\x0f\x2b\x04\xe3\xa0\x3b\x1c\x6a\xd1\xc7\x11\x9d\xc5\x04\x06\x34\x25\xf1\xdb\x1f\xf8\x41\x18\x7d\xfb\x03\x7e\xeb\x0a\x79\xa8\x0e\xab\x06\x7c\xf0\xa0\xc7\x38\xa9\x02\xaa\x35\xfb\x4f\x2f\x7f\x1d\xd7\x17\xd2\x80\xa4\x38\x86\x5e\xcc\x96\xd3\x5c\x54\x02\xdf\xf6\x37\x14\x99\x2e\xe5\x85\x40\xd9\x1c\xb4\xcd\xad\xc1\x20\x34\xf0\x6f\x06\x0f\x81\x56\xe9\x8d\x58\xee\xff\x4a\xa7\xab\xbc\x53\x1c\xd9\x52\x9c\x2b\x74\xd8\x1d\xf5\xfd\xff\xa9\x4e\x17\x29\x3b\x11\x4b\xa1\xe2\x29\xb3\xd2\xef\xab\xb5\xb2\xda\x75\xb1\x26\x1f\xdc\xfa\xf9\xba\x64\xd7\xb9\xb6\xfa\x69\x6d\x0d\x64\x2d\x4d\xbf\x01\xd7\x4a\xf3\x36\x11\xdb\x93\xe6\x9d\x25\x4d\x09\x1b\xb2\x90\x66\xd9\x71\x36\xfd\xf1\xac\xc8\x35\x36\x91\xf3\xce\x57\x97\xb7\x55\x35\x76\x72\x9f\x69\xb9\x4a\xa3\xb1\x0b\x5d\xbe\x27\xb9\x50\x66\xb6\xcb\x0a\xdc\x6e\x66\x2c\xb2\x53\x6d\xa5\x5b\x85\xbb\x43\xae\xe7\xe5\x3f\x84\x53\x92\x66\x27\x5c\x1b\xc5\x8e\x70\x73\x70\x8e\x5a\xac\x45\x31\x2b\x00\xdd\x5a\xbb\x56\x3c\xdd\xd4\x65\x50\xe6\x37\x07\xba\xc5\xcd\xf2\x63\xdd\x6b\x48\xf9\x92\xec\xd9\xfd\xc2\xea\x58\x76\xd4\xbb\x19\xdd\x0d\xbe\x56\xf6\xbf\x1f\x2b\xe2\xd7\xeb\xbf\x01\x00\x00\xff\xff\x7f\x3b\x3b\xf9\x52\x16\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 5714, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
