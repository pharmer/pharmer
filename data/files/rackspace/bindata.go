// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package rackspace

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x98\xdd\x6e\xe2\x38\x14\xc7\xef\x79\x8a\xa3\x5c\xcd\x4a\x94\xc1\x06\x32\xa1\x77\x88\x66\x18\x34\xa4\xa9\xa0\x9d\x0f\xad\x7a\x91\x05\x8b\x46\x04\x1b\x39\x01\x89\x8e\xfa\x4a\xf3\x10\xf3\x64\x2b\x87\x8f\x80\x8d\x8d\x43\xd1\x6a\x6f\x4a\x89\x0f\x39\xbf\xff\xf9\x4a\xec\x5f\x15\x00\x87\x46\x73\xe2\xdc\x82\xc3\xa3\xf1\x2c\x5d\x44\x63\xe2\x54\xc5\x65\x42\x57\xce\x2d\xfc\x5d\x01\x00\x70\x26\x64\xe5\x54\x00\x9e\xf3\x15\x4e\xa6\x31\xa3\xe9\x7e\xf5\x57\xfe\x17\xc0\x49\xd8\x38\xca\x62\x46\xc5\xdd\xee\xa2\x24\x89\xd2\x9b\xcf\x8c\x67\xf0\x9d\xf1\xec\xa5\x0a\x8f\x3f\xaa\xf0\x34\xea\xe4\xb7\xcf\xed\x37\x37\xca\xad\x3f\x7f\x2f\x2e\xbf\x32\x4a\x8a\xbb\xe7\x97\xc4\xfa\xf6\xdb\x73\xfe\xf9\x56\xd5\xbb\xee\xbe\xc4\xe3\x68\xca\xb4\xce\xc2\xe1\x9d\xd1\x99\x58\xb7\x76\x76\x2f\xb4\x11\x4e\xe1\x5b\xcc\xa7\x31\x8d\x23\xad\xdb\x7e\xc7\xec\x56\xac\x5b\xbb\x1d\xad\x27\x94\xac\xab\xd0\x59\xa6\x19\x8f\x92\x38\x3a\xe5\x71\xf4\xd3\xec\x51\xac\x5b\x7b\xfc\xc2\xe8\x14\xbe\x32\x3a\x3d\xe5\xe9\xcb\xd7\x9e\xd1\x93\x58\x3f\xf6\xb4\xaf\xa6\x98\xa6\x59\x44\xc7\xe4\x71\xbd\x20\x27\x6a\x2a\x9d\x2d\x85\x83\x9e\x7f\xef\x0f\x3b\x03\x74\x83\x0a\x3f\x13\x92\x8e\x79\xbc\xd8\x01\xf6\x08\x25\x3c\x4a\xe0\xc8\x66\x1c\x65\x64\xca\xf8\xfa\xd0\xe0\x61\xc9\x17\x2c\x25\x22\x63\xd9\x32\x4a\x60\x44\xf8\x8a\xf0\xe2\x37\xab\xf1\x42\xf8\x44\x85\xce\x68\x7e\xf4\x7d\x12\xa7\x33\xe7\x16\x70\xfd\x64\xd0\x64\x62\x6c\x41\x8c\xaf\x42\x8c\x25\x62\x2c\x13\x23\xd7\x0e\xb9\x69\x81\xdc\xbc\x0a\x72\x53\x42\x6e\xca\xc8\x9e\x1d\xb1\x67\x41\xec\x5d\x85\xd8\x93\x88\xbd\x92\x41\xee\x86\xc1\xc3\xd3\xa3\x6f\x0a\x72\x97\xcd\x17\xcb\x8c\xe8\x83\xbc\x33\x08\x17\x59\x3c\x8f\x5f\xc9\xa4\x6c\x65\x34\x6a\x9f\x5a\x56\x90\xfa\xb8\x16\x90\x9a\xb8\x96\x86\x94\x6b\xe1\x53\xcd\x8e\x11\xb5\x2c\x20\x0f\x8d\xde\x45\x29\xe7\x1f\xd9\x41\x36\xea\x16\x90\x87\x46\xef\x82\x44\xae\x9c\x70\xbb\x9a\x74\x6d\x28\xdd\x6b\x51\x36\xe4\xb2\x34\x77\x4e\xff\x63\x68\x4c\x76\xff\x63\x68\x48\xb4\x58\xbd\xb8\x14\x51\x4b\xe9\xf2\xf6\x79\x56\x43\xce\x37\xac\xba\x7c\x97\x62\x95\x0b\xb2\x51\x97\x59\x1b\xcd\xf3\xac\x86\xcc\x6f\x58\x75\x59\x2f\xc5\xaa\xd4\xa5\xab\xc0\xba\x16\xb0\xed\x73\xb0\xed\x6b\xc0\x62\xb9\x0a\xda\x0a\x6c\xdb\x02\x16\xe1\x73\xb4\x47\x16\x17\xe3\x2a\xdd\x84\xb0\xc2\x8b\xdc\xba\x11\x38\xf0\x83\x70\xf8\xd3\xd8\x65\x01\x99\x33\xbe\x36\x34\xda\xd6\xe0\xe2\x67\x93\x79\xa0\xee\x08\x0d\xbd\xb5\x27\xd4\xb5\x57\x59\x42\xb9\x0e\xcc\xc3\x74\x47\x68\xe8\xa8\x3d\xa1\xae\xa9\xca\x12\xca\x33\xc0\x3c\x48\xf7\x59\x36\x54\x66\x91\x66\x5d\x71\x96\x65\x54\x7a\x1f\x99\x5f\xa0\x77\x94\xb8\x69\x41\x79\x64\xf4\x1e\x4a\xa5\x8b\xb0\xb9\xc5\xc3\xfb\xc0\x7f\xec\x0c\x60\xfb\x26\x0a\x0f\x4f\xc3\x87\x70\xe4\xc3\x0a\xc3\x28\xe8\x0c\x06\x5a\xf4\x51\x4c\xa7\x09\x81\x3e\xcd\x48\xf2\xe7\x37\xfc\x20\x8c\xfe\xf9\x0d\x7e\xeb\x06\xbb\xb8\x0e\xab\x06\x7c\x70\xa1\xcb\x38\xa9\x02\xae\x35\x7b\x2f\xaf\x7f\x9d\xd6\x17\xd2\x80\x64\x51\x02\xdd\x84\x2d\x27\x5b\x51\x29\x7c\x3b\xdc\x50\xe4\xba\x94\x17\x02\x65\x73\xe0\x99\x47\x83\x41\x68\xe0\xdf\xf5\x9f\x02\xad\xd2\x3b\x11\xee\xff\x4a\x27\x52\xde\x29\x4e\x6c\x29\x2e\x15\x3a\xe8\x0c\x7b\xfe\xff\x54\x27\xc2\xca\x4e\xc4\x52\xa8\x78\xca\xac\xf4\xfb\x6a\xad\x2c\xaf\x2e\x62\xf2\x01\xd5\x2f\xd7\x25\xbb\xde\x6a\xab\x9f\xd7\xd6\xc0\xd6\xd2\xf4\x1b\x70\xad\x34\x77\x93\xb1\x03\x69\xee\x45\xd2\x94\xb4\x61\x0b\x69\x96\x13\x67\x33\x1f\x2f\xca\x5c\x63\x93\x39\xf7\x72\x75\xdb\xb1\xaa\xe6\x4e\x9e\x33\x2d\xa4\x0c\x1a\xbb\xd4\x6d\xf7\x24\x57\xaa\x4c\xaf\xac\xc0\xdd\x66\xc6\xa2\x3a\xd5\x51\xba\x53\xb8\x3f\xe4\x9a\x2d\xff\x21\x9c\x92\x2c\x3f\xe1\xda\x28\x76\x84\x9b\xa3\x73\xd4\x22\x16\xc5\xaa\x00\x44\x35\xaf\x56\x3c\xdd\xd4\x30\x28\xeb\x9b\xa3\xdb\xe2\x66\xdb\x03\xdc\x5b\xc8\xf8\x92\xec\xaf\xbe\x55\x0e\x3f\x9f\x2b\xe2\xbf\xb7\x7f\x03\x00\x00\xff\xff\xe8\x48\x8e\xb5\x12\x16\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 5650, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
