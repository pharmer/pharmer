// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package rackspace

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x98\xdd\x6e\xe2\x38\x14\xc7\xef\x79\x8a\xa3\x5c\xcd\x4a\x94\x21\x06\x32\xd0\x3b\x44\x33\x0c\x1a\xd2\x54\xd0\xce\x87\x56\xbd\xf0\x82\x45\xa3\x06\x9b\x75\x02\x12\x1d\xf5\x95\xe6\x21\xfa\x64\x2b\x87\x40\xc0\xc6\xc6\xa1\x68\x35\x37\xa5\xd8\x87\x9c\xdf\xff\x7c\x25\xce\xaf\x0a\x80\x43\xf1\x9c\x38\xd7\xe0\x70\x3c\x79\x4e\x16\x78\x42\x9c\xaa\x58\x26\x74\xe5\x5c\xc3\xdf\x15\x00\x00\x67\x4a\x56\x4e\x05\xe0\x31\xdb\xe1\x64\x16\x31\x9a\xec\x76\x7f\x65\x7f\x01\x9c\x98\x4d\x70\x1a\x31\x2a\xae\x76\x83\xe3\x18\x27\x57\x9f\x19\x4f\xe1\x3b\xe3\xe9\x53\x15\xee\x7f\x54\xe1\x61\xdc\xcd\x2e\x9f\xd9\x6f\x2e\x94\x59\x7f\xfe\x5e\x2c\xbf\x30\x4a\x8a\xab\x67\x4b\x62\x3f\xff\xf6\x98\x7d\xbe\x56\xf5\xae\x7b\x4f\xd1\x04\xcf\x98\xd6\x59\x38\xba\x31\x3a\x13\xfb\xd6\xce\x6e\x85\x36\xc2\x29\x7c\x8b\xf8\x2c\xa2\x11\xd6\xba\x1d\x74\xcd\x6e\xc5\xbe\xb5\xdb\xf1\x7a\x4a\xc9\xba\x0a\xdd\x65\x92\x72\x1c\x47\xf8\x98\xc7\xf1\x4f\xb3\x47\xb1\x6f\xed\xf1\x0b\xa3\x33\xf8\xca\xe8\xec\x98\xa7\x2f\x5f\xfb\x46\x4f\x62\xff\xd0\xd3\xae\x9a\x22\x9a\xa4\x98\x4e\xc8\xfd\x7a\x41\x8e\xd4\x54\xf2\xbc\x14\x0e\xfa\xfe\xad\x3f\xea\x0e\xdd\x2b\xb7\xf0\x33\x25\xc9\x84\x47\x8b\x2d\x60\x9f\x50\xc2\x71\x0c\x07\x36\x13\x9c\x92\x19\xe3\xeb\x7d\x83\xbb\x25\x5f\xb0\x84\x88\x8c\xa5\x4b\x1c\xc3\x98\xf0\x15\xe1\xc5\x6f\x56\x93\x85\xf0\xe9\x16\x3a\xf1\xfc\xe0\xfb\x34\x4a\x9e\x9d\x6b\x40\xf5\xa3\x41\x93\x89\x91\x05\x31\xba\x08\x31\x92\x88\x91\x4c\xec\x7a\x76\xc8\x4d\x0b\xe4\xe6\x45\x90\x9b\x12\x72\x53\x46\x6e\xdb\x11\xb7\x2d\x88\xdb\x17\x21\x6e\x4b\xc4\xed\x92\x41\xee\x85\xc1\xdd\xc3\xbd\x6f\x0a\x72\x8f\xcd\x17\xcb\x94\xe8\x83\xbc\x35\x08\x17\x69\x34\x8f\x5e\xc8\xb4\x6c\x65\x34\x6a\x9f\x5a\x56\x90\xfa\xb8\x16\x90\x9a\xb8\x96\x86\x94\x6b\xe1\x53\xcd\x8e\xd1\x6d\x59\x40\xee\x1b\xbd\x8b\x52\xce\xbf\x6b\x07\xd9\xa8\x5b\x40\xee\x1b\xbd\x0b\xd2\xf5\xe4\x84\xdb\xd5\xa4\x67\x43\xe9\x5d\x8a\xb2\x21\x97\xa5\xb9\x73\x06\x1f\x43\x63\xb2\x07\x1f\x43\x43\xa2\xc5\xee\xd9\xa5\xe8\xb6\x94\x2e\xef\x9c\x66\x35\xe4\x7c\xc3\xaa\xcb\x77\x29\x56\xb9\x20\x1b\x75\x99\xb5\xd1\x3c\xcd\x6a\xc8\xfc\x86\x55\x97\xf5\x52\xac\x4a\x5d\x7a\x0a\xac\x67\x01\xdb\x39\x05\xdb\xb9\x04\x2c\x92\xab\xa0\xa3\xc0\x76\x2c\x60\x5d\x74\x8a\xf6\xc0\xe2\x6c\x5c\xa5\x9b\x5c\xa4\xf0\xba\x5e\xdd\x08\x1c\xf8\x41\x38\xfa\x69\xec\xb2\x80\xcc\x19\x5f\x1b\x1a\x2d\x37\x38\xfb\xde\x64\x1e\xa8\x5b\x42\x43\x6f\xed\x08\x75\xed\x55\x96\x50\xae\x03\xf3\x30\xdd\x12\x1a\x3a\x6a\x47\xa8\x6b\xaa\xb2\x84\xf2\x0c\x30\x0f\xd2\x5d\x96\x0d\x95\x59\xa4\x59\x57\x9c\x65\x19\x95\xde\x77\xcd\x0f\xd0\x5b\x4a\xd4\xb4\xa0\x3c\x30\x7a\x0f\xa5\xd2\x45\xc8\xdc\xe2\xe1\x6d\xe0\xdf\x77\x87\x90\x3f\x89\xc2\xdd\xc3\xe8\x2e\x1c\xfb\xb0\x42\x30\x0e\xba\xc3\xa1\x16\x7d\x1c\xd1\x59\x4c\x60\x40\x53\x12\xbf\xfd\x86\x1f\x84\xd1\xb7\xdf\xe0\xb7\xae\x90\x87\xea\xb0\x6a\xc0\x07\x0f\x7a\x8c\x93\x2a\xa0\x5a\xb3\xff\xf4\xf2\xd7\x71\x7d\x21\x0d\x48\x8a\x63\xe8\xc5\x6c\x39\xcd\x45\x25\xf0\x6d\xff\x40\x91\xe9\x52\x1e\x08\x94\xc3\x41\xdb\x3c\x1a\x0c\x42\x03\xff\x66\xf0\x10\x68\x95\xde\x88\x70\xff\x5f\x3a\x5d\xe5\x99\xe2\xc8\x91\xe2\x5c\xa1\xc3\xee\xa8\xef\xff\xa1\x3a\x5d\xa4\x9c\x44\x2c\x85\x8a\xbb\xcc\x4a\x7f\xae\xd6\xca\x6a\xd7\x45\x4c\x3e\xb8\xf5\xf3\x75\xc9\xae\x73\x6d\xf5\xd3\xda\x1a\xc8\x5a\x9a\xfe\x00\xae\x95\xe6\x6d\x32\xb6\x27\xcd\x3b\x4b\x9a\x92\x36\x64\x21\xcd\x72\xe2\x6c\xe6\xe3\x59\x99\x6b\x6c\x32\xe7\x9d\xaf\x2e\x1f\xab\x6a\xee\xe4\x39\xd3\x72\x95\x41\x63\x97\xba\xfc\x4c\x72\xa1\xca\x6c\x97\x15\xb8\x3d\xcc\x58\x54\xa7\x3a\x4a\xb7\x0a\x77\x2f\xb9\x9e\x97\xff\x10\x4e\x49\x9a\xbd\xe1\xda\x28\x76\x84\x9b\x83\xf7\xa8\x45\x2c\x8a\x5d\x01\xe8\xd6\xda\xb5\xe2\xee\xa6\x86\x41\xd9\xdf\xbc\xba\x2d\x2e\x96\xbf\xc0\xbd\x86\x94\x2f\xc9\x9e\xdd\xbf\x58\x5d\x5b\x70\x36\xcd\x57\x77\x8b\xaf\x95\xfd\xcf\xc7\x8a\xf8\xef\xf5\xbf\x00\x00\x00\xff\xff\xdf\x03\xe3\x54\x3c\x16\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 5692, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
