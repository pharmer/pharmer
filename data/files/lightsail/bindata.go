// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package lightsail

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x97\x61\x6f\xf2\x36\x10\xc7\xdf\xf3\x29\xac\xbc\x2e\xac\x44\x9b\x54\xf1\x0e\x31\x3a\x55\xdd\xd4\x6a\x54\x9b\xa6\xa9\x8a\x0e\xe7\x08\x1e\x8e\x9d\xda\x0e\x5d\x56\xf1\x69\xf6\x51\xf6\xc5\xa6\x38\x90\x38\xa9\x03\x61\xea\xde\x3c\x4f\x75\x77\x3e\x7e\xff\x7f\x7c\xa7\xe4\x63\x44\x48\x20\x20\xc5\x60\x46\x02\xce\x92\xad\xd1\xc0\x78\x70\x53\x86\x51\xec\x75\x30\x23\xbf\x8f\x08\x21\x24\x88\x71\x6f\xc3\x84\x04\x6f\x70\xfa\x2b\x53\x32\x0e\x46\x84\xbc\xda\x03\x0a\x13\x26\x45\x73\xe6\xc3\xfe\x4b\x48\xc0\x25\x05\xc3\xa4\x28\x7f\xe4\x17\xa6\x12\x26\xd8\xa9\x45\x7d\xac\xcc\xe5\x7a\x8c\xa0\xcd\x78\xda\x24\xff\x92\x02\x9b\x8e\x36\x54\x57\x35\x3d\xdc\xe8\xda\x1b\xa5\xde\x68\xec\x8d\x62\x70\x0c\xbe\xda\xff\x0f\x37\xfd\x6a\x9e\xb6\x4c\x9e\x53\x12\x0e\x52\x12\x7a\x95\x84\x5e\x25\x21\x1d\x4e\xb7\x00\xce\x36\x52\xf5\xbb\xfd\x8e\x43\xdc\xae\xaa\xba\x8c\x55\xb4\xcb\x58\x45\xaf\x60\x7c\x52\x98\x48\x71\x8e\xef\xa2\x87\x55\x95\x97\xef\x93\x87\x55\xf4\x0a\xbe\x07\x85\x1c\x44\xec\x03\xc4\x7c\x88\x81\x75\x55\x0b\xb0\x8e\xae\xbd\xd1\x2b\x00\x7f\x94\x22\xf6\x1b\x78\xea\x76\xde\xc0\xff\x9b\x6f\xc5\x44\x02\x99\x54\xe8\x43\x84\x6c\xac\x65\x6e\xb6\x03\xc6\xbe\x5d\xda\x82\x6d\xa7\xd6\xfd\xa9\x2b\xb0\x5f\xe4\xae\xf0\x8e\x36\x64\x63\x21\xd5\x50\x64\xa7\xb4\x8b\xec\xa4\xba\xc8\x4e\xea\x02\x72\x8f\x95\xce\x23\x6f\x3d\x8b\x22\x16\x58\x0c\xb7\x39\xec\xb7\x39\xec\xb7\xf9\xd2\x78\x35\xcc\x1a\x3e\x2d\xfc\x16\xee\x3f\x7f\x4b\xf2\x0c\x39\x97\x67\x91\xeb\x2e\x2d\xda\x3a\xba\xf6\x46\xaf\xf6\xb5\x0f\xf2\xa7\x3c\x5d\x03\x1b\xe4\x69\xcf\xb5\xed\xb9\xb2\x57\x30\x62\x3e\xa6\x28\x8c\x02\xde\x47\x79\xaf\x40\xec\x36\xb9\x32\x97\x76\x41\xdd\xa7\xbb\x0e\xea\x44\x77\x23\xd4\x89\x2e\x6e\xfd\x62\xc0\x84\x36\x20\x28\xbe\x14\x19\x7a\x5e\x0f\xf4\x2e\x2f\x11\x05\x08\x19\x4d\xa3\xdb\x86\x30\x46\x4d\x15\xcb\x4e\x1a\x90\x86\x33\x52\x56\x35\x15\x14\x0c\x26\x52\x15\x65\xfa\x07\x14\xa8\x80\x93\xe7\x5c\x65\x52\x3b\xeb\x86\x66\x65\xff\x69\x33\xcb\x90\x06\x33\x72\x3b\xf9\xce\xeb\xea\x91\x26\x65\x54\x0d\xc0\xb1\x65\x5f\xc2\x33\x3d\x47\xa3\x53\xe0\xfc\x32\x8d\x2d\xfb\x12\x9a\xf0\xac\x37\x18\xb3\x3c\x1d\x60\x8e\xad\xfb\x4f\x3c\x61\x87\xe7\xdb\x73\x3c\x1c\x54\x82\x97\x71\x6c\xd9\x97\xd0\xdc\x75\x2e\x38\x55\x18\xa3\x30\x0c\xb8\xe7\x7a\x67\x4a\xee\x59\x8c\xaa\xfc\x9d\xf9\xaf\x2b\x87\x91\xe9\x8c\x43\x71\x2f\x55\x0a\xa6\xcc\x6e\x18\x72\xe7\x4d\x03\x84\x90\xc6\x4e\x70\xd9\xf5\xa3\x19\xba\x6c\x0b\x2a\x45\x35\x81\x2c\xd3\x54\xc6\x38\xa1\x32\xfd\x86\xf2\x5c\x1b\x54\xe3\x86\xa5\x6c\xe9\xce\xaa\xf7\x58\x2c\xf4\xb5\x47\xb4\x91\x0a\x12\xec\x1e\x3b\x9e\x3a\xd4\xfc\x56\x4e\x7b\xc3\x34\x22\xaa\x0f\x0c\x2a\xc5\x86\x25\x47\x67\xa2\xf9\x62\xb1\x5c\xad\xa2\xc7\xe5\x6f\xd1\xc3\xf7\x0e\x46\xd9\x4b\xaa\xd4\x6e\xe3\x77\x1d\x01\xa5\xa8\x75\xb4\xc3\x22\x62\x71\xbb\xec\x0f\x7d\x5c\xda\xb6\xe4\x11\x8b\x6e\x1f\x0e\x6b\xb4\xb8\x73\x5b\x41\x1e\xb1\x20\x0f\x9d\x26\x4c\x64\xb9\x7d\x1e\x06\xff\x34\x41\x9d\x39\xdc\x0c\x94\xb1\x5a\x2e\x7e\x5e\xbe\x38\x6a\xfa\xa5\x68\xa4\x0a\x8d\xa3\xc8\x2f\xa7\x2a\x9b\x9f\x44\xf5\x48\x5a\xd9\x2a\xd2\x28\xeb\x91\x95\x81\xd6\xef\x52\xc5\x8e\xb4\x9e\xc5\xbd\xcb\xd7\xa8\x04\x1a\xdf\xd6\xde\xa3\xd2\xc7\xe9\x9a\x4e\xee\x26\xfd\xb3\xd7\xc9\x1e\x3f\x2b\x9d\xeb\x5c\x7e\x5a\xce\x88\x51\x39\x3a\x37\xef\x0d\x3e\xc7\xec\xe7\x66\x15\x1d\xb9\xe0\x16\x78\x74\xf8\x37\x00\x00\xff\xff\x36\x60\x9a\xe7\xcd\x0e\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 3789, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
