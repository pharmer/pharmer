// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package aliyun

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x4d\x8f\xdb\x36\x10\xbd\xfb\x57\x10\x3a\xb5\x80\x6d\xd4\xb2\x91\x2e\xf6\x96\xa4\x68\x92\x02\x6d\x50\x24\xcd\xa5\xc8\x81\x96\x59\x99\xb5\x44\x69\xf5\xb1\x5d\xef\x62\xff\x7b\x21\xc9\x6b\x4b\x24\x25\x0e\x29\xfa\x63\x6d\x5f\xb2\x01\xf5\x2c\x52\xef\xcd\x70\x86\x43\x4a\x4f\x03\x84\x1c\x86\x43\xe2\xdc\x22\x07\x07\x74\x9d\x33\x67\x58\xb4\x11\x76\xef\xdc\xa2\xbf\x07\x08\x21\xe4\x2c\xc8\x7d\xd9\x8a\x90\x73\x87\x5f\xfe\x17\x27\xd1\xc2\x19\x20\xf4\xbd\xc4\x27\xc4\xa7\x11\x4b\xb7\xbf\x79\x2a\xff\x45\xc8\x09\x22\x0f\x67\x34\x62\x45\x07\x1f\x31\xf3\x1f\x97\x51\x3e\x44\xef\x97\x94\xbd\xdc\x69\xfb\xeb\x02\xe2\xb1\xd1\x72\x83\xda\x5d\x7e\x8c\x18\xd9\xdd\xba\x6c\xaa\xe3\x36\xad\xdf\xcb\xbf\xcf\xc3\xf6\xfe\xff\xa4\xcc\x5f\xe0\xa8\xbb\xfb\xbb\x0a\xa4\xea\x7d\x03\x1b\xcd\xe1\xdd\xbf\x23\xf4\x5f\xca\xfc\xee\xee\xe7\x15\x48\xd5\xfd\x06\x36\xda\xdd\xa6\xd9\x3e\x6f\x69\xf7\xe0\xc3\xfd\x18\x31\x7f\x15\xd5\x87\xd2\x94\x49\xb8\xdc\x22\xd3\x06\xa7\xc3\xd4\x97\x25\x61\x8f\x4b\xc2\xba\xa9\x4a\x37\x28\xd5\x08\x5e\x70\x02\x59\xdb\x0b\x3a\x43\xa3\x01\xf5\x22\x86\xbe\xe1\x20\x20\xeb\x21\xfa\xeb\xcb\x5b\xd9\xf0\xf2\x74\xf4\x1f\x49\xb3\xd1\xa4\x73\x70\x5b\x54\x73\x68\xbb\x66\x8d\x81\x7d\xa3\x89\x4f\x19\xc5\x5d\x43\x22\x18\x32\xa4\x0a\x35\xc2\x3a\xa4\x30\x1f\xc7\x51\x42\x64\xfd\xe2\x78\x94\x46\x79\xb6\x04\x74\xde\x84\x36\x49\xe1\xae\x69\x59\x13\x66\xfe\x12\x53\x95\x35\x55\x28\xb5\x35\x55\x38\x89\x35\x6d\x2e\xf0\xbe\xb7\xbd\xa0\xe1\x7c\xbf\xe4\xf3\xfa\x50\x76\x23\x0d\x09\x44\xc5\x2d\x4a\x47\xc5\xaf\xd1\x6a\x1d\x0d\xd1\x6f\x38\xc6\xac\x45\x48\x16\x25\x50\x21\x6b\x50\x2d\x53\x5a\x2f\x58\xe1\x57\x6f\xf3\x34\x4b\x70\x40\xa5\x72\x35\x6c\xc1\x85\x9b\x94\xab\x33\x92\x5f\x13\xcc\x56\xff\xe4\x49\x36\x44\x1f\x48\x12\x62\xb6\x96\x0d\x85\xe4\x23\x8f\xb0\x62\xa8\x0a\x4a\xea\x40\x61\x18\xdb\x38\x4a\x59\x9a\x61\xe6\x91\xaf\xeb\x98\x48\xa2\x69\xba\xca\xcb\x4e\xbd\x74\xec\x4d\xc6\x01\x4e\xfc\x9a\xcb\x2d\x48\xea\x25\x34\x7e\x19\xbf\x1c\xe4\xe1\x8c\xf8\x51\xb2\x2e\x10\x1f\x08\x23\x49\xf9\xbc\xe8\x13\xfa\xe1\xd3\x67\xf4\x39\xce\x68\x48\x1f\xc9\xe2\xc7\xda\x0f\xe2\xa2\xcb\x9b\xdd\xa3\xe3\xd0\xb9\x45\x93\x37\x1c\x17\x9d\x9e\x2c\x0f\x46\x5c\xab\x10\x50\x90\x34\x1e\x23\xf9\xdc\x8f\x64\x13\x5c\x7d\x2e\xed\x16\xbe\x49\x6c\x1a\xe2\x20\x50\x11\xcb\x81\xda\x89\xfd\xa3\xf8\xa3\x43\xee\x4d\x37\xb7\xad\x0c\x2a\xa8\x02\x13\xe0\x42\x2c\x4b\x00\x19\x5a\x56\xdd\x92\xca\xa7\x9f\xba\xe7\x6b\x5a\xee\x38\x24\x0b\x9a\x87\x2a\x6a\x79\x54\x0f\xe3\x12\xf8\x55\xb9\xee\x01\xcc\xeb\x01\x64\x5f\x3c\xca\x96\x81\xbd\x99\x19\x12\x70\x2a\x66\x44\xa6\xe3\x29\x80\x42\x19\xac\xce\xe1\xef\x24\x8c\x92\x35\xca\xd6\x31\x41\x64\xaa\xb6\x1b\x57\x31\x2f\x99\x38\x26\xbf\xd6\x33\x22\x9a\x4b\xdc\xda\xf9\x17\x93\x27\xab\xa2\x80\x24\x31\x16\x64\x76\x80\x79\xf2\xac\xe4\x00\x4c\xb5\x12\x14\x5c\x10\xf7\x00\x39\xd1\x59\x09\xa2\x4e\xab\x98\xdb\x95\x56\x29\x26\x2c\xbd\x2c\xea\xe2\xd5\x80\x45\x10\xf3\x00\xc2\x67\xb5\xaa\xb0\x7b\xe1\x82\xcc\xc6\x2e\x44\x11\x09\xac\x55\x92\x99\x05\x49\x64\x2b\x7e\x61\x59\x0d\xa0\xb4\xb1\x4e\xd6\x20\x65\x06\x23\x45\x80\xc1\x49\x31\x4a\x74\x8e\x4d\x0b\x88\x14\x63\x4a\x0c\x22\xdb\xb1\x09\x81\x99\x89\xb9\x95\x18\x64\x5f\x47\xa5\x24\x9c\x40\xf2\x1f\x09\xca\x70\x95\xc5\xf3\x73\xc6\x05\xa2\x70\x02\xb1\x36\x09\xca\x52\xed\xed\x8c\x0b\x24\x21\xa8\x40\x22\x41\x59\xac\xbe\xa9\xe8\xdd\x77\x7d\x24\x04\xd5\x47\x24\x28\x4b\xe6\xb5\x87\x3c\xcd\x16\x33\x0c\x96\x24\x49\x71\x75\x76\xde\xe1\x00\x33\x8f\x2c\xaa\xc9\x3e\x64\xca\x44\xe9\xe4\x67\x7b\x06\xcb\x94\xa4\x38\x2d\x66\xb4\xab\x69\xa7\x40\xcd\x0d\x90\x1a\x01\xa7\x45\xcd\x54\x48\x9b\x4e\x3d\x91\x2c\x9e\x19\xc6\x4c\x1f\x5e\x78\x5a\x5e\x01\x29\xea\x4a\x85\x04\xa5\xe7\x47\x1c\x29\xaf\xc0\x8b\x80\x4e\xd4\xcb\x87\x0c\xd2\xc8\xa3\xf2\xc2\x26\xa0\x52\xbc\x0c\x26\x86\xeb\xa0\xa2\x85\x4d\x94\x93\xee\xb5\xf6\xab\x10\xe5\x67\x98\x28\x02\x4c\x43\x14\x61\xba\xbf\x16\xb8\x14\xa2\x80\x24\x31\x17\x84\x9f\x3b\xae\x05\xe0\x6e\x39\x00\x2b\x2d\x09\x4a\x43\x10\xde\x41\xae\xfe\xd1\x2d\x08\x60\x7f\x04\x70\xec\xa4\x3d\x8a\x70\x72\x5c\x63\x48\xb7\x1c\x19\xad\x1f\xf9\x92\xab\xd1\xc4\xf4\x10\x63\x72\x15\xa3\x53\x0c\x58\x3c\xef\x11\xce\x0f\x71\xc2\xed\x8c\x14\x71\x61\x79\xaf\x04\xd6\xae\x89\x6b\xa3\xd8\x70\xd9\xa2\x80\xf2\x5e\x09\x4c\x43\x14\xa3\x32\xc7\x65\xab\x02\xd2\xc4\x5c\x91\x43\xec\xbd\x9c\x95\x1e\x90\xcc\x17\xb2\xc7\xd0\xaa\x88\x7e\xc9\xeb\xb2\x05\xe9\x7b\x32\x48\x15\x47\xae\x0b\x11\x2d\x39\x60\x41\xa4\x47\x0c\x39\xc4\x96\xe6\x19\x29\x02\xdb\xf6\x52\xed\x7a\x35\x35\x51\xee\x79\x9d\x7c\xe9\x15\xb6\xe5\xa5\xda\xf1\x52\xb0\x62\x52\x7a\x3d\x36\x2d\x90\xed\x2e\xd5\x6e\x97\x82\x16\x93\xe2\xe7\xb1\x69\x01\x91\x62\x4e\x89\x7e\xb5\xeb\xd8\x84\x00\xa2\x6e\xe7\x26\x97\xca\x75\x38\x42\x4e\xdf\x71\x60\x7e\xd3\xc3\x6d\xf4\x4b\xd4\x47\xa5\x24\x85\xd4\xec\x45\x50\x9f\xb7\x95\xf4\x08\xda\xf7\x89\x93\x14\x54\x25\x97\xa0\x4c\xdf\x55\xda\x7b\xa2\x6a\x8f\x18\xf5\xec\x21\x82\x2c\xd1\x62\x3f\x5b\xb4\x45\x8b\x0b\xca\xd4\x64\xb0\x1e\x4e\xa3\x7b\x5c\xf7\x00\x2c\x80\x38\xb0\x73\x7e\xed\x00\xbb\x4c\x27\x72\x3a\x32\x85\x2c\x94\x45\x90\x45\xcb\x3a\xf2\xd1\xc8\x14\xb4\x34\x95\xa0\x2c\x99\xd6\x1e\xca\x38\xa7\x62\x5a\x90\xb7\x17\x45\x90\xa5\xc3\xe2\x67\xcd\x2b\x24\x81\xe8\x7e\x0d\x51\xd3\x69\x79\x76\x4d\x5f\x77\xb6\xe4\xb4\x19\x24\x55\x10\x41\x16\x93\x48\xc5\xde\xea\xbe\x09\x78\xb0\xb0\xd4\x7a\x1f\x85\x31\xf6\xb2\x6a\x5d\xf1\xa0\x5e\x6b\xa9\xb7\x93\x0f\xb0\xb0\xd8\x7e\xd5\x64\x95\xcf\x49\xc2\x48\x56\x7e\xd2\xa4\xa2\xc8\xb9\x27\x49\xca\x0d\xec\x69\x77\xd7\xcd\xd5\xe2\xd1\x27\xe3\x9b\xf1\x4f\xf5\x1e\x39\xf2\x84\xeb\xd5\xb7\xcb\x76\x37\xdb\x7c\xc1\xec\x16\x65\x49\x4e\x86\xf5\xe6\x3b\x2c\x6b\x2d\xbf\x6c\x56\xb5\x6f\x9b\x9f\x07\xf5\xbf\xc5\xf3\x3d\x0f\x9e\xff\x0f\x00\x00\xff\xff\x61\x31\x55\x23\x3e\x4d\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 19774, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
