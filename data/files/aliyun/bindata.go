// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package aliyun

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x4b\x8f\xdb\x36\x10\xbe\xef\xaf\x20\x74\x6a\x01\xdb\xa8\x65\x23\x5d\xec\x2d\x49\xd1\x24\x05\xda\xa0\x48\x9a\x4b\x91\x03\x2d\xb3\x32\x6b\x89\x52\xf4\xd8\xae\x77\xb1\xff\xbd\xd0\x63\x6d\x89\xa4\xc4\x21\x45\x3f\x62\xfb\x92\x0d\xa8\xcf\x22\xf5\x7d\x33\x9c\xe1\x90\xd2\xd3\x0d\x42\x0e\xc3\x21\x71\xee\x90\x83\x03\xba\xc9\x99\x33\x2a\xda\x08\xbb\x4f\x9d\x3b\xf4\xf7\x0d\x42\x08\x39\x4b\x72\x5f\x36\x23\xe4\x7c\xc3\x2f\xff\x8b\x93\x68\xe9\xdc\x20\xf4\xb5\xfc\x41\x42\x7c\x1a\xb1\xdd\x6f\x9e\xca\x7f\x11\x72\x82\xc8\xc3\x19\x8d\x58\xd1\xc3\x7b\xcc\xfc\xc7\x55\x94\x8f\xd0\xdb\x15\x65\x2f\x77\xda\xfe\xba\x80\x78\x6c\xbc\xaa\x51\xbb\xcb\x8f\x11\x23\xbb\x5b\x97\x4d\x4d\x5c\xdd\xfa\xb5\xfc\xfb\x3c\xea\xee\xff\x4f\xca\xfc\x25\x8e\xfa\xbb\xff\x56\x81\x54\xbd\xd7\xb0\xf1\x02\xde\xfd\x1b\x42\xff\xa5\xcc\xef\xef\x7e\x51\x81\x54\xdd\xd7\xb0\xf1\xee\x36\xed\xf6\x45\x47\xbb\x07\x1f\xee\xfb\x88\xf9\xeb\xa8\x39\x94\xb6\x4c\xc2\xe5\x0e\x99\x6a\x9c\x0e\x53\x9f\x56\x84\x3d\xae\x08\xeb\xa7\x2a\xad\x51\xaa\x11\xbc\xe0\x04\xb2\xb6\x17\x74\x86\x46\x03\xea\x45\x0c\x7d\xc1\x41\x40\x36\x23\xf4\xd7\xa7\xd7\xb2\xe1\xe5\xe9\xf8\x3f\x92\x66\xe3\x69\xef\xe0\xb6\xa8\xf6\xd0\x76\xcd\x1a\x03\xfb\x42\x13\x9f\x32\x8a\xfb\x86\x44\x30\x64\x48\x15\x6a\x8c\x75\x48\x61\x3e\x8e\xa3\x84\xc8\xfa\xc5\xf1\x38\x8d\xf2\x6c\x05\xe8\xbc\x0d\x6d\x93\xc2\x5d\xd3\xb2\x26\xcc\xfc\x15\xa6\x2a\x6b\xaa\x50\x6a\x6b\xaa\x70\x12\x6b\xaa\x2f\xf0\xbe\xb7\xbd\xa0\xe1\x7c\xbf\xe4\x8b\xe6\x50\x76\x23\x0d\x09\x44\xc5\x2d\x4a\x47\xc5\xcf\xd1\x7a\x13\x8d\xd0\x6f\x38\xc6\xac\x43\x48\x16\x25\x50\x21\x1b\x50\x2d\x53\xda\x2c\x59\xe1\x57\xaf\xf3\x34\x4b\x70\x40\xa5\x72\xb5\x6c\xc1\x85\x9b\x94\xab\x33\x92\x5f\x13\xcc\xd6\xff\xe4\x49\x36\x42\xef\x48\x12\x62\xb6\x91\x0d\x85\xe4\x63\x8f\xb0\x62\xa8\x0a\x4a\x9a\x40\x61\x18\xdb\x38\x4a\x59\x9a\x61\xe6\x91\xcf\x9b\x98\x48\xa2\x69\xba\xce\xcb\x4e\xbd\x74\xe2\x4d\x27\x01\x4e\xfc\x86\xcb\x2d\x49\xea\x25\x34\x7e\x19\xbf\x1c\xe4\xe1\x8c\xf8\x51\xb2\x29\x10\xef\x08\x23\x49\xf9\xbc\xe8\x03\xfa\xe1\xc3\x47\xf4\x31\xce\x68\x48\x1f\xc9\xf2\xc7\xc6\x0f\xe2\xa2\xcb\xdb\xdd\xa3\xe3\xd0\xb9\x43\xd3\x57\x1c\x17\xbd\x9e\x2c\x0f\x46\x5c\xab\x10\x50\x90\x34\x1e\x23\xf9\xdc\x8f\x64\x13\x5c\x73\x2e\xed\x17\xbe\x4d\x6c\x1a\xe2\x20\x50\x11\xcb\x81\xba\x89\xfd\xa3\xf8\xa3\x43\xee\x6d\x3f\xb7\x9d\x0c\x2a\xa8\x02\x13\xe0\x42\x2c\x4b\x00\x19\x5a\x56\xd3\x92\xca\xa7\x9f\xb9\xe7\x6b\x5a\xee\x24\x24\x4b\x9a\x87\x2a\x6a\x79\xd4\x00\xe3\x12\xf8\x55\xb9\xee\x01\xcc\xeb\x01\x64\x5f\x3c\xca\x96\x81\xbd\x9a\x1b\x12\x70\x2a\x66\x44\x66\x93\x19\x80\x42\x19\xac\xc9\xe1\xef\x24\x8c\x92\x0d\xca\x36\x31\x41\x64\xa6\xb6\x1b\x57\x31\x2f\x99\x38\x26\xbf\xd6\x33\x22\x9a\x4b\xdc\xba\xf9\x17\x93\x27\xab\xa2\x80\x24\x31\x16\x64\x7e\x80\x79\xf2\xac\xe4\x00\x4c\xb5\x12\x14\x5c\x10\xf7\x00\x39\xd1\x59\x09\xa2\x4e\xab\x98\xdb\x97\x56\x29\x26\x2c\xbd\x2c\xea\xe2\xd5\x80\x45\x10\xf3\x00\xc2\x67\xb5\xaa\xb0\x7b\xe1\x82\xcc\x27\x2e\x44\x11\x09\xac\x53\x92\xb9\x05\x49\x64\x2b\x7e\x61\x59\x0d\xa0\xb4\xb5\x4e\xd6\x20\x65\x0e\x23\x45\x80\xc1\x49\x31\x4a\x74\x8e\x4d\x0b\x88\x14\x63\x4a\x0c\x22\xdb\xb1\x09\x81\x99\x89\xb9\x95\x18\x64\x5f\x47\xa5\x24\x9c\x42\xf2\x1f\x09\xca\x70\x95\xc5\xf3\x73\xc6\x05\xa2\x70\x0a\xb1\x36\x09\xca\x52\xed\xed\x8c\x0b\x24\x21\xa8\x40\x22\x41\x59\xac\xbe\xa9\xe8\xdd\x77\x7d\x24\x04\xd5\x47\x24\x28\x4b\xe6\xb5\x87\x3c\xcd\x16\x33\x0c\x96\x24\x49\x71\x4d\x76\xde\xe0\x00\x33\x8f\x2c\xab\xc9\x3e\x64\xca\x44\xe9\xe4\x67\x7b\x06\xcb\x94\xa4\x38\x2d\x66\xb4\xab\x69\xa7\x40\xcd\x2d\x90\x1a\x01\xa7\x45\xcd\x4c\x48\x9b\x4e\x3d\x91\x2c\x9e\x19\xc6\xcc\x10\x5e\x78\x5a\xbe\x03\x52\xd4\x95\x0a\x09\x4a\xcf\x8f\x38\x52\xbe\x03\x2f\x02\x3a\xd1\x20\x1f\x32\x48\x23\x8f\xca\x0b\x9b\x82\x4a\xf1\x32\x98\x18\xae\x83\x8a\x16\x36\x55\x4e\xba\xd7\xda\xaf\x42\x94\x9f\x61\xa2\x08\x30\x0d\x51\x84\xe9\xfe\x5a\xe0\x52\x88\x02\x92\xc4\x5c\x10\x7e\xee\xb8\x16\x80\xfb\xe5\x00\xac\xb4\x24\x28\x0d\x41\x78\x07\xb9\xfa\x47\xbf\x20\x80\xfd\x11\xc0\xb1\x93\xee\x28\xc2\xc9\x71\x8d\x21\xfd\x72\x64\xb4\x79\xe4\x4b\xae\x46\x1b\x33\x40\x8c\xe9\x55\x8c\x5e\x31\x60\xf1\x7c\x40\x38\x3f\xc4\x09\xb7\x33\x52\xc4\x85\xe5\xbd\x12\x58\xb7\x26\xae\x8d\x62\xc3\x65\x8b\x02\xca\x7b\x25\x30\x0d\x51\x8c\xca\x1c\x97\xad\x0a\x48\x13\x73\x45\x0e\xb1\xf7\x72\x56\x7a\x40\x32\x5f\xc8\x1e\x43\xa7\x22\xfa\x25\xaf\xcb\x16\x64\xe8\xc9\x20\x55\x1c\xb9\x2e\x44\xb4\xe4\x80\x05\x91\x01\x31\xe4\x10\x5b\x9a\x67\xa4\x08\x6c\xdb\x4b\xb5\xeb\xd5\xd6\x44\xb9\xe7\x75\xf2\xa5\x57\xd8\x96\x97\x6a\xc7\x4b\xc1\x8a\x49\xe9\xf5\xd8\xb4\x40\xb6\xbb\x54\xbb\x5d\x0a\x5a\x4c\x8a\x9f\xc7\xa6\x05\x44\x8a\x39\x25\xfa\xd5\xae\x63\x13\x02\x88\xba\xbd\x9b\x5c\x2a\xd7\xe1\x08\x39\x7d\xc7\x81\xf9\xcd\x00\xb7\xd1\x2f\x51\x1f\x95\x92\x14\x52\xb3\x17\x41\x43\xde\x56\xd2\x23\x68\xdf\x27\x4e\x52\x50\x95\x5c\x82\x32\x7d\x57\x69\xef\x89\xaa\x3d\x62\xd4\xb3\x87\x08\xb2\x44\x8b\xfd\x6c\xd1\x16\x2d\x2e\x28\x53\x93\xc1\x06\x38\x8d\xee\x71\xdd\x03\xb0\x00\xe2\xc0\xce\xf9\xb5\x03\xec\x32\x9d\xc8\xe9\xc8\x14\xb2\x50\x16\x41\x16\x2d\xeb\xc8\x47\x23\x53\xd0\xd2\x54\x82\xb2\x64\x5a\x7b\x28\xe3\x9c\x8a\x69\x41\xde\x5e\x14\x41\x96\x0e\x8b\x9f\x35\xaf\x90\x04\xa2\xff\x35\x44\x4d\xa7\xe5\xd9\x35\x7d\xdd\xd9\x92\xd3\x66\x90\x54\x41\x04\x59\x4c\x22\x15\x7b\xab\xfb\x26\xe0\xc1\xc2\x52\xeb\x6d\x14\xc6\xd8\xcb\xaa\x75\xc5\x83\x7a\xad\xa5\xde\x4e\x3e\xc0\xc2\x62\xfb\x55\x93\x75\xbe\x20\x09\x23\x59\xf9\x49\x93\x8a\x22\xe7\x9e\x24\x29\x37\xb0\xa7\xdd\x5d\xeb\xab\xc5\xa3\x4f\x27\xb7\x93\x9f\x9a\x3d\x72\xe4\x09\xd7\xeb\x8f\x97\xed\xee\x56\x7f\xc2\xec\x0e\x65\x49\x4e\x46\xcd\xe6\x6f\x58\xd6\x5a\x7e\xda\xac\x6a\xdf\x36\x3f\xdf\x34\xff\x16\x0f\xf8\x7c\xf3\xfc\x7f\x00\x00\x00\xff\xff\xda\x18\xd0\x44\x40\x4d\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 19776, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
