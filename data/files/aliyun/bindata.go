// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package aliyun

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x4b\x8f\xdb\x36\x10\xbe\xfb\x57\x10\x3a\xb5\x80\x6d\xd4\xb2\x91\x2e\xf6\x96\xa4\x68\x92\x02\x6d\x50\x24\xcd\xa5\xc8\x81\x96\x59\x99\xb5\x44\x29\x7a\xa4\xeb\x5d\xec\x7f\x2f\xf4\x88\x2d\x91\x94\x38\xa4\xe8\x47\x6c\x5f\xd6\x00\xf9\xad\x48\x7d\xdf\x0c\x67\x38\xa4\xfd\x34\x42\xc8\x61\x38\x24\xce\x3d\x72\x70\x40\xb7\x39\x73\xc6\x45\x1b\x61\x5f\x9d\x7b\xf4\xf7\x08\x21\x84\x9c\x15\xf9\xea\x8c\x10\xfa\x5c\xf6\x24\xc4\xa7\x11\x4b\x77\xbd\x4f\xe5\x5f\x84\x9c\x20\xf2\x70\x46\x23\x56\x3c\xea\x2d\x66\xfe\xe3\x3a\xca\xc7\xe8\xf5\x9a\x32\x5c\x3e\xb3\x04\x55\xff\x5d\x40\x3c\x36\x59\xd7\xa8\x7d\xf7\x63\xc4\xc8\xfe\xd1\x65\x53\x13\x57\xb7\x7e\x2e\x3f\x9f\xc7\xdd\xe3\xff\x49\x99\xbf\xc2\x51\xff\xf0\x5f\x2a\x90\x6a\xf4\x1a\x36\x59\xc2\x87\x7f\x45\xe8\xbf\x94\xf9\xfd\xc3\x2f\x2b\x90\x6a\xf8\x1a\x36\xd9\x3f\xa6\xdd\xbe\xec\x68\xf7\xe0\xd3\x7d\x1b\x31\x7f\x13\x35\xa7\xd2\x96\x49\xe8\xee\x90\xa9\xc6\xe9\x30\xf5\x61\x4d\xd8\xe3\x9a\xb0\x7e\xaa\xd2\x1a\xa5\x9a\xc1\x37\x9c\x40\xd6\xae\x43\x67\x6a\x34\xa0\x5e\xc4\xd0\x27\x1c\x04\x64\x3b\x46\x7f\x7d\x78\x29\x9b\x5e\x9e\x4e\xfe\x23\x69\x36\x99\xf5\x4e\x6e\x87\x6a\x4f\x6d\xdf\xac\x31\xb1\x4f\x34\xf1\x29\xa3\xb8\x6f\x4a\x04\x43\xa6\x54\xa1\x26\x58\x87\x14\xe6\xe3\x38\x4a\x88\x6c\x5c\x1c\x4f\xd2\x28\xcf\xd6\x80\xc1\xdb\xd0\x36\x29\x5c\x9f\x96\x35\x61\xe6\xaf\x31\x55\x59\x53\x85\x52\x5b\x53\x85\x93\x58\x53\xdd\xc1\xfb\xde\xae\x43\xc3\xf9\x7e\xc9\x97\xcd\xa9\xec\x67\x1a\x12\x88\x8a\x3b\x94\x8e\x8a\x1f\xa3\xcd\x36\x1a\xa3\xdf\x70\x8c\x59\x87\x90\x2c\x4a\xa0\x42\x36\xa0\x5a\xa6\xb4\x5d\xb1\xc2\xaf\x5e\xe6\x69\x96\xe0\x80\x4a\xe5\x6a\xd9\x82\x0b\x37\x29\x57\x67\x26\xbf\x26\x98\x6d\xfe\xc9\x93\x6c\x8c\xde\x90\x24\xc4\x6c\x2b\x9b\x0a\xc9\x27\x1e\x61\xc5\x54\x15\x94\x34\x81\xc2\x34\x76\x71\x94\xb2\x34\xc3\xcc\x23\x1f\xb7\x31\x91\x44\xd3\x74\x93\x97\x83\x7a\xe9\xd4\x9b\x4d\x03\x9c\xf8\x0d\x97\x5b\x91\xd4\x4b\x68\xfc\x6d\xfe\x72\x90\x87\x33\xe2\x47\xc9\xb6\x40\xbc\x21\x8c\x24\xe5\xfb\xa2\x77\xe8\x87\x77\xef\xd1\xfb\x38\xa3\x21\x7d\x24\xab\x1f\x1b\xff\x10\x17\x43\xde\xed\x5f\x1d\x87\xce\x3d\x9a\xbd\xe0\xb8\xe8\xf5\x64\x79\x30\xe2\x5a\x85\x80\x82\xa4\xf1\x18\xc9\xd7\x7e\x24\x5b\xe0\x9a\x6b\x69\xbf\xf0\x6d\x62\xd3\x10\x07\x81\x8a\x58\x0e\xd4\x4d\xec\x1f\xc5\x87\x0e\xb9\x77\xfd\xdc\x76\x32\xa8\xa0\x0a\x4c\x80\x0b\xb1\x2c\x01\x64\x68\x59\x4d\x4b\x2a\xdf\x7e\xee\x5e\xae\x69\xb9\xd3\x90\xac\x68\x1e\xaa\xa8\xe5\x51\x03\x8c\x4b\xe0\x57\xe5\xba\x47\x30\xaf\x07\x90\x7d\xf1\x28\x5b\x06\xf6\x62\x61\x48\xc0\xb9\x98\x11\x99\x4f\xe7\x00\x0a\x65\xb0\x26\x87\xbf\x93\x30\x4a\xb6\x28\xdb\xc6\x04\x91\xb9\xda\x6e\x5c\xc5\xba\x64\xe2\x98\xfc\x5e\xcf\x88\x68\x2e\x71\xeb\xe6\x5f\x4c\x9e\xac\x8a\x02\x92\xc4\x58\x90\xc5\x11\xd6\xc9\x8b\x92\x03\xb0\xd4\x4a\x50\x70\x41\xdc\x23\xe4\x44\x17\x25\x88\x3a\xad\x62\x6e\x5f\x5a\xa5\x58\xb0\xf4\xb2\xa8\xab\x57\x03\x16\x41\xcc\x03\x08\x9f\xd5\xaa\xc2\xee\x95\x0b\xb2\x98\xba\x10\x45\x24\xb0\x4e\x49\x16\x16\x24\x91\xed\xf8\x85\x6d\x35\x80\xd2\xd6\x3e\x59\x83\x94\x05\x8c\x14\x01\x06\x27\xc5\x28\xd1\x39\x35\x2d\x20\x52\x8c\x29\x31\x88\x6c\xa7\x26\x04\x66\x26\xe6\x56\x62\x90\x7d\x9d\x94\x92\x70\x06\xc9\x7f\x24\x28\xc3\x5d\x16\xcf\xcf\x05\x17\x88\xc2\x19\xc4\xda\x24\x28\x4b\xb5\xb7\x0b\x2e\x90\x84\xa0\x02\x89\x04\x65\xb1\xfa\xa6\xa2\xf7\xd0\xf5\x91\x10\x54\x1f\x91\xa0\x2c\x99\xd7\x01\xf2\x34\x5b\xcc\x30\x58\x92\x24\xc5\x35\xd9\x79\x85\x03\xcc\x3c\xb2\xaa\x16\xfb\x90\x29\x13\xa5\xb3\x5f\xed\x19\x2c\x53\x92\xe2\xb4\x98\xd1\xae\xa6\x9d\x03\x35\x77\x40\x6a\x04\x9c\x16\x35\x73\x21\x6d\x3a\xf7\x44\xb2\x78\x67\x18\x33\x43\x78\xe1\x69\xf9\x0e\x48\x51\x57\x2a\x24\x28\x3d\x3f\xe2\x48\xf9\x0e\xbc\x08\xe8\x44\x83\x7c\xc8\x20\x8d\x3c\x29\x2f\x6c\x06\x2a\xc5\xcb\x60\x62\xb8\x0e\x2a\x5a\xd8\x4c\xb9\xe8\xde\x6a\xbf\x0a\x51\x7e\x86\x89\x22\xc0\x34\x44\x11\x96\xfb\x5b\x81\x4b\x21\x0a\x48\x12\x73\x41\xf8\xb5\xe3\x56\x00\xee\x97\x03\xb0\xd3\x92\xa0\x34\x04\xe1\x1d\xe4\xe6\x1f\xfd\x82\x00\xce\x47\x00\xd7\x4e\xba\xa3\x08\x27\xc7\x2d\x86\xf4\xcb\x91\xd1\xe6\x95\x2f\xb9\x1a\x6d\xcc\x00\x31\x66\x37\x31\x7a\xc5\x80\xc5\xf3\x01\xe1\xfc\x18\x37\xdc\x2e\x48\x11\x17\x96\xf7\x4a\x60\xdd\x9a\xb8\x36\x8a\x0d\xd7\x2d\x0a\x28\xef\x95\xc0\x34\x44\x31\x2a\x73\x5c\xb7\x2a\x20\x4d\xcc\x15\x39\xc6\xd9\xcb\x45\xe9\x01\xc9\x7c\x21\x67\x0c\x9d\x8a\xe8\x97\xbc\xae\x5b\x90\xa1\x37\x83\x54\x71\xe4\xb6\x11\xd1\x92\x03\x16\x44\x06\xc4\x90\x63\x1c\x69\x5e\x90\x22\xb0\x63\x2f\xd5\xa9\x57\x5b\x13\xe5\x99\xd7\xd9\x97\x5e\x61\x47\x5e\xaa\x13\x2f\x05\x2b\x26\xa5\xd7\x53\xd3\x02\x39\xee\x52\x9d\x76\x29\x68\x31\x29\x7e\x9e\x9a\x16\x10\x29\xe6\x94\xe8\x57\xbb\x4e\x4d\x08\x20\xea\xf6\x1e\x72\xa9\x5c\x87\x23\xe4\xfc\x1d\x07\xe6\x37\x03\xdc\x46\xbf\x44\x7d\x52\x4a\x52\x48\xcd\x5e\x04\x0d\xf9\xb6\x92\x1e\x41\x87\xbe\x71\x92\x82\xaa\xe4\x12\x94\xe9\x77\x95\x0e\x9e\xa8\xda\x23\x46\xbd\x7a\x88\x20\x4b\xb4\xd8\xcf\x16\x6d\xd1\xe2\x82\x32\x35\x19\x6c\x80\xd3\xe8\x5e\xd7\x3d\x02\x0b\x20\x0e\xec\xdc\x5f\x3b\xc2\x29\xd3\x99\xdc\x8e\x4c\x21\x1b\x65\x11\x64\xd1\xb2\x4e\x7c\x35\x32\x05\x6d\x4d\x25\x28\x4b\xa6\x75\x80\x32\xce\xb9\x98\x16\xe4\xdb\x8b\x22\xc8\xd2\x65\xf1\x8b\xe6\x15\x92\x40\xf4\x7f\x0d\x51\xd3\x69\x79\x76\x4d\xbf\xee\x6c\xc9\x69\x33\x48\xaa\x20\x82\x2c\x26\x91\x8a\xb3\xd5\x43\x13\xf0\x60\x61\xab\xf5\x3a\x0a\x63\xec\x65\xd5\xbe\xe2\x41\xbd\xd7\x52\x1f\x27\x1f\x61\x63\xb1\xfb\x55\x93\x4d\xbe\x24\x09\x23\x59\xf9\x93\x26\x15\x45\xce\x57\x92\xa4\xdc\xc4\x9e\xf6\x4f\xad\x7b\x8b\x57\x9f\x4d\xef\xa6\x3f\x35\x47\xe4\xc8\x13\xfa\xab\x5f\x29\xdb\x3f\xac\xfe\xad\xb2\x7b\x94\x25\x39\x19\x37\x9b\xbf\x60\x59\x6b\x9c\x44\xab\xba\x7d\xd7\xfc\x3c\x6a\x7e\x16\xef\xf7\x3c\x7a\xfe\x3f\x00\x00\xff\xff\x72\xf4\x0d\x90\x28\x4d\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 19752, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
