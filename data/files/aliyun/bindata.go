// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package aliyun

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x4d\x8f\xdb\x36\x10\xbd\xef\xaf\x20\x74\x6a\x01\xdb\xa8\x65\x23\x5d\xec\x2d\x49\xd1\x24\x05\xda\xa0\x48\x9a\x4b\x91\x03\x2d\xb3\x32\x6b\x89\x54\xf4\xb1\x5d\xef\x62\xff\x7b\x61\x5b\x6b\x4b\x24\x25\x0e\x29\xfa\x23\xb2\x2f\xd9\x80\x7a\x36\xc7\xef\xcd\x70\x86\x43\xda\x4f\x37\x08\x79\x0c\xc7\xc4\xbb\x43\x1e\x8e\xe8\xaa\x60\xde\x60\x3d\x46\xd8\x7d\xe6\xdd\xa1\xbf\x6f\x10\x42\xc8\x9b\x93\xfb\xcd\x30\x42\xde\x37\xfc\xf2\xbf\x24\xe5\x73\xef\x06\xa1\xaf\x9b\x17\xa4\x24\xa4\x9c\xed\x5f\xf3\xb4\xf9\x17\x21\x2f\xe2\x01\xce\x29\x67\xeb\x19\xde\x63\x16\x3e\x2e\x78\x31\x40\x6f\x17\x94\xbd\xbc\xd3\xee\xd5\x6b\x48\xc0\x86\x8b\x12\xb5\x7f\xfc\xc8\x19\xd9\xbf\xf5\x66\xa8\x8a\x2b\x47\xbf\x6e\xfe\x3e\x0f\x9a\xe7\xff\x93\xb2\x70\x8e\x79\xfb\xf4\xdf\xb6\x20\xdd\xec\x25\x6c\x38\x83\x4f\xff\x86\xd0\x7f\x29\x0b\xdb\xa7\x9f\x6d\x41\xba\xe9\x4b\xd8\x70\xff\x36\xf5\xf1\x59\xc3\x78\x00\x37\xf7\x3d\x67\xe1\x92\x57\x4d\xa9\xcb\x24\x3d\x6e\x90\xa9\xc4\x99\x30\xf5\x69\x41\xd8\xe3\x82\xb0\x76\xaa\xb2\x12\xa5\xb3\xe0\x05\x27\x91\xb5\x7b\x60\x62\x1a\x8d\x68\xc0\x19\xfa\x82\xa3\x88\xac\x06\xe8\xaf\x4f\xaf\x55\xe6\x15\xd9\xf0\x3f\x92\xe5\xc3\x71\xab\x71\x3b\x54\xdd\xb4\xfd\xb0\x81\x61\x5f\x68\x1a\x52\x46\x71\x9b\x49\x04\x43\x4c\xda\xa2\x86\xd8\x84\x14\x16\xe2\x84\xa7\x44\x35\x2f\x4e\x86\x19\x2f\xf2\x05\x60\xf2\x3a\xb4\x4e\x8a\xf0\xcc\xc8\x9b\x30\x0b\x17\x98\xea\xbc\x69\x8b\xd2\x7b\xd3\x16\xa7\xf0\xa6\xf2\x81\x18\x7b\xbb\x07\x06\xc1\xf7\x4b\x31\xab\x9a\xb2\xb7\x34\x26\x10\x15\x77\x28\x13\x15\x3f\xf3\xe5\x8a\x0f\xd0\x6f\x38\xc1\xac\x41\x48\xc6\x53\xa8\x90\x15\xa8\x91\x2b\xad\xe6\x6c\x1d\x57\xaf\x8b\x2c\x4f\x71\x44\x95\x72\xd5\x7c\xc1\x87\xbb\x94\x6f\x62\xc9\xaf\x29\x66\xcb\x7f\x8a\x34\x1f\xa0\x77\x24\x8d\x31\x5b\xa9\x4c\x21\xc5\x30\x20\x6c\x6d\xaa\x86\x92\x2a\x50\x32\x63\x97\x47\x29\xcb\x72\xcc\x02\xf2\x79\x95\x10\x45\x36\xcd\x96\xc5\x66\xd2\x20\x1b\x05\xe3\x51\x84\xd3\xb0\x12\x72\x73\x92\x05\x29\x4d\x5e\xec\x57\x83\x02\x9c\x93\x90\xa7\xab\x35\xe2\x1d\x61\x24\xdd\x7c\x5e\xf4\x01\xfd\xf0\xe1\x23\xfa\x98\xe4\x34\xa6\x8f\x64\xfe\x63\xe5\x05\xc9\x7a\xca\xdb\xfd\x47\xc7\xb1\x77\x87\xc6\xaf\x04\x2e\x5a\x23\x59\x9d\x8c\x84\x51\x29\xa1\x20\x65\x3e\x46\xea\xb5\x1f\xa9\x16\xb8\xea\x5a\xda\x2e\x7c\x9d\xd8\x2c\xc6\x51\xa4\x23\x56\x00\x35\x13\xfb\xc7\xfa\x8f\x09\xb9\xb7\xed\xdc\x36\x32\xa8\xa1\x0a\x4c\x80\x0f\xf1\x2c\x09\x64\xe9\x59\x55\x4f\xda\x7c\xfa\x89\xdf\x5f\xd7\xf2\x47\x31\x99\xd3\x22\xd6\x51\x2b\xa2\x3a\x38\x97\xc4\xaf\x2e\x74\x8f\xe0\x5e\x0f\x20\xff\x12\x51\xae\x1c\xec\xd5\xd4\x92\x80\x73\x71\x23\x32\x19\x4d\x00\x14\xaa\x60\x55\x0e\x7f\x27\x31\x4f\x57\x28\x5f\x25\x04\x91\x89\xde\x6f\x7c\xcd\xba\x64\x13\x98\xe2\x5e\xcf\x8a\x68\xa1\x70\x6b\xe6\x5f\x2e\x9e\x9c\x8a\x02\x92\xc4\x5a\x90\xe9\x11\xd6\xc9\x5e\xc9\x01\x58\x6a\x15\x28\xb8\x20\xfe\x11\x6a\xa2\x5e\x09\xa2\x2f\xab\x98\xdf\x56\x56\x69\x16\x2c\xb3\x2a\xea\xe2\xd5\x80\x65\x10\xfb\x04\x22\x56\xb5\xba\xb4\x7b\xe1\x82\x4c\x47\x3e\x44\x11\x05\xac\x51\x92\xa9\x03\x49\x54\x3b\x7e\x69\x5b\x0d\xa0\xb4\xb6\x4f\x36\x20\x65\x0a\x23\x45\x82\xc1\x49\xb1\x2a\x74\x4e\x4d\x0b\x88\x14\x6b\x4a\x2c\x32\xdb\xa9\x09\x81\xb9\x89\xbd\x97\x58\x54\x5f\x27\xa5\x24\x1e\x43\xea\x1f\x05\xca\x72\x97\x25\xf2\xd3\xe3\x06\x51\x3c\x86\x78\x9b\x02\xe5\xa8\xf7\xd6\xe3\x06\x49\x0c\x6a\x90\x28\x50\x0e\xbb\x6f\x3a\x7a\x0f\xdd\x1f\x89\x41\xfd\x11\x05\xca\x91\x7b\x1d\xa0\x4e\x73\xc5\x0c\x83\x15\x49\x4a\x5c\x95\x9d\x37\x38\xc2\x2c\x20\xf3\xed\x62\x1f\x33\x6d\xa1\x74\xf6\xab\x3d\x83\x55\x4a\x4a\x9c\x11\x33\xc6\xdd\xb4\x73\xa0\xe6\x16\x48\x8d\x84\x33\xa2\x66\x22\x95\x4d\xe7\x5e\x48\xae\x3f\x33\x8c\x99\x2e\xbc\x88\xb4\x7c\x07\xa4\xe8\x3b\x15\x0a\x94\x59\x1c\x09\xa4\x7c\x07\x51\x04\x0c\xa2\x4e\x31\x64\x51\x46\x9e\x94\x17\x36\x06\xb5\xe2\x55\x30\x39\x5d\x47\x5b\x5a\xd8\x58\xbb\xe8\x5e\x7b\xbf\x1a\x51\x7e\x86\x89\x22\xc1\x0c\x44\x91\x96\xfb\x6b\x83\x4b\x23\x0a\x48\x12\x7b\x41\xc4\xb5\xe3\xda\x00\x6e\x97\x03\xb0\xd3\x52\xa0\x0c\x04\x11\x03\xe4\x1a\x1f\xed\x82\x00\xce\x47\x00\xd7\x4e\x9a\xb3\x88\x20\xc7\x35\x87\xb4\xcb\x91\xd3\xea\x95\x2f\xb5\x1a\x75\x4c\x07\x31\xc6\x57\x31\x5a\xc5\x80\xe5\xf3\x0e\xe9\xfc\x18\x37\xdc\x7a\xa4\x88\x0f\xab\x7b\x15\xb0\x66\x4d\x7c\x17\xcd\x86\xcb\x16\x05\x54\xf7\x2a\x60\x06\xa2\x58\xb5\x39\x2e\x5b\x15\x90\x26\xf6\x8a\x1c\xe3\xec\xa5\x57\x7a\x40\x2a\x5f\xc8\x19\x43\xa3\x22\xe6\x2d\xaf\xcb\x16\xa4\xeb\xcd\x20\x5d\x1e\xb9\x6e\x44\x8c\xe4\x80\x25\x91\x0e\x39\xe4\x18\x47\x9a\x3d\x52\x04\x76\xec\xa5\x3b\xf5\xaa\x6b\xa2\x3d\xf3\x3a\xfb\xd6\x2b\xec\xc8\x4b\x77\xe2\xa5\x61\xc5\xa6\xf5\x7a\x6a\x5a\x20\xc7\x5d\xba\xd3\x2e\x0d\x2d\x36\xcd\xcf\x53\xd3\x02\x22\xc5\x9e\x12\xf3\x6e\xd7\xa9\x09\x01\x64\xdd\xd6\x43\x2e\x5d\xe8\x08\x84\x9c\x7f\xe0\xc0\xe2\xa6\x43\xd8\x98\xb7\xa8\x4f\x4a\x49\x06\xe9\xd9\xcb\xa0\x2e\xdf\x56\x32\x23\xe8\xd0\x37\x4e\x32\x50\x97\x5c\x81\xb2\xfd\xae\xd2\xc1\x0b\x55\x77\xc4\xe8\x57\x0f\x19\xe4\x88\x16\xf7\xd5\xa2\x2b\x5a\x7c\x50\xa5\xa6\x82\x75\x08\x1a\xd3\xeb\xba\x47\x60\x01\xc4\x81\x9b\xfb\x6b\x47\x38\x65\x3a\x93\xdb\x91\x19\x64\xa3\x2c\x83\x1c\x7a\xd6\x89\xaf\x46\x66\xa0\xad\xa9\x02\xe5\xc8\xb5\x0e\xd0\xc6\x39\x17\xd7\x82\x7c\x7b\x51\x06\x39\xba\x2c\xde\x6b\x5e\x21\x05\x44\xfb\xd7\x10\x0d\x83\x56\x64\xd7\xf6\xeb\xce\x8e\x82\x36\x87\x94\x0a\x32\xc8\x61\x11\xa9\x39\x5b\x3d\x34\x01\x0f\x0e\xb6\x5a\x6f\x79\x9c\xe0\x20\xdf\xee\x2b\x1e\xf4\x7b\x2d\xfd\x71\xf2\x11\x36\x16\xbb\x5f\x35\x59\x16\x33\x92\x32\x92\xab\x7e\xd2\xe4\x9e\xa4\x59\x49\xc3\x78\x74\x3b\xfa\xa9\x91\x24\xe1\x69\xf9\x13\x65\x4f\x7b\x4b\xe6\xe4\xde\xbb\x43\x79\x5a\x90\x8a\x79\xdf\xb0\x3c\xb6\xf9\xe9\xb2\xed\x68\x39\xf8\xbc\x37\xf8\xe6\xf9\xff\x00\x00\x00\xff\xff\xc1\xca\xea\x93\x16\x4d\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 19734, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
