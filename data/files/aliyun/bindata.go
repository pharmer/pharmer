// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package aliyun

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x4d\x8f\xdb\x36\x13\xbe\xef\xaf\x20\x74\x7a\x5f\xc0\x36\x60\xad\x91\x2c\xf6\x96\xa4\x68\x92\x02\x6d\x50\x24\xcd\xa5\xc8\x81\x96\x59\x99\xb5\x44\xba\xfa\xd8\xae\x77\xb1\xff\xbd\x90\xe4\x58\x12\x49\x89\x43\x8a\xfe\x88\xed\xcb\x2e\x20\x3e\x12\x47\xcf\x33\x43\x0e\x87\x94\x9f\x6f\x10\xf2\x18\x8e\x89\x77\x8f\x3c\x1c\xd1\x4d\xce\xbc\x51\x71\x8d\xb0\x07\xef\x1e\xfd\x79\x83\x10\x42\xde\x82\x3c\x78\x37\x08\x7d\x2b\x5b\x12\x12\x52\xce\xd2\x5d\xeb\x73\xf9\x17\x21\x2f\xe2\x01\xce\x28\x67\xc5\xa3\x3e\x60\x16\x3e\x2d\x79\x3e\x42\xef\x96\x94\xe1\xf2\x99\x25\xa8\xba\xbb\x80\x04\x6c\xbc\xdc\xa2\xea\xe6\x27\xce\x48\xfd\xe8\xf2\x52\x13\xb7\xbd\xfa\xad\xfc\xff\x32\xea\xee\xff\x77\xca\xc2\x05\xe6\xfd\xdd\xff\x53\x81\x74\xbd\x6f\x61\xe3\x39\xbc\xfb\xb7\x84\xfe\x4d\x59\xd8\xdf\xfd\xbc\x02\xe9\xba\xdf\xc2\xc6\xf5\x63\xda\xd7\xe7\x1d\xd7\x03\xb8\xb9\x1f\x38\x0b\x57\xbc\x69\x4a\x5b\x26\xa9\xb9\x43\xa6\x2d\xce\x84\xa9\xcf\x4b\xc2\x9e\x96\x84\xf5\x53\x95\x6e\x51\x3a\x0b\xbe\xe3\x24\xb2\x76\x0d\x26\xa6\xd1\x88\x06\x9c\xa1\xaf\x38\x8a\xc8\x66\x84\xfe\xf8\xfc\x46\x65\x5e\x9e\x8e\xff\x25\x69\x36\x9e\xf6\x1a\xb7\x43\xb5\x4d\xab\x2f\x1b\x18\xf6\x95\x26\x21\x65\x14\xf7\x99\x44\x30\xc4\xa4\x0a\x35\xc6\x26\xa4\xb0\x10\xaf\x79\x42\x54\xfd\xe2\xf5\x38\xe5\x79\xb6\x04\x74\xde\x86\xb6\x49\x11\xda\x8c\xbc\x09\xb3\x70\x89\xa9\xce\x9b\x2a\x94\xde\x9b\x2a\x9c\xc2\x9b\xb6\x0d\x62\xec\xed\x1a\x0c\x82\xef\xa7\x7c\xde\x34\xa5\xb6\x34\x26\x10\x15\x77\x28\x13\x15\xbf\xf0\xd5\x86\x8f\xd0\x2f\x78\x8d\x59\x87\x90\x8c\x27\x50\x21\x1b\x50\x23\x57\xda\x2c\x58\x11\x57\x6f\xf2\x34\x4b\x70\x44\x95\x72\xb5\x7c\xc1\x87\xbb\x94\x6f\x62\xc9\xcf\x09\x66\xab\xbf\xf2\x24\x1b\xa1\xf7\x24\x89\x31\xdb\xa8\x4c\x21\xf9\x38\x20\xac\x30\x55\x43\x49\x13\x28\x99\xb1\x9b\x47\x29\x4b\x33\xcc\x02\xf2\x65\xb3\x26\x8a\xd9\x34\x5d\xe5\x65\xa7\x41\x3a\x09\xa6\x93\x08\x27\x61\x23\xe4\x16\x24\x0d\x12\xba\xfe\x6e\xbf\x1a\x14\xe0\x8c\x84\x3c\xd9\x14\x88\xf7\x84\x91\xa4\x7c\x5f\xf4\x11\xfd\xef\xe3\x27\xf4\x69\x9d\xd1\x98\x3e\x91\xc5\xff\x1b\x37\xac\x8b\x2e\xef\xea\x57\xc7\xb1\x77\x8f\xa6\xaf\x04\x2e\x7a\x23\x59\x3d\x19\x09\x57\xa5\x09\x05\x29\xe7\x63\xa4\x1e\xfb\x91\x6a\x80\x6b\x8e\xa5\xfd\xc2\xb7\x89\x4d\x63\x1c\x45\x3a\x62\x05\x50\x37\xb1\xbf\x15\xff\x4c\xc8\xbd\xeb\xe7\xb6\x93\x41\x0d\x55\x60\x02\x7c\x88\x67\x49\x20\x4b\xcf\x6a\x7a\x52\xf9\xf6\xb7\xfe\xf9\xba\x96\x3f\x89\xc9\x82\xe6\xb1\x8e\x5a\x11\x35\xc0\xb9\x24\x7e\x75\xa1\x7b\x00\xf7\x7a\x04\xf9\x97\x88\x72\xe5\x60\xaf\x66\x96\x04\x9c\x8a\x1b\x91\xdb\xc9\x2d\x80\x42\x15\xac\xc9\xe1\xaf\x24\xe6\xc9\x06\x65\x9b\x35\x41\xe4\x56\xef\x37\xbe\x66\x5c\xb2\x09\x4c\x71\xad\x67\x45\xb4\x90\xb8\x75\xf3\x2f\x27\x4f\x4e\x45\x01\x49\x62\x2d\xc8\xec\x00\xe3\xe4\x59\xc9\x01\x18\x6a\x15\x28\xb8\x20\xfe\x01\x72\xa2\xb3\x12\x44\x9f\x56\x31\xbf\x2f\xad\xd2\x0c\x58\x66\x59\xd4\xc5\xab\x01\x9b\x41\xec\x27\x10\x31\xab\xd5\x4d\xbb\x17\x2e\xc8\x6c\xe2\x43\x14\x51\xc0\x3a\x25\x99\x39\x90\x44\xb5\xe2\x97\x96\xd5\x00\x4a\x5b\xeb\x64\x03\x52\x66\x30\x52\x24\x18\x9c\x14\xab\x44\xe7\xd8\xb4\x80\x48\xb1\xa6\xc4\x62\x66\x3b\x36\x21\x30\x37\xb1\xf7\x12\x8b\xec\xeb\xa8\x94\xc4\x53\x48\xfe\xa3\x40\x59\xae\xb2\x44\x7e\xce\xb8\x40\x14\x4f\x21\xde\xa6\x40\x39\xaa\xbd\x9d\x71\x81\x24\x06\x15\x48\x14\x28\x87\xd5\x37\x1d\xbd\xfb\xae\x8f\xc4\xa0\xfa\x88\x02\xe5\xc8\xbd\xf6\x90\xa7\xb9\x62\x86\xc1\x92\x24\x25\xae\xc9\xce\x5b\x1c\x61\x16\x90\x45\x35\xd8\xc7\x4c\x9b\x28\x9d\xfc\x68\xcf\x60\x99\x92\x12\x67\xc4\x8c\x71\x35\xed\x14\xa8\xb9\x03\x52\x23\xe1\x8c\xa8\xb9\x95\xd2\xa6\x53\x4f\x24\x8b\x77\x86\x31\x33\x84\x17\x91\x96\x1f\x80\x14\x7d\xa5\x42\x81\x32\x8b\x23\x81\x94\x1f\x20\x8a\x80\x41\x34\x28\x86\x2c\xd2\xc8\xa3\xf2\xc2\xa6\xa0\x52\xbc\x0a\x26\x4f\xd7\x51\x45\x0b\x9b\x6a\x07\xdd\x6b\xed\x57\x23\xca\x6b\x98\x28\x12\xcc\x40\x14\x69\xb8\xbf\x16\xb8\x34\xa2\x80\x24\xb1\x17\x44\x1c\x3b\xae\x05\xe0\x7e\x39\x00\x2b\x2d\x05\xca\x40\x10\x31\x40\xae\xf1\xd1\x2f\x08\x60\x7f\x04\x70\xec\xa4\x7b\x16\x11\xe4\xb8\xce\x21\xfd\x72\x64\xb4\x79\xe4\x4b\xad\x46\x1b\x33\x40\x8c\xe9\x55\x8c\x5e\x31\x60\xf3\xf9\x80\xe9\xfc\x10\x27\xdc\xce\x48\x11\x1f\x96\xf7\x2a\x60\xdd\x9a\xf8\x2e\x8a\x0d\x97\x2d\x0a\x28\xef\x55\xc0\x0c\x44\xb1\x2a\x73\x5c\xb6\x2a\x20\x4d\xec\x15\x39\xc4\xde\xcb\x59\xe9\x01\xc9\x7c\x21\x7b\x0c\x9d\x8a\x98\x97\xbc\x2e\x5b\x90\xa1\x27\x83\x74\xf3\xc8\x75\x21\x62\x24\x07\x6c\x12\x19\x30\x87\x1c\x62\x4b\xf3\x8c\x14\x81\x6d\x7b\xe9\x76\xbd\xda\x9a\x68\xf7\xbc\x4e\xbe\xf4\x0a\xdb\xf2\xd2\xed\x78\x69\x58\xb1\x29\xbd\x1e\x9b\x16\xc8\x76\x97\x6e\xb7\x4b\x43\x8b\x4d\xf1\xf3\xd8\xb4\x80\x48\xb1\xa7\xc4\xbc\xda\x75\x6c\x42\x00\xb3\x6e\xef\x26\x97\x2e\x74\x04\x42\x4e\x3f\x70\x60\x71\x33\x20\x6c\xcc\x4b\xd4\x47\xa5\x24\x85\xd4\xec\x65\xd0\x90\xaf\x95\xcc\x08\xda\xf7\x89\x93\x14\x54\x25\x57\xa0\x6c\xbf\x55\xda\x7b\xa2\xea\x8e\x18\xfd\xe8\x21\x83\x1c\xd1\xe2\x3e\x5b\x74\x45\x8b\x0f\xca\xd4\x54\xb0\x01\x41\x63\x7a\x5c\xf7\x00\x2c\x80\x38\x70\x73\x7e\xed\x00\xbb\x4c\x27\x72\x3a\x32\x85\x2c\x94\x65\x90\x43\xcf\x3a\xf2\xd1\xc8\x14\xb4\x34\x55\xa0\x1c\xb9\xd6\x1e\xca\x38\xa7\xe2\x5a\x90\xaf\x17\x65\x90\xa3\xc3\xe2\x67\xcd\x2b\x24\x81\xe8\xff\x0c\xd1\x30\x68\x45\x76\x6d\x3f\x77\x76\x14\xb4\x19\x24\x55\x90\x41\x0e\x93\x48\xcd\xde\xea\xbe\x09\x78\x74\xb0\xd4\x7a\xc7\xe3\x35\x0e\xb2\x6a\x5d\xf1\xa8\x5f\x6b\xe9\xb7\x93\x0f\xb0\xb0\xd8\xfd\xaa\xc9\x2a\x9f\x93\x84\x91\xac\xfc\x49\x93\x8a\x22\xef\x81\x24\xa9\x60\xd8\x73\xfd\xd4\x6d\x6b\xf1\xea\xd3\xc9\xeb\xc9\xac\xd9\xa3\x40\x9e\xd4\x9e\x71\x1e\xd5\x1d\x6d\x2f\x16\x26\xe0\x45\x5c\xdf\xb0\x6b\x7c\x69\xbe\x4c\xf9\x03\x67\xad\x1b\x17\xa4\xb8\x94\x25\x39\xa9\xef\xb8\x69\xfe\x2f\x5e\xf6\xe5\xe6\xe5\xbf\x00\x00\x00\xff\xff\xf4\x2d\x72\x9b\x35\x4d\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 19765, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
