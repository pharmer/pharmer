// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package aws

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x9a\xdf\x6e\xe3\xb6\x12\xc6\xef\xf3\x14\x84\xae\x63\x9f\x44\xf6\xc9\x06\x7b\x17\xa4\xd9\x22\x48\x17\x09\xea\x74\x8b\xa2\x58\x18\x34\x35\x71\x58\x4b\xa4\x4a\x4a\xc9\x7a\x17\x79\x9a\x3e\x4a\x5f\xac\x90\xe4\xc8\x12\x35\xd2\x88\x30\x7c\xb3\x7f\xc8\x4f\x93\xdf\x0c\xbf\x99\x58\x92\x7f\x9c\x30\x16\x28\x9e\x40\xf0\x91\x05\xfc\xd5\x06\xa7\xc5\x02\xa8\x97\xe0\x23\xfb\xf3\x84\x31\xc6\x82\x08\x5e\xca\x55\xc6\x82\xbf\x79\x70\xc2\xd8\xd7\x52\x63\x60\x2d\xb5\xb2\xb5\xee\x47\xf9\x27\x63\x41\xac\x05\xcf\xa4\x56\x45\xc4\x2f\xd2\xac\xa5\x92\x7c\x17\xa0\xbe\xac\xd8\xcb\xed\x04\xb8\xcd\x26\xe7\xfb\xcd\xef\x5a\xc1\x3e\x62\xb9\x54\xab\xf6\x31\x9a\xab\x2b\x74\x55\xa0\xab\x11\xba\x0a\xc1\x6e\xf1\x6b\xf9\xf7\xdb\x69\x7f\x36\xf7\xcf\x52\x0f\x65\x12\x8e\xca\x24\x44\x33\x09\xd1\x4c\x42\x31\x9e\xee\x9a\xc7\xf2\x49\x9b\xfe\x6a\xbf\xc2\x98\x6a\x57\x2a\x97\xb1\x5a\x75\x19\xab\x55\x0f\xc6\x7b\x03\x6b\xad\x86\xf8\xc8\x1a\x56\x2a\x94\xaf\x53\xc3\x6a\xd5\x83\xef\xd6\x40\xcc\x55\x84\x01\x42\x3e\xa6\x80\xb5\xaa\x05\x58\xaf\xae\xd0\x55\x0f\xc0\x5f\xb4\x8a\xf0\x02\xbe\x47\x1b\x2e\xe0\xb1\xf9\x16\x52\xad\x79\xaa\x0d\x60\x88\x3c\x9d\x58\x9d\x67\xcf\x23\xda\xbe\x2d\x6d\xc1\xb6\xb7\x56\xfd\x5b\x1e\xd8\x8f\x7a\xb3\x45\x5b\x9b\xa7\x13\xa5\xcd\x58\xe4\x86\xd4\x45\x6e\x6c\xb9\xc8\x8d\x2d\x02\xb9\xa7\x94\x8d\x23\x6f\x9d\xc5\x36\x52\xb0\x1d\x5f\xe6\xb0\xbf\xcc\x61\x7f\x99\xa9\xf6\xda\x33\x5b\xde\x19\xf8\x2d\xdc\x7f\xff\xd1\xec\x81\xe7\xb1\x1e\x44\xae\xa3\xb4\x68\xeb\xd5\x15\xba\xea\x5d\xd7\x3e\xc8\xcf\x79\xb2\xe2\x72\x54\x4d\x7b\x6c\xdb\x63\x59\x0f\x46\xc8\x27\x02\x54\x66\x78\xdc\x47\xf9\xc9\x70\xb5\x79\xca\x4d\x46\xcd\x82\x3a\x8e\x3b\x0e\xea\x0d\x77\x22\xd4\x1b\x2e\x6e\xfd\xc1\x40\x2a\x9b\x71\x25\xe0\x71\x9b\x02\xf2\xf1\xc0\x6e\xf2\x02\x31\x0b\xa7\x89\x14\xa6\x71\xd6\x11\x58\x61\x64\xfa\x9e\x43\x57\x20\x78\x06\x6b\x6d\xb6\xc5\xee\xcf\xa0\xc0\xf0\x98\x3d\xe4\x26\xd5\xb6\x31\x6d\x44\x5a\x84\x3f\xdf\xb7\x32\x4f\x8a\xff\xa3\x25\xdd\xa3\xd8\x84\xc7\xf1\x10\x8a\x23\x38\x00\x25\x24\x50\x12\x88\x64\x9e\x0c\x96\xc5\x51\x78\xc0\x84\x0e\xcc\x9c\x80\x89\xb9\x59\xc3\x10\x8b\x23\x38\x00\xe5\x72\x08\x25\x99\x13\x28\x5d\xc1\x11\x51\xbe\x91\x2c\xae\xc2\x03\x66\xee\x5a\xf7\x82\xa0\x09\x69\x9c\x8e\xc4\x83\xe7\xd2\xe1\x99\x0d\x1a\x38\x99\x4f\xe7\x34\x4f\x47\xe2\xd3\x4f\x17\x0e\xd0\xc5\xa0\x89\x93\xf9\xf4\xfc\x8c\x26\xea\x6a\x7c\x8e\xec\xac\x73\x66\x67\x83\x4c\x33\xaa\xcb\x11\xc5\x01\x23\x67\x36\xfd\xf0\x7f\x82\x87\x28\x50\x47\x70\x40\x77\x7d\x98\x52\x30\xd4\x71\x75\x15\x87\xf4\x17\x45\x43\xf6\x17\x22\x39\xa4\xbf\x06\xad\x23\xa8\x41\xd8\x15\x34\x59\xae\x75\x92\xe6\x19\xb0\xfb\x34\x93\x89\xfc\x0e\x11\x75\x58\x94\x75\x04\x39\x0d\x11\x85\x17\x91\x7b\x5e\x84\x7d\x04\x3d\x10\x31\x89\x17\x92\x7b\x64\xc3\x16\x12\xf4\x48\xc4\x24\x5e\x44\x9d\xa1\x48\xba\xe8\x92\x46\xea\x48\xbc\x90\x66\x9d\x39\x3d\x8c\x44\xcd\xa0\xae\xe0\xb8\xc6\x26\xc7\x10\xa2\x38\xaa\xb1\xe9\x49\x84\x49\x8e\x69\xec\x19\x6d\x6c\x44\x72\x54\x63\xcf\x68\x63\x23\x12\x3f\x63\xbb\x56\x1a\x36\xf6\x3a\x24\xcf\x0d\x93\xb4\x7e\x83\x3c\xfc\xc6\x6e\x77\x77\x55\xf6\xb0\x33\x5b\x87\x64\x81\x30\xc9\x68\x1a\xcf\xe2\x18\xaa\xeb\xbb\x82\x26\xca\x67\x48\xb4\xd9\x32\x3d\xb6\xe9\x87\x6b\x63\xc8\x96\x47\x14\x3e\x38\x6e\xc7\xcf\xce\x86\x5b\xde\xd0\x2d\x8f\x49\x7c\x90\x5c\xf7\x5c\x0c\xde\x29\x1b\xba\xe3\x31\x89\x0f\x50\xa7\xe1\xcf\xc3\xc1\x1b\x0e\x43\x77\x3c\x26\xf1\x41\xea\x78\x3a\x9c\x0f\xde\x72\xc8\x90\xf2\x11\xa2\x68\x02\x2d\x32\x6d\xf8\xda\xe3\x57\x07\x65\x24\x49\xcf\x20\x4c\xe2\xc5\xe4\xe7\x24\x19\x92\x4e\xc2\x24\x5e\x44\xbe\x56\x92\xf4\x6c\xc4\x24\x5e\x4c\xbe\x5e\x8a\x48\x2f\x21\x8a\xa3\x7a\x29\xa2\xbd\x84\x49\x8e\xe8\xa5\x88\xf6\x12\x26\x39\xaa\x97\x22\xda\x4b\x98\xc4\xcf\x4b\x2e\x53\xed\xa5\xfa\x59\xac\x30\x10\x81\xca\x24\x8f\x91\x27\xb1\xa9\xd1\x2f\x32\x02\x53\xfc\xb0\xab\xdf\x17\x0d\x50\x69\xd3\x98\x6f\x3f\x69\x93\xf0\xac\xd8\x7d\x92\x10\x37\x7e\x3c\x57\x4a\x67\xe5\xc3\xe6\x22\xea\x7b\xbc\x22\xe2\x33\x37\x09\x98\x29\x4f\x53\x2b\x74\x04\x53\xa1\x93\xff\x89\x38\xb7\x19\x98\xc9\x9e\xa5\x08\xd9\x7c\xac\x8c\x5e\x16\x29\xeb\x7b\x89\xad\x2a\xe6\x5e\xb6\xbb\xea\xad\xe6\x2f\xd3\x69\x3f\x0c\xdf\x27\x51\xbd\xfe\x16\x5a\x3d\xc9\xf5\xae\x32\xcb\xab\xeb\xeb\x9b\xc5\x62\x79\x77\xf3\xc7\xf2\xf6\xa7\x06\x46\x11\x4b\x9b\x24\xa8\xde\x9d\x2f\xb9\x10\x60\xed\x72\x03\xdb\xa5\x8c\xda\xb2\xbf\xec\xee\xfd\x42\x29\xb9\x83\xad\x1b\x27\xe6\x2b\x28\x71\xaf\x4a\x05\xbb\x83\x2d\xbb\x75\x82\x48\x95\xe6\xe5\x79\x64\xf0\x2d\x0b\xea\x9d\xb7\xd3\x91\x69\x2c\x6e\xae\x7f\xbd\x79\x6c\x64\xd3\x9f\x8a\x05\x61\x20\x6b\x64\x84\xa7\x53\xc9\xae\xde\x93\xea\x49\x69\x51\xaa\xd8\x3e\xb3\x9e\xb4\x52\x6e\xed\xab\x36\x51\x23\xb5\xdd\xbf\xdc\x77\x0c\x9b\x7c\x05\x46\x41\x06\xf6\x0b\x18\x8b\x7f\x0f\xe1\xa5\xda\x29\x02\x9f\x4f\x2f\xa7\x67\xbd\x8d\xe8\xec\x56\x5f\x7e\x68\xb8\x3a\x82\x62\x21\x33\x39\x9c\x34\xa9\x4a\x9a\x93\xb7\xff\x02\x00\x00\xff\xff\x25\x40\x55\x87\x42\x21\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 8514, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
