// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package aws

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x9a\xe1\x4e\xe3\x46\x10\xc7\xbf\xf3\x14\x2b\x7f\xbe\xa4\xe0\xa4\x80\xee\x1b\xa2\x5c\x85\xe8\x09\xd4\xd0\x56\x55\x75\x8a\x36\xeb\x21\x6c\xb1\x77\xdd\x5d\x1b\x2e\x77\xe2\x69\xfa\x28\x7d\xb1\xca\x76\xe2\xd8\xeb\xb1\xc7\xab\x28\x5f\x8e\x63\xf6\xef\xcd\x6f\x66\xff\x33\x60\x9b\xef\x27\x8c\x05\x8a\x27\x10\x7c\x64\x01\x7f\xb3\xc1\x87\x22\x00\xea\x35\xf8\xc8\xfe\x3a\x61\x8c\xb1\x20\x82\xd7\x32\xca\x58\xf0\x0f\x0f\x4e\x18\xfb\x52\x6a\x0c\xac\xa5\x56\xb6\xd6\x7d\x2f\xff\x65\x2c\x88\xb5\xe0\x99\xd4\xaa\xd8\xf1\x77\x69\xd6\x52\x49\xbe\xdd\xa0\xbe\xac\x58\xcb\xed\x04\xb8\xcd\x26\x67\xfb\xc5\x6f\x5a\xc1\x7e\xc7\x32\x54\xab\xf6\x7b\x34\xa3\x2b\x34\x2a\xd0\x68\x84\x46\x21\xd8\x06\xbf\x94\x5f\xdf\x3f\xf4\x67\x73\xff\x2c\xf5\x50\x26\xe1\xa8\x4c\x42\x34\x93\x10\xcd\x24\x14\xe3\xe9\xae\x79\x2c\x9f\xb4\xe9\xaf\xf6\x1b\x8c\xa9\x76\xa5\x72\x19\xab\xa8\xcb\x58\x45\x3d\x18\xef\x0d\xac\xb5\x1a\xe2\x23\x6b\x58\xa9\x50\xbe\x4e\x0d\xab\xa8\x07\xdf\xad\x81\x98\xab\x08\x03\x84\x7c\x4c\x01\x6b\x55\x0b\xb0\x8e\xae\xd0\xa8\x07\xe0\x2f\x5a\x45\x78\x01\x77\xbb\x0d\x17\xf0\xd8\x7c\x0b\xa9\xd6\x3c\xd5\x06\x30\x44\x9e\x4e\xac\xce\xb3\xe7\x11\x6d\xdf\x96\xb6\x60\xdb\x4b\xab\xfe\x25\x0f\xec\x47\xfd\xb2\x41\x5b\x9b\xa7\x13\xa5\xcd\x58\xe4\x86\xd4\x45\x6e\x2c\xb9\xc8\x8d\x25\x02\xb9\xa7\x94\x8d\x23\x6f\x9d\xc5\x26\x52\xb0\x19\x5f\xe6\xb0\xbf\xcc\x61\x7f\x99\xa9\xf6\xda\x33\x5b\xde\x19\xf8\x2d\xdc\xff\xfe\xd5\xec\x81\xe7\xb1\x1e\x44\xae\x77\x69\xd1\xd6\xd1\x15\x1a\xf5\xae\x6b\x1f\xe4\xe7\x3c\x59\x71\x39\xaa\xa6\x3d\xb6\xed\xb1\xac\x07\x23\xe4\x13\x01\x2a\x33\x3c\xee\xa3\xfc\x64\xb8\x7a\x79\xca\x4d\x46\xcd\x82\x7a\x1f\x77\x1c\xd4\x0b\xee\x44\xa8\x17\x5c\xdc\xfa\x17\x03\xa9\x6c\xc6\x95\x80\xc7\x4d\x0a\xc8\xaf\x07\xf6\x25\x2f\x10\xb3\x70\x9a\x48\x61\x1a\x67\x1d\x81\x15\x46\xa6\xbb\x1c\xba\x02\xc1\x33\x58\x6b\xb3\x29\x56\x7f\x06\x05\x86\xc7\xec\x21\x37\xa9\xb6\x8d\x69\x23\xd2\x62\xfb\xb3\x7d\x2b\xf3\xa4\xf8\x1e\x2d\xe9\x1e\xc5\x26\x3c\x8e\x87\x50\x1c\xc1\x01\x28\x21\x81\x92\x40\x24\xf3\x64\xb0\x2c\x8e\xc2\x03\x26\x74\x60\xe6\x04\x4c\xcc\xcd\x1a\x86\x58\x1c\xc1\x01\x28\x97\x43\x28\xc9\x9c\x40\xe9\x0a\x8e\x88\xf2\x95\x64\x71\x15\x1e\x30\x73\xd7\xba\xe7\x04\x4d\x48\xe3\x74\x24\x1e\x3c\x97\x0e\xcf\x6c\xd0\xc0\xc9\x7c\x3a\xa7\x79\x3a\x12\x9f\x7e\x3a\x77\x80\xce\x07\x4d\x9c\xcc\xa7\x67\xa7\x34\x51\x57\xe3\x73\x64\xa7\x9d\x33\x3b\x1d\x64\x9a\x51\x5d\x8e\x28\x0e\x18\x39\xb3\xe9\xc5\x8f\x04\x0f\x51\xa0\x8e\xe0\x80\xee\xba\x98\x52\x30\xd4\x71\x75\x15\x87\xf4\x17\x45\x43\xf6\x17\x22\x39\xa4\xbf\x06\xad\x23\xa8\x41\xd8\x15\x34\x59\xae\x75\x92\xe6\x19\xb0\xfb\x34\x93\x89\xfc\x06\x11\x75\x58\x94\x75\x04\x39\x0d\x11\x85\x17\x91\x7b\x5e\x84\x7d\x04\x3d\x10\x31\x89\x17\x92\x7b\x64\xc3\x16\x12\xf4\x48\xc4\x24\x5e\x44\x9d\xa1\x48\xba\xe8\x92\x46\xea\x48\xbc\x90\x66\x9d\x39\x3d\x8c\x44\xcd\xa0\xae\xe0\xb8\xc6\x26\xc7\x10\xa2\x38\xaa\xb1\xe9\x49\x84\x49\x8e\x69\xec\x19\x6d\x6c\x44\x72\x54\x63\xcf\x68\x63\x23\x12\x3f\x63\xbb\x56\x1a\x36\xf6\x3a\x24\xcf\x0d\x93\xb4\x7e\x82\x3c\xfc\xc6\x6e\xb7\x77\x55\xf6\xb0\x33\x5b\x87\x64\x81\x30\xc9\x68\x1a\xcf\xe2\x18\xaa\xeb\xbb\x82\x26\xca\x67\x48\xb4\xd9\x30\x3d\xb6\xe9\x87\x6b\x63\xc8\x96\x47\x14\x3e\x38\x6e\xc7\xcf\x4e\x87\x5b\xde\xd0\x2d\x8f\x49\x7c\x90\x5c\xf7\x9c\x0f\xde\x29\x1b\xba\xe3\x31\x89\x0f\x50\xa7\xe1\xcf\xc2\xc1\x1b\x0e\x43\x77\x3c\x26\xf1\x41\xea\x78\x3a\x9c\x0f\xde\x72\xc8\x90\xf2\x11\xa2\x68\x02\x2d\x32\x6d\xf8\xda\xe3\x47\x07\x65\x24\x49\xcf\x20\x4c\xe2\xc5\xe4\xe7\x24\x19\x92\x4e\xc2\x24\x5e\x44\xbe\x56\x92\xf4\x6c\xc4\x24\x5e\x4c\xbe\x5e\x8a\x48\x2f\x21\x8a\xa3\x7a\x29\xa2\xbd\x84\x49\x8e\xe8\xa5\x88\xf6\x12\x26\x39\xaa\x97\x22\xda\x4b\x98\xc4\xcf\x4b\x2e\x53\xed\xa5\xfa\x59\xac\x30\x10\x81\xca\x24\x8f\x91\x27\xb1\xa9\xd1\xaf\x32\x02\x53\x7c\xd8\xd5\x1f\x8b\x06\xa8\xb4\x69\xcc\x37\x9f\xb4\x49\x78\x56\xac\x3e\x49\x88\x1b\x1f\xcf\x95\xd2\x59\xf9\xb0\xb9\xd8\x75\xb7\x5f\xb1\xe3\x33\x37\x09\x98\x29\x4f\x53\x2b\x74\x04\x53\xa1\x93\x1f\x44\x9c\xdb\x0c\xcc\x64\xcf\x52\x6c\xd9\x7c\xac\x8c\x5e\x16\x29\xeb\x7b\x89\xad\x2a\xe6\x5e\xb6\xbd\xea\xbd\xe6\x2f\xd3\x69\x3f\x0c\xdf\x27\x51\xbd\xfe\x16\x5a\x3d\xc9\xf5\xb6\x32\xcb\xab\xeb\xeb\x9b\xc5\x62\x79\x77\xf3\xe7\xf2\xf6\xa7\x06\x46\xb1\x97\x36\x49\x50\xbd\x3b\x5f\x72\x21\xc0\xda\xe5\x0b\x6c\x96\x32\x6a\xcb\xfe\xb6\xdb\xf7\x0b\xa5\xe4\x0e\x36\xee\x3e\x31\x5f\x41\x89\x7b\x55\x2a\xd8\x1d\x6c\xd8\xad\xb3\x89\x54\x69\x5e\x9e\x47\x06\x5f\xb3\xa0\x5e\x79\xff\x30\x32\x8d\xc5\xcd\xf5\xaf\x37\x8f\x8d\x6c\xfa\x53\xb1\x20\x0c\x64\x8d\x8c\xf0\x74\x2a\xd9\xd5\x2e\xa9\x9e\x94\x16\xa5\x8a\xed\x33\xeb\x49\x2b\xe5\xd6\xbe\x69\x13\x35\x52\xdb\xfe\xcf\x7d\xc7\xf0\x92\xaf\xc0\x28\xc8\x60\x6f\xc0\xe0\x15\x8c\x6d\xfd\x45\x42\xb3\x1c\xbb\xd5\xe2\x63\xce\xa6\x17\xd3\x79\xd3\x4c\x4e\x63\x76\xd6\xab\x3f\x87\x68\xd5\x36\x82\x22\x94\x99\x1c\x3a\xac\xd5\xd7\x82\xf8\xfd\xe4\xfd\xff\x00\x00\x00\xff\xff\x69\xf3\x33\xd1\x60\x21\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 8544, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
