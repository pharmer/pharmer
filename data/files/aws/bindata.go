// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package aws

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x9a\xe1\x4e\xe3\x46\x10\xc7\xbf\xf3\x14\x2b\x7f\x26\x29\x38\x29\x87\xf8\x86\x28\x57\x21\x7a\x02\x35\xb4\x55\x55\x9d\xa2\xcd\x7a\x08\x5b\xec\x5d\xdf\xae\x1d\x2e\x77\xe2\x69\xfa\x28\x7d\xb1\x93\x9d\xc4\xb1\xd7\x63\x8f\x57\x51\xbe\xdc\xc1\xec\xdf\xcb\x6f\x66\xff\x33\x60\x3b\xdf\x4f\x18\x0b\x14\x4f\x20\xb8\x62\x01\x7f\xb3\xc1\x69\x11\x00\xb5\xb2\xc1\x15\xfb\xe7\x84\x31\xc6\x82\x08\x56\x65\x98\xb1\xe0\x0b\xdf\x7d\x95\x1a\x1d\x05\x27\x8c\x7d\x2e\x2f\x30\xb0\x94\x5a\xed\xaf\xf9\x5e\xfe\xcb\x58\x10\x6b\xc1\x33\xa9\x55\xb1\xfd\x9f\xd2\x2c\xa5\x92\xbb\x2d\xaa\xcb\x8a\xb5\xdc\x8e\x80\xdb\x6c\x74\xbe\x5f\xfc\xa6\x15\xec\x77\x2c\x43\x95\x6a\xbf\x47\x3d\xba\x40\xa3\x02\x8d\x46\x68\x14\x82\x6d\xf0\x73\xf9\xff\xfb\x69\x77\x36\x0f\x2f\x52\xf7\x65\x12\x0e\xca\x24\x44\x33\x09\xd1\x4c\x42\x31\x9c\xee\x86\xc7\xf2\x59\x9b\xee\x6a\xbf\xc1\x90\x6a\x6f\x54\x2e\xe3\x26\xea\x32\x6e\xa2\x1e\x8c\x0f\x06\x96\x5a\xf5\xf1\x91\x35\xdc\xa8\x50\xbe\x56\x0d\x37\x51\x0f\xbe\x3b\x03\x31\x57\x11\x06\x08\xf9\x90\x02\x56\xaa\x06\x60\x15\x5d\xa0\x51\x0f\xc0\xdf\xb4\x8a\xf0\x02\xee\x76\xeb\x2f\xe0\xb1\xf9\x66\x52\x2d\x79\xaa\x0d\x60\x88\x3c\x1d\x59\x9d\x67\x2f\x03\xda\xbe\x29\x6d\xc0\x36\x97\x16\xdd\x4b\x1e\xd8\x4f\xfa\x75\x8d\xb6\x36\x4f\x47\x4a\x9b\xa1\xc8\x35\xa9\x8b\x5c\x5b\x72\x91\x6b\x4b\x04\x72\x47\x29\x6b\x47\xde\x38\x8b\x75\xa4\x60\x3d\xbc\xcc\x61\x77\x99\xc3\xee\x32\x53\xed\xb5\x67\xb6\xbc\x35\xf0\x1b\xb8\xff\xff\xa7\xd9\x23\xcf\x63\xdd\x8b\x5c\xed\xd2\xa0\xad\xa2\x0b\x34\xea\x5d\xd7\x2e\xc8\x4f\x79\xb2\xe0\x72\x50\x4d\x3b\x6c\xdb\x61\x59\x0f\x46\xc8\x47\x02\x54\x66\x78\xdc\x45\xf9\xd1\x70\xf5\xfa\x9c\x9b\x8c\x9a\x05\xd5\x3e\xee\x38\xa8\x16\xdc\x89\x50\x2d\xb8\xb8\xd5\x1f\x06\x52\xd9\x8c\x2b\x01\x4f\xeb\x14\x90\x3f\x0f\xec\x6b\x5e\x20\x66\xe1\x38\x91\xc2\xd4\xce\x3a\x02\x2b\x8c\x4c\x77\x39\xb4\x05\x82\x67\xb0\xd4\x66\x5d\xac\xfe\x0a\x0a\x0c\x8f\xd9\x63\x6e\x52\x6d\x6b\xd3\x46\xa4\xc5\xf6\xe7\xfb\x56\xe6\x49\xf1\x3d\x5a\xd2\x3d\x8a\x4d\x78\x1c\xf7\xa1\x38\x82\x03\x50\x42\x02\x25\x81\x48\xe6\x49\x6f\x59\x1c\x85\x07\x4c\xe8\xc0\x4c\x09\x98\x98\x9b\x25\xf4\xb1\x38\x82\x03\x50\x2e\xfb\x50\x92\x29\x81\xd2\x16\x1c\x11\xe5\x2b\xc9\xe2\x2a\x3c\x60\xa6\xae\x75\x2f\x08\x9a\x90\xc6\x69\x49\x3c\x78\x2e\x1d\x9e\x49\xaf\x81\x93\xe9\x78\x4a\xf3\xb4\x24\x3e\xfd\x74\xe1\x00\x5d\xf4\x9a\x38\x99\x8e\xcf\xcf\x68\xa2\xb6\xc6\xe7\xc8\xce\x5a\x67\x76\xd6\xcb\x34\xa1\xba\x1c\x51\x1c\x30\x72\x26\xe3\x0f\x3f\x13\x3c\x44\x81\x5a\x82\x03\xba\xeb\xc3\x98\x82\xa1\x8e\xab\xad\x38\xa4\xbf\x28\x1a\xb2\xbf\x10\xc9\x21\xfd\xd5\x6b\x1d\x41\x0d\xc2\xb6\xa0\xce\x72\xa3\x93\x34\xcf\x80\x3d\xa4\x99\x4c\xe4\x37\x88\xa8\xc3\xa2\xac\x23\xc8\x69\x88\x28\xbc\x88\xdc\xf3\x22\xec\x23\xe8\x81\x88\x49\xbc\x90\xdc\x23\xeb\xb7\x90\xa0\x47\x22\x26\xf1\x22\x6a\x0d\x45\xd2\x45\x97\x34\x52\x4b\xe2\x85\x34\x69\xcd\xe9\x7e\x24\x6a\x06\xb5\x05\xc7\x35\x36\x39\x86\x10\xc5\x51\x8d\x4d\x4f\x22\x4c\x72\x4c\x63\x4f\x68\x63\x23\x92\xa3\x1a\x7b\x42\x1b\x1b\x91\xf8\x19\xdb\xb5\x52\xbf\xb1\x97\x21\x79\x6e\x98\xa4\xf1\x1b\xe4\xf1\x0f\x76\xb7\xbd\xab\xb2\x87\x9d\xd9\x32\x24\x0b\x84\x49\x06\xd3\x78\x16\xc7\x50\x5d\xdf\x16\xd4\x51\x3e\x41\xa2\xcd\x9a\xe9\xa1\x4d\xdf\x5f\x1b\x43\xb6\x3c\xa2\xf0\xc1\x71\x3b\x7e\x72\xd6\xdf\xf2\x86\x6e\x79\x4c\xe2\x83\xe4\xba\xe7\xa2\xf7\x4e\xd9\xd0\x1d\x8f\x49\x7c\x80\x5a\x0d\x7f\x1e\xf6\xde\x70\x18\xba\xe3\x31\x89\x0f\x52\xcb\xd3\xe1\xb4\xf7\x96\x43\x86\x94\x8f\x10\x45\x1d\x68\x96\x69\xc3\x97\x1e\xbf\x3a\x28\x23\x49\x7a\x06\x61\x12\x2f\x26\x3f\x27\xc9\x90\x74\x12\x26\xf1\x22\xf2\xb5\x92\xa4\x67\x23\x26\xf1\x62\xf2\xf5\x52\x44\x7a\x09\x51\x1c\xd5\x4b\x11\xed\x25\x4c\x72\x44\x2f\x45\xb4\x97\x30\xc9\x51\xbd\x14\xd1\x5e\xc2\x24\x7e\x5e\x72\x99\x2a\x2f\x55\xcf\x62\x85\x81\x08\x54\x26\x79\x8c\x3c\x89\x4d\x8d\x5e\xc9\x08\x4c\xf1\xc3\xae\xff\x9a\xd5\x40\xa5\x4d\x63\xbe\xfe\xa8\x4d\xc2\xb3\x62\xf5\x59\x42\x5c\xfb\xf1\x5c\x29\x9d\x95\x0f\x9b\x8b\x5d\x77\xfb\x15\x3b\xbe\x70\x93\x80\x19\xf3\x34\xb5\x42\x47\x30\x16\x3a\xf9\x49\xc4\xb9\xcd\xc0\x8c\xf6\x2c\xc5\x96\xf5\xc7\xca\xe8\x65\x91\xb2\xbe\x97\xd8\x4d\xc5\xdc\xcb\xb6\x57\xbd\x57\xfc\x65\x3a\xcd\x87\xe1\xfb\x24\x36\xef\xc2\x85\x56\xcf\x72\xb9\xad\xcc\xfc\xfa\xe6\xe6\x76\x36\x9b\xdf\xdf\xfe\x3d\xbf\xfb\xa5\x86\x51\xec\xa5\x4d\x12\x6c\x5e\xa4\xcf\xb9\x10\x60\xed\xfc\x15\xd6\x73\x19\x35\x65\xff\xda\xed\xfb\x85\x52\x72\x0f\x6b\x77\x9f\x98\x2f\xa0\xc4\xbd\x2e\x15\xec\x1e\xd6\xec\xce\xd9\x44\xaa\x34\x2f\xcf\x23\x83\xaf\x59\x50\xad\xbc\x9f\x0e\x4c\x63\x76\x7b\xf3\xfb\xed\x53\x2d\x9b\xee\x54\x2c\x08\x03\x59\x2d\x23\x3c\x9d\x8d\xec\x7a\x97\x54\x47\x4a\xb3\x52\xc5\xf6\x99\x75\xa4\x95\x72\x6b\xdf\xb4\x89\x6a\xa9\x6d\xbf\x72\xdf\x31\xbc\xe6\x0b\x30\x0a\x32\xec\x05\xc3\x0a\x8c\xdd\xb6\xd8\xf9\xf8\x72\x7c\xd6\xd9\x80\xce\xea\xf6\x13\x10\x35\x3b\x47\xb0\x0a\xae\x58\x66\x72\xa8\x39\xef\x0b\x6f\xc7\xca\x4f\x46\x6c\xa2\x27\x75\xf0\x12\xf8\xe4\xfd\x47\x00\x00\x00\xff\xff\x90\x0b\x51\x5a\x72\x21\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 8562, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
