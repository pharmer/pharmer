// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package aws

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x9a\xc1\x6e\xe3\x36\x10\x86\xef\x79\x0a\x42\xe7\xd8\x88\x65\x37\x09\xf6\x56\x2c\xb0\x45\xb0\x5d\x24\x40\xb6\xed\xa1\x58\x04\xb4\x34\xf1\xb2\x96\x48\x95\xa2\x92\x55\x82\x3c\x4d\x1f\xa5\x2f\xb6\x90\xec\xc8\x12\x39\xe2\x88\x30\x7c\x89\xed\xe1\x6f\xfa\xe3\xf0\x9f\xb1\x45\xe5\xf5\x8c\xb1\x48\xf2\x1c\xa2\x0f\x2c\xe2\xcf\x65\x74\xde\x04\x40\x3e\x45\x1f\xd8\xdf\x67\x8c\x31\x16\xa5\xf0\xd4\x46\x19\x8b\xfe\xe5\xd1\x19\x63\xdf\x5a\x8d\x86\x8d\x50\xb2\xec\x74\xaf\xed\x5f\xc6\xa2\x4c\x25\xdc\x08\x25\x9b\x19\xff\x14\x7a\x23\xa4\xe0\xfb\x09\xba\xb7\x35\x63\x55\x39\x03\x5e\x9a\xd9\xe2\x30\xf8\xa2\x24\x1c\x66\x6c\x43\x9d\xea\x30\x47\x3f\xba\x46\xa3\x09\x1a\x4d\xd1\x28\x44\xfb\xe0\xb7\xf6\xf1\xed\x7c\x7c\x35\xb7\xdf\x85\xf2\xad\x24\x9e\xb4\x92\x18\x5d\x49\x8c\xae\x24\x4e\xa6\xd3\x7d\xe4\x99\x78\x54\x7a\x3c\xdb\xcf\x30\x25\xdb\x3b\x95\xcd\xb8\x8b\xda\x8c\xbb\x68\x00\xe3\xad\x86\x8d\x92\x3e\x3e\x32\x87\x3b\x15\xca\xe7\xe4\x70\x17\x0d\xe0\xbb\xd1\x90\x71\x99\x62\x80\x50\x4d\x49\x60\xa7\x1a\x00\x76\xd1\x35\x1a\x0d\x00\xfc\x5d\xc9\x14\x4f\xe0\xfb\x6c\xfe\x04\x9e\x9a\xef\x5e\xc8\x0d\x2f\x94\x06\x0c\x91\x17\xb3\x52\x55\xe6\xfb\x84\xb2\x1f\x4a\x07\xb0\xc3\xa1\xf5\xf8\x50\x00\xf6\x57\xb5\xad\xd1\xd2\xe6\xc5\x4c\x2a\x3d\x15\xb9\x27\xb5\x91\x7b\x43\x36\x72\x6f\x88\x40\x1e\x49\x65\x6f\xcb\x07\x7b\x51\xa7\x12\xea\xe9\x69\x8e\xc7\xd3\x1c\x8f\xa7\x99\x2a\xaf\x03\x73\xc9\x9d\x86\x3f\xc0\xfd\xff\x3f\xc5\xee\x78\x95\x29\x2f\x72\x37\xcb\x80\xb6\x8b\xae\xd1\x68\x70\x5e\xc7\x20\xbf\x54\xf9\x9a\x8b\x49\x39\x1d\xb1\xed\x88\x65\x03\x18\xa1\x9a\x25\x20\x8d\xe6\xd9\x18\xe5\x27\xcd\xe5\xf6\xb1\xd2\x86\xea\x05\xdd\x3c\x76\x3b\xe8\x06\xec\x8e\xd0\x0d\xd8\xb8\xdd\x0f\x03\x21\x4b\xc3\x65\x02\x5f\xeb\x02\x90\x9f\x07\xe5\xb6\x6a\x10\x4d\x3c\xcf\x45\xa2\x7b\x7b\x9d\x42\x99\x68\x51\xbc\xaf\xc1\x15\x24\xdc\xc0\x46\xe9\xba\x19\xfd\x0d\x24\x68\x9e\xb1\xbb\x4a\x17\xaa\xec\x75\x9b\xa4\x68\xa6\x5f\x1c\x4a\x99\xe7\xcd\x6b\x34\xa5\x07\x94\x32\xe7\x59\xe6\x43\xb1\x04\x47\xa0\xc4\x04\x4a\x0e\xa9\xa8\x72\x6f\x5a\x2c\x45\x00\x4c\x6c\xc1\xac\x08\x98\x8c\xeb\x0d\xf8\x58\x2c\xc1\x11\x28\xd7\x3e\x94\x7c\x45\xa0\xb8\x82\x13\xa2\xfc\x20\x59\x6c\x45\x00\xcc\xca\xb6\xee\x25\x41\x13\xd3\x38\x8e\x24\x80\xe7\xda\xe2\x59\x7a\x0d\x9c\xaf\xe6\x2b\x9a\xc7\x91\x84\xd4\xd3\xa5\x05\x74\xe9\x35\x71\xbe\x9a\x2f\x2e\x68\x22\x57\x13\xb2\x65\x17\xce\x9e\x5d\x78\x99\x96\x54\x95\x23\x8a\x23\x5a\xce\x72\x7e\xf5\x0b\xc1\x43\x24\xc8\x11\x1c\x51\x5d\x57\x73\x0a\x86\xda\x2e\x57\x71\x4c\x7d\x51\x34\x64\x7d\x21\x92\x63\xea\xcb\x6b\x9d\x84\x6a\x84\xae\xa0\xcf\xf2\x51\xe5\x45\x65\x80\xdd\x16\x46\xe4\xe2\x05\x52\x6a\xb3\x28\xeb\x24\x64\x37\x44\x14\x41\x44\xf6\x7e\x11\xf6\x49\xe8\x86\x88\x49\x82\x90\xec\x2d\xf3\x5b\x28\xa1\x5b\x22\x26\x09\x22\x72\x9a\x22\xe9\xa2\x6b\x1a\xc9\x91\x04\x21\x2d\x9d\x3e\xed\x47\xa2\x7a\x90\x2b\x38\xad\xb1\xc9\x36\x84\x28\x4e\x6a\x6c\xba\x13\x61\x92\x53\x1a\x7b\x49\x1b\x1b\x91\x9c\xd4\xd8\x4b\xda\xd8\x88\x24\xcc\xd8\xb6\x95\xfc\xc6\xde\xc4\xe4\xbe\x61\x92\xc1\x37\xc8\xdd\x1f\xec\x66\x7f\x55\x55\x1e\xb7\x67\x9b\x98\x4c\x10\x26\x99\x4c\x13\x98\x1c\x4d\x55\xbd\x2b\xe8\xa3\x7c\x81\x5c\xe9\x9a\xa9\xa9\x45\xef\xcf\x8d\x26\x4b\x1e\x51\x84\xe0\xd8\x15\xbf\xbc\xf0\x97\xbc\xa6\x4b\x1e\x93\x84\x20\xd9\xee\xb9\xf4\x5e\x29\x6b\xba\xe2\x31\x49\x08\x90\x53\xf0\x8b\xd8\x7b\xc1\xa1\xe9\x8a\xc7\x24\x21\x48\x8e\xa7\xe3\x95\xf7\x92\x43\xc4\x94\x8f\x10\x45\x1f\xe8\xde\x28\xcd\x37\x01\x5f\x1d\x94\x91\x04\xdd\x83\x30\x49\x10\x53\x98\x93\x44\x4c\x3a\x09\x93\x04\x11\x85\x5a\x49\xd0\xbd\x11\x93\x04\x31\x85\x7a\x29\x25\xbd\x84\x28\x4e\xea\xa5\x94\xf6\x12\x26\x39\xa1\x97\x52\xda\x4b\x98\xe4\xa4\x5e\x4a\x69\x2f\x61\x92\x30\x2f\xd9\x4c\x9d\x97\xba\xb3\xd8\x44\x43\x0a\xd2\x08\x9e\x21\x27\xb1\xa6\x2e\xda\xdb\xbe\xbf\xfe\x75\xdf\x83\x14\x65\x91\xf1\xfa\x93\xd2\x39\x37\xcd\xe8\xa3\x80\xac\xf7\xd1\xed\xcb\xe1\x41\xf2\x6b\xf7\x8c\xb1\xe8\x9f\x72\x7f\x90\xfe\x5c\x3e\xf0\x24\x81\xb2\x7c\xd8\x42\xfd\x20\xfa\x37\x5f\xfb\xb7\x9c\x5b\xc9\x67\x44\x91\xf1\x35\x64\x2d\x5e\x2b\x61\x9f\xa1\x66\x37\x96\x46\xc8\xa2\x6a\x21\x0d\xfc\x30\x51\x37\xf2\x76\x4e\xb3\x95\x90\x68\x30\x3d\x44\x9c\x8f\x90\x75\x90\xf7\xad\x8e\x1d\x58\xa7\x81\xee\x9f\xd9\x47\xe8\xdb\x6a\x0d\x5a\x82\x69\xcf\xcf\x77\x4b\x88\x9e\x40\x97\x83\x1b\xee\xfd\xc5\xbd\x8f\x36\x1f\xb1\x98\x5f\xcd\x57\xfd\x53\x7b\xcb\x77\xce\xb8\x51\x2a\x3b\x7c\xd0\x3e\xd8\x20\xf0\x34\x3f\xbc\x01\xcb\xee\xfe\x1f\x05\x06\x6f\x4c\xa1\x09\x19\x5d\x81\xb3\xcc\xdd\x63\xb3\xd8\xb7\xb3\xb7\x9f\x01\x00\x00\xff\xff\xfb\x2b\xc3\xc3\x7a\x20\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 8314, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
