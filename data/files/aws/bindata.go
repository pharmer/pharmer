// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package aws

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x9a\x6f\x6f\xdb\x36\x10\xc6\xdf\xe7\x53\x10\x7a\x5d\x7b\x89\xec\xa5\x41\xdf\x05\x59\x3a\x04\x59\x91\x60\xce\x3a\x0c\x43\x61\xd0\xd4\xc5\xe1\x2c\x91\x2a\x29\x25\x75\x8b\x7c\x9a\x7d\x94\x7d\xb1\x41\x92\x23\x4b\xd4\x49\x27\xc2\xf0\x9b\xfe\x39\x3e\x62\x7e\x77\x7c\xee\x62\x49\xfe\x71\xc2\x58\xa0\x78\x02\xc1\x07\x16\xf0\x17\x1b\xbc\x2b\x02\xa0\x9e\x83\x0f\xec\xef\x13\xc6\x18\x0b\x22\x78\x2e\xa3\x8c\x05\x5f\x79\x70\xc2\xd8\x97\x52\x63\x60\x2d\xb5\xb2\xb5\xee\x47\xf9\x27\x63\x41\xac\x05\xcf\xa4\x56\xc5\x8e\x9f\xa5\x59\x4b\x25\xf9\x6e\x83\xfa\xb2\x62\x2d\xb7\x13\xe0\x36\x9b\x9c\xed\x17\xbf\x6b\x05\xfb\x1d\xcb\x50\xad\xda\xef\xd1\x8c\xae\xd0\xa8\x40\xa3\x11\x1a\x85\x60\x17\xfc\x52\xfe\xfd\xfa\xae\x3f\x9b\xbb\x27\xa9\x87\x32\x09\x47\x65\x12\xa2\x99\x84\x68\x26\xa1\x18\x4f\x77\xc5\x63\xf9\xa8\x4d\x7f\xb5\x5f\x60\x4c\xb5\x2b\x95\xcb\x58\x45\x5d\xc6\x2a\xea\xc1\x78\x67\x60\xad\xd5\x10\x1f\x59\xc3\x4a\x85\xf2\x75\x6a\x58\x45\x3d\xf8\x6e\x0c\xc4\x5c\x45\x18\x20\xe4\x63\x0a\x58\xab\x5a\x80\x75\x74\x85\x46\x3d\x00\x7f\xd3\x2a\xc2\x0b\xf8\xb6\xdb\x70\x01\x8f\xcd\xb7\x90\x6a\xcd\x53\x6d\x00\x43\xe4\xe9\xc4\xea\x3c\x7b\x1a\xd1\xf6\x6d\x69\x0b\xb6\xbd\xb4\xea\x5f\xf2\xc0\x7e\xd0\x9b\x2d\xda\xda\x3c\x9d\x28\x6d\xc6\x22\x37\xa4\x2e\x72\x63\xc9\x45\x6e\x2c\x11\xc8\x3d\xa5\x6c\x1c\x79\xeb\x2c\xb6\x91\x82\xed\xf8\x32\x87\xfd\x65\x0e\xfb\xcb\x4c\xb5\xd7\x9e\xd9\xf2\xce\xc0\x6f\xe1\xfe\xf7\xaf\x66\xf7\x3c\x8f\xf5\x20\x72\xbd\x4b\x8b\xb6\x8e\xae\xd0\xa8\x77\x5d\xfb\x20\x3f\xe5\xc9\x8a\xcb\x51\x35\xed\xb1\x6d\x8f\x65\x3d\x18\x21\x9f\x08\x50\x99\xe1\x71\x1f\xe5\x47\xc3\xd5\xe6\x31\x37\x19\x35\x0b\xea\x7d\xdc\x71\x50\x2f\xb8\x13\xa1\x5e\x70\x71\xeb\x0f\x06\x52\xd9\x8c\x2b\x01\x0f\xdb\x14\x90\x8f\x07\x76\x93\x17\x88\x59\x38\x4d\xa4\x30\x8d\xb3\x8e\xc0\x0a\x23\xd3\xb7\x1c\xba\x02\xc1\x33\x58\x6b\xb3\x2d\x56\x7f\x05\x05\x86\xc7\xec\x3e\x37\xa9\xb6\x8d\x69\x23\xd2\x62\xfb\xb3\x7d\x2b\xf3\xa4\xf8\x3f\x5a\xd2\x3d\x8a\x4d\x78\x1c\x0f\xa1\x38\x82\x03\x50\x42\x02\x25\x81\x48\xe6\xc9\x60\x59\x1c\x85\x07\x4c\xe8\xc0\xcc\x09\x98\x98\x9b\x35\x0c\xb1\x38\x82\x03\x50\x2e\x86\x50\x92\x39\x81\xd2\x15\x1c\x11\xe5\x1b\xc9\xe2\x2a\x3c\x60\xe6\xae\x75\xcf\x09\x9a\x90\xc6\xe9\x48\x3c\x78\x2e\x1c\x9e\xd9\xa0\x81\x93\xf9\x74\x4e\xf3\x74\x24\x3e\xfd\x74\xee\x00\x9d\x0f\x9a\x38\x99\x4f\xcf\x4e\x69\xa2\xae\xc6\xe7\xc8\x4e\x3b\x67\x76\x3a\xc8\x34\xa3\xba\x1c\x51\x1c\x30\x72\x66\xd3\xf7\x3f\x13\x3c\x44\x81\x3a\x82\x03\xba\xeb\xfd\x94\x82\xa1\x8e\xab\xab\x38\xa4\xbf\x28\x1a\xb2\xbf\x10\xc9\x21\xfd\x35\x68\x1d\x41\x0d\xc2\xae\xa0\xc9\x72\xa5\x93\x34\xcf\x80\xdd\xa5\x99\x4c\xe4\x77\x88\xa8\xc3\xa2\xac\x23\xc8\x69\x88\x28\xbc\x88\xdc\xf3\x22\xec\x23\xe8\x81\x88\x49\xbc\x90\xdc\x23\x1b\xb6\x90\xa0\x47\x22\x26\xf1\x22\xea\x0c\x45\xd2\x45\x17\x34\x52\x47\xe2\x85\x34\xeb\xcc\xe9\x61\x24\x6a\x06\x75\x05\xc7\x35\x36\x39\x86\x10\xc5\x51\x8d\x4d\x4f\x22\x4c\x72\x4c\x63\xcf\x68\x63\x23\x92\xa3\x1a\x7b\x46\x1b\x1b\x91\xf8\x19\xdb\xb5\xd2\xb0\xb1\xd7\x21\x79\x6e\x98\xa4\xf5\x1b\xe4\xfe\x0f\x76\xb3\xbb\xab\xb2\x87\x9d\xd9\x3a\x24\x0b\x84\x49\x46\xd3\x78\x16\xc7\x50\x5d\xdf\x15\x34\x51\x3e\x41\xa2\xcd\x96\xe9\xb1\x4d\x3f\x5c\x1b\x43\xb6\x3c\xa2\xf0\xc1\x71\x3b\x7e\x76\x3a\xdc\xf2\x86\x6e\x79\x4c\xe2\x83\xe4\xba\xe7\x7c\xf0\x4e\xd9\xd0\x1d\x8f\x49\x7c\x80\x3a\x0d\x7f\x16\x0e\xde\x70\x18\xba\xe3\x31\x89\x0f\x52\xc7\xd3\xe1\x7c\xf0\x96\x43\x86\x94\x8f\x10\x45\x13\x68\x91\x69\xc3\xd7\x1e\xbf\x3a\x28\x23\x49\x7a\x06\x61\x12\x2f\x26\x3f\x27\xc9\x90\x74\x12\x26\xf1\x22\xf2\xb5\x92\xa4\x67\x23\x26\xf1\x62\xf2\xf5\x52\x44\x7a\x09\x51\x1c\xd5\x4b\x11\xed\x25\x4c\x72\x44\x2f\x45\xb4\x97\x30\xc9\x51\xbd\x14\xd1\x5e\xc2\x24\x7e\x5e\x72\x99\x6a\x2f\xd5\xcf\x62\x85\x81\x08\x54\x26\x79\x8c\x3c\x89\x4d\x8d\x7e\x96\x11\x98\xe2\x87\x5d\xfe\xb9\x68\x80\x4a\x9b\xc6\x7c\xfb\x51\x9b\x84\x67\xc5\xea\xa3\x84\xb8\xf1\xe3\xb9\x52\x3a\x2b\x1f\x36\x17\xbb\xbe\xed\x57\xec\xf8\xc4\x4d\x02\x66\xca\xd3\xd4\x0a\x1d\xc1\x54\xe8\xe4\x27\x11\xe7\x36\x03\x33\xd9\xb3\x14\x5b\x36\x1f\x2b\xa3\x97\x45\xca\xfa\x5e\x62\xab\x8a\xb9\x97\xed\xae\x7a\xad\xf9\xcb\x74\xda\x0f\xc3\xf7\x49\x54\xaf\xbf\x85\x56\x8f\x72\xbd\xab\xcc\xf2\xf2\xea\xea\x7a\xb1\x58\xde\x5e\xff\xb5\xbc\xf9\xa5\x81\x51\xec\xa5\x4d\x12\x54\xef\xce\x97\x5c\x08\xb0\x76\xb9\x81\xed\x52\x46\x6d\xd9\x3f\x76\xf7\x7e\xa1\x94\xdc\xc2\xd6\xdd\x27\xe6\x2b\x28\x71\x2f\x4b\x05\xbb\x85\x2d\xbb\x71\x36\x91\x2a\xcd\xcb\xf3\xc8\xe0\x5b\x16\xd4\x2b\xaf\xef\x46\xa6\xb1\xb8\xbe\xfa\xfd\xfa\xa1\x91\x4d\x7f\x2a\x16\x84\x81\xac\x91\x11\x9e\x4e\x25\xbb\x7c\x4b\xaa\x27\xa5\x45\xa9\x62\xfb\xcc\x7a\xd2\x4a\xb9\xb5\x2f\xda\x44\x8d\xd4\x76\xff\x72\xdf\x31\x6c\xf2\x15\x18\x05\x19\xd8\xcf\x60\x2c\xfe\x3d\x84\xe7\x6a\xa5\xd8\xf8\x6c\x7a\x31\x3d\xed\x6d\x44\x67\xb5\xfa\xf2\x43\xc3\xd5\x11\x14\x81\xcc\xe4\xd0\x30\xe0\x57\xde\x8d\xa5\x46\x47\xbb\xe8\x49\x93\xbf\xe4\x3e\x79\xfd\x3f\x00\x00\xff\xff\xfb\xe6\xa0\x9b\x6c\x21\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 8556, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
