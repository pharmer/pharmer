// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package aws

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x9a\x6f\x4f\xe3\x46\x10\xc6\xdf\xf3\x29\x56\x7e\x7d\x49\xc1\x49\x01\xdd\x3b\x44\xb9\x0a\xd1\x13\xa8\xa1\xad\xaa\xea\x14\x6d\xec\x21\x6c\xb1\x77\xdd\xdd\x35\x5c\xee\xc4\xa7\xe9\x47\xe9\x17\xab\xec\x24\xfe\xb3\x1e\x7b\xbc\x8a\xf2\xe6\x38\x66\x1f\x6f\x7e\x33\xfb\xcc\x80\x6d\xbe\x9f\x30\x16\x48\x9e\x42\xf0\x91\x05\xfc\xcd\x04\x1f\x8a\x00\xc8\xd7\xe0\x23\xfb\xeb\x84\x31\xc6\x82\x18\x5e\xcb\x28\x63\xc1\x3f\x3c\x38\x61\xec\x4b\xa9\xd1\xb0\x16\x4a\x9a\x4a\xf7\xbd\xfc\x97\xb1\x20\x51\x11\xb7\x42\xc9\x62\xc7\xdf\x85\x5e\x0b\x29\xf8\x6e\x83\xea\xb2\x62\x2d\x37\x13\xe0\xc6\x4e\xce\xea\xc5\x6f\x4a\x42\xbd\x63\x19\xaa\x54\xf5\x1e\xcd\xe8\x0a\x8d\x46\x68\x34\x46\xa3\x10\xec\x82\x5f\xca\xaf\xef\x1f\xfa\xb3\xb9\x7f\x16\x6a\x28\x93\x70\x54\x26\x21\x9a\x49\x88\x66\x12\x46\xe3\xe9\xae\x79\x22\x9e\x94\xee\xaf\xf6\x1b\x8c\xa9\xf6\x56\xe5\x32\x6e\xa3\x2e\xe3\x36\xea\xc1\x78\xaf\x61\xad\xe4\x10\x1f\x59\xc3\xad\x0a\xe5\xeb\xd4\x70\x1b\xf5\xe0\xbb\xd5\x90\x70\x19\x63\x80\x90\x8f\x29\x60\xa5\x6a\x01\x56\xd1\x15\x1a\xf5\x00\xfc\x45\xc9\x18\x2f\xe0\x7e\xb7\xe1\x02\x1e\x9b\x6f\x21\xe4\x9a\x67\x4a\x03\x86\xc8\xb3\x89\x51\xb9\x7d\x1e\xd1\xf6\x6d\x69\x0b\xb6\xbd\xb4\xea\x5f\xf2\xc0\x7e\x54\x2f\x1b\xb4\xb5\x79\x36\x91\x4a\x8f\x45\x6e\x48\x5d\xe4\xc6\x92\x8b\xdc\x58\x22\x90\x7b\x4a\xd9\x38\xf2\xd6\x59\x6c\x62\x09\x9b\xf1\x65\x0e\xfb\xcb\x1c\xf6\x97\x99\x6a\xaf\x9a\xd9\xf0\xce\xc0\x6f\xe1\xfe\xf7\xaf\x62\x0f\x3c\x4f\xd4\x20\x72\xb5\x4b\x8b\xb6\x8a\xae\xd0\xa8\x77\x5d\xfb\x20\x3f\xe7\xe9\x8a\x8b\x51\x35\xed\xb1\x6d\x8f\x65\x3d\x18\x21\x9f\x44\x20\xad\xe6\x49\x1f\xe5\x27\xcd\xe5\xcb\x53\xae\x2d\x35\x0b\xaa\x7d\xdc\x71\x50\x2d\xb8\x13\xa1\x5a\x70\x71\xab\x5f\x0c\x84\x34\x96\xcb\x08\x1e\x37\x19\x20\xbf\x1e\x98\x97\xbc\x40\xb4\xe1\x34\x15\x91\x6e\x9c\x75\x0c\x26\xd2\x22\xdb\xe7\xd0\x15\x44\xdc\xc2\x5a\xe9\x4d\xb1\xfa\x33\x48\xd0\x3c\x61\x0f\xb9\xce\x94\x69\x4c\x9b\x28\x2b\xb6\x3f\xab\x5b\x99\xa7\xc5\xf7\x68\x49\x6b\x14\x93\xf2\x24\x19\x42\x71\x04\x07\xa0\x84\x04\x4a\x0a\xb1\xc8\xd3\xc1\xb2\x38\x0a\x0f\x98\xd0\x81\x99\x13\x30\x09\xd7\x6b\x18\x62\x71\x04\x07\xa0\x5c\x0e\xa1\xa4\x73\x02\xa5\x2b\x38\x22\xca\x57\x92\xc5\x55\x78\xc0\xcc\x5d\xeb\x9e\x13\x34\x21\x8d\xd3\x91\x78\xf0\x5c\x3a\x3c\xb3\x41\x03\xa7\xf3\xe9\x9c\xe6\xe9\x48\x7c\xfa\xe9\xdc\x01\x3a\x1f\x34\x71\x3a\x9f\x9e\x9d\xd2\x44\x5d\x8d\xcf\x91\x9d\x76\xce\xec\x74\x90\x69\x46\x75\x39\xa2\x38\x60\xe4\xcc\xa6\x17\x3f\x12\x3c\x44\x81\x3a\x82\x03\xba\xeb\x62\x4a\xc1\x50\xc7\xd5\x55\x1c\xd2\x5f\x14\x0d\xd9\x5f\x88\xe4\x90\xfe\x1a\xb4\x4e\x44\x0d\xc2\xae\xa0\xc9\x72\xad\xd2\x2c\xb7\xc0\xee\x33\x2b\x52\xf1\x0d\x62\xea\xb0\x28\xeb\x44\xe4\x34\x44\x14\x5e\x44\xee\x79\x11\xf6\x89\xe8\x81\x88\x49\xbc\x90\xdc\x23\x1b\xb6\x50\x44\x8f\x44\x4c\xe2\x45\xd4\x19\x8a\xa4\x8b\x2e\x69\xa4\x8e\xc4\x0b\x69\xd6\x99\xd3\xc3\x48\xd4\x0c\xea\x0a\x8e\x6b\x6c\x72\x0c\x21\x8a\xa3\x1a\x9b\x9e\x44\x98\xe4\x98\xc6\x9e\xd1\xc6\x46\x24\x47\x35\xf6\x8c\x36\x36\x22\xf1\x33\xb6\x6b\xa5\x61\x63\xaf\x43\xf2\xdc\x30\x49\xeb\x27\xc8\xc3\x6f\xec\x76\x77\x57\x65\x0e\x3b\xb3\x75\x48\x16\x08\x93\x8c\xa6\xf1\x2c\x8e\xa6\xba\xbe\x2b\x68\xa2\x7c\x86\x54\xe9\x0d\x53\x63\x9b\x7e\xb8\x36\x9a\x6c\x79\x44\xe1\x83\xe3\x76\xfc\xec\x74\xb8\xe5\x35\xdd\xf2\x98\xc4\x07\xc9\x75\xcf\xf9\xe0\x9d\xb2\xa6\x3b\x1e\x93\xf8\x00\x75\x1a\xfe\x2c\x1c\xbc\xe1\xd0\x74\xc7\x63\x12\x1f\xa4\x8e\xa7\xc3\xf9\xe0\x2d\x87\x08\x29\x1f\x21\x8a\x26\xd0\xc2\x2a\xcd\xd7\x1e\x3f\x3a\x28\x23\x09\x7a\x06\x61\x12\x2f\x26\x3f\x27\x89\x90\x74\x12\x26\xf1\x22\xf2\xb5\x92\xa0\x67\x23\x26\xf1\x62\xf2\xf5\x52\x4c\x7a\x09\x51\x1c\xd5\x4b\x31\xed\x25\x4c\x72\x44\x2f\xc5\xb4\x97\x30\xc9\x51\xbd\x14\xd3\x5e\xc2\x24\x7e\x5e\x72\x99\x2a\x2f\x55\xcf\x62\x23\x0d\x31\x48\x2b\x78\x82\x3c\x89\xcd\xb4\x7a\x15\x31\xe8\xe2\xc3\xae\xfe\x58\x34\x40\x85\xc9\x12\xbe\xf9\xa4\x74\xca\x6d\xb1\xfa\x24\x20\x69\x7c\x3c\x97\x52\xd9\xf2\x61\x73\xb1\xeb\x7e\xbf\x62\xc7\x67\xae\x53\xd0\x53\x9e\x65\x26\x52\x31\x4c\x23\x95\xfe\x10\x25\xb9\xb1\xa0\x27\x35\x4b\xb1\x65\xf3\xb1\x32\x7a\x59\x2c\x8d\xef\x25\x66\x5b\x31\xf7\xb2\xdd\x55\xef\x15\x7f\x99\x4e\xfb\x61\x78\x9d\xc4\xf6\xf5\x77\xa4\xe4\x93\x58\xef\x2a\xb3\xbc\xba\xbe\xbe\x59\x2c\x96\x77\x37\x7f\x2e\x6f\x7f\x6a\x60\x14\x7b\x29\x9d\x06\xdb\x77\xe7\x4b\x1e\x45\x60\xcc\xf2\x05\x36\x4b\x11\xb7\x65\x7f\x9b\xdd\xfb\x85\x52\x72\x07\x1b\x77\x9f\x84\xaf\xa0\xc4\xbd\x2a\x15\xec\x0e\x36\xec\xd6\xd9\x44\xc8\x2c\x2f\xcf\xc3\xc2\x57\x1b\x54\x2b\xef\x1f\x46\xa6\xb1\xb8\xb9\xfe\xf5\xe6\xb1\x91\x4d\x7f\x2a\x06\x22\x0d\xb6\x91\x11\x9e\xce\x56\x76\xb5\x4f\xaa\x27\xa5\x45\xa9\x62\x75\x66\x3d\x69\x65\xdc\x98\x37\xa5\xe3\x46\x6a\xbb\xff\xb9\xef\x18\x5e\xf2\x15\x68\x09\x16\x6a\x03\x06\xaf\xa0\x4d\xeb\x2f\x12\x9a\xe5\xd8\xaf\x16\x1f\x73\x36\xbd\x98\xce\x9b\x66\x72\x1a\xb3\xb3\x6e\x95\x4a\xda\x4e\xdf\x21\xf0\x38\xad\x2f\xc0\xce\x63\xf7\x97\x14\xad\x0b\x63\x28\x42\x56\xe7\xd0\x49\x73\xfb\xb5\x48\xf6\xfd\xe4\xfd\xff\x00\x00\x00\xff\xff\x9c\xb2\x6a\xd8\x9b\x21\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 8603, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
