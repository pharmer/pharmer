// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package aws

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x9a\xdf\x6e\xdb\x36\x14\xc6\xef\xf3\x14\x82\xae\x1d\xd7\x96\xbd\x34\xe8\x9d\xe7\xa4\x83\xd1\xb4\xf5\xe2\xac\xc5\x30\x14\x01\x4d\x1d\x3b\x9c\x29\x52\x23\x29\xa7\x6e\x91\xa7\xd9\xa3\xec\xc5\x06\x49\x8e\x4c\x51\x94\x68\xc2\xf0\x4d\xff\x90\x9f\xa9\xdf\x39\xe7\x3b\xc7\x91\x94\x9f\x17\x41\x10\x32\x94\x40\xf8\x2e\x08\xd1\xb3\x0c\x7b\xf9\x02\xb0\x6d\xf8\x2e\xf8\xeb\x22\x08\x82\x20\x8c\x61\x5b\xac\x06\x41\xf8\x0f\x0a\x2f\x82\xe0\x5b\xa1\x11\xb0\x26\x9c\xc9\x4a\xf7\xb3\xf8\x33\x08\x42\xca\x31\x52\x84\xb3\xfc\xc4\x2f\x44\xac\x09\x23\x68\x7f\x40\xf5\xb1\x7c\x2f\x93\x97\x80\xa4\xba\x1c\x1e\x36\x7f\x70\x06\x87\x13\x8b\xa5\x4a\x75\x38\x43\x5f\x5d\x5a\x57\xb1\x75\x35\xb6\xae\x42\xb8\x5f\xfc\x56\xfc\xfd\xd2\x6b\x8f\xe6\xf3\x13\xe1\x5d\x91\x44\x47\x45\x12\x59\x23\x89\xac\x91\x44\xf8\x78\xba\x29\xa2\x64\xc5\x45\x7b\xb6\x9f\xe1\x98\x6c\x97\x2a\x93\xb1\x5c\x35\x19\xcb\x55\x0f\xc6\xcf\x02\xd6\x9c\x75\xf1\x39\x73\x58\xaa\xac\x7c\x8d\x1c\x96\xab\x1e\x7c\x33\x01\x14\xb1\xd8\x06\x08\xd9\x31\x09\xac\x54\x35\xc0\x6a\x75\x69\x5d\xf5\x00\xbc\xe3\x2c\xb6\x27\xf0\xf5\xb4\xee\x04\x9e\x9b\x6f\x41\xd8\x1a\xa5\x5c\x80\x0d\x11\xa5\x97\x92\x67\xea\xe9\x88\xb6\xaf\x4b\x6b\xb0\xf5\xad\x65\xfb\x96\x07\xf6\x03\xdf\xec\xac\xad\x8d\xd2\x4b\xc6\xc5\xb1\xc8\x9a\xd4\x44\xd6\xb6\x4c\x64\x6d\xcb\x81\xdc\x92\x4a\xad\xe4\xb5\x5a\xec\x62\x06\xbb\xe3\xd3\x1c\xb5\xa7\x39\x6a\x4f\xb3\xab\xbd\x0e\xcc\x12\x35\x06\x7e\x0d\xf7\xbf\x7f\x79\x30\x47\x19\xe5\x9d\xc8\xd5\x29\x35\xda\x6a\x75\x69\x5d\xf5\xce\x6b\x1b\xe4\xc7\x2c\x59\x22\x72\x54\x4e\x5b\x6c\xdb\x62\x59\x0f\x46\xc8\x2e\x31\x30\x25\x10\x6d\xa3\x7c\x2f\x10\xdb\xac\x32\xa1\x5c\xb3\xa0\x3a\xc7\x1c\x07\xd5\x86\x39\x11\xaa\x0d\x13\xb7\xfa\xc1\x80\x30\xa9\x10\xc3\xf0\xb0\x4b\xc1\xf2\xe3\x81\xdc\x64\x39\xa2\x8a\xfa\x09\xc1\x42\xab\x75\x0c\x12\x0b\x92\xbe\xc6\xd0\x14\x60\xa4\x60\xcd\xc5\x2e\xdf\xfd\x0d\x18\x08\x44\x83\x79\x26\x52\x2e\xb5\x69\x83\xd3\xfc\xf8\xe1\xa1\x95\x51\x92\xff\xdf\x9a\xd2\x03\x8a\x4c\x10\xa5\x5d\x28\x86\xe0\x04\x94\xc8\x81\x92\x40\x4c\xb2\xa4\x33\x2d\x86\xc2\x03\x26\x32\x60\xc6\x0e\x18\x8a\xc4\x1a\xba\x58\x0c\xc1\x09\x28\xd7\x5d\x28\xc9\xd8\x81\xd2\x14\x9c\x11\xe5\xbb\x93\xc5\x54\x78\xc0\x8c\x4d\xeb\x5e\x39\x68\x22\x37\x4e\x43\xe2\xc1\x73\x6d\xf0\x8c\x3a\x0d\x9c\x8c\xfb\x63\x37\x4f\x43\xe2\xd3\x4f\x57\x06\xd0\x55\xa7\x89\x93\x71\x7f\x38\x70\x13\x35\x35\x3e\x25\x1b\x34\x6a\x36\xe8\x64\x1a\xb9\xba\xdc\xa2\x38\x61\xe4\x8c\xfa\x6f\x7f\x71\xf0\x38\x12\xd4\x10\x9c\xd0\x5d\x6f\xfb\x2e\x18\x57\xb9\x9a\x8a\x53\xfa\xcb\x45\xe3\xec\x2f\x8b\xe4\x94\xfe\xea\xb4\x0e\x76\x0d\xc2\xa6\x40\x67\x99\xf2\x24\xcd\x14\x04\x9f\x53\x45\x12\xf2\x03\x62\x57\xb1\x5c\xd6\xc1\xce\x69\x68\x51\x78\x11\x99\xf5\x72\xd8\x07\xbb\x07\xa2\x4d\xe2\x85\x64\x96\xac\xdb\x42\xd8\x3d\x12\x6d\x12\x2f\xa2\xc6\x50\x74\xba\xe8\xda\x8d\xd4\x90\x78\x21\x8d\x1a\x73\xba\x1b\xc9\x35\x83\x9a\x82\xf3\x1a\xdb\x39\x86\x2c\x8a\xb3\x1a\xdb\x3d\x89\x6c\x92\x73\x1a\x7b\xe4\x36\xb6\x45\x72\x56\x63\x8f\xdc\xc6\xb6\x48\xfc\x8c\x6d\x5a\xa9\xdb\xd8\xeb\xc8\x59\x37\x9b\xa4\xf6\x0d\x32\xff\x23\x98\xed\xef\xaa\xe4\x69\x35\x5b\x47\xce\x04\xd9\x24\x47\xd3\x78\x26\x47\xb8\xba\xbe\x29\xd0\x51\x3e\x42\xc2\xc5\x2e\xe0\xc7\x36\x7d\x77\x6e\x84\xb3\xe5\x2d\x0a\x1f\x1c\xb3\xe3\x47\x83\xee\x96\x17\xee\x96\xb7\x49\x7c\x90\x4c\xf7\x5c\x75\xde\x29\x0b\x77\xc7\xdb\x24\x3e\x40\x8d\x86\x1f\x46\x9d\x37\x1c\xc2\xdd\xf1\x36\x89\x0f\x52\xc3\xd3\xd1\xb8\xf3\x96\x83\x44\x2e\x1f\x59\x14\x3a\xd0\x42\x71\x81\xd6\x1e\x5f\x1d\x2e\x23\x11\xf7\x0c\xb2\x49\xbc\x98\xfc\x9c\x44\x22\xa7\x93\x6c\x12\x2f\x22\x5f\x2b\x11\xf7\x6c\xb4\x49\xbc\x98\x7c\xbd\x14\x3b\xbd\x64\x51\x9c\xd5\x4b\xb1\xdb\x4b\x36\xc9\x19\xbd\x14\xbb\xbd\x64\x93\x9c\xd5\x4b\xb1\xdb\x4b\x36\x89\x9f\x97\x4c\xa6\xca\x4b\xd5\xb3\x58\x2c\x20\x06\xa6\x08\xa2\x96\x27\xb1\xa9\xe0\x5b\x12\x83\xc8\x2f\x36\xf9\xba\xd0\x40\x89\x4c\x29\xda\xbd\xe7\x22\x41\x2a\xdf\x5d\x11\xa0\xda\xe5\x11\x63\x5c\x15\x0f\x9b\xf3\x53\x5f\xcf\xcb\x4f\x7c\x42\x22\x01\xd1\x47\x69\x2a\x31\x8f\xa1\x8f\x79\xf2\x06\xd3\x4c\x2a\x10\x97\x07\x96\xfc\x48\xfd\xb1\xb2\xf5\x63\x31\x93\xbe\x1f\x91\x65\xc6\xcc\x8f\xed\x3f\xf5\x52\xf1\x17\xe1\xd4\x1f\x86\x1f\x82\x28\x5f\x7f\x63\xce\x56\x64\xbd\xcf\xcc\xe3\x64\x3a\xbd\x5d\x2c\x1e\x3f\xdc\xfe\xf9\x38\xbb\xd1\x30\xf2\xb3\xb8\x48\xc2\xf2\xdd\xf9\x23\xc2\x18\xa4\x7c\xdc\xc0\xee\x91\xc4\x75\xd9\xdf\x72\xff\x7e\xa1\x90\x7c\x80\x9d\x79\x0e\x45\x4b\x28\x70\x27\x85\x22\xf8\x00\xbb\x60\x66\x1c\x42\x58\x9a\x15\xf5\x50\xf0\x5d\x85\xd5\xce\x4b\xef\xc8\x30\x16\xb7\xd3\xfb\xdb\x07\x2d\x9a\xf6\x50\x24\x60\x01\x4a\x8b\xc8\x1e\x4e\x29\x9b\xbc\x06\xd5\x12\xd2\xa2\x50\x05\x87\xc8\x5a\xc2\x4a\x91\x94\xcf\x5c\xc4\x5a\x68\xfb\x7f\x99\xef\x18\x36\xd9\x12\x04\x03\x05\xf2\x0b\x08\x69\xff\x3d\x84\x6d\xb9\x93\x1f\x3c\xec\x5f\xf7\x07\xad\x8d\x68\xec\x96\xbf\xfc\xa0\xb9\x3a\x86\x7c\x41\x89\x0c\x1a\x4e\x8a\x61\x85\x32\xaa\x16\x29\x60\xa3\x13\x78\xbc\xc8\x96\x0c\x8a\xb8\x86\x83\x7e\x34\x1e\xf7\x07\xfd\xc1\x9b\xe1\x95\xee\x62\x09\x62\x4b\x30\xd4\x94\x03\x8b\x0e\xd1\xe2\xed\x0e\x7c\xe2\x31\x4c\x49\x2c\xe4\x9e\x47\x93\x00\x43\x4b\x0a\xd3\xb2\xd7\x3e\x72\x46\x14\x17\x84\x15\xa5\x7f\xed\x91\xb0\x4d\x7e\xc7\xd7\xeb\x52\x6b\x3d\x34\xbf\x6a\xab\x84\x96\x1b\x37\x20\x15\x61\xd5\x0b\xa8\xd7\x4b\x5e\x02\x45\x52\x11\x2c\x01\x09\xfc\x54\x03\xd0\x37\xf6\xa7\xdf\x43\x4a\x09\x46\x52\x7f\x84\x99\x27\x99\xc9\x05\x88\x2d\x88\xd9\x5c\xcb\xd1\x70\x10\xd6\x35\x37\x3c\x41\xa4\xbc\xc5\x2b\xc3\xea\xe7\x49\xa3\xb5\x3c\xc6\x09\x91\xb9\x29\xa6\x9c\x29\xc1\x0b\x73\x7e\x42\x09\xc8\x14\x61\xb8\x23\x2b\xc0\x3b\x4c\xa1\x77\x47\x12\xa2\xee\x11\x5b\x83\xe8\x2d\xca\x12\x4d\x30\xe6\x19\x53\xbd\x79\x6e\x2a\xa9\x80\xa9\x2f\x9c\x66\x09\xdc\xe5\x1e\xef\xdd\xec\x6d\x50\xce\x9f\x29\x45\x52\xf6\xee\x41\xf2\x4c\x60\xf8\x3d\xe3\xaa\xf6\x76\x2d\x41\x39\x9c\xe1\x8e\xab\xa2\xea\xd1\x58\x17\x32\x50\xcf\x5c\x6c\xe6\xda\x98\x5e\x51\xc4\x18\xd0\xd6\x4a\x4e\x28\x08\xd5\x56\x73\x2e\x8b\xaf\x1d\x58\x12\xc4\x6c\xd7\xe1\x94\xe0\x9d\x7e\x35\xc6\x99\xc5\x34\x5f\x61\xf9\xc4\xf9\xe6\x81\x6f\x80\x4d\x32\xf5\xc4\xda\x7c\x73\xbf\x44\x38\x17\xfc\x68\x13\x4c\xe6\x33\x59\x14\xf6\x57\x24\x09\x9e\x64\x31\x51\xad\xd2\x7d\x3c\x13\xa5\x08\x6e\x8a\x52\x4e\xe9\x82\x02\xa4\x33\xa6\x40\x6c\x8b\xc1\x3f\xb2\x1a\x79\x9e\x2d\x29\xc1\x85\x93\xf4\x8e\x3e\xcc\x97\x8b\x97\xff\x03\x00\x00\xff\xff\xae\x93\x21\x9a\x14\x25\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 9492, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
