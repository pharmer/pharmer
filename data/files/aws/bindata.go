// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package aws

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x9a\xdf\x6e\xdb\xb8\x12\xc6\xef\xf3\x14\x82\xae\x6d\xd7\x96\x7d\xd2\xa2\x77\x3e\x4e\x7a\x60\x34\x6d\x7d\xe2\x6c\x8b\xc5\xa2\x08\x68\x6a\xec\x70\x4d\x91\x5a\x92\x72\xea\x16\x79\x9a\x7d\x94\x7d\xb1\x85\x24\x47\xa6\x28\x4a\x34\x61\xf8\xa6\x7f\xc8\xcf\xd4\x6f\x66\xbe\x19\x47\x52\x7e\x5d\x05\x41\xc8\x50\x02\xe1\xfb\x20\x44\xcf\x32\xec\xe5\x0b\xc0\x76\xe1\xfb\xe0\x8f\xab\x20\x08\x82\x30\x86\x5d\xb1\x1a\x04\xe1\x5f\x28\xbc\x0a\x82\xef\x85\x46\xc0\x86\x70\x26\x2b\xdd\xaf\xe2\xcf\x20\x08\x29\xc7\x48\x11\xce\xf2\x13\xbf\x12\xb1\x21\x8c\xa0\xc3\x01\xd5\xc7\xf2\xbd\x4c\xf6\x01\x49\xd5\x1f\x1d\x37\x7f\x72\x06\xc7\x13\x8b\xa5\x4a\x75\x3c\x43\x5f\x5d\x59\x57\xb1\x75\x35\xb6\xae\x42\x78\x58\xfc\x5e\xfc\xfd\xd2\x6b\x8f\xe6\xcb\x13\xe1\x5d\x91\x44\x27\x45\x12\x59\x23\x89\xac\x91\x44\xf8\x74\xba\x19\xa2\x64\xcd\x45\x7b\xb6\x9f\xe1\x94\x6c\x97\x2a\x93\xb1\x5c\x35\x19\xcb\x55\x0f\xc6\x2f\x02\x36\x9c\x75\xf1\x39\x73\x58\xaa\xac\x7c\x8d\x1c\x96\xab\x1e\x7c\x73\x01\x14\xb1\xd8\x06\x08\xd9\x29\x09\xac\x54\x35\xc0\x6a\x75\x65\x5d\xf5\x00\xbc\xe3\x2c\xb6\x27\xf0\xf5\xb4\xee\x04\x5e\x9a\x6f\x49\xd8\x06\xa5\x5c\x80\x0d\x11\xa5\x7d\xc9\x33\xf5\x74\x42\xdb\xd7\xa5\x35\xd8\xfa\xd6\xaa\x7d\xcb\x03\xfb\x81\x6f\xf7\xd6\xd6\x46\x69\x9f\x71\x71\x2a\xb2\x26\x35\x91\xb5\x2d\x13\x59\xdb\x72\x20\xb7\xa4\x52\x2b\x79\xad\x16\xfb\x98\xc1\xfe\xf4\x34\x47\xed\x69\x8e\xda\xd3\xec\x6a\xaf\x23\xb3\x44\x8d\x81\x5f\xc3\xfd\xe7\x6f\x1e\x2c\x50\x46\x79\x27\x72\x75\x4a\x8d\xb6\x5a\x5d\x59\x57\xbd\xf3\xda\x06\xf9\x29\x4b\x56\x88\x9c\x94\xd3\x16\xdb\xb6\x58\xd6\x83\x11\xb2\x3e\x06\xa6\x04\xa2\x6d\x94\x1f\x04\x62\xdb\x75\x26\x94\x6b\x16\x54\xe7\x98\xe3\xa0\xda\x30\x27\x42\xb5\x61\xe2\x56\x3f\x18\x10\x26\x15\x62\x18\x1e\xf6\x29\x58\x7e\x3c\x90\xdb\x2c\x47\x54\xd1\x20\x21\x58\x68\xb5\x8e\x41\x62\x41\xd2\xd7\x18\x9a\x02\x8c\x14\x6c\xb8\xd8\xe7\xbb\xff\x03\x06\x02\xd1\x60\x91\x89\x94\x4b\x6d\xda\xe0\x34\x3f\x7e\x74\x6c\x65\x94\xe4\xff\xb7\xa6\xf4\x88\x22\x13\x44\x69\x17\x8a\x21\x38\x03\x25\x72\xa0\x24\x10\x93\x2c\xe9\x4c\x8b\xa1\xf0\x80\x89\x0c\x98\x89\x03\x86\x22\xb1\x81\x2e\x16\x43\x70\x06\xca\xbb\x2e\x94\x64\xe2\x40\x69\x0a\x2e\x88\xf2\xc3\xc9\x62\x2a\x3c\x60\x26\xa6\x75\xaf\x1d\x34\x91\x1b\xa7\x21\xf1\xe0\x79\x67\xf0\x8c\x3b\x0d\x9c\x4c\x06\x13\x37\x4f\x43\xe2\xd3\x4f\xd7\x06\xd0\x75\xa7\x89\x93\xc9\x60\x34\x74\x13\x35\x35\x3e\x25\x1b\x36\x6a\x36\xec\x64\x1a\xbb\xba\xdc\xa2\x38\x63\xe4\x8c\x07\x6f\xff\xe3\xe0\x71\x24\xa8\x21\x38\xa3\xbb\xde\x0e\x5c\x30\xae\x72\x35\x15\xe7\xf4\x97\x8b\xc6\xd9\x5f\x16\xc9\x39\xfd\xd5\x69\x1d\xec\x1a\x84\x4d\x81\xce\x32\xe3\x49\x9a\x29\x08\xbe\xa4\x8a\x24\xe4\x27\xc4\xae\x62\xb9\xac\x83\x9d\xd3\xd0\xa2\xf0\x22\x32\xeb\xe5\xb0\x0f\x76\x0f\x44\x9b\xc4\x0b\xc9\x2c\x59\xb7\x85\xb0\x7b\x24\xda\x24\x5e\x44\x8d\xa1\xe8\x74\xd1\x3b\x37\x52\x43\xe2\x85\x34\x6e\xcc\xe9\x6e\x24\xd7\x0c\x6a\x0a\x2e\x6b\x6c\xe7\x18\xb2\x28\x2e\x6a\x6c\xf7\x24\xb2\x49\x2e\x69\xec\xb1\xdb\xd8\x16\xc9\x45\x8d\x3d\x76\x1b\xdb\x22\xf1\x33\xb6\x69\xa5\x6e\x63\x6f\x22\x67\xdd\x6c\x92\xda\x37\xc8\xe2\xb7\x60\x7e\xb8\xab\x92\xe7\xd5\x6c\x13\x39\x13\x64\x93\x9c\x4c\xe3\x99\x1c\xe1\xea\xfa\xa6\x40\x47\xf9\x04\x09\x17\xfb\x80\x9f\xda\xf4\xdd\xb9\x11\xce\x96\xb7\x28\x7c\x70\xcc\x8e\x1f\x0f\xbb\x5b\x5e\xb8\x5b\xde\x26\xf1\x41\x32\xdd\x73\xdd\x79\xa7\x2c\xdc\x1d\x6f\x93\xf8\x00\x35\x1a\x7e\x14\x75\xde\x70\x08\x77\xc7\xdb\x24\x3e\x48\x0d\x4f\x47\x93\xce\x5b\x0e\x12\xb9\x7c\x64\x51\xe8\x40\x4b\xc5\x05\xda\x78\x7c\x75\xb8\x8c\x44\xdc\x33\xc8\x26\xf1\x62\xf2\x73\x12\x89\x9c\x4e\xb2\x49\xbc\x88\x7c\xad\x44\xdc\xb3\xd1\x26\xf1\x62\xf2\xf5\x52\xec\xf4\x92\x45\x71\x51\x2f\xc5\x6e\x2f\xd9\x24\x17\xf4\x52\xec\xf6\x92\x4d\x72\x51\x2f\xc5\x6e\x2f\xd9\x24\x7e\x5e\x32\x99\x2a\x2f\x55\xcf\x62\xb1\x80\x18\x98\x22\x88\x5a\x9e\xc4\xa6\x82\xef\x48\x0c\x22\xbf\xd8\xf4\xdb\x52\x03\x25\x32\xa5\x68\xff\x81\x8b\x04\xa9\x7c\x77\x4d\x80\x6a\x97\x47\x8c\x71\x55\x3c\x6c\xce\x4f\x7d\x3d\x2f\x3f\xf1\x09\x89\x04\xc4\x00\xa5\xa9\xc4\x3c\x86\x01\xe6\xc9\x1b\x4c\x33\xa9\x40\xf4\x8f\x2c\xf9\x91\xfa\x63\x65\xeb\xc7\x62\x26\x7d\x3f\x22\xcb\x8c\x99\x1f\x3b\x7c\xea\xa5\xe2\x2f\xc2\xa9\x3f\x0c\x3f\x06\x51\xbe\xfe\xc6\x9c\xad\xc9\xe6\x90\x99\xc7\xe9\x6c\x76\xbb\x5c\x3e\x7e\xbc\xfd\xfd\x71\x7e\xa3\x61\xe4\x67\x71\x91\x84\xe5\xbb\xf3\x47\x84\x31\x48\xf9\xb8\x85\xfd\x23\x89\xeb\xb2\x3f\xe5\xe1\xfd\x42\x21\xf9\x08\x7b\xf3\x1c\x8a\x56\x50\xe0\x4e\x0b\x45\xf0\x11\xf6\xc1\xdc\x38\x84\xb0\x34\x2b\xea\xa1\xe0\x87\x0a\xab\x9d\x97\xde\x89\x61\x2c\x6f\x67\xf7\xb7\x0f\x5a\x34\xed\xa1\x48\xc0\x02\x94\x16\x91\x3d\x9c\x52\x36\x7d\x0d\xaa\x25\xa4\x65\xa1\x0a\x8e\x91\xb5\x84\x95\x22\x29\x9f\xb9\x88\xb5\xd0\x0e\xff\x32\xdf\x31\x6c\xb3\x15\x08\x06\x0a\xe4\x57\x10\xd2\xfe\x7b\x08\xbb\x72\x27\x3f\x78\x34\x78\x3b\x98\xb4\x36\xa2\xb1\x5b\xfe\xf2\x83\xe6\xea\x18\xf2\x05\x25\x32\x68\x38\x29\x86\x35\xca\xa8\x5a\xa6\x80\x8d\x4e\xe0\xf1\x32\x5b\x31\x28\xe2\x1a\x0d\x07\xd1\x64\x32\x18\x0e\x86\x6f\x46\xd7\xba\x8b\x25\x88\x1d\xc1\x50\x53\x0e\x2d\x3a\x44\x8b\xb7\x3b\xf0\x99\xc7\x30\x23\xb1\x90\x07\x1e\x4d\x02\x0c\xad\x28\xcc\xca\x5e\xfb\xc4\x19\x51\x5c\x10\x56\x94\xfe\xb5\x47\xc2\x36\xf9\x1d\xdf\x6c\x4a\xad\xf5\xd0\xfc\xaa\xad\x12\x5a\x6e\xdc\x80\x54\x84\x55\x2f\xa0\x5e\x2f\xd9\x07\x8a\xa4\x22\x58\x02\x12\xf8\xa9\x06\xa0\x6f\x1c\x4e\xbf\x87\x94\x12\x8c\xa4\xfe\x08\x33\x4f\x32\x93\x4b\x10\x3b\x10\xf3\x85\x96\xa3\xd1\x30\xac\x6b\x6e\x78\x82\x48\x79\x8b\x57\x86\x35\xc8\x93\x46\x6b\x79\x8c\x13\x22\x73\x53\xcc\x38\x53\x82\x17\xe6\xfc\x8c\x12\x90\x29\xc2\x70\x47\xd6\x80\xf7\x98\x42\xef\x8e\x24\x44\xdd\x23\xb6\x01\xd1\x5b\x96\x25\x9a\x62\xcc\x33\xa6\x7a\x8b\xdc\x54\x52\x01\x53\x5f\x39\xcd\x12\xb8\xcb\x3d\xde\xbb\x39\xd8\xa0\x9c\x3f\x33\x8a\xa4\xec\xdd\x83\xe4\x99\xc0\xf0\xff\x8c\xab\xda\xdb\xb5\x04\xe5\x70\x86\x3b\xae\x8b\xaa\x47\x13\x5d\xc8\x40\x3d\x73\xb1\x5d\x68\x63\x7a\x4d\x11\x63\x40\x5b\x2b\x39\xa5\x20\x54\x5b\xcd\xb9\x2c\xbe\x76\x60\x45\x10\xb3\x5d\x87\x53\x82\xf7\xfa\xd5\x18\x67\x16\xd3\x7c\x83\xd5\x13\xe7\xdb\x07\xbe\x05\x36\xcd\xd4\x13\x6b\xf3\xcd\xfd\x0a\xe1\x5c\xf0\xb3\x4d\x30\x5d\xcc\x65\x51\xd8\xff\x22\x49\xf0\x34\x8b\x89\x6a\x95\x1e\xe2\x99\x2a\x45\x70\x53\x94\x72\x4a\x97\x14\x20\x9d\x33\x05\x62\x57\x0c\xfe\xb1\xd5\xc8\x8b\x6c\x45\x09\x2e\x9c\xa4\x77\xf4\x71\xbe\x5c\xbd\xfc\x1b\x00\x00\xff\xff\x9f\x28\x97\x1b\x14\x25\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 9492, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
