// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package aws

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x9c\xdd\x6e\xdb\x36\x1b\xc7\xcf\x73\x15\x82\x8f\x1b\xbd\x91\xfc\x91\x8f\xb3\x22\x6f\xfa\xa2\xe8\x5b\xb4\x98\xdb\x0d\xc3\x50\x04\xb4\xc4\xd8\x5a\x24\x52\xa5\xe4\x24\x6e\x91\xab\xd9\xa5\xec\xc6\x06\x2b\xb6\x2c\x8b\x8f\xf8\x17\xc1\xaa\xdb\xc1\x1a\x50\x7f\xc9\x3f\x92\xcf\x17\x49\xcb\xdf\x4f\x3c\x6f\x24\x58\xc6\x47\x57\xde\x88\x3d\x16\xa3\x57\xdb\x06\x2e\x1e\x8a\xd1\x95\xf7\xc7\x89\xe7\x79\xde\x28\xe6\x0f\x55\xb3\xe7\x8d\xbe\xb2\xfd\x5f\xb9\x92\xf1\xe8\xc4\xf3\xbe\x54\x37\x28\xbe\x4c\xa4\x38\xdc\xf3\xbd\xfa\xbf\xe7\x8d\x52\x19\xb1\x32\x91\x62\xfb\xf8\x4f\xf2\x7e\x23\x77\xf7\xd7\xf7\x54\x9f\x9b\x9f\x0a\xa9\xca\x15\x67\x45\x79\x1a\x1c\x14\xdf\xa4\xe0\x87\x67\x56\x4d\xc7\x52\x56\x6b\xb5\x4b\x51\xf7\xa5\x8a\x7b\xfb\xdf\x97\xea\xdf\xe7\x57\xdd\xc8\x90\x36\xec\x4f\x1b\x76\xd3\x86\x51\x7f\xa4\xf7\xeb\x6c\xc1\x92\x0e\xb0\x42\xae\xcb\x15\x1e\xc2\x9d\xac\x0d\xb4\x6b\x5e\xf4\x87\x99\x27\x62\xc9\x72\xa9\xb8\x89\xa7\xdf\xb4\x36\xa4\x24\xd7\xcb\xa5\x45\xf7\x25\x8b\x31\x9c\x6f\x62\xc1\x37\x90\x19\x4e\x6e\x43\xda\xcd\x1c\x76\x33\xdb\xcc\x3b\x45\x1b\xb1\xd3\x88\x8b\x52\xb1\x14\x8c\x6f\x53\x78\x44\xda\xbc\x60\x31\xef\x6f\x14\x13\xf7\x77\x6b\x55\x52\x54\x7c\xdd\x93\xaa\x29\x3c\xa2\x6a\x5e\x58\x74\x5d\xb0\x18\xbb\xb7\x8a\xa7\x4c\xc4\x1d\xb0\x8f\x1c\xda\x67\xad\x6a\x63\xbe\xb4\xb6\x19\x5f\x5a\x2d\x00\xff\x2f\x45\x2c\x85\x89\xcf\x6c\x8b\xb5\x8a\xe4\x0b\x49\x3e\x57\xe3\xdb\x3f\x67\xdc\x8b\x6c\x4c\x92\x8d\x49\xb2\xb1\x8d\x2b\xff\xfd\x97\xf4\x3e\xb2\x75\x4a\x66\x96\x82\x9d\xf6\x88\x3e\xb5\xea\x88\xb1\x6e\x5d\x90\xad\x16\x8c\xbf\x26\x6a\x99\x88\x84\x51\x84\xeb\xa2\x0f\x61\xad\x3a\x22\xac\x5b\x17\x64\x6b\x44\xb6\xc6\x64\x2b\x27\x5b\xef\xfa\xf7\xf1\xc3\x2a\x21\x67\x60\xff\x2c\xb3\xfd\xd6\x2a\xb2\x7f\x21\xd9\x3f\x1b\xfb\xbd\x66\x69\x72\x27\x55\xf7\x1c\xf4\x88\x01\xb5\xaa\xcd\xb8\x8f\x01\xfd\xc7\x4a\xf1\x25\xed\xed\xfb\xa7\xc1\xd1\x22\xbc\xbd\x6e\x6d\x8f\x16\xed\xed\x75\xed\x96\x88\xa2\x64\x22\xe2\x9f\x36\x39\x27\x2a\xb8\xe2\x7e\x5d\xa5\x9a\xc0\xcf\x78\x9c\xac\xb3\x03\x59\xcc\x8b\x48\x25\xf9\xbe\x57\x84\x22\x62\x25\x5f\x4a\xb5\xa9\xa6\x40\x66\xf9\xba\xe4\x9e\xcc\xcb\x24\x4b\xbe\xf1\x46\x34\x8e\xf2\xed\x47\x84\x87\xf1\x60\xd9\xe8\xca\x0b\xfc\x73\x72\x24\x0f\x40\x4f\x29\x53\x4b\x6e\x02\x6a\x2b\xac\x80\x2e\x5a\x40\x66\x9c\xb1\x1f\x22\x1e\x42\xe2\x04\x14\x4c\x01\xd1\x04\x13\x69\x12\x2b\xa2\x60\xd6\x42\x1a\x9f\x01\xa4\x0b\x8c\xa4\x49\xac\x90\xc6\x6d\x3b\x9a\x21\x24\x08\xe4\x82\xd3\xa6\x19\xfb\xe7\x68\xd6\xf0\x08\x39\x0d\xd0\xa4\x6d\xd6\xbe\x19\x68\x82\x0d\x9b\x90\x0c\x69\xd8\x13\x6c\xd8\x84\x64\x50\xc3\x9e\x60\xc3\x26\x24\x76\x86\xdd\x46\x02\x86\x3d\x41\x86\xad\x09\x86\x35\xec\x09\x34\x6c\x5d\x31\xa8\x61\x4f\xfd\x00\x4e\x1a\xa5\xb1\x82\x3a\xd7\xd2\xda\x64\x02\xa8\xa0\xbb\x11\x12\x37\x77\x9b\x01\x22\xe8\x6e\x84\xc4\xd1\xdd\x42\x80\x74\x89\x91\x34\x89\x9b\xbb\x9d\x23\x24\x08\xf4\x23\xdd\x0d\x19\x11\x1e\x9e\x1f\xea\x6b\x17\x46\x9c\x28\xc4\xe1\x91\xd2\xb8\x26\x7e\x10\x00\x96\x01\xb6\x6c\x4a\xd3\xc4\xfa\xdf\xc7\xcf\xde\xbe\x82\x2e\xa0\x59\x87\x21\x40\x52\x01\x1e\x29\x4a\xd3\x44\x7a\xcf\x33\xa9\x36\x16\x03\x15\x9a\x43\x52\x1c\xc2\x90\x44\x49\x9a\x48\xf3\x52\x2a\xb6\xb4\x08\x49\xb3\x00\x10\xa1\x89\xa3\x24\x56\x44\xda\xdc\x05\xa1\x31\x00\xc4\xd8\xc6\x29\x89\x15\x93\x16\x93\xf0\xcc\x61\x24\x27\xa2\x76\x1c\x18\x03\x9f\xbb\x0b\xfc\x60\x06\x98\x48\x4d\x93\xea\x75\x14\xf1\x94\x2b\x56\xf2\xd8\x8b\xaa\xb0\x90\x88\x65\x9b\x6c\xd6\x46\xbb\x3c\x37\xa6\xb9\xbb\x00\x5a\x39\x25\xb1\xe6\xd2\x92\xaf\xd9\xac\x96\xd8\xf9\x28\x49\x3b\x44\x7d\xf8\x31\xa5\xf7\x12\x1b\x39\x25\xe9\x4d\x63\xb9\x78\x5b\x8e\xb1\x35\x91\x1a\x77\x6b\x9a\x5c\x18\x53\xde\x12\x2f\xbe\x29\x89\x35\x97\x6d\x94\x5a\xe2\x15\x38\x25\xb1\xe6\xb2\xcd\x31\xab\x1e\x71\x81\xd4\x58\x45\x2b\x6d\x16\xc3\xa9\x31\x26\xac\x70\x4c\xa0\x24\x4e\x99\xcf\x5c\xf9\xae\x70\xc9\x42\x49\xdc\x32\xdf\x0c\x4d\x1d\x32\x29\x4a\x62\x97\xf8\xb4\x55\x54\x68\x74\xbf\x55\xd1\x03\x8a\xd2\x38\x96\x08\x81\x71\x8f\x30\xc1\xb1\x9c\x92\x0c\x58\x48\x25\xb8\x90\xa2\x24\x83\x16\x52\x09\xce\x31\x94\xc4\xcd\x9e\x40\x78\x4a\x60\x21\x45\x28\x06\x2d\xa4\x92\x1e\xa9\x8f\xd4\xb8\x05\x4c\x90\xf6\x12\xbc\x0b\x4e\x49\x86\xb4\x70\x9c\x88\x29\xc9\xb0\x16\x8e\x93\x30\x25\x19\xd6\xc2\xd1\x3e\xb8\x2e\xb0\xe2\xd1\x02\xf8\xd4\x0f\x91\x81\x67\xbc\x64\xa9\x09\xa8\x25\x68\x02\x7d\x16\xf7\x42\x3e\x8a\x36\xc6\x69\xd0\xe2\x98\x06\x68\xaa\xf0\x4c\xfd\x54\xc7\xcf\x02\x30\x51\xba\xe0\xa8\xfc\xe6\x82\x2b\x96\x7a\xf9\x5a\xe5\xb2\xe0\x68\x9a\xc0\x1e\x6a\x06\x4f\x05\x09\x85\x05\x4e\x7b\xb6\xd0\x26\x73\x16\xf8\x45\xc6\xd2\x6e\xa3\xd1\x05\x0e\x34\xe0\x84\x32\x83\x27\x94\x84\xc2\x02\xa7\x6d\x39\xe6\xa5\x5b\x86\x8b\x0f\x4a\x62\xb3\xb1\xa4\x99\xf2\xc4\x37\x3a\x57\x86\xab\x0f\x4a\x62\x83\xa4\x25\x8b\x0b\xdf\x18\x06\x33\x98\xe8\x09\x85\x0d\x90\x16\x07\xcf\x7d\x63\xfe\xca\x70\x46\xa5\x24\x16\x66\xa4\x2d\x40\x8c\x4b\xee\x0c\xe5\x09\x5d\x30\x60\xf8\x19\xc3\xf0\xa3\x2b\x86\x0c\x3f\x30\x5b\x10\x8a\xe1\x3c\x7e\xe2\x07\x67\x88\x87\xd2\xd8\x10\x9d\xb5\x91\xcc\x3b\x36\xdb\xcf\x43\x65\x2b\xa9\xb1\x60\xb2\x5d\xe5\x67\xf8\x84\x9b\x92\xb8\xb8\x98\x39\x2c\xe2\xf3\x6d\x4a\x62\x63\xd7\x76\x2b\xfc\x0c\x1d\x25\xeb\x02\x07\x9f\x37\x2e\x30\x32\x78\x8a\x4c\x28\x5c\x3c\xcc\x6c\x39\x53\x3f\x80\xa6\x43\x69\x6c\x88\xb4\x1d\xda\x4b\xb3\xf5\x4c\xfd\x10\x9a\x0f\xa5\xb1\x60\xba\xd4\x8e\x6b\x2f\xcc\x06\x84\x0f\xb5\x29\xc9\x70\x1e\x86\x8f\xb4\x29\xc9\x80\x1e\x86\x4e\x8f\x75\xc1\x60\x1e\x06\xcf\x8e\x09\xc5\x60\x1e\x96\x87\x38\x5f\x90\x1a\xf7\x1d\xfe\x73\xb3\x0d\xe5\x78\x9b\x8a\x92\xb8\xef\xa4\x83\x2d\x98\x1c\x56\xb0\x84\xc2\x9a\xaa\x3d\x58\xe6\x4d\x98\xbc\xc7\x66\x15\xa9\x19\xfc\x9c\x26\xc7\xe5\x35\x25\x71\x3e\xf5\x83\xe3\x05\x6d\xeb\xdf\x38\xa5\x51\x78\xb4\x28\x89\xd3\x82\xcd\x38\x50\x0a\xef\xee\x51\x12\x1b\x20\xdb\xcd\x3d\x85\xe7\x8e\x92\x0c\xf9\x05\x0e\x85\xd6\x6c\xba\xc0\x69\x49\x8b\xb6\xf6\x14\x5c\x26\x11\x0a\xa7\x8d\x08\xb0\xa7\xa6\x7a\xac\x4a\x48\x8d\x0d\x94\x6d\x68\x52\x78\x59\x42\x49\x06\x74\x36\xbc\x2e\xa1\x24\x83\x3a\x1b\xfe\xde\x2d\x25\x19\xd4\xd9\xd0\x62\x49\x17\x0c\xeb\x6c\x70\xc5\x44\x28\x86\x74\xb6\x32\xf0\xb3\x24\x52\xb2\x93\x47\x17\x1c\xe1\xb4\x2e\x91\x1b\x35\x67\xfe\x2c\x18\x1b\x21\xf0\x6e\x28\x25\x19\x6c\x45\x52\x86\xc0\x6a\x74\xc1\x50\x0b\x80\x32\x44\x9b\x6a\x84\xc2\x01\xc6\xe8\x4d\xdb\x8f\x32\x1b\x8b\x26\x70\xd9\xd0\x07\x28\x82\x09\x23\xc9\xf1\x75\x07\x10\xe4\x42\x21\x38\xe6\xd0\x05\x0e\x30\xc8\x70\xb1\x1f\xfd\xb4\xe5\xe2\x53\x8f\xaf\x11\x91\x1a\xa7\x44\x0e\xbe\x59\xf8\x14\xf8\x63\x14\x6c\x48\x8d\x55\xe6\x0c\xf5\x7d\xa2\xa9\x71\xe6\x9e\x02\xde\x67\xb0\x28\x91\xd3\x68\xf5\xe1\xc2\xc3\x45\x68\x5c\x2a\x1f\x90\xd4\xb7\x9f\xd7\x63\x0e\x29\x91\xdb\x24\x8e\x2f\xcf\x20\x18\x2a\xca\x48\x8d\x53\x55\x06\x2a\xd7\xed\x07\xa2\xb2\x8c\xd4\x38\xd5\x65\xd0\x0b\x39\x8a\x54\x94\xc4\xa5\x12\xaa\x8b\xd7\xfa\x5d\xdb\x48\xf1\x98\x8b\x32\x61\x29\xf1\xa6\x6d\xae\xe4\x43\x12\x73\x55\x2d\xdf\x7f\x9b\x37\x30\x93\x22\x4f\xd9\xe6\x8d\x54\x19\x2b\xb7\x57\xef\x12\x9e\x36\x3e\x9d\x09\x21\xcb\xea\xed\xe2\xed\x53\xf7\xcf\xdb\x3e\x71\xc5\x54\xc6\x95\xcf\xf2\xbc\x88\x64\xcc\xfd\x48\x66\xff\x89\xd2\x75\x51\x72\x75\x7a\x60\x19\x35\xdf\xf0\xef\xba\x2d\x16\x85\xed\x2d\xc5\xcb\x77\x1f\xda\xb7\xed\xee\x7a\xae\xf9\xab\xee\x1c\xbf\xe3\x7c\xe8\xc4\xcb\xcf\xd1\x44\x52\xdc\x25\xcb\xdd\xc8\xdc\xbe\xbe\xbe\xbe\x99\xcf\x6f\xdf\xdd\xfc\x7e\xfb\xf6\xbf\x0d\x8c\xed\xb3\xa4\xda\x0e\xfd\x88\x3d\x16\xb7\x2c\x8a\x78\x51\xdc\xde\xf3\xcd\x6d\x12\x1f\xcb\xfe\x2c\x76\xbf\xf7\x51\x49\xde\xf1\x4d\xfb\x39\x29\x5b\xf0\x74\xbf\x91\x52\x14\xde\x3b\xbe\xf1\xde\xb6\x1e\x92\x88\x7c\x5d\xcd\x47\xc9\x9f\xca\x51\x7d\xe5\xf9\x55\xcf\x6e\xcc\x6f\xae\x7f\xb9\xf9\xd4\xe8\x4d\x77\x57\x0a\x1e\x29\x5e\x36\x7a\x44\x77\xe7\x45\xf6\x7a\xdf\xa9\x8e\x2e\xcd\x2b\x95\x77\xe8\x59\x47\xb7\x72\x56\x14\x8f\x52\xc5\x8d\xae\xed\xfe\x6a\xbf\x43\x7e\xbf\x5e\x70\x25\x78\x49\xbd\x40\xfe\xc0\x55\xb1\x73\xb0\xc0\xbf\xf0\xcf\x0e\x76\xbb\xfb\x99\xa1\x86\xc1\xc6\xfc\x61\x74\xe5\x95\x6a\xcd\x9b\xb6\xa5\x64\xac\xb7\x7e\x65\xbb\xb6\x93\x26\x5a\x85\x74\xf2\xfc\x4f\x00\x00\x00\xff\xff\x69\x9c\xe7\x42\xd7\x48\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 18647, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
