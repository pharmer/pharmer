// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package aws

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x9a\xe1\x6e\xdb\x36\x10\xc7\xbf\xe7\x29\x08\x7d\xae\xbd\x44\xf6\xd2\xa0\xdf\x82\x2c\x1d\x82\xac\x48\x30\x67\x1d\x86\xa1\x30\x68\xea\xe2\x70\x91\x48\x95\x94\x92\xba\x45\x9e\x66\x8f\xb2\x17\x1b\x24\xd9\xb2\x44\x9d\x74\x22\x0c\x7f\x69\x93\xe3\x5f\xcc\xef\x8e\xff\xbb\x44\x92\x7f\x9c\x30\x16\x28\x9e\x40\xf0\x81\x05\xfc\xd5\x06\xef\x8a\x00\xa8\x97\xe0\x03\xfb\xfb\x84\x31\xc6\x82\x08\x5e\xca\x28\x63\xc1\x57\xbe\xfb\x2a\x35\x3a\x0a\x4e\x18\xfb\x52\xea\x0d\xac\xa5\x56\xb6\xbe\xe6\x47\xf9\x2f\x63\x41\xac\x05\xcf\xa4\x56\xc5\xee\x9f\xa5\x59\x4b\x25\x77\x5b\xd4\x97\x15\x6b\xb9\x9d\x00\xb7\xd9\xe4\x6c\xbf\xf8\x5d\x2b\xd8\xef\x58\x86\x6a\xd5\x7e\x8f\x66\x74\x85\x46\x05\x1a\x8d\xd0\x28\x04\xdb\xe0\x97\xf2\xff\xb7\x77\xfd\xd9\xdc\x3d\x49\x3d\x94\x49\x38\x2a\x93\x10\xcd\x24\x44\x33\x09\xc5\x78\xba\x2b\x1e\xcb\x47\x6d\xfa\xab\xfd\x0a\x63\xaa\x5d\xa9\x5c\xc6\x2a\xea\x32\x56\x51\x0f\xc6\x3b\x03\x6b\xad\x86\xf8\xc8\x1a\x56\x2a\x94\xaf\x53\xc3\x2a\xea\xc1\x77\x63\x20\xe6\x2a\xc2\x00\x21\x1f\x53\xc0\x5a\xd5\x02\xac\xa3\x2b\x34\xea\x01\xf8\x9b\x56\x11\x5e\xc0\xdd\x6e\xc3\x05\x3c\x36\xdf\x42\xaa\x35\x4f\xb5\x01\x0c\x91\xa7\x13\xab\xf3\xec\x69\x44\xdb\xb7\xa5\x2d\xd8\xf6\xd2\xaa\x7f\xc9\x03\xfb\x41\x3f\x6f\xd0\xd6\xe6\xe9\x44\x69\x33\x16\xb9\x21\x75\x91\x1b\x4b\x2e\x72\x63\x89\x40\xee\x29\x65\xe3\xc8\x5b\x67\xb1\x89\x14\x6c\xc6\x97\x39\xec\x2f\x73\xd8\x5f\x66\xaa\xbd\xf6\xcc\x96\x77\x06\x7e\x0b\xf7\xbf\x7f\x35\xbb\xe7\x79\xac\x07\x91\xeb\x5d\x5a\xb4\x75\x74\x85\x46\xbd\xeb\xda\x07\xf9\x29\x4f\x56\x5c\x8e\xaa\x69\x8f\x6d\x7b\x2c\xeb\xc1\x08\xf9\x44\x80\xca\x0c\x8f\xfb\x28\x3f\x1a\xae\x9e\x1f\x73\x93\x51\xb3\xa0\xde\xc7\x1d\x07\xf5\x82\x3b\x11\xea\x05\x17\xb7\xfe\xc3\x40\x2a\x9b\x71\x25\xe0\x61\x93\x02\xf2\xe7\x81\x7d\xce\x0b\xc4\x2c\x9c\x26\x52\x98\xc6\x59\x47\x60\x85\x91\xe9\x2e\x87\xae\x40\xf0\x0c\xd6\xda\x6c\x8a\xd5\x5f\x41\x81\xe1\x31\xbb\xcf\x4d\xaa\x6d\x63\xda\x88\xb4\xd8\xfe\x6c\xdf\xca\x3c\x29\xbe\x47\x4b\xba\x47\xb1\x09\x8f\xe3\x21\x14\x47\x70\x00\x4a\x48\xa0\x24\x10\xc9\x3c\x19\x2c\x8b\xa3\xf0\x80\x09\x1d\x98\x39\x01\x13\x73\xb3\x86\x21\x16\x47\x70\x00\xca\xc5\x10\x4a\x32\x27\x50\xba\x82\x23\xa2\x7c\x23\x59\x5c\x85\x07\xcc\xdc\xb5\xee\x39\x41\x13\xd2\x38\x1d\x89\x07\xcf\x85\xc3\x33\x1b\x34\x70\x32\x9f\xce\x69\x9e\x8e\xc4\xa7\x9f\xce\x1d\xa0\xf3\x41\x13\x27\xf3\xe9\xd9\x29\x4d\xd4\xd5\xf8\x1c\xd9\x69\xe7\xcc\x4e\x07\x99\x66\x54\x97\x23\x8a\x03\x46\xce\x6c\xfa\xfe\x67\x82\x87\x28\x50\x47\x70\x40\x77\xbd\x9f\x52\x30\xd4\x71\x75\x15\x87\xf4\x17\x45\x43\xf6\x17\x22\x39\xa4\xbf\x06\xad\x23\xa8\x41\xd8\x15\x34\x59\xae\x74\x92\xe6\x19\xb0\xbb\x34\x93\x89\xfc\x0e\x11\x75\x58\x94\x75\x04\x39\x0d\x11\x85\x17\x91\x7b\x5e\x84\x7d\x04\x3d\x10\x31\x89\x17\x92\x7b\x64\xc3\x16\x12\xf4\x48\xc4\x24\x5e\x44\x9d\xa1\x48\xba\xe8\x82\x46\xea\x48\xbc\x90\x66\x9d\x39\x3d\x8c\x44\xcd\xa0\xae\xe0\xb8\xc6\x26\xc7\x10\xa2\x38\xaa\xb1\xe9\x49\x84\x49\x8e\x69\xec\x19\x6d\x6c\x44\x72\x54\x63\xcf\x68\x63\x23\x12\x3f\x63\xbb\x56\x1a\x36\xf6\x3a\x24\xcf\x0d\x93\xb4\x7e\x83\xdc\xff\xc1\x6e\xb6\x77\x55\xf6\xb0\x33\x5b\x87\x64\x81\x30\xc9\x68\x1a\xcf\xe2\x18\xaa\xeb\xbb\x82\x26\xca\x27\x48\xb4\xd9\x30\x3d\xb6\xe9\x87\x6b\x63\xc8\x96\x47\x14\x3e\x38\x6e\xc7\xcf\x4e\x87\x5b\xde\xd0\x2d\x8f\x49\x7c\x90\x5c\xf7\x9c\x0f\xde\x29\x1b\xba\xe3\x31\x89\x0f\x50\xa7\xe1\xcf\xc2\xc1\x1b\x0e\x43\x77\x3c\x26\xf1\x41\xea\x78\x3a\x9c\x0f\xde\x72\xc8\x90\xf2\x11\xa2\x68\x02\x2d\x32\x6d\xf8\xda\xe3\x57\x07\x65\x24\x49\xcf\x20\x4c\xe2\xc5\xe4\xe7\x24\x19\x92\x4e\xc2\x24\x5e\x44\xbe\x56\x92\xf4\x6c\xc4\x24\x5e\x4c\xbe\x5e\x8a\x48\x2f\x21\x8a\xa3\x7a\x29\xa2\xbd\x84\x49\x8e\xe8\xa5\x88\xf6\x12\x26\x39\xaa\x97\x22\xda\x4b\x98\xc4\xcf\x4b\x2e\x53\xed\xa5\xfa\x59\xac\x30\x10\x81\xca\x24\x8f\x91\x27\xb1\xa9\xd1\x2f\x32\x02\x53\xfc\xb0\xcb\x3f\x17\x0d\x50\x69\xd3\x98\x6f\x3e\x6a\x93\xf0\xac\x58\x7d\x94\x10\x37\x7e\x3c\x57\x4a\x67\xe5\xc3\xe6\x62\xd7\xdd\x7e\xc5\x8e\x4f\xdc\x24\x60\xa6\x3c\x4d\xad\xd0\x11\x4c\x85\x4e\x7e\x12\x71\x6e\x33\x30\x93\x3d\x4b\xb1\x65\xf3\xb1\x32\x7a\x59\xa4\xac\xef\x25\xb6\xaa\x98\x7b\xd9\xf6\xaa\xb7\x9a\xbf\x4c\xa7\xfd\x30\x7c\x9f\x44\xf5\x2a\x5c\x68\xf5\x28\xd7\xdb\xca\x2c\x2f\xaf\xae\xae\x17\x8b\xe5\xed\xf5\x5f\xcb\x9b\x5f\x1a\x18\xc5\x5e\xda\x24\x41\xf5\x1e\x7d\xc9\x85\x00\x6b\x97\xcf\xb0\x59\xca\xa8\x2d\xfb\xc7\x6e\xdf\x2f\x94\x92\x5b\xd8\xb8\xfb\xc4\x7c\x05\x25\xee\x65\xa9\x60\xb7\xb0\x61\x37\xce\x26\x52\xa5\x79\x79\x1e\x19\x7c\xcb\x82\x7a\xe5\xed\xdd\xc8\x34\x16\xd7\x57\xbf\x5f\x3f\x34\xb2\xe9\x4f\xc5\x82\x30\x90\x35\x32\xc2\xd3\xa9\x64\x97\xbb\xa4\x7a\x52\x5a\x94\x2a\xb6\xcf\xac\x27\xad\x94\x5b\xfb\xaa\x4d\xd4\x48\x6d\xfb\x95\xfb\x8e\xe1\x39\x5f\x81\x51\x90\x81\xfd\x0c\xc6\xe2\x9f\x43\x78\xa9\x56\x8a\x8d\xcf\xa6\x17\xd3\xd3\xde\x46\x74\x56\xab\x0f\x42\x34\x5c\x1d\x41\x11\xc8\x4c\x0e\x0d\x03\x7e\xe5\xdd\x58\xf9\x01\x89\x2a\x7a\xd2\xe4\x2f\xb9\x4f\xde\xfe\x0f\x00\x00\xff\xff\x60\xea\x4b\x07\x78\x21\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 8568, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
