// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package aws

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x9a\xdf\x72\xda\x38\x14\xc6\xef\xf3\x14\x1e\x5f\x03\x05\xc3\xa6\x9d\xde\xb1\x24\xdd\x61\x9a\xb6\x6c\xc8\xb6\xb3\xb3\xd3\xc9\x08\xf9\xe0\x68\x91\x25\xaf\x24\x93\x92\x4e\x9e\x66\x1f\x65\x5f\x6c\xc7\x36\x18\xd9\x96\x2d\x34\x0c\x37\xfd\x23\x7d\x3e\xfe\x9d\xa3\xef\x1c\x82\x9d\x9f\x57\x9e\xe7\x33\x14\x83\xff\xde\xf3\xd1\xb3\xf4\x7b\xd9\x02\xb0\xad\xff\xde\xfb\xeb\xca\xf3\x3c\xcf\x0f\x61\x9b\xaf\x7a\x9e\xff\x0f\xf2\xaf\x3c\xef\x7b\xae\x11\x10\x11\xce\x64\xa9\xfb\x99\xff\xe9\x79\x3e\xe5\x18\x29\xc2\x59\x16\xf1\x2b\x11\x11\x61\x04\xed\x03\x94\x97\x65\x7b\xa9\xec\x03\x92\xaa\x3f\x3a\x6e\xbe\x70\x06\xc7\x88\xf9\x52\xa9\x3a\xc6\xd0\x57\x57\xc6\x55\x6c\x5c\x0d\x8d\xab\xe0\xef\x17\xbf\xe7\x7f\xbf\xf6\xda\xb3\xf9\xf2\x44\x78\x57\x26\xc1\x49\x99\x04\xc6\x4c\x02\x63\x26\x01\x3e\x9d\x6e\x86\x28\x59\x73\xd1\x5e\xed\x67\x38\xa5\xda\x85\xaa\xce\x58\xac\xd6\x19\x8b\x55\x07\xc6\x2f\x02\x22\xce\xba\xf8\xac\x35\x2c\x54\x46\xbe\x46\x0d\x8b\x55\x07\xbe\xb9\x00\x8a\x58\x68\x02\x84\xf4\x94\x02\x96\xaa\x0a\x60\xb9\xba\x32\xae\x3a\x00\xde\x71\x16\x9a\x0b\x78\x88\xd6\x5d\xc0\x4b\xf3\x2d\x09\x8b\x50\xc2\x05\x98\x10\x51\xd2\x97\x3c\x55\x4f\x27\xb4\x7d\x55\x5a\x81\xad\x6e\xad\xda\xb7\x1c\xb0\x1f\xf8\x66\x67\x6c\x6d\x94\xf4\x19\x17\xa7\x22\x6b\xd2\x3a\xb2\xb6\x55\x47\xd6\xb6\x2c\xc8\x2d\xa5\xd4\x8e\xbc\x72\x16\xbb\x90\xc1\xee\xf4\x32\x07\xed\x65\x0e\xda\xcb\x6c\x6b\xaf\x23\xb3\x44\x8d\x81\x5f\xc1\xfd\xef\x5f\xee\x2d\x50\x4a\x79\x27\x72\x19\xa5\x42\x5b\xae\xae\x8c\xab\xce\x75\x6d\x83\xfc\x94\xc6\x2b\x44\x4e\xaa\x69\x8b\x6d\x5b\x2c\xeb\xc0\x08\x69\x1f\x03\x53\x02\xd1\x36\xca\x0f\x02\xb1\xcd\x3a\x15\xca\x36\x0b\xca\x38\xf5\x71\x50\x6e\xd4\x27\x42\xb9\x51\xc7\x2d\x7f\x30\x20\x4c\x2a\xc4\x30\x3c\xec\x12\x30\xfc\x78\x20\x37\x69\x86\xa8\x82\x41\x4c\xb0\xd0\xce\x3a\x04\x89\x05\x49\x0e\x39\x34\x05\x18\x29\x88\xb8\xd8\x65\xbb\xbf\x01\x03\x81\xa8\xb7\x48\x45\xc2\xa5\x36\x6d\x70\x92\x85\x1f\x1d\x5b\x19\xc5\xd9\xff\x8d\x25\x3d\xa2\xc8\x18\x51\xda\x85\x52\x13\x9c\x81\x12\x58\x50\x62\x08\x49\x1a\x77\x96\xa5\xa6\x70\x80\x09\x6a\x30\x13\x0b\x0c\x45\x22\x82\x2e\x96\x9a\xe0\x0c\x94\x77\x5d\x28\xf1\xc4\x82\xd2\x14\x5c\x10\xe5\x87\x95\xa5\xae\x70\x80\x99\xd4\xad\x7b\x6d\xa1\x09\xec\x38\x0d\x89\x03\xcf\xbb\x1a\xcf\xb8\xd3\xc0\xf1\x64\x30\xb1\xf3\x34\x24\x2e\xfd\x74\x5d\x03\xba\xee\x34\x71\x3c\x19\x8c\x86\x76\xa2\xa6\xc6\xe5\xc8\x86\x8d\x33\x1b\x76\x32\x8d\x6d\x5d\x6e\x50\x9c\x31\x72\xc6\x83\xb7\xbf\x58\x78\x2c\x05\x6a\x08\xce\xe8\xae\xb7\x03\x1b\x8c\xed\xb8\x9a\x8a\x73\xfa\xcb\x46\x63\xed\x2f\x83\xe4\x9c\xfe\xea\xb4\x0e\xb6\x0d\xc2\xa6\x40\x67\x99\xf1\x38\x49\x15\x78\x5f\x12\x45\x62\xf2\x02\xa1\xed\xb0\x6c\xd6\xc1\xd6\x69\x68\x50\x38\x11\xd5\xcf\xcb\x62\x1f\x6c\x1f\x88\x26\x89\x13\x52\xfd\xc8\xba\x2d\x84\xed\x23\xd1\x24\x71\x22\x6a\x0c\x45\xab\x8b\xde\xd9\x91\x1a\x12\x27\xa4\x71\x63\x4e\x77\x23\xd9\x66\x50\x53\x70\x59\x63\x5b\xc7\x90\x41\x71\x51\x63\xdb\x27\x91\x49\x72\x49\x63\x8f\xed\xc6\x36\x48\x2e\x6a\xec\xb1\xdd\xd8\x06\x89\x9b\xb1\xeb\x56\xea\x36\x76\x14\x58\xcf\xcd\x24\xa9\x7c\x82\x2c\xfe\xf0\xe6\xfb\x6f\x55\xf2\xbc\x33\x8b\x02\x6b\x81\x4c\x92\x93\x69\x1c\x8b\x23\x6c\x5d\xdf\x14\xe8\x28\x9f\x20\xe6\x62\xe7\xf1\x53\x9b\xbe\xbb\x36\xc2\xda\xf2\x06\x85\x0b\x4e\xbd\xe3\xc7\xc3\xee\x96\x17\xf6\x96\x37\x49\x5c\x90\xea\xee\xb9\xee\xfc\xa6\x2c\xec\x1d\x6f\x92\xb8\x00\x35\x1a\x7e\x14\x74\x7e\xe1\x10\xf6\x8e\x37\x49\x5c\x90\x1a\x9e\x0e\x26\x9d\x5f\x39\x48\x60\xf3\x91\x41\xa1\x03\x2d\x15\x17\x28\x72\xf8\xe8\xb0\x19\x89\xd8\x67\x90\x49\xe2\xc4\xe4\xe6\x24\x12\x58\x9d\x64\x92\x38\x11\xb9\x5a\x89\xd8\x67\xa3\x49\xe2\xc4\xe4\xea\xa5\xd0\xea\x25\x83\xe2\xa2\x5e\x0a\xed\x5e\x32\x49\x2e\xe8\xa5\xd0\xee\x25\x93\xe4\xa2\x5e\x0a\xed\x5e\x32\x49\xdc\xbc\x54\x67\x2a\xbd\x54\x3e\x8b\xc5\x02\x42\x60\x8a\x20\x6a\x78\x12\x9b\x08\xbe\x25\x21\x88\xec\x66\xd3\x6f\x4b\x0d\x94\xc8\x84\xa2\xdd\x07\x2e\x62\xa4\xb2\xdd\x35\x01\xaa\xdd\x1e\x31\xc6\x55\xfe\xb0\x39\x8b\x7a\x88\x97\x45\x7c\x42\x22\x06\x31\x40\x49\x22\x31\x0f\x61\x80\x79\xfc\x06\xd3\x54\x2a\x10\xfd\x23\x4b\x16\x52\x7f\xac\x6c\xbc\x2c\x64\xd2\xf5\x12\x59\x54\xac\x7e\xd9\xfe\xaa\xd7\x92\x3f\x4f\xa7\xfa\x30\xfc\x98\x44\xf1\xfa\x1b\x73\xb6\x26\xd1\xbe\x32\x8f\xd3\xd9\xec\x76\xb9\x7c\xfc\x78\xfb\xe7\xe3\xfc\x46\xc3\xc8\x62\x71\x11\xfb\xc5\xbb\xf3\x47\x84\x31\x48\xf9\xb8\x81\xdd\x23\x09\xab\xb2\xbf\xe5\xfe\xfd\x42\x2e\xf9\x08\xbb\x7a\x1c\x8a\x56\x90\xe3\x4e\x73\x85\xf7\x11\x76\xde\xbc\x16\x84\xb0\x24\xcd\xcf\x43\xc1\x0f\xe5\x97\x3b\xaf\xbd\x13\xd3\x58\xde\xce\xee\x6f\x1f\xb4\x6c\xda\x53\x91\x80\x05\x28\x2d\x23\x73\x3a\x85\x6c\x7a\x48\xaa\x25\xa5\x65\xae\xf2\x8e\x99\xb5\xa4\x95\x20\x29\x9f\xb9\x08\xb5\xd4\xf6\xff\xaa\xbf\x63\xd8\xa4\x2b\x10\x0c\x14\xc8\xaf\x20\xa4\xf9\xf7\x10\xb6\xc5\x4e\x16\x78\x34\x78\x3b\x98\xb4\x36\x62\x6d\xb7\xf8\xe5\x07\xcd\xd5\x21\x64\x0b\x4a\xa4\xd0\x70\x52\x08\x6b\x94\x52\xb5\x4c\x00\x57\xaf\xd9\x9b\x7e\x9e\xdc\x23\x16\xe5\xbf\x5c\x31\x1a\x0e\x82\xc9\x64\x30\x1c\x0c\xdf\x8c\xae\x75\x2b\x4b\x10\x5b\x82\x61\x66\xba\x62\x68\xd0\x23\x9a\xbf\xea\x81\xcf\x3c\x84\x19\x09\x85\xdc\xc3\x69\x12\x60\x68\x45\x0f\x11\x3f\x71\x46\x14\x17\x84\xe5\x3e\x38\x34\x8c\xdf\x26\xbf\xe3\x51\x54\x68\x8d\x41\xb3\xbb\xb6\x4a\x68\xb1\x71\x03\x52\x11\x56\xbe\x8d\x3a\xdc\xb2\x0f\x14\x49\x45\xb0\x04\x24\xf0\x53\x05\x40\xdf\xd8\x47\xbf\x87\x84\x12\x8c\xa4\xfe\x3c\x33\xab\x38\x93\x4b\x10\x5b\x10\xf3\x85\x56\xa3\xd1\xd0\xaf\x6a\x6e\x78\x8c\x48\xf1\x7d\xaf\x48\x6b\x90\x15\x8d\x56\xea\x18\xc6\x44\x66\x0e\x99\x71\xa6\x04\xcf\x9d\xfa\x19\xc5\x20\x13\x84\xe1\x8e\xac\x01\xef\x30\x85\xde\x1d\x89\x89\xca\xcf\x44\xf4\x96\xc5\x51\x4d\x31\xe6\x29\x53\xbd\x45\xe6\x30\xa9\x80\xa9\xaf\x9c\xa6\x31\xdc\x65\x86\xef\xdd\xec\x3d\x51\x0c\xa3\x19\x45\x52\xf6\xee\x41\xf2\x54\x60\xf8\x3d\xe5\xaa\xf2\xaa\x2d\x46\x26\x9b\x5c\xe7\xc7\x1e\x4c\x74\x25\x03\xf5\xcc\xc5\x66\xa1\x0d\xed\x35\x45\x8c\x01\x6d\x3d\xca\x29\x05\xa1\xda\x0e\x9d\xcb\xfc\x43\x08\x56\x04\x31\xd3\x7d\x38\x25\x78\xa7\xdf\x8d\x71\x66\x70\xcd\x37\x58\x3d\x71\xbe\x79\xe0\x1b\x60\xd3\x54\x3d\xb1\x36\xe3\xdc\xaf\x10\xce\x04\x2f\x6d\x82\xe9\x62\x2e\xf3\x93\xfd\x15\x49\x82\xa7\x69\x48\x54\xab\x74\x9f\xcf\x54\x29\x82\x9b\xa2\x84\x53\xba\xa4\x00\xc9\x9c\x29\x10\xdb\xfc\x63\x60\x6c\x74\xf2\x22\x5d\x51\x82\x73\x2b\xe9\xfd\x7d\x9c\x36\x57\xaf\xff\x07\x00\x00\xff\xff\x2c\x81\xfe\xe1\x22\x25\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 9506, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
