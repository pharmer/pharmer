// Code generated by go-bindata.
// sources:
// cloud.json
// DO NOT EDIT!

package aws

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x9a\xdf\x72\xda\xb8\x17\xc7\xef\xf3\x14\x1e\x5f\x03\x05\xc3\x2f\xed\xf4\x8e\x1f\x49\x77\x98\xa4\x0d\x1b\xd2\x76\x76\x76\x3a\x8c\x90\x0f\x44\x8b\x2c\x79\x25\x99\x94\x74\xf2\x34\xfb\x28\xfb\x62\x3b\xb6\xc1\xd8\xb2\x6c\xa1\x61\xb8\xe9\x1f\xe9\xeb\xe3\xcf\x39\xfa\x9e\x43\xb0\xf3\xeb\xca\xf3\x7c\x86\x22\xf0\x3f\x7a\x3e\x7a\x91\x7e\x27\x5d\x00\xb6\xf5\x3f\x7a\x7f\x5e\x79\x9e\xe7\xf9\x21\x6c\xb3\x55\xcf\xf3\xff\x46\xfe\x95\xe7\xfd\xc8\x34\x02\xd6\x84\x33\x59\xe8\x7e\x65\x7f\x7a\x9e\x4f\x39\x46\x8a\x70\x96\x46\xfc\x46\xc4\x9a\x30\x82\xf6\x01\x8a\xcb\xd2\xbd\x44\x76\x01\x49\xd5\x1d\x1c\x37\x5f\x39\x83\x63\xc4\x6c\xa9\x50\x1d\x63\x94\x57\x97\xc6\x55\x6c\x5c\x0d\x8d\xab\xe0\xef\x17\x7f\x64\x7f\xbf\x75\x9a\xb3\x79\x78\x26\xbc\x2d\x93\xe0\xa4\x4c\x02\x63\x26\x81\x31\x93\x00\x9f\x4e\x37\x41\x94\xac\xb8\x68\xae\xf6\x0b\x9c\x52\xed\x5c\xa5\x33\xe6\xab\x3a\x63\xbe\xea\xc0\xf8\x20\x60\xcd\x59\x1b\x9f\xb5\x86\xb9\xca\xc8\x57\xab\x61\xbe\xea\xc0\x37\x15\x40\x11\x0b\x4d\x80\x90\x9c\x52\xc0\x42\x55\x01\x2c\x56\x97\xc6\x55\x07\xc0\x7b\xce\x42\x73\x01\x0f\xd1\xda\x0b\x78\x69\xbe\x39\x61\x6b\x14\x73\x01\x26\x44\x14\x77\x25\x4f\xd4\xf3\x09\x6d\x5f\x95\x56\x60\xab\x5b\xcb\xe6\x2d\x07\xec\x27\xbe\xd9\x19\x5b\x1b\xc5\x5d\xc6\xc5\xa9\xc8\x25\xa9\x8e\x5c\xda\xd2\x91\x4b\x5b\x16\xe4\x86\x52\x96\x8e\xbc\x72\x16\xbb\x90\xc1\xee\xf4\x32\x07\xcd\x65\x0e\x9a\xcb\x6c\x6b\xaf\x23\xb3\x44\xb5\x81\x5f\xc1\xfd\xf7\x1f\xee\xcd\x50\x42\x79\x2b\x72\x11\xa5\x42\x5b\xac\x2e\x8d\xab\xce\x75\x6d\x82\xfc\x9c\x44\x4b\x44\x4e\xaa\x69\x83\x6d\x1b\x2c\xeb\xc0\x08\x49\x17\x03\x53\x02\xd1\x26\xca\x4f\x02\xb1\xcd\x2a\x11\xca\x36\x0b\x8a\x38\xfa\x38\x28\x36\xf4\x89\x50\x6c\xe8\xb8\xc5\x0f\x06\x84\x49\x85\x18\x86\xa7\x5d\x0c\x86\x1f\x0f\xe4\x26\x49\x11\x55\xd0\x8b\x08\x16\xa5\xb3\x0e\x41\x62\x41\xe2\x43\x0e\x75\x01\x46\x0a\xd6\x5c\xec\xd2\xdd\xdf\x80\x81\x40\xd4\x9b\x25\x22\xe6\xb2\x34\x6d\x70\x9c\x86\x1f\x1c\x5b\x19\x45\xe9\xff\x8d\x25\x3d\xa2\xc8\x08\x51\xda\x86\xa2\x09\xce\x40\x09\x2c\x28\x11\x84\x24\x89\x5a\xcb\xa2\x29\x1c\x60\x02\x0d\x66\x64\x81\xa1\x48\xac\xa1\x8d\x45\x13\x9c\x81\xf2\xa1\x0d\x25\x1a\x59\x50\xea\x82\x0b\xa2\xfc\xb4\xb2\xe8\x0a\x07\x98\x91\x6e\xdd\x6b\x0b\x4d\x60\xc7\xa9\x49\x1c\x78\x3e\x68\x3c\xc3\x56\x03\x47\xa3\xde\xc8\xce\x53\x93\xb8\xf4\xd3\xb5\x06\x74\xdd\x6a\xe2\x68\xd4\x1b\xf4\xed\x44\x75\x8d\xcb\x91\xf5\x6b\x67\xd6\x6f\x65\x1a\xda\xba\xdc\xa0\x38\x63\xe4\x0c\x7b\xef\xff\x67\xe1\xb1\x14\xa8\x26\x38\xa3\xbb\xde\xf7\x6c\x30\xb6\xe3\xaa\x2b\xce\xe9\x2f\x1b\x8d\xb5\xbf\x0c\x92\x73\xfa\xab\xd5\x3a\xd8\x36\x08\xeb\x82\x32\xcb\x84\x47\x71\xa2\xc0\x7b\x88\x15\x89\xc8\x2b\x84\xb6\xc3\xb2\x59\x07\x5b\xa7\xa1\x41\xe1\x44\xa4\x9f\x97\xc5\x3e\xd8\x3e\x10\x4d\x12\x27\x24\xfd\xc8\xda\x2d\x84\xed\x23\xd1\x24\x71\x22\xaa\x0d\x45\xab\x8b\x3e\xd8\x91\x6a\x12\x27\xa4\x61\x6d\x4e\xb7\x23\xd9\x66\x50\x5d\x70\x59\x63\x5b\xc7\x90\x41\x71\x51\x63\xdb\x27\x91\x49\x72\x49\x63\x0f\xed\xc6\x36\x48\x2e\x6a\xec\xa1\xdd\xd8\x06\x89\x9b\xb1\x75\x2b\xb5\x1b\x7b\x1d\x58\xcf\xcd\x24\xa9\x7c\x82\xcc\xbe\x7a\xd3\xfd\xb7\x2a\x79\xde\x99\xad\x03\x6b\x81\x4c\x92\x93\x69\x1c\x8b\x23\x6c\x5d\x5f\x17\x94\x51\x3e\x43\xc4\xc5\xce\xe3\xa7\x36\x7d\x7b\x6d\x84\xb5\xe5\x0d\x0a\x17\x1c\xbd\xe3\x87\xfd\xf6\x96\x17\xf6\x96\x37\x49\x5c\x90\x74\xf7\x5c\xb7\x7e\x53\x16\xf6\x8e\x37\x49\x5c\x80\x6a\x0d\x3f\x08\x5a\xbf\x70\x08\x7b\xc7\x9b\x24\x2e\x48\x35\x4f\x07\xa3\xd6\xaf\x1c\x24\xb0\xf9\xc8\xa0\x28\x03\xcd\x15\x17\x68\xed\xf0\xd1\x61\x33\x12\xb1\xcf\x20\x93\xc4\x89\xc9\xcd\x49\x24\xb0\x3a\xc9\x24\x71\x22\x72\xb5\x12\xb1\xcf\x46\x93\xc4\x89\xc9\xd5\x4b\xa1\xd5\x4b\x06\xc5\x45\xbd\x14\xda\xbd\x64\x92\x5c\xd0\x4b\xa1\xdd\x4b\x26\xc9\x45\xbd\x14\xda\xbd\x64\x92\xb8\x79\x49\x67\x2a\xbc\x54\x3c\x8b\xc5\x02\x42\x60\x8a\x20\x6a\x78\x12\x1b\x0b\xbe\x25\x21\x88\xf4\x66\xe3\xef\xf3\x12\x28\x91\x31\x45\xbb\x4f\x5c\x44\x48\xa5\xbb\x2b\x02\xb4\x74\x7b\xc4\x18\x57\xd9\xc3\xe6\x34\xea\x21\x5e\x1a\xf1\x19\x89\x08\x44\x0f\xc5\xb1\xc4\x3c\x84\x1e\xe6\xd1\x3b\x4c\x13\xa9\x40\x74\x8f\x2c\x69\xc8\xf2\x63\x65\xe3\x65\x21\x93\xae\x97\xc8\xbc\x62\xfa\x65\xfb\xab\xde\x0a\xfe\x2c\x9d\xea\xc3\xf0\x63\x12\xf9\xeb\x6f\xcc\xd9\x8a\xac\xf7\x95\x59\x8c\x27\x93\xdb\xf9\x7c\x71\x77\xfb\xc7\x62\x7a\x53\xc2\x48\x63\x71\x11\xf9\xf9\xbb\xf3\x05\xc2\x18\xa4\x5c\x6c\x60\xb7\x20\x61\x55\xf6\x97\xdc\xbf\x5f\xc8\x24\x77\xb0\xd3\xe3\x50\xb4\x84\x0c\x77\x9c\x29\xbc\x3b\xd8\x79\x53\x2d\x08\x61\x71\x92\x9d\x87\x82\x9f\xca\x2f\x76\xde\x3a\x27\xa6\x31\xbf\x9d\x3c\xde\x3e\x95\xb2\x69\x4e\x45\x02\x16\xa0\x4a\x19\x99\xd3\xc9\x65\xe3\x43\x52\x0d\x29\xcd\x33\x95\x77\xcc\xac\x21\xad\x18\x49\xf9\xc2\x45\x58\x4a\x6d\xff\x2f\xfd\x1d\xc3\x26\x59\x82\x60\xa0\x40\x7e\x03\x21\xcd\xbf\x87\xb0\xcd\x77\xd2\xc0\x83\xde\xfb\xde\xa8\xb1\x11\xb5\xdd\xfc\x97\x1f\x4a\xae\x0e\x21\x5d\x50\x22\x81\x9a\x93\x42\x58\xa1\x84\xaa\x79\x0c\xb8\x7a\xcd\xde\xf4\xd3\xf8\x11\xb1\x75\xf6\xcb\x15\x83\x7e\x2f\x18\x8d\x7a\xfd\x5e\xff\xdd\xe0\xba\x6c\x65\x09\x62\x4b\x30\x4c\x4c\x57\xf4\x0d\x7a\x44\xb3\x57\x3d\xf0\x85\x87\x30\x21\xa1\x90\x7b\xb8\x92\x04\x18\x5a\xd2\x43\xc4\xcf\x9c\x11\xc5\x05\x61\x99\x0f\x0e\x0d\xe3\x37\xc9\xef\xf9\x7a\x9d\x6b\x8d\x41\xd3\xbb\x36\x4a\x68\xbe\x71\x03\x52\x11\x56\xbc\x8d\x3a\xdc\xb2\x0b\x14\x49\x45\xb0\x04\x24\xf0\x73\x05\xa0\xbc\xb1\x8f\xfe\x08\x31\x25\x18\xc9\xf2\xf3\xcc\xb4\xe2\x4c\xce\x41\x6c\xd3\x42\x95\x6a\x34\xe8\xfb\x55\xcd\x0d\x8f\x10\xc9\xee\xbe\xe9\xa5\xe5\xa2\x95\x0a\x86\x11\x91\xa9\x37\x26\x9c\x29\xc1\x33\x8f\x7e\x41\x11\xc8\x18\x61\xb8\x27\x2b\xc0\x3b\x4c\xa1\x73\x4f\x22\xa2\xb2\xd3\x10\x9d\x79\x7e\x48\x63\x8c\x79\xc2\x54\x67\x96\x7a\x4b\x2a\x60\xea\x1b\xa7\x49\x04\xf7\xa9\xd5\x3b\x37\x7b\x37\xe4\x63\x68\x42\x91\x94\x9d\x47\x90\x3c\x11\x18\x7e\x4f\xb8\xaa\xbc\x64\x8b\x90\xc9\x20\xd7\xd9\x81\x07\xa3\xb2\x92\x81\x7a\xe1\x62\x33\x2b\x8d\xeb\xd4\xff\xdd\x15\x45\x8c\x01\x6d\x3c\xc9\x31\x05\xa1\x9a\xce\x9c\xcb\xec\x33\x08\x96\x04\x31\xd3\xcd\x38\x25\x78\x57\xbe\x25\xe3\xcc\x60\x9a\xef\xb0\x7c\xe6\x7c\xf3\xc4\x37\xc0\xc6\x89\x7a\x66\x4d\xbe\x79\x5c\x22\x9c\x0a\x5e\xeb\x82\xf9\xc3\xa7\xa7\xfb\x87\xc9\xdd\xd7\xd9\x62\x36\xfe\x32\x9d\x34\x85\x18\xcf\xa6\x32\x3b\xfa\xff\x23\x49\xf0\x38\x09\x89\x6a\x94\xee\x33\x1e\x2b\x45\x70\x5d\x14\x73\x4a\xe7\x14\x20\x9e\x32\x05\x62\x9b\x7d\x4e\x0c\x8d\x56\x9f\x25\x4b\x4a\xf0\x74\xa6\x0d\x80\xe3\x38\xba\x7a\xfb\x2f\x00\x00\xff\xff\x54\x69\xce\x31\x43\x25\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 9539, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": {cloudJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
