// Code generated by go-bindata.
// sources:
// cloud.json
// credential.json
// DO NOT EDIT!

package linode

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x9b\xdf\x6e\xdb\x36\x14\xc6\xef\xfd\x14\x84\xae\x36\x40\x31\x44\x4a\xa2\xa4\xdc\x05\x6b\x97\xa1\xdb\x8a\x02\x69\x81\x01\x43\x60\x30\x16\xe3\x1a\x56\x48\x95\xa2\xbd\x66\x45\xde\x7d\x90\xea\x58\x36\xf5\x87\xb4\x22\x2c\x15\xc0\x9b\x44\x22\x28\x7e\x9f\x7e\x87\xe4\xe1\x11\x92\x6f\x33\x00\x1c\x46\x1e\xa8\x73\x09\x9c\x6c\xcd\x78\x4a\x1d\xb7\x6c\xa3\x6c\x57\x38\x97\xe0\xef\x19\x00\x00\x38\x29\xdd\x55\xcd\x00\x38\x5f\xc8\xf3\x55\x2e\x78\xfa\x7c\xcd\x19\xbd\xe3\x5f\x9d\x19\x00\xb7\xd5\xe3\x82\xae\xd6\x9c\xd5\x23\x7c\xab\x7e\x02\xe0\x64\x7c\x49\xe4\x9a\xb3\x52\xef\x0d\xc9\x32\x52\xb8\xe0\xe3\x5f\x2e\xf8\x74\x73\xb5\x1f\xeb\xf0\x74\xd9\x05\xd5\x8d\xff\x72\x46\xeb\x01\xab\x26\xe4\xec\xaf\x6f\xab\xdf\x4f\x6e\xb7\xd6\xaf\x82\x3e\x70\x26\x5d\xf0\xcb\x55\xa7\x98\xdf\x2b\xe6\x9b\x8b\x5d\xc9\x8c\x30\x49\x5c\x70\xdd\x2d\x16\xf4\x8a\x05\xe6\x62\xef\xe9\x3f\x44\x6c\x5c\xf0\xfe\x5d\xa7\x16\xee\xd5\xc2\xe6\x5a\x7f\x70\x96\x72\xe6\x82\xb7\x6c\x95\x11\x96\xba\xe0\xd3\xef\x6d\x7a\x51\xaf\x5e\x64\xae\xf7\x91\x6f\x1e\xb9\x0b\xde\x7d\x68\x53\x89\x7b\x55\x62\x73\x95\x9b\x35\x5b\x91\x9c\x0b\xea\x82\x9b\xeb\x36\xa5\xa4\x57\x29\x39\x67\x16\x12\xb6\xb9\xdf\x0a\xe9\x82\x37\x6f\xdb\x94\xa0\xd7\x2b\x05\xbd\x33\xd9\x01\xd4\x45\x0f\xc2\x7e\x25\xa8\x28\x1d\x96\xf6\x9a\x15\x92\xb0\x25\x5d\xc8\xc7\x9c\xb6\xac\x70\xfa\x55\x52\xc1\x48\xb6\x28\x36\xdb\x4a\xa8\xd6\x49\x69\xb1\x14\xeb\xfc\x30\x9b\xaa\xfd\x06\x40\x0f\x1d\x2d\x86\x25\x91\x74\xc5\xc5\x63\xd9\xe1\x9a\x32\x2a\x48\x06\x3e\x6c\x45\xce\x0b\x7a\xd4\x29\x2f\x87\x86\xf5\x6b\x91\x87\x93\xfb\x74\x5d\x6c\x9c\x4b\x80\xbc\x56\x4a\xaa\x43\xa4\x73\x88\xbc\x20\x1e\xc5\x21\x52\x1d\xfa\x66\x0e\x7d\x9d\xc3\xc0\x4b\xf0\x20\x87\x48\x71\x18\xa8\x0e\x83\xd8\xc8\x61\xa0\x73\x18\xc3\x04\x0d\x72\x18\x28\x0e\x63\xd5\x61\x82\x8d\x1c\x86\xda\x79\x88\x50\x3c\x2c\xcc\x58\x9d\x88\x8d\x38\xc3\x04\x19\x99\xc4\xda\xa9\x18\x84\xd1\xb0\x48\xc7\xea\x5c\x6c\x84\xda\x8f\x03\x23\x93\x91\x76\x36\x26\x30\x1c\x16\x6c\xd8\x98\x8f\x8d\x70\x47\xd8\x6c\x46\xc6\x3a\x97\x38\x0c\xfd\x61\x28\xa1\x1a\x70\xdc\x60\x09\x61\x68\x16\xf1\xc4\x64\xe1\x78\xc3\xd6\xb6\xa7\x2e\x1d\xaf\x61\x33\xf4\xcd\x56\xcf\x71\x62\xea\x58\x3e\xd8\x8f\x3b\xf6\xf1\xdf\xd6\xab\xcf\xe0\x4f\xfa\x50\xde\xea\xf6\x70\x3c\x70\x13\x87\xda\x3c\xe3\xa3\x08\x77\xac\xef\x1e\x83\xea\x84\xf4\x1b\x6b\x3b\x30\x34\xa8\x4d\x33\x18\x06\x41\x47\xa4\x7b\x0c\xaa\xfb\x23\x6e\x04\x39\x31\x34\xa8\xcd\x32\x65\xa6\xf6\xce\x77\xa8\xee\x3c\xd0\x6b\x58\x44\x9e\xa1\x47\x6d\x9e\x29\x73\xf5\x00\x8f\x8d\x25\x8d\x9a\x26\xfd\xe7\x48\x1f\xce\x42\x9b\xed\x1d\x15\x8c\xca\xea\x1c\xf4\xdd\xb4\x93\xd2\x7b\xb2\xcd\xe4\xa2\xa0\x72\x9b\x1f\x9a\xcb\x32\x8b\xa7\xb4\xa0\xf2\xa8\xa9\x2a\x61\x2e\x01\xda\xdf\x3e\x1d\x23\x70\x76\x54\x14\x65\x0d\xb5\xb8\x7b\x5c\x50\xb6\x3b\x1e\xa9\x2c\xc7\x8e\x4f\x6b\xf5\x78\xf5\x73\x15\xad\x79\x30\xaf\x51\xb4\x41\xab\x7a\x80\x9f\xee\xa8\x24\x3f\x9f\x76\x24\x79\x5e\x9c\x58\xad\x5a\xeb\x17\xbe\x28\xa8\xd8\x51\xd1\x2e\xa3\xf4\x24\x99\x3c\xf4\xbb\x20\x4b\xb5\x6b\x21\x89\x90\x17\x27\x2c\x1d\x6f\x8e\xe6\xb0\x31\xe8\x67\x5e\xc8\x7b\xb2\x94\xc5\xf7\xe1\xc2\xf9\xa1\x76\x39\x22\x77\x78\xd3\x5c\xd0\x32\xfa\xa9\x73\x09\xa4\xd8\xd2\x59\x4b\xbf\x3e\x72\x50\x4b\x0e\x8e\x41\x0e\x1a\x92\x83\xd3\x21\x17\x68\xc9\x05\x63\x90\x0b\x0c\xc9\x05\xd3\x21\x17\x6a\xc9\x85\x63\x90\x0b\x0d\xc9\x85\xd3\x21\x87\xb5\xe4\xf0\x18\xe4\xb0\x21\x39\x6c\x4c\x0e\xcf\x51\xf2\x8a\xe4\x42\xed\x3e\x17\x8e\xb1\xcf\xa9\x32\x5d\xe4\xc2\x33\xf6\xb9\x57\x27\x87\xb4\xe4\xd0\x18\xe4\x90\x21\x39\x34\x1d\x72\xbe\x96\x9c\x3f\x06\x39\xdf\x90\x9c\x3f\x1d\x72\xba\xdc\x1a\x8e\x91\x5b\x55\x99\x6e\x72\xe6\xb9\xf5\xd5\xc9\xe9\x72\x6b\x38\x46\x6e\x55\x65\xba\xc9\x99\xe7\xd6\x57\x27\xa7\xcb\xad\xe1\x18\xb9\x55\x95\xe9\x26\x37\xa1\xdc\x1a\x69\xc9\x45\x2f\x42\x16\x19\x22\x8b\xc6\x45\x16\x9d\x20\x3b\x0f\x4a\xa4\x2d\x49\x1b\x3d\xce\x82\xa2\x3e\xdd\x05\x25\x3a\xa3\x16\x7d\x11\x94\xfd\xd5\xed\xe1\x73\xc2\x17\x62\xab\x77\x5b\xbd\xff\xb0\xe4\x6c\xf5\x6e\xab\x77\x5b\xbd\x4f\xe5\x84\x61\xab\x77\x5b\xbd\xdb\xea\x7d\x2a\xe4\x6c\xf5\x6e\xab\x77\x5b\xbd\x4f\x85\x9c\xad\xde\x6d\xf5\xbe\xbf\xaa\xab\xf7\xea\xcf\x9e\x4d\xeb\x77\x5b\x4b\xd9\x5a\xca\x66\xca\xa9\xec\xf7\x36\x53\xda\x4c\x39\x2c\x29\xec\xff\xff\xc5\xa6\x05\x9b\x16\x7e\x4c\x72\xf6\x43\x91\xfd\x50\xf4\xff\x93\xb3\x1f\x8a\xec\x87\x22\x7b\xfc\x9d\x0a\x39\x7b\xfc\xb5\xc7\x5f\xfb\xa1\xe8\xa5\x35\xc1\xec\xf9\xee\x69\xf6\xf4\x5f\x00\x00\x00\xff\xff\x3c\x1d\x33\xd0\x5f\x3f\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 16223, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _credentialJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xcd\x41\x0a\xc2\x30\x10\x05\xd0\x7d\x4e\xf1\x99\xb5\x27\xe8\x19\x5c\xba\x93\x22\x29\x99\x4a\x6c\x9a\x94\x64\x2a\x4a\xe9\xdd\x65\xc6\x85\x88\x6e\x86\xe1\xfd\x0f\x7f\x73\x00\x2d\xb5\xdc\x63\xe0\x4a\x1d\x28\xc5\x5c\x02\xd3\x41\x3d\xc4\xb6\x24\xff\x54\x3e\xfe\xf2\x65\x2c\x75\xf6\xa2\xe9\x18\x39\x85\x77\x68\x6f\xa3\x0e\x67\x07\x00\x9b\x5d\x80\x6e\xad\x64\xad\x4a\x99\x38\x5b\xd5\x38\xfb\x99\xff\x70\xf2\x03\x27\xf5\xd3\xb7\xc7\xbc\xac\xb6\x28\xfc\x10\x32\xdd\x1d\xd0\xdb\xb4\xf8\xeb\x67\x98\xa6\x75\xe0\x9a\x59\xb8\x69\xaf\x77\xfb\x2b\x00\x00\xff\xff\xc2\x56\x72\x4c\xeb\x00\x00\x00")

func credentialJsonBytes() ([]byte, error) {
	return bindataRead(
		_credentialJson,
		"credential.json",
	)
}

func credentialJson() (*asset, error) {
	bytes, err := credentialJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "credential.json", size: 235, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
	"credential.json": credentialJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": &bintree{cloudJson, map[string]*bintree{}},
	"credential.json": &bintree{credentialJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

