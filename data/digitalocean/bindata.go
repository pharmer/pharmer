// Code generated by go-bindata.
// sources:
// cloud.json
// credential.json
// DO NOT EDIT!

package digitalocean

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cloudJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x9b\x5f\x6f\xab\x36\x18\xc6\xef\xf3\x29\x2c\xae\x36\xa9\x89\x82\xf9\x93\x9c\xdc\x6d\x17\xdb\x2e\xb6\x69\xd2\x76\x33\x4d\x55\xe4\x80\x93\x83\x42\x6c\x8e\xed\x64\xa7\xab\xf2\xdd\x27\xdc\x34\x80\x21\xb6\x4b\xd1\x49\x91\x7c\xd3\x02\x7e\xf1\xf3\xf0\x33\xf6\xeb\x17\xb5\xcf\x13\x00\x3c\x82\x0e\xd8\x5b\x01\x2f\xcd\x76\x99\x40\x39\x4d\x30\x22\xde\x43\xd9\x82\xc9\x89\x7b\x2b\xf0\xcf\x04\x00\x00\xbc\x14\x9f\xe4\x65\x00\xbc\x2f\xe8\xf5\xa8\x60\x34\x7d\x3d\xa6\x04\x6f\xe8\x57\x6f\x02\xc0\xa3\xbc\x9d\xe1\x5d\x46\x49\xd5\xc3\xb3\xfc\x09\x80\x97\xd3\x04\x89\x8c\x92\x52\xf5\x87\x03\x17\x98\xa5\xe8\x70\xe9\xe5\x7a\x5f\xd9\x88\x0e\x1c\x56\xd7\xff\xa3\x04\x57\xbd\xc9\x4b\x32\xe0\x72\xfa\x28\x7f\x9f\x1f\xfa\x6b\x05\x26\xad\xc0\x5e\xeb\x47\x44\x76\x28\xa7\x0c\x77\x69\x6d\x72\xe6\x6b\xb5\x64\x80\xb5\xd6\x4f\x0c\x91\xfd\xf6\xc8\x44\x97\xd6\x96\x21\xbd\x96\x0c\xb0\xd6\xfa\x95\x92\x94\x92\x2e\xa1\x9c\x12\xbd\x90\x0c\xb0\x16\xfa\x1d\xff\x0b\xfe\xa6\x6c\xdf\x25\x45\x9e\x12\xbd\x94\x0c\x18\x4a\x4a\xff\x0a\xca\x80\xa1\xa4\xf4\x6f\xa0\x0c\xb0\x96\xfa\x13\x11\x50\xbe\x19\x49\xc6\x13\xda\xa5\xc7\xb7\x54\x4f\x51\x06\x0c\xaa\xa7\x47\x29\x03\xec\xf5\x32\xb2\x43\xc5\x8d\x19\xc6\x77\x85\xe1\xd9\xca\x00\x6b\xad\xbf\x28\xa3\x44\x74\x3e\x95\xa0\x86\xb9\x2c\x03\x9a\x4a\xd7\x25\x32\x23\x5c\x20\x92\xe0\xb5\x78\x2a\x70\xc7\x4a\x89\xbf\x0a\xcc\x08\xca\xd7\x7c\x7f\x2c\xc5\xfc\xdd\xa6\xd2\x4a\x31\x4f\x58\x56\xbc\x7a\x6c\xb4\x25\x48\xe0\x1d\x65\x4f\x65\xc3\xcf\x98\x60\x86\x72\xf0\xc7\x91\x15\x94\xd7\x70\x25\x45\xd9\xa9\x5f\x3d\x14\x3a\x34\xce\xd3\x8c\xef\xbd\x15\x08\xe6\x9d\x7c\x54\x6f\x50\xe3\x0d\xf6\xf4\x06\x15\x6f\x50\xf5\x16\xda\x79\x0b\x35\xde\xc2\x81\xbc\x85\xaa\xb7\xd8\xce\xdb\x52\xe3\x6d\xd9\xd3\x5b\xa8\x78\x5b\xaa\xde\x96\x76\xde\xfc\x58\xf7\xc2\xc5\x3d\xdd\x2d\xd5\x37\x2e\x56\xed\xf9\x96\xec\x0e\x53\xad\x43\xb5\xb9\xee\xf1\x97\x6c\xf7\x19\xfc\x86\x0f\xe5\xa9\x61\x64\xdb\xfe\x2c\xa7\x44\xa0\x9b\x13\x41\xdf\x49\xe1\xab\xfe\x82\xd6\xb4\x08\xa0\x2d\x3f\xad\x45\xb5\xd9\x92\x9f\xfa\xf6\xb5\xfd\x7d\xb2\x9c\xb6\xba\xb9\x11\xf6\x9d\x1c\xb5\xe1\xbc\xcc\xdc\xd6\xf4\x08\x2d\xe7\x47\xac\x5b\x58\xe2\xde\x2b\xcb\x5c\x31\x18\xb7\xd7\x16\xcb\x85\xef\x30\xd5\x5a\x54\x9b\x2d\x07\x58\x9d\xc0\x6d\x7f\x70\x6e\x3d\x81\xa1\x6e\x90\x5b\xed\x96\x0e\x5b\x63\xec\xc3\xd6\x20\x07\xe1\x5c\xc9\xe7\x5d\xbb\xf0\x87\xea\xbc\xb1\x95\x06\xca\x8e\x17\x28\xdb\x52\xa0\x6c\xe8\x80\xb2\x01\xea\xde\x19\x18\x71\x41\xa8\x1f\x4f\xa5\xdd\x12\x57\xd0\x4a\xb4\xb0\x35\xa4\xd1\xfc\xe3\xe1\xba\x6e\xa4\xf6\xc7\x0d\x66\x04\x0b\xb9\x89\x7a\xc1\xe7\xa5\x78\x8b\x8e\xb9\x58\x73\x2c\x8e\xc5\xf5\x72\x29\x44\x53\xcc\xb1\xa8\x5d\x02\x2f\x5b\x94\x15\x80\x97\x0b\xe7\xfa\x70\x78\x27\xcc\x78\xf9\xbc\xeb\xcd\xd3\x1a\x93\x53\xbd\xaf\xb2\x2a\xae\x53\xa8\x7a\xac\xee\x93\xc9\x72\x16\xce\xe6\xb5\xa7\xe9\x48\xa7\x65\x04\xf8\x6e\x83\x05\xfa\xbe\x19\x88\x8a\x82\x37\xcc\xca\xab\xd5\x23\x4f\x39\x66\x27\xcc\xba\x65\x94\x48\x94\x8b\x6b\xdc\x14\x25\x6a\x28\x17\x88\x89\x69\x83\xa6\x37\x9f\xc1\x99\xdf\xea\xf4\x33\xe5\x62\x8b\x12\xc1\x5f\xba\x8b\x66\xb1\x57\x0b\x38\x2b\x4f\x5a\x30\x5c\xbe\x8a\xa9\xb7\x02\x82\x1d\xf1\xa4\x23\x4e\x47\xce\x37\x92\xf3\x87\x20\xe7\x5b\x92\xf3\xc7\x43\x2e\x34\x92\x0b\x87\x20\x17\x5a\x92\x0b\xc7\x43\x2e\x32\x92\x8b\x86\x20\x17\x59\x92\x8b\xc6\x43\x2e\x36\x92\x8b\x87\x20\x17\x5b\x92\x8b\xad\xc9\xc5\x33\xf8\xe9\x8e\xe4\x22\xe3\x3a\x17\x0d\xb1\xce\xa9\x32\xb7\xc8\x45\x6f\x58\xe7\xee\x4e\x0e\x1a\xc9\xc1\x21\xc8\x41\x4b\x72\x70\x3c\xe4\x02\x23\xb9\x60\x08\x72\x81\x25\xb9\x60\x3c\xe4\x4c\xb9\x35\x1a\x22\xb7\xaa\x32\xb7\xc9\xd9\xe7\xd6\xbb\x93\x33\xe5\xd6\x68\x88\xdc\xaa\xca\xdc\x26\x67\x9f\x5b\xef\x4e\xce\x94\x5b\xa3\x21\x72\xab\x2a\x73\x9b\xdc\x88\x72\xeb\xc2\x48\x6e\xf1\x2e\x64\x0b\x4b\x64\x8b\x61\x91\x2d\x1a\xc8\xde\x06\x65\x61\x2c\x49\x5b\x11\x6f\x82\xa2\xde\x7d\x0b\xca\xe2\x0d\xb5\xe8\xbb\xa0\x5c\x8e\x1e\xaf\x1f\x32\xbe\x20\x57\xbd\xbb\xea\xfd\xc3\x92\x73\xd5\xbb\xab\xde\x5d\xf5\x3e\x96\x1d\x86\xab\xde\x5d\xf5\xee\xaa\xf7\xb1\x90\x73\xd5\xbb\xab\xde\x5d\xf5\x3e\x16\x72\xae\x7a\x77\xd5\xfb\xe5\xa8\xaa\xde\xe5\x5f\x9f\xdb\xd6\xef\xae\x96\x72\xb5\x94\xcb\x94\x63\x59\xef\x5d\xa6\x74\x99\xb2\x5f\x52\xb8\xfc\x1b\x92\x4b\x0b\x2e\x2d\x7c\x4c\x72\xee\x43\x91\xfb\x50\xf4\xed\xc9\xb9\x0f\x45\xee\x43\x91\xdb\xfe\x8e\x85\x9c\xdb\xfe\xba\xed\xaf\xfb\x50\xf4\xde\x9a\x60\xf2\x7a\x76\x9e\x9c\xff\x0f\x00\x00\xff\xff\x44\xba\x02\xaa\xec\x40\x00\x00")

func cloudJsonBytes() ([]byte, error) {
	return bindataRead(
		_cloudJson,
		"cloud.json",
	)
}

func cloudJson() (*asset, error) {
	bytes, err := cloudJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cloud.json", size: 16620, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _credentialJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8d\xb1\x0a\xc2\x30\x10\x86\xf7\x3c\xc5\xcf\xcd\x3e\x41\x67\x77\x17\x37\x29\x72\x35\xd7\x12\x9b\x26\x25\xb9\x8a\x52\xfa\xee\x92\x74\x10\xd1\x25\x84\xef\xfb\xb9\x6f\x35\x00\xcd\x29\x3e\x9c\x95\x44\x0d\xc8\xba\xc1\x29\xfb\x78\x13\x0e\x74\x28\xd6\xba\x3c\x7b\x7e\x15\x79\xdc\xe5\xe9\x47\x5e\xfb\x98\x26\xd6\xb2\xe9\x9d\x78\xbb\xcb\xfa\xcd\xd4\xe0\x62\x00\x60\xad\x2f\x40\xf7\x1c\x43\x99\x6a\x1c\x65\xbf\x53\x71\xe0\x49\xfe\x60\xcf\x9d\xf8\xc2\xcf\xdf\xdc\x85\x79\xa9\x45\x95\xa7\x52\xa5\x9b\x01\xda\x9a\x56\x1e\x3e\x61\x1a\x97\x4e\x52\x10\x95\x5c\x76\xad\xd9\xde\x01\x00\x00\xff\xff\xec\x31\x0f\x96\xf7\x00\x00\x00")

func credentialJsonBytes() ([]byte, error) {
	return bindataRead(
		_credentialJson,
		"credential.json",
	)
}

func credentialJson() (*asset, error) {
	bytes, err := credentialJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "credential.json", size: 247, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cloud.json": cloudJson,
	"credential.json": credentialJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"cloud.json": &bintree{cloudJson, map[string]*bintree{}},
	"credential.json": &bintree{credentialJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

