// Code generated by go-bindata.
// sources:
// kubernetes-master-policy.json
// kubernetes-master-role.json
// kubernetes-node-policy.json
// kubernetes-node-role.json
// DO NOT EDIT!

package iamrule

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _kubernetesMasterPolicyJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x8d\x3d\x8a\xc3\x30\x10\x85\x7b\x9f\x62\x98\xd2\xd8\xe0\x1f\x96\x85\xe9\x5c\xec\x05\x76\x61\x1b\xe3\x42\x56\xc6\xc1\x44\x91\x40\x1a\xe3\xc2\xf8\xee\x41\x8a\x49\x95\x2a\xe0\x66\x18\xde\xf7\xf8\xde\x96\x01\xe0\x3f\xfb\x30\x3b\x8b\x04\xd8\x54\x75\x53\xd6\x55\x59\x7f\x63\x11\xd1\x9f\x28\xe1\x3b\x5b\x41\x82\x3e\x03\x00\xd8\xd2\x05\xc0\x9f\x69\x62\x1d\x73\xec\x8c\x71\x6b\xea\x27\xd0\x69\x79\xda\x7a\x64\xdd\x50\x8e\xc3\x0b\xfd\x72\x70\x8b\xd7\x9c\x60\x8e\x43\xca\xf7\xe2\x03\xb1\x51\x41\x66\x6d\x9c\xba\x8c\xca\x28\xab\x67\x7b\x3d\x67\xc9\xbb\x45\xf8\xab\x3d\x43\x8e\x21\x6a\xdf\x5a\x8f\x0c\x00\x95\xb7\xa4\xd6\x40\xa1\x25\xa2\xdb\x32\xb2\xb7\x2c\x1c\xca\x1c\x8f\xce\xb1\x9e\xc5\x6f\x7f\x04\x00\x00\xff\xff\xbe\xfb\x07\x01\xd0\x01\x00\x00")

func kubernetesMasterPolicyJsonBytes() ([]byte, error) {
	return bindataRead(
		_kubernetesMasterPolicyJson,
		"kubernetes-master-policy.json",
	)
}

func kubernetesMasterPolicyJson() (*asset, error) {
	bytes, err := kubernetesMasterPolicyJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kubernetes-master-policy.json", size: 464, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _kubernetesMasterRoleJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x8e\xbb\xaa\xc3\x30\x10\x44\x7b\x7d\xc5\xb0\xf5\xb5\xb1\xdd\x5c\x50\xe7\x22\x7d\x88\x21\x4d\x48\x21\x96\x35\x08\xf4\x08\x5e\x25\x86\x18\xff\x7b\xb0\x08\x69\xa6\x98\x73\x06\x66\x33\x00\x5d\x65\x51\x9f\x13\x59\xd0\xd0\xf5\x43\xd3\x77\x4d\xff\x4f\x7f\x07\x9a\x8a\x2b\x12\x25\x15\xb2\xb8\x19\x00\xd8\x6a\x02\x74\x9a\x67\xe1\xa3\xa7\x31\x84\xbc\x56\xbf\x82\xf3\xe2\x13\xfb\x87\x0b\x64\xb1\x81\x26\x59\x5e\x9e\xe5\x10\x85\x87\xd6\x45\xf7\xce\xc9\xad\xda\x72\x8e\xb4\xff\x56\x23\x97\xef\x07\x2d\x6a\x47\xd5\x67\x94\x4b\x0e\x42\x55\xd8\x0d\x70\x37\xfb\x27\x00\x00\xff\xff\xec\x82\x5c\xbc\xaf\x00\x00\x00")

func kubernetesMasterRoleJsonBytes() ([]byte, error) {
	return bindataRead(
		_kubernetesMasterRoleJson,
		"kubernetes-master-role.json",
	)
}

func kubernetesMasterRoleJson() (*asset, error) {
	bytes, err := kubernetesMasterRoleJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kubernetes-master-role.json", size: 175, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _kubernetesNodePolicyJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x92\xcf\x6b\x3a\x31\x10\xc5\xef\xfe\x15\x21\x47\x51\xf0\x07\x5f\xbe\x90\xdb\xb6\xb6\x52\xf0\x50\x6c\xeb\x45\x3c\xc4\xf4\xd9\x0d\xc6\x4c\x49\x66\x2b\x56\xfc\xdf\xcb\xa6\xdb\x6d\xd1\xa5\x50\xc1\xcb\x2e\xcc\xfb\xcc\x9b\x21\x6f\xf6\x2d\x21\xe4\x0c\x21\x5a\xf2\x52\x09\x39\xe8\xf5\x07\xdd\x7e\xaf\xdb\xff\x2f\x3b\xa5\xf4\xc0\x9a\xb1\x81\x67\xa9\xc4\xbc\x25\x84\x10\xfb\xf4\x15\x42\xde\xac\x56\x30\x65\x5d\x66\xce\xd1\x36\xf1\x49\xc8\x0c\x57\x6e\x71\xa8\xda\xdf\xf5\x29\x22\x15\xc1\xa0\xb6\x4a\x55\x1d\xbc\xd2\xdb\xa8\xe2\x50\x29\xb5\x2e\x96\x08\x1e\x8c\xd8\x6d\xcb\x8a\x59\xa4\xff\xa1\xf3\xe7\xe9\x30\x03\x35\x42\x34\xc1\x2e\xd1\xbc\x86\xac\x86\x9c\x69\x9e\x31\x6b\x93\xcf\xc8\x15\x1b\x5c\xc2\x7f\x84\x8b\xf9\xcf\x65\xa0\x82\xf1\xaf\x0c\x68\xd1\x98\x90\x6c\xcb\x73\x5f\xfe\x47\xba\x30\x41\x8d\xc1\x59\xc1\x39\x05\xfb\xae\x4b\xe2\x91\xd6\xf0\x75\x5b\x05\x5d\x69\x36\xf9\x75\x0e\xb3\x9e\xe8\x1d\x42\xf6\xa6\xad\xd3\x4b\xeb\x2c\xef\x8e\xd1\x31\x78\x44\x5b\xef\x48\x3f\x3f\x05\x77\x4b\x21\x75\x34\x50\x53\xbc\x52\xb4\x4c\x61\x77\x4f\xce\x9a\x13\xa3\xaf\xe3\xa8\x39\x8b\x78\xcc\x4c\x6c\xe4\xbb\x8d\x7e\x39\x55\xd2\xc6\x63\x7c\xaa\xf5\xb1\xfe\x1a\x53\xab\xbc\xe6\xc3\x47\x00\x00\x00\xff\xff\x0c\x81\xe3\x80\x74\x03\x00\x00")

func kubernetesNodePolicyJsonBytes() ([]byte, error) {
	return bindataRead(
		_kubernetesNodePolicyJson,
		"kubernetes-node-policy.json",
	)
}

func kubernetesNodePolicyJson() (*asset, error) {
	bytes, err := kubernetesNodePolicyJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kubernetes-node-policy.json", size: 884, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _kubernetesNodeRoleJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x8e\xbb\xaa\xc3\x30\x10\x44\x7b\x7d\xc5\xb0\xf5\xb5\xb1\xdd\x5c\x50\xe7\x22\x7d\x88\x21\x4d\x48\x21\x96\x35\x08\xf4\x08\x5e\x25\x86\x18\xff\x7b\xb0\x08\x69\xa6\x98\x73\x06\x66\x33\x00\x5d\x65\x51\x9f\x13\x59\xd0\xd0\xf5\x43\xd3\x77\x4d\xff\x4f\x7f\x07\x9a\x8a\x2b\x12\x25\x15\xb2\xb8\x19\x00\xd8\x6a\x02\x74\x9a\x67\xe1\xa3\xa7\x31\x84\xbc\x56\xbf\x82\xf3\xe2\x13\xfb\x87\x0b\x64\xb1\x81\x26\x59\x5e\x9e\xe5\x10\x85\x87\xd6\x45\xf7\xce\xc9\xad\xda\x72\x8e\xb4\xff\x56\x23\x97\xef\x07\x2d\x6a\x47\xd5\x67\x94\x4b\x0e\x42\x55\xd8\x0d\x70\x37\xfb\x27\x00\x00\xff\xff\xec\x82\x5c\xbc\xaf\x00\x00\x00")

func kubernetesNodeRoleJsonBytes() ([]byte, error) {
	return bindataRead(
		_kubernetesNodeRoleJson,
		"kubernetes-node-role.json",
	)
}

func kubernetesNodeRoleJson() (*asset, error) {
	bytes, err := kubernetesNodeRoleJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "kubernetes-node-role.json", size: 175, mode: os.FileMode(420), modTime: time.Unix(1453795200, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"kubernetes-master-policy.json": kubernetesMasterPolicyJson,
	"kubernetes-master-role.json":   kubernetesMasterRoleJson,
	"kubernetes-node-policy.json":   kubernetesNodePolicyJson,
	"kubernetes-node-role.json":     kubernetesNodeRoleJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"kubernetes-master-policy.json": {kubernetesMasterPolicyJson, map[string]*bintree{}},
	"kubernetes-master-role.json":   {kubernetesMasterRoleJson, map[string]*bintree{}},
	"kubernetes-node-policy.json":   {kubernetesNodePolicyJson, map[string]*bintree{}},
	"kubernetes-node-role.json":     {kubernetesNodeRoleJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
