groups:
- name: test-master
  jobs:
  - build-pharmer-master
  - digitalocean-master
  - gce-master
  - packet-master
  - linode-master
  - vultr-master
  - aws-master
  - lightsail-master

- name: test-pr-individual
  jobs:
  - digitalocean
  - gce
  - packet
  - linode
  - vultr
  - aws
  - lightsail

- name: test-pr-all
  jobs:
  - build-pharmer-all
  - test-all-digitalocean
  - test-all-gce
  - test-all-packet
  - test-all-linode
  - test-all-vultr
  - test-all-aws
  - test-all-lightsail

resource_types:
- name: pull-request
  type: docker-image
  source:
    repository: tahsin/git-pull-resource
    tag: latest

resources:
- name: all
  type: pull-request
  source:
    owner: pharmer
    repo: pharmer
    label: cloud/all
    access_token: ((access_token))

- name: master
  type: git
  source:
    uri: https://pharmer.dev/pharmer
    branch: master

- name: digitalocean
  type: pull-request
  source:
    owner: pharmer
    repo: pharmer
    label: cloud/digitalocean
    access_token: ((access_token))

- name: gce
  type: pull-request
  source:
    owner: pharmer
    repo: pharmer
    label: cloud/gce
    access_token: ((access_token))

- name: packet
  type: pull-request
  source:
    owner: pharmer
    repo: pharmer
    label: cloud/packet
    access_token: ((access_token))

- name: linode
  type: pull-request
  source:
    owner: pharmer
    repo: pharmer
    label: cloud/linode
    access_token: ((access_token))

- name: vultr
  type: pull-request
  source:
    owner: pharmer
    repo: pharmer
    label: cloud/vultr
    access_token: ((access_token))

- name: aws
  type: pull-request
  source:
    owner: pharmer
    repo: pharmer
    label: cloud/aws
    access_token: ((access_token))

- name: lightsail
  type: pull-request
  source:
    owner: pharmer
    repo: pharmer
    label: cloud/lightsail
    access_token: ((access_token))

- name: creds
  type: s3
  source:
    bucket: pharmer-test-creds
    access_key_id: ((s3-access-key))
    secret_access_key: ((s3-secret))
    versioned_file: creds.zip

- name: pharmer-bin
  type: s3
  source:
    bucket: pharmer-test-creds
    access_key_id: ((s3-access-key))
    secret_access_key: ((s3-secret))
    versioned_file: pharmer

jobs:
- name: digitalocean
  plan:
  - get: digitalocean
    trigger: true
  - put: digitalocean
    params: { path: digitalocean, status: pending}
  - get: creds
    params:
      unpack: true
  - task: test
    file: digitalocean/hack/concourse/build.yml
    input_mapping:
      pharmer: digitalocean
    params: { CredProvider: DigitalOcean, ClusterProvider: digitalocean, ZONE: nyc3, NODE: 2gb, CRED: digitalocean}
    on_success:
      put: digitalocean
      params: { path: digitalocean, status: success}
    on_failure:
      put: digitalocean
      params: {path: digitalocean, status: failure}

- name: gce
  plan:
  - get: gce
    trigger: true
  - put: gce
    params: { path: gce, status: pending}
  - get: creds
    params:
      unpack: true
  - task: test
    file: gce/hack/concourse/build.yml
    input_mapping:
      pharmer: gce
    params: {CredProvider: GoogleCloud, ClusterProvider: gce, ZONE: us-central1-f, NODE: n1-standard-2, CRED: gce}
    on_success:
      put: gce
      params: { path: gce, status: success }
    on_failure:
      put: gce
      params: {path: gce, status: failure }

- name: packet
  plan:
  - get: packet
    trigger: true
  - put: packet
    params: { path: packet, status: pending}
  - get: creds
    params:
      unpack: true
  - task: test
    file: packet/hack/concourse/build.yml
    input_mapping:
      pharmer: packet
    params: {CredProvider: Packet, ClusterProvider: packet, ZONE: ewr1, NODE: baremetal_0, CRED: packet}
    on_success:
      put: packet
      params: { path: packet, status: success }
    on_failure:
      put: packet
      params: {path: packet, status: failure }

- name: linode
  plan:
  - get: linode
    trigger: true
  - put: linode
    params: { path: linode, status: pending}
  - get: creds
    params:
      unpack: true
  - task: test
    file: linode/hack/concourse/build.yml
    input_mapping:
      pharmer: linode
    params: {CredProvider: Linode, ClusterProvider: linode, ZONE: 3, NODE: 1, CRED: linode}
    on_success:
      put: linode
      params: { path: linode, status: success }
    on_failure:
      put: linode
      params: {path: linode, status: failure }

- name: vultr
  plan:
  - get: vultr
    trigger: true
  - put: vultr
    params: { path: vultr, status: pending}
  - get: creds
    params:
      unpack: true
  - task: test
    file: vultr/hack/concourse/build.yml
    input_mapping:
      pharmer: vultr
    params: {CredProvider: Vultr, ClusterProvider: vultr, ZONE: 6, NODE: 203, CRED: vultr}
    on_success:
      put: vultr
      params: { path: vultr, status: success }
    on_failure:
      put: linode
      params: {path: vultr, status: failure }

- name: aws
  plan:
  - get: aws
    trigger: true
  - put: aws
    params: { path: aws, status: pending}
  - get: creds
    params:
      unpack: true
  - task: test
    file: aws/hack/concourse/build.yml
    input_mapping:
      pharmer: aws
    params: {CredProvider: AWS, ClusterProvider: aws, ZONE: us-west-1a, NODE: t2.medium, CRED: aws}
    on_success:
      put: aws
      params: { path: aws, status: success }
    on_failure:
      put: aws
      params: {path: aws, status: failure }

- name: lightsail
  plan:
  - get: lightsail
    trigger: true
  - put: lightsail
    params: { path: lightsail, status: pending}
  - get: creds
    params:
      unpack: true
  - task: test
    file: lightsail/hack/concourse/build.yml
    input_mapping:
      pharmer: lightsail
    params: {CredProvider: AWS, ClusterProvider: lightsail, ZONE: us-west-2a, NODE: small_1_0, CRED: aws}
    on_success:
      put: lightsail
      params: { path: lightsail, status: success }
    on_failure:
      put: lightsail
      params: {path: lightsail, status: failure }

- name: build-pharmer-all
  plan:
  - get: all
    trigger: true
  - put: all
    params: { path: all, status: pending }
  - task: build
    file: all/hack/concourse/build.yml
    input_mapping:
      pharmer: all
    params: { build_only: true}
    on_success:
      aggregate:
      - put: pharmer-bin
        params: {file: pharmer-bin/pharmer}
      - put: all
        params: { path: all, status: failure}
    on_failure:
      put: all
      params: { path: all, status: failure}

- name: test-all-digitalocean
  plan:
  - get: all
    trigger: true
    passed: [build-pharmer-all]
  - put: all
    params: { path: all, status: pending}
  - get: creds
    params:
      unpack: true
  - get: pharmer-bin
    passed: [build-pharmer-all]
  - task: test
    file: all/hack/concourse/task.yml
    input_mapping:
      pharmer: all
    params: { CredProvider: DigitalOcean, ClusterProvider: digitalocean, ZONE: nyc3, NODE: 2gb, CRED: digitalocean, test_only: true}
    on_success:
      put: all
      params: { path: all, status: success}
    on_failure:
      put: all
      params: { path: all, status: failure}

- name: test-all-gce
  plan:
  - get: all
    trigger: true
    passed: [build-pharmer-all]
  - put: all
    params: { path: all, status: pending}
  - get: creds
    params:
      unpack: true
  - get: pharmer-bin
    passed: [build-pharmer-all]
  - task: test
    file: all/hack/concourse/task.yml
    input_mapping:
      pharmer: all
    params: {CredProvider: GoogleCloud, ClusterProvider: gce, ZONE: us-central1-f, NODE: n1-standard-2, CRED: gce, test_only: true}
    on_success:
      put: all
      params: { path: all, status: success }
    on_failure:
      put: all
      params: {path: all, status: failure }

- name: test-all-packet
  plan:
  - get: all
    trigger: true
    passed: [build-pharmer-all]
  - put: all
    params: { path: all, status: pending}
  - get: creds
    params:
      unpack: true
  - get: pharmer-bin
    passed: [build-pharmer-all]
  - task: test
    file: all/hack/concourse/task.yml
    input_mapping:
      pharmer: all
    params: {CredProvider: Packet, ClusterProvider: packet, ZONE: ewr1, NODE: baremetal_0, CRED: packet, test_only: true}
    on_success:
      put: all
      params: { path: all, status: success }
    on_failure:
      put: all
      params: {path: all, status: failure }

- name: test-all-linode
  plan:
  - get: all
    trigger: true
    passed: [build-pharmer-all]
  - put: all
    params: { path: all, status: pending}
  - get: creds
    params:
      unpack: true
  - get: pharmer-bin
    passed: [build-pharmer-all]
  - task: test
    file: all/hack/concourse/task.yml
    input_mapping:
      pharmer: all
    params: {CredProvider: Linode, ClusterProvider: linode, ZONE: 3, NODE: 1, CRED: linode, test_only: true}
    on_success:
      put: all
      params: { path: all, status: success }
    on_failure:
      put: all
      params: {path: all, status: failure }

- name: test-all-vultr
  plan:
  - get: all
    trigger: true
    passed: [build-pharmer-all]
  - put: all
    params: { path: all, status: pending}
  - get: creds
    params:
      unpack: true
  - get: pharmer-bin
    passed: [build-pharmer-all]
  - task: test
    file: all/hack/concourse/task.yml
    input_mapping:
      pharmer: all
    params: {CredProvider: Vultr, ClusterProvider: vultr, ZONE: 6, NODE: 203, CRED: vultr, test_only: true}
    on_success:
      put: all
      params: { path: all, status: success }
    on_failure:
      put: all
      params: {path: all, status: failure }

- name: test-all-aws
  plan:
  - get: all
    trigger: true
    passed: [build-pharmer-all]
  - put: all
    params: { path: all, status: pending}
  - get: creds
    params:
      unpack: true
  - get: pharmer-bin
    passed: [build-pharmer-all]
  - task: test
    file: all/hack/concourse/task.yml
    input_mapping:
      pharmer: all
    params: {CredProvider: AWS, ClusterProvider: aws, ZONE: us-west-1a, NODE: t2.medium, CRED: aws, test_only: true}
    on_success:
      put: all
      params: { path: all, status: success }
    on_failure:
      put: all
      params: {path: all, status: failure }

- name: test-all-lightsail
  plan:
  - get: all
    trigger: true
    passed: [build-pharmer-all]
  - put: all
    params: { path: all, status: pending}
  - get: creds
    params:
      unpack: true
  - get: pharmer-bin
    passed: [build-pharmer-all]
  - task: test
    file: all/hack/concourse/task.yml
    input_mapping:
      pharmer: all
    params: {CredProvider: AWS, ClusterProvider: lightsail, ZONE: us-west-2a, NODE: small_1_0, CRED: aws, test_only: true}
    on_success:
      put: all
      params: { path: all, status: success }
    on_failure:
      put: all
      params: {path: all, status: failure }

- name: build-pharmer-master
  plan:
  - get: master
    trigger: true
  - task: build
    file: master/hack/concourse/build.yml
    input_mapping:
      pharmer: master
    params: { build_only: true}
    on_success:
      put: pharmer-bin
      params: {file: pharmer-bin/pharmer}

- name: digitalocean-master
  plan:
  - get: master
    trigger: true
    passed: [build-pharmer-master]
  - get: creds
    params:
      unpack: true
  - get: pharmer-bin
    passed: [build-pharmer-master]
  - task: test
    file: master/hack/concourse/task.yml
    input_mapping:
      pharmer: master
    params: { CredProvider: DigitalOcean, ClusterProvider: digitalocean, ZONE: nyc3, NODE: 2gb, CRED: digitalocean, test_only: true}

- name: gce-master
  plan:
  - get: master
    trigger: true
    passed: [build-pharmer-master]
  - get: creds
    params:
      unpack: true
  - get: pharmer-bin
    passed: [build-pharmer-master]
  - task: test
    file: master/hack/concourse/task.yml
    input_mapping:
      pharmer: master
    params: {CredProvider: GoogleCloud, ClusterProvider: gce, ZONE: us-central1-f, NODE: n1-standard-2, CRED: gce, test_only: true}

- name: packet-master
  plan:
  - get: master
    trigger: true
    passed: [build-pharmer-master]
  - get: creds
    params:
      unpack: true
  - get: pharmer-bin
    passed: [build-pharmer-master]
  - task: test
    file: master/hack/concourse/task.yml
    input_mapping:
      pharmer: master
    params: {CredProvider: Packet, ClusterProvider: packet, ZONE: ewr1, NODE: baremetal_0, CRED: packet, test_only: true}

- name: linode-master
  plan:
  - get: master
    trigger: true
    passed: [build-pharmer-master]
  - get: creds
    params:
      unpack: true
  - get: pharmer-bin
    passed: [build-pharmer-master]
  - task: test
    file: master/hack/concourse/task.yml
    input_mapping:
      pharmer: master
    params: {CredProvider: Linode, ClusterProvider: linode, ZONE: 3, NODE: 1, CRED: linode, test_only: true}

- name: vultr-master
  plan:
  - get: master
    trigger: true
    passed: [build-pharmer-master]
  - get: creds
    params:
      unpack: true
  - get: pharmer-bin
    passed: [build-pharmer-master]
  - task: test
    file: master/hack/concourse/task.yml
    input_mapping:
      pharmer: master
    params: {CredProvider: Vultr, ClusterProvider: vultr, ZONE: 6, NODE: 203, CRED: vultr, test_only: true}

- name: aws-master
  plan:
  - get: master
    trigger: true
    passed: [build-pharmer-master]
  - get: creds
    params:
      unpack: true
  - get: pharmer-bin
    passed: [build-pharmer-master]
  - task: test
    file: master/hack/concourse/task.yml
    input_mapping:
      pharmer: master
    params: {CredProvider: AWS, ClusterProvider: aws, ZONE: us-west-1a, NODE: t2.medium, CRED: aws, test_only: true}

- name: lightsail-master
  plan:
  - get: master
    trigger: true
    passed: [build-pharmer-master]
  - get: creds
    params:
      unpack: true
  - get: pharmer-bin
    passed: [build-pharmer-master]
  - task: test
    file: master/hack/concourse/task.yml
    input_mapping:
      pharmer: master
    params: {CredProvider: AWS, ClusterProvider: lightsail, ZONE: us-west-2a, NODE: smmaster, CRED: aws, test_only: true}
