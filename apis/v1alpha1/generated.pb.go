/*
Copyright 2017 The Pharmer Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/appscode/pharmer/apis/v1alpha1/generated.proto

/*
	Package v1alpha1 is a generated protocol buffer package.

	It is generated from these files:
		github.com/appscode/pharmer/apis/v1alpha1/generated.proto

	It has these top-level messages:
		API
		AWSSpec
		AWSStatus
		Action
		AzureCloudConfig
		AzureSpec
		AzureStorageSpec
		CloudSpec
		CloudStatus
		Cluster
		ClusterSpec
		ClusterState
		ClusterStatus
		Credential
		CredentialSpec
		DNSProvider
		GCECloudConfig
		GCEStatus
		GCSSpec
		GoogleSpec
		LinodeSpec
		LocalSpec
		Networking
		Node
		NodeGroup
		NodeGroupCondition
		NodeGroupSpec
		NodeGroupStatus
		NodeSpec
		NodeStatus
		NodeTemplateSpec
		PharmerConfig
		ReservedIP
		S3Spec
		SimpleNode
		StorageBackend
		SwiftSpec
		Upgrade
*/
package v1alpha1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import k8s_io_api_core_v1 "k8s.io/api/core/v1"

import github_com_appscode_go_encoding_json_types "github.com/appscode/go/encoding/json/types"

import github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
import encoding_binary "encoding/binary"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

func (m *API) Reset()                    { *m = API{} }
func (*API) ProtoMessage()               {}
func (*API) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{0} }

func (m *AWSSpec) Reset()                    { *m = AWSSpec{} }
func (*AWSSpec) ProtoMessage()               {}
func (*AWSSpec) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{1} }

func (m *AWSStatus) Reset()                    { *m = AWSStatus{} }
func (*AWSStatus) ProtoMessage()               {}
func (*AWSStatus) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{2} }

func (m *Action) Reset()                    { *m = Action{} }
func (*Action) ProtoMessage()               {}
func (*Action) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{3} }

func (m *AzureCloudConfig) Reset()                    { *m = AzureCloudConfig{} }
func (*AzureCloudConfig) ProtoMessage()               {}
func (*AzureCloudConfig) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{4} }

func (m *AzureSpec) Reset()                    { *m = AzureSpec{} }
func (*AzureSpec) ProtoMessage()               {}
func (*AzureSpec) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{5} }

func (m *AzureStorageSpec) Reset()                    { *m = AzureStorageSpec{} }
func (*AzureStorageSpec) ProtoMessage()               {}
func (*AzureStorageSpec) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{6} }

func (m *CloudSpec) Reset()                    { *m = CloudSpec{} }
func (*CloudSpec) ProtoMessage()               {}
func (*CloudSpec) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{7} }

func (m *CloudStatus) Reset()                    { *m = CloudStatus{} }
func (*CloudStatus) ProtoMessage()               {}
func (*CloudStatus) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{8} }

func (m *Cluster) Reset()                    { *m = Cluster{} }
func (*Cluster) ProtoMessage()               {}
func (*Cluster) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{9} }

func (m *ClusterSpec) Reset()                    { *m = ClusterSpec{} }
func (*ClusterSpec) ProtoMessage()               {}
func (*ClusterSpec) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{10} }

func (m *ClusterState) Reset()                    { *m = ClusterState{} }
func (*ClusterState) ProtoMessage()               {}
func (*ClusterState) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{11} }

func (m *ClusterStatus) Reset()                    { *m = ClusterStatus{} }
func (*ClusterStatus) ProtoMessage()               {}
func (*ClusterStatus) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{12} }

func (m *Credential) Reset()                    { *m = Credential{} }
func (*Credential) ProtoMessage()               {}
func (*Credential) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{13} }

func (m *CredentialSpec) Reset()                    { *m = CredentialSpec{} }
func (*CredentialSpec) ProtoMessage()               {}
func (*CredentialSpec) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{14} }

func (m *DNSProvider) Reset()                    { *m = DNSProvider{} }
func (*DNSProvider) ProtoMessage()               {}
func (*DNSProvider) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{15} }

func (m *GCECloudConfig) Reset()                    { *m = GCECloudConfig{} }
func (*GCECloudConfig) ProtoMessage()               {}
func (*GCECloudConfig) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{16} }

func (m *GCEStatus) Reset()                    { *m = GCEStatus{} }
func (*GCEStatus) ProtoMessage()               {}
func (*GCEStatus) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{17} }

func (m *GCSSpec) Reset()                    { *m = GCSSpec{} }
func (*GCSSpec) ProtoMessage()               {}
func (*GCSSpec) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{18} }

func (m *GoogleSpec) Reset()                    { *m = GoogleSpec{} }
func (*GoogleSpec) ProtoMessage()               {}
func (*GoogleSpec) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{19} }

func (m *LinodeSpec) Reset()                    { *m = LinodeSpec{} }
func (*LinodeSpec) ProtoMessage()               {}
func (*LinodeSpec) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{20} }

func (m *LocalSpec) Reset()                    { *m = LocalSpec{} }
func (*LocalSpec) ProtoMessage()               {}
func (*LocalSpec) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{21} }

func (m *Networking) Reset()                    { *m = Networking{} }
func (*Networking) ProtoMessage()               {}
func (*Networking) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{22} }

func (m *Node) Reset()                    { *m = Node{} }
func (*Node) ProtoMessage()               {}
func (*Node) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{23} }

func (m *NodeGroup) Reset()                    { *m = NodeGroup{} }
func (*NodeGroup) ProtoMessage()               {}
func (*NodeGroup) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{24} }

func (m *NodeGroupCondition) Reset()                    { *m = NodeGroupCondition{} }
func (*NodeGroupCondition) ProtoMessage()               {}
func (*NodeGroupCondition) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{25} }

func (m *NodeGroupSpec) Reset()                    { *m = NodeGroupSpec{} }
func (*NodeGroupSpec) ProtoMessage()               {}
func (*NodeGroupSpec) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{26} }

func (m *NodeGroupStatus) Reset()                    { *m = NodeGroupStatus{} }
func (*NodeGroupStatus) ProtoMessage()               {}
func (*NodeGroupStatus) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{27} }

func (m *NodeSpec) Reset()                    { *m = NodeSpec{} }
func (*NodeSpec) ProtoMessage()               {}
func (*NodeSpec) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{28} }

func (m *NodeStatus) Reset()                    { *m = NodeStatus{} }
func (*NodeStatus) ProtoMessage()               {}
func (*NodeStatus) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{29} }

func (m *NodeTemplateSpec) Reset()                    { *m = NodeTemplateSpec{} }
func (*NodeTemplateSpec) ProtoMessage()               {}
func (*NodeTemplateSpec) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{30} }

func (m *PharmerConfig) Reset()                    { *m = PharmerConfig{} }
func (*PharmerConfig) ProtoMessage()               {}
func (*PharmerConfig) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{31} }

func (m *ReservedIP) Reset()                    { *m = ReservedIP{} }
func (*ReservedIP) ProtoMessage()               {}
func (*ReservedIP) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{32} }

func (m *S3Spec) Reset()                    { *m = S3Spec{} }
func (*S3Spec) ProtoMessage()               {}
func (*S3Spec) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{33} }

func (m *SimpleNode) Reset()                    { *m = SimpleNode{} }
func (*SimpleNode) ProtoMessage()               {}
func (*SimpleNode) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{34} }

func (m *StorageBackend) Reset()                    { *m = StorageBackend{} }
func (*StorageBackend) ProtoMessage()               {}
func (*StorageBackend) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{35} }

func (m *SwiftSpec) Reset()                    { *m = SwiftSpec{} }
func (*SwiftSpec) ProtoMessage()               {}
func (*SwiftSpec) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{36} }

func (m *Upgrade) Reset()                    { *m = Upgrade{} }
func (*Upgrade) ProtoMessage()               {}
func (*Upgrade) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{37} }

func init() {
	proto.RegisterType((*API)(nil), "github.com.appscode.pharmer.apis.v1alpha1.API")
	proto.RegisterType((*AWSSpec)(nil), "github.com.appscode.pharmer.apis.v1alpha1.AWSSpec")
	proto.RegisterType((*AWSStatus)(nil), "github.com.appscode.pharmer.apis.v1alpha1.AWSStatus")
	proto.RegisterType((*Action)(nil), "github.com.appscode.pharmer.apis.v1alpha1.Action")
	proto.RegisterType((*AzureCloudConfig)(nil), "github.com.appscode.pharmer.apis.v1alpha1.AzureCloudConfig")
	proto.RegisterType((*AzureSpec)(nil), "github.com.appscode.pharmer.apis.v1alpha1.AzureSpec")
	proto.RegisterType((*AzureStorageSpec)(nil), "github.com.appscode.pharmer.apis.v1alpha1.AzureStorageSpec")
	proto.RegisterType((*CloudSpec)(nil), "github.com.appscode.pharmer.apis.v1alpha1.CloudSpec")
	proto.RegisterType((*CloudStatus)(nil), "github.com.appscode.pharmer.apis.v1alpha1.CloudStatus")
	proto.RegisterType((*Cluster)(nil), "github.com.appscode.pharmer.apis.v1alpha1.Cluster")
	proto.RegisterType((*ClusterSpec)(nil), "github.com.appscode.pharmer.apis.v1alpha1.ClusterSpec")
	proto.RegisterType((*ClusterState)(nil), "github.com.appscode.pharmer.apis.v1alpha1.ClusterState")
	proto.RegisterType((*ClusterStatus)(nil), "github.com.appscode.pharmer.apis.v1alpha1.ClusterStatus")
	proto.RegisterType((*Credential)(nil), "github.com.appscode.pharmer.apis.v1alpha1.Credential")
	proto.RegisterType((*CredentialSpec)(nil), "github.com.appscode.pharmer.apis.v1alpha1.CredentialSpec")
	proto.RegisterType((*DNSProvider)(nil), "github.com.appscode.pharmer.apis.v1alpha1.DNSProvider")
	proto.RegisterType((*GCECloudConfig)(nil), "github.com.appscode.pharmer.apis.v1alpha1.GCECloudConfig")
	proto.RegisterType((*GCEStatus)(nil), "github.com.appscode.pharmer.apis.v1alpha1.GCEStatus")
	proto.RegisterType((*GCSSpec)(nil), "github.com.appscode.pharmer.apis.v1alpha1.GCSSpec")
	proto.RegisterType((*GoogleSpec)(nil), "github.com.appscode.pharmer.apis.v1alpha1.GoogleSpec")
	proto.RegisterType((*LinodeSpec)(nil), "github.com.appscode.pharmer.apis.v1alpha1.LinodeSpec")
	proto.RegisterType((*LocalSpec)(nil), "github.com.appscode.pharmer.apis.v1alpha1.LocalSpec")
	proto.RegisterType((*Networking)(nil), "github.com.appscode.pharmer.apis.v1alpha1.Networking")
	proto.RegisterType((*Node)(nil), "github.com.appscode.pharmer.apis.v1alpha1.Node")
	proto.RegisterType((*NodeGroup)(nil), "github.com.appscode.pharmer.apis.v1alpha1.NodeGroup")
	proto.RegisterType((*NodeGroupCondition)(nil), "github.com.appscode.pharmer.apis.v1alpha1.NodeGroupCondition")
	proto.RegisterType((*NodeGroupSpec)(nil), "github.com.appscode.pharmer.apis.v1alpha1.NodeGroupSpec")
	proto.RegisterType((*NodeGroupStatus)(nil), "github.com.appscode.pharmer.apis.v1alpha1.NodeGroupStatus")
	proto.RegisterType((*NodeSpec)(nil), "github.com.appscode.pharmer.apis.v1alpha1.NodeSpec")
	proto.RegisterType((*NodeStatus)(nil), "github.com.appscode.pharmer.apis.v1alpha1.NodeStatus")
	proto.RegisterType((*NodeTemplateSpec)(nil), "github.com.appscode.pharmer.apis.v1alpha1.NodeTemplateSpec")
	proto.RegisterType((*PharmerConfig)(nil), "github.com.appscode.pharmer.apis.v1alpha1.PharmerConfig")
	proto.RegisterType((*ReservedIP)(nil), "github.com.appscode.pharmer.apis.v1alpha1.ReservedIP")
	proto.RegisterType((*S3Spec)(nil), "github.com.appscode.pharmer.apis.v1alpha1.S3Spec")
	proto.RegisterType((*SimpleNode)(nil), "github.com.appscode.pharmer.apis.v1alpha1.SimpleNode")
	proto.RegisterType((*StorageBackend)(nil), "github.com.appscode.pharmer.apis.v1alpha1.StorageBackend")
	proto.RegisterType((*SwiftSpec)(nil), "github.com.appscode.pharmer.apis.v1alpha1.SwiftSpec")
	proto.RegisterType((*Upgrade)(nil), "github.com.appscode.pharmer.apis.v1alpha1.Upgrade")
}
func (m *API) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *API) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.AdvertiseAddress)))
	i += copy(dAtA[i:], m.AdvertiseAddress)
	dAtA[i] = 0x10
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.BindPort))
	return i, nil
}

func (m *AWSSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AWSSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.IAMProfileMaster)))
	i += copy(dAtA[i:], m.IAMProfileMaster)
	dAtA[i] = 0x12
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.IAMProfileNode)))
	i += copy(dAtA[i:], m.IAMProfileNode)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.MasterSGName)))
	i += copy(dAtA[i:], m.MasterSGName)
	dAtA[i] = 0x22
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.NodeSGName)))
	i += copy(dAtA[i:], m.NodeSGName)
	dAtA[i] = 0x2a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.VpcCIDR)))
	i += copy(dAtA[i:], m.VpcCIDR)
	dAtA[i] = 0x32
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.VpcCIDRBase)))
	i += copy(dAtA[i:], m.VpcCIDRBase)
	dAtA[i] = 0x3a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.MasterIPSuffix)))
	i += copy(dAtA[i:], m.MasterIPSuffix)
	dAtA[i] = 0x42
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.SubnetCIDR)))
	i += copy(dAtA[i:], m.SubnetCIDR)
	return i, nil
}

func (m *AWSStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AWSStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.MasterSGId)))
	i += copy(dAtA[i:], m.MasterSGId)
	dAtA[i] = 0x12
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.NodeSGId)))
	i += copy(dAtA[i:], m.NodeSGId)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.VpcId)))
	i += copy(dAtA[i:], m.VpcId)
	dAtA[i] = 0x22
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.SubnetId)))
	i += copy(dAtA[i:], m.SubnetId)
	dAtA[i] = 0x2a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.RouteTableId)))
	i += copy(dAtA[i:], m.RouteTableId)
	dAtA[i] = 0x32
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.IGWId)))
	i += copy(dAtA[i:], m.IGWId)
	dAtA[i] = 0x3a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.DHCPOptionsId)))
	i += copy(dAtA[i:], m.DHCPOptionsId)
	dAtA[i] = 0x42
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.VolumeId)))
	i += copy(dAtA[i:], m.VolumeId)
	dAtA[i] = 0x4a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.BucketName)))
	i += copy(dAtA[i:], m.BucketName)
	return i, nil
}

func (m *Action) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Action) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Action)))
	i += copy(dAtA[i:], m.Action)
	dAtA[i] = 0x12
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Resource)))
	i += copy(dAtA[i:], m.Resource)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Message)))
	i += copy(dAtA[i:], m.Message)
	return i, nil
}

func (m *AzureCloudConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AzureCloudConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.TenantID)))
	i += copy(dAtA[i:], m.TenantID)
	dAtA[i] = 0x12
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.SubscriptionID)))
	i += copy(dAtA[i:], m.SubscriptionID)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.AadClientID)))
	i += copy(dAtA[i:], m.AadClientID)
	dAtA[i] = 0x22
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.AadClientSecret)))
	i += copy(dAtA[i:], m.AadClientSecret)
	dAtA[i] = 0x2a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ResourceGroup)))
	i += copy(dAtA[i:], m.ResourceGroup)
	dAtA[i] = 0x32
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Location)))
	i += copy(dAtA[i:], m.Location)
	dAtA[i] = 0x3a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.SubnetName)))
	i += copy(dAtA[i:], m.SubnetName)
	dAtA[i] = 0x42
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.SecurityGroupName)))
	i += copy(dAtA[i:], m.SecurityGroupName)
	dAtA[i] = 0x4a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.VnetName)))
	i += copy(dAtA[i:], m.VnetName)
	dAtA[i] = 0x52
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.RouteTableName)))
	i += copy(dAtA[i:], m.RouteTableName)
	dAtA[i] = 0x5a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.StorageAccountName)))
	i += copy(dAtA[i:], m.StorageAccountName)
	return i, nil
}

func (m *AzureSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AzureSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.StorageAccountName)))
	i += copy(dAtA[i:], m.StorageAccountName)
	dAtA[i] = 0x12
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.InstanceImageVersion)))
	i += copy(dAtA[i:], m.InstanceImageVersion)
	if m.CloudConfig != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(m.CloudConfig.Size()))
		n1, err := m.CloudConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	dAtA[i] = 0x22
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.InstanceRootPassword)))
	i += copy(dAtA[i:], m.InstanceRootPassword)
	dAtA[i] = 0x2a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.SubnetCIDR)))
	i += copy(dAtA[i:], m.SubnetCIDR)
	return i, nil
}

func (m *AzureStorageSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AzureStorageSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Container)))
	i += copy(dAtA[i:], m.Container)
	dAtA[i] = 0x12
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Prefix)))
	i += copy(dAtA[i:], m.Prefix)
	return i, nil
}

func (m *CloudSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloudSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.CloudProvider)))
	i += copy(dAtA[i:], m.CloudProvider)
	dAtA[i] = 0x12
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Project)))
	i += copy(dAtA[i:], m.Project)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Region)))
	i += copy(dAtA[i:], m.Region)
	dAtA[i] = 0x22
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Zone)))
	i += copy(dAtA[i:], m.Zone)
	dAtA[i] = 0x2a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.OS)))
	i += copy(dAtA[i:], m.OS)
	dAtA[i] = 0x32
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Kernel)))
	i += copy(dAtA[i:], m.Kernel)
	dAtA[i] = 0x3a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.CloudConfigPath)))
	i += copy(dAtA[i:], m.CloudConfigPath)
	dAtA[i] = 0x42
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.InstanceImage)))
	i += copy(dAtA[i:], m.InstanceImage)
	dAtA[i] = 0x4a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.InstanceImageProject)))
	i += copy(dAtA[i:], m.InstanceImageProject)
	if m.AWS != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(m.AWS.Size()))
		n2, err := m.AWS.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.GCE != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(m.GCE.Size()))
		n3, err := m.GCE.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.Azure != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(m.Azure.Size()))
		n4, err := m.Azure.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.Linode != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(m.Linode.Size()))
		n5, err := m.Linode.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *CloudStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloudStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AWS != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(m.AWS.Size()))
		n6, err := m.AWS.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.GCE != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(m.GCE.Size()))
		n7, err := m.GCE.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}

func (m *Cluster) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Cluster) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.ObjectMeta.Size()))
	n8, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n8
	dAtA[i] = 0x12
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.Spec.Size()))
	n9, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n9
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.Status.Size()))
	n10, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n10
	return i, nil
}

func (m *ClusterSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.Cloud.Size()))
	n11, err := m.Cloud.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n11
	dAtA[i] = 0x12
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.API.Size()))
	n12, err := m.API.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n12
	dAtA[i] = 0x22
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.Networking.Size()))
	n13, err := m.Networking.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n13
	dAtA[i] = 0x28
	i++
	if m.Multizone {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0x32
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.KubernetesVersion)))
	i += copy(dAtA[i:], m.KubernetesVersion)
	dAtA[i] = 0x3a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.MasterKubeadmVersion)))
	i += copy(dAtA[i:], m.MasterKubeadmVersion)
	dAtA[i] = 0x40
	i++
	if m.DoNotDelete {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	if len(m.AuthorizationModes) > 0 {
		for _, s := range m.AuthorizationModes {
			dAtA[i] = 0x4a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	dAtA[i] = 0x52
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Token)))
	i += copy(dAtA[i:], m.Token)
	if len(m.APIServerCertSANs) > 0 {
		for _, s := range m.APIServerCertSANs {
			dAtA[i] = 0x5a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	dAtA[i] = 0x62
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ClusterExternalDomain)))
	i += copy(dAtA[i:], m.ClusterExternalDomain)
	dAtA[i] = 0x6a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ClusterInternalDomain)))
	i += copy(dAtA[i:], m.ClusterInternalDomain)
	dAtA[i] = 0x72
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.CACertName)))
	i += copy(dAtA[i:], m.CACertName)
	dAtA[i] = 0x7a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.FrontProxyCACertName)))
	i += copy(dAtA[i:], m.FrontProxyCACertName)
	dAtA[i] = 0x82
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.CredentialName)))
	i += copy(dAtA[i:], m.CredentialName)
	dAtA[i] = 0x88
	i++
	dAtA[i] = 0x1
	i++
	if m.AllocateNodeCIDRs {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0x92
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.LoggingDestination)))
	i += copy(dAtA[i:], m.LoggingDestination)
	dAtA[i] = 0x98
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.ElasticsearchLoggingReplicas))
	dAtA[i] = 0xa2
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.AdmissionControl)))
	i += copy(dAtA[i:], m.AdmissionControl)
	dAtA[i] = 0xaa
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.RuntimeConfig)))
	i += copy(dAtA[i:], m.RuntimeConfig)
	dAtA[i] = 0xb2
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.AppscodeAuthnURL)))
	i += copy(dAtA[i:], m.AppscodeAuthnURL)
	dAtA[i] = 0xba
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.AppscodeAuthzURL)))
	i += copy(dAtA[i:], m.AppscodeAuthzURL)
	dAtA[i] = 0xc0
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.AutoscalerMinNodes))
	dAtA[i] = 0xc8
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.AutoscalerMaxNodes))
	dAtA[i] = 0xd1
	i++
	dAtA[i] = 0x1
	i++
	encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.TargetNodeUtilization))))
	i += 8
	dAtA[i] = 0xda
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.EnableClusterMonitoring)))
	i += copy(dAtA[i:], m.EnableClusterMonitoring)
	dAtA[i] = 0xe0
	i++
	dAtA[i] = 0x1
	i++
	if m.EnableClusterLogging {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0xe8
	i++
	dAtA[i] = 0x1
	i++
	if m.EnableNodeLogging {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0xf2
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.EnableCustomMetrics)))
	i += copy(dAtA[i:], m.EnableCustomMetrics)
	dAtA[i] = 0xf8
	i++
	dAtA[i] = 0x1
	i++
	if m.EnableAPIserverBasicAudit {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0x82
	i++
	dAtA[i] = 0x2
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.EnableClusterAlert)))
	i += copy(dAtA[i:], m.EnableClusterAlert)
	dAtA[i] = 0x88
	i++
	dAtA[i] = 0x2
	i++
	if m.EnableNodeProblemDetector {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0x90
	i++
	dAtA[i] = 0x2
	i++
	if m.EnableRescheduler {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0x98
	i++
	dAtA[i] = 0x2
	i++
	if m.EnableWebhookTokenAuthentication {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0xa0
	i++
	dAtA[i] = 0x2
	i++
	if m.EnableWebhookTokenAuthorization {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0xa8
	i++
	dAtA[i] = 0x2
	i++
	if m.EnableRBACAuthorization {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0xb0
	i++
	dAtA[i] = 0x2
	i++
	if m.EnableNodePublicIP {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0xb8
	i++
	dAtA[i] = 0x2
	i++
	if m.EnableNodeAutoscaler {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0xc2
	i++
	dAtA[i] = 0x2
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.KubernetesMasterName)))
	i += copy(dAtA[i:], m.KubernetesMasterName)
	dAtA[i] = 0xca
	i++
	dAtA[i] = 0x2
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.MasterInternalIP)))
	i += copy(dAtA[i:], m.MasterInternalIP)
	dAtA[i] = 0xd2
	i++
	dAtA[i] = 0x2
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.MasterDiskId)))
	i += copy(dAtA[i:], m.MasterDiskId)
	dAtA[i] = 0xda
	i++
	dAtA[i] = 0x2
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.MasterDiskType)))
	i += copy(dAtA[i:], m.MasterDiskType)
	dAtA[i] = 0xe0
	i++
	dAtA[i] = 0x2
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.MasterDiskSize))
	dAtA[i] = 0xea
	i++
	dAtA[i] = 0x2
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.MasterSKU)))
	i += copy(dAtA[i:], m.MasterSKU)
	dAtA[i] = 0xf2
	i++
	dAtA[i] = 0x2
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.MasterReservedIP)))
	i += copy(dAtA[i:], m.MasterReservedIP)
	dAtA[i] = 0xfa
	i++
	dAtA[i] = 0x2
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.MasterExternalIP)))
	i += copy(dAtA[i:], m.MasterExternalIP)
	dAtA[i] = 0x82
	i++
	dAtA[i] = 0x3
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.NodeDiskType)))
	i += copy(dAtA[i:], m.NodeDiskType)
	dAtA[i] = 0x88
	i++
	dAtA[i] = 0x3
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.NodeDiskSize))
	return i, nil
}

func (m *ClusterState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterState) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.KubeVersion)))
	i += copy(dAtA[i:], m.KubeVersion)
	dAtA[i] = 0x12
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.DNSVersion)))
	i += copy(dAtA[i:], m.DNSVersion)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.KubeadmVersion)))
	i += copy(dAtA[i:], m.KubeadmVersion)
	if len(m.KubeletVersions) > 0 {
		keysForKubeletVersions := make([]string, 0, len(m.KubeletVersions))
		for k := range m.KubeletVersions {
			keysForKubeletVersions = append(keysForKubeletVersions, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForKubeletVersions)
		for _, k := range keysForKubeletVersions {
			dAtA[i] = 0x22
			i++
			v := m.KubeletVersions[string(k)]
			mapSize := 1 + len(k) + sovGenerated(uint64(len(k))) + 1 + sovGenerated(uint64(v))
			i = encodeVarintGenerated(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintGenerated(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x10
			i++
			i = encodeVarintGenerated(dAtA, i, uint64(v))
		}
	}
	return i, nil
}

func (m *ClusterStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Phase)))
	i += copy(dAtA[i:], m.Phase)
	dAtA[i] = 0x12
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Reason)))
	i += copy(dAtA[i:], m.Reason)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.SSHKeyExternalID)))
	i += copy(dAtA[i:], m.SSHKeyExternalID)
	dAtA[i] = 0x22
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.Cloud.Size()))
	n14, err := m.Cloud.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n14
	if len(m.APIAddresses) > 0 {
		for _, msg := range m.APIAddresses {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintGenerated(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.ReservedIPs) > 0 {
		for _, msg := range m.ReservedIPs {
			dAtA[i] = 0x32
			i++
			i = encodeVarintGenerated(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Credential) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Credential) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.ObjectMeta.Size()))
	n15, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n15
	dAtA[i] = 0x12
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.Spec.Size()))
	n16, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n16
	return i, nil
}

func (m *CredentialSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CredentialSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Provider)))
	i += copy(dAtA[i:], m.Provider)
	if len(m.Data) > 0 {
		keysForData := make([]string, 0, len(m.Data))
		for k := range m.Data {
			keysForData = append(keysForData, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForData)
		for _, k := range keysForData {
			dAtA[i] = 0x12
			i++
			v := m.Data[string(k)]
			mapSize := 1 + len(k) + sovGenerated(uint64(len(k))) + 1 + len(v) + sovGenerated(uint64(len(v)))
			i = encodeVarintGenerated(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintGenerated(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintGenerated(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	return i, nil
}

func (m *DNSProvider) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DNSProvider) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.CredentialName)))
	i += copy(dAtA[i:], m.CredentialName)
	return i, nil
}

func (m *GCECloudConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GCECloudConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.TokenURL)))
	i += copy(dAtA[i:], m.TokenURL)
	dAtA[i] = 0x12
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.TokenBody)))
	i += copy(dAtA[i:], m.TokenBody)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ProjectID)))
	i += copy(dAtA[i:], m.ProjectID)
	dAtA[i] = 0x22
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.NetworkName)))
	i += copy(dAtA[i:], m.NetworkName)
	if len(m.NodeTags) > 0 {
		for _, s := range m.NodeTags {
			dAtA[i] = 0x2a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	dAtA[i] = 0x32
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.NodeInstancePrefix)))
	i += copy(dAtA[i:], m.NodeInstancePrefix)
	dAtA[i] = 0x38
	i++
	if m.Multizone {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}

func (m *GCEStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GCEStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.BucketName)))
	i += copy(dAtA[i:], m.BucketName)
	return i, nil
}

func (m *GCSSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GCSSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Bucket)))
	i += copy(dAtA[i:], m.Bucket)
	dAtA[i] = 0x12
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Prefix)))
	i += copy(dAtA[i:], m.Prefix)
	return i, nil
}

func (m *GoogleSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GoogleSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.NodeScopes) > 0 {
		for _, s := range m.NodeScopes {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.CloudConfig != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(m.CloudConfig.Size()))
		n17, err := m.CloudConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	return i, nil
}

func (m *LinodeSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LinodeSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.InstanceRootPassword)))
	i += copy(dAtA[i:], m.InstanceRootPassword)
	return i, nil
}

func (m *LocalSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LocalSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Path)))
	i += copy(dAtA[i:], m.Path)
	return i, nil
}

func (m *Networking) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Networking) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.PodSubnet)))
	i += copy(dAtA[i:], m.PodSubnet)
	dAtA[i] = 0x12
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ServiceSubnet)))
	i += copy(dAtA[i:], m.ServiceSubnet)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.DNSDomain)))
	i += copy(dAtA[i:], m.DNSDomain)
	dAtA[i] = 0x22
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.NetworkProvider)))
	i += copy(dAtA[i:], m.NetworkProvider)
	dAtA[i] = 0x2a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.DNSServerIP)))
	i += copy(dAtA[i:], m.DNSServerIP)
	dAtA[i] = 0x32
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.NonMasqueradeCIDR)))
	i += copy(dAtA[i:], m.NonMasqueradeCIDR)
	dAtA[i] = 0x3a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.MasterSubnet)))
	i += copy(dAtA[i:], m.MasterSubnet)
	return i, nil
}

func (m *Node) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Node) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.ObjectMeta.Size()))
	n18, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n18
	dAtA[i] = 0x12
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.Spec.Size()))
	n19, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n19
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.Status.Size()))
	n20, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n20
	return i, nil
}

func (m *NodeGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeGroup) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.ObjectMeta.Size()))
	n21, err := m.ObjectMeta.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n21
	dAtA[i] = 0x12
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.Spec.Size()))
	n22, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n22
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.Status.Size()))
	n23, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n23
	return i, nil
}

func (m *NodeGroupCondition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeGroupCondition) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Type)))
	i += copy(dAtA[i:], m.Type)
	dAtA[i] = 0x12
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Status)))
	i += copy(dAtA[i:], m.Status)
	dAtA[i] = 0x22
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Reason)))
	i += copy(dAtA[i:], m.Reason)
	dAtA[i] = 0x2a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Message)))
	i += copy(dAtA[i:], m.Message)
	dAtA[i] = 0x32
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.LastUpdateTime.Size()))
	n24, err := m.LastUpdateTime.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n24
	dAtA[i] = 0x3a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.LastTransitionTime.Size()))
	n25, err := m.LastTransitionTime.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n25
	return i, nil
}

func (m *NodeGroupSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeGroupSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.Template.Size()))
	n26, err := m.Template.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n26
	dAtA[i] = 0x20
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.Nodes))
	return i, nil
}

func (m *NodeGroupStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeGroupStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.Nodes))
	dAtA[i] = 0x10
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.FullyLabeledNodes))
	dAtA[i] = 0x18
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.ObservedGeneration))
	dAtA[i] = 0x20
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.ReadyNodes))
	dAtA[i] = 0x28
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.AvailableNodes))
	if len(m.Conditions) > 0 {
		for _, msg := range m.Conditions {
			dAtA[i] = 0x32
			i++
			i = encodeVarintGenerated(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *NodeSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Role)))
	i += copy(dAtA[i:], m.Role)
	dAtA[i] = 0x12
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.SKU)))
	i += copy(dAtA[i:], m.SKU)
	dAtA[i] = 0x18
	i++
	if m.SpotInstances {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0x22
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.DiskType)))
	i += copy(dAtA[i:], m.DiskType)
	dAtA[i] = 0x28
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.DiskSize))
	dAtA[i] = 0x32
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ExternalIPType)))
	i += copy(dAtA[i:], m.ExternalIPType)
	return i, nil
}

func (m *NodeStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Phase)))
	i += copy(dAtA[i:], m.Phase)
	dAtA[i] = 0x12
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Name)))
	i += copy(dAtA[i:], m.Name)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ExternalID)))
	i += copy(dAtA[i:], m.ExternalID)
	dAtA[i] = 0x22
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.PublicIP)))
	i += copy(dAtA[i:], m.PublicIP)
	dAtA[i] = 0x2a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.PrivateIP)))
	i += copy(dAtA[i:], m.PrivateIP)
	dAtA[i] = 0x32
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ExternalPhase)))
	i += copy(dAtA[i:], m.ExternalPhase)
	dAtA[i] = 0x3a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.DiskId)))
	i += copy(dAtA[i:], m.DiskId)
	return i, nil
}

func (m *NodeTemplateSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeTemplateSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x12
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.Spec.Size()))
	n27, err := m.Spec.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n27
	return i, nil
}

func (m *PharmerConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PharmerConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Context)))
	i += copy(dAtA[i:], m.Context)
	if len(m.Credentials) > 0 {
		for _, msg := range m.Credentials {
			dAtA[i] = 0x12
			i++
			i = encodeVarintGenerated(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.Store.Size()))
	n28, err := m.Store.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n28
	if m.DNS != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(m.DNS.Size()))
		n29, err := m.DNS.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n29
	}
	return i, nil
}

func (m *ReservedIP) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReservedIP) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.IP)))
	i += copy(dAtA[i:], m.IP)
	dAtA[i] = 0x12
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ID)))
	i += copy(dAtA[i:], m.ID)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Name)))
	i += copy(dAtA[i:], m.Name)
	return i, nil
}

func (m *S3Spec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S3Spec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Endpoint)))
	i += copy(dAtA[i:], m.Endpoint)
	dAtA[i] = 0x12
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Bucket)))
	i += copy(dAtA[i:], m.Bucket)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Prefix)))
	i += copy(dAtA[i:], m.Prefix)
	return i, nil
}

func (m *SimpleNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SimpleNode) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Name)))
	i += copy(dAtA[i:], m.Name)
	dAtA[i] = 0x12
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ExternalID)))
	i += copy(dAtA[i:], m.ExternalID)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.PublicIP)))
	i += copy(dAtA[i:], m.PublicIP)
	dAtA[i] = 0x22
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.PrivateIP)))
	i += copy(dAtA[i:], m.PrivateIP)
	dAtA[i] = 0x2a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.DiskId)))
	i += copy(dAtA[i:], m.DiskId)
	return i, nil
}

func (m *StorageBackend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StorageBackend) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.CredentialName)))
	i += copy(dAtA[i:], m.CredentialName)
	if m.Local != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(m.Local.Size()))
		n30, err := m.Local.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n30
	}
	if m.S3 != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(m.S3.Size()))
		n31, err := m.S3.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n31
	}
	if m.GCS != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(m.GCS.Size()))
		n32, err := m.GCS.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n32
	}
	if m.Azure != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(m.Azure.Size()))
		n33, err := m.Azure.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n33
	}
	if m.Swift != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintGenerated(dAtA, i, uint64(m.Swift.Size()))
		n34, err := m.Swift.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n34
	}
	return i, nil
}

func (m *SwiftSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SwiftSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Container)))
	i += copy(dAtA[i:], m.Container)
	dAtA[i] = 0x12
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Prefix)))
	i += copy(dAtA[i:], m.Prefix)
	return i, nil
}

func (m *Upgrade) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Upgrade) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Description)))
	i += copy(dAtA[i:], m.Description)
	dAtA[i] = 0x12
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.Before.Size()))
	n35, err := m.Before.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n35
	dAtA[i] = 0x1a
	i++
	i = encodeVarintGenerated(dAtA, i, uint64(m.After.Size()))
	n36, err := m.After.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n36
	return i, nil
}

func encodeVarintGenerated(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *API) Size() (n int) {
	var l int
	_ = l
	l = len(m.AdvertiseAddress)
	n += 1 + l + sovGenerated(uint64(l))
	n += 1 + sovGenerated(uint64(m.BindPort))
	return n
}

func (m *AWSSpec) Size() (n int) {
	var l int
	_ = l
	l = len(m.IAMProfileMaster)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.IAMProfileNode)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.MasterSGName)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.NodeSGName)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.VpcCIDR)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.VpcCIDRBase)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.MasterIPSuffix)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.SubnetCIDR)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *AWSStatus) Size() (n int) {
	var l int
	_ = l
	l = len(m.MasterSGId)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.NodeSGId)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.VpcId)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.SubnetId)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.RouteTableId)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.IGWId)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.DHCPOptionsId)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.VolumeId)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.BucketName)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *Action) Size() (n int) {
	var l int
	_ = l
	l = len(m.Action)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Resource)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Message)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *AzureCloudConfig) Size() (n int) {
	var l int
	_ = l
	l = len(m.TenantID)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.SubscriptionID)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.AadClientID)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.AadClientSecret)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.ResourceGroup)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Location)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.SubnetName)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.SecurityGroupName)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.VnetName)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.RouteTableName)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.StorageAccountName)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *AzureSpec) Size() (n int) {
	var l int
	_ = l
	l = len(m.StorageAccountName)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.InstanceImageVersion)
	n += 1 + l + sovGenerated(uint64(l))
	if m.CloudConfig != nil {
		l = m.CloudConfig.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	l = len(m.InstanceRootPassword)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.SubnetCIDR)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *AzureStorageSpec) Size() (n int) {
	var l int
	_ = l
	l = len(m.Container)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Prefix)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *CloudSpec) Size() (n int) {
	var l int
	_ = l
	l = len(m.CloudProvider)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Project)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Region)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Zone)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.OS)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Kernel)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.CloudConfigPath)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.InstanceImage)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.InstanceImageProject)
	n += 1 + l + sovGenerated(uint64(l))
	if m.AWS != nil {
		l = m.AWS.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.GCE != nil {
		l = m.GCE.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Azure != nil {
		l = m.Azure.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Linode != nil {
		l = m.Linode.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *CloudStatus) Size() (n int) {
	var l int
	_ = l
	if m.AWS != nil {
		l = m.AWS.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.GCE != nil {
		l = m.GCE.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *Cluster) Size() (n int) {
	var l int
	_ = l
	l = m.ObjectMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *ClusterSpec) Size() (n int) {
	var l int
	_ = l
	l = m.Cloud.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.API.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Networking.Size()
	n += 1 + l + sovGenerated(uint64(l))
	n += 2
	l = len(m.KubernetesVersion)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.MasterKubeadmVersion)
	n += 1 + l + sovGenerated(uint64(l))
	n += 2
	if len(m.AuthorizationModes) > 0 {
		for _, s := range m.AuthorizationModes {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	l = len(m.Token)
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.APIServerCertSANs) > 0 {
		for _, s := range m.APIServerCertSANs {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	l = len(m.ClusterExternalDomain)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.ClusterInternalDomain)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.CACertName)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.FrontProxyCACertName)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.CredentialName)
	n += 2 + l + sovGenerated(uint64(l))
	n += 3
	l = len(m.LoggingDestination)
	n += 2 + l + sovGenerated(uint64(l))
	n += 2 + sovGenerated(uint64(m.ElasticsearchLoggingReplicas))
	l = len(m.AdmissionControl)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.RuntimeConfig)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.AppscodeAuthnURL)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.AppscodeAuthzURL)
	n += 2 + l + sovGenerated(uint64(l))
	n += 2 + sovGenerated(uint64(m.AutoscalerMinNodes))
	n += 2 + sovGenerated(uint64(m.AutoscalerMaxNodes))
	n += 10
	l = len(m.EnableClusterMonitoring)
	n += 2 + l + sovGenerated(uint64(l))
	n += 3
	n += 3
	l = len(m.EnableCustomMetrics)
	n += 2 + l + sovGenerated(uint64(l))
	n += 3
	l = len(m.EnableClusterAlert)
	n += 2 + l + sovGenerated(uint64(l))
	n += 3
	n += 3
	n += 3
	n += 3
	n += 3
	n += 3
	n += 3
	l = len(m.KubernetesMasterName)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.MasterInternalIP)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.MasterDiskId)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.MasterDiskType)
	n += 2 + l + sovGenerated(uint64(l))
	n += 2 + sovGenerated(uint64(m.MasterDiskSize))
	l = len(m.MasterSKU)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.MasterReservedIP)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.MasterExternalIP)
	n += 2 + l + sovGenerated(uint64(l))
	l = len(m.NodeDiskType)
	n += 2 + l + sovGenerated(uint64(l))
	n += 2 + sovGenerated(uint64(m.NodeDiskSize))
	return n
}

func (m *ClusterState) Size() (n int) {
	var l int
	_ = l
	l = len(m.KubeVersion)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.DNSVersion)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.KubeadmVersion)
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.KubeletVersions) > 0 {
		for k, v := range m.KubeletVersions {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGenerated(uint64(len(k))) + 1 + sovGenerated(uint64(v))
			n += mapEntrySize + 1 + sovGenerated(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *ClusterStatus) Size() (n int) {
	var l int
	_ = l
	l = len(m.Phase)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Reason)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.SSHKeyExternalID)
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Cloud.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.APIAddresses) > 0 {
		for _, e := range m.APIAddresses {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if len(m.ReservedIPs) > 0 {
		for _, e := range m.ReservedIPs {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *Credential) Size() (n int) {
	var l int
	_ = l
	l = m.ObjectMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *CredentialSpec) Size() (n int) {
	var l int
	_ = l
	l = len(m.Provider)
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Data) > 0 {
		for k, v := range m.Data {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGenerated(uint64(len(k))) + 1 + len(v) + sovGenerated(uint64(len(v)))
			n += mapEntrySize + 1 + sovGenerated(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *DNSProvider) Size() (n int) {
	var l int
	_ = l
	l = len(m.CredentialName)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *GCECloudConfig) Size() (n int) {
	var l int
	_ = l
	l = len(m.TokenURL)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.TokenBody)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.ProjectID)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.NetworkName)
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.NodeTags) > 0 {
		for _, s := range m.NodeTags {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	l = len(m.NodeInstancePrefix)
	n += 1 + l + sovGenerated(uint64(l))
	n += 2
	return n
}

func (m *GCEStatus) Size() (n int) {
	var l int
	_ = l
	l = len(m.BucketName)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *GCSSpec) Size() (n int) {
	var l int
	_ = l
	l = len(m.Bucket)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Prefix)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *GoogleSpec) Size() (n int) {
	var l int
	_ = l
	if len(m.NodeScopes) > 0 {
		for _, s := range m.NodeScopes {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if m.CloudConfig != nil {
		l = m.CloudConfig.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *LinodeSpec) Size() (n int) {
	var l int
	_ = l
	l = len(m.InstanceRootPassword)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *LocalSpec) Size() (n int) {
	var l int
	_ = l
	l = len(m.Path)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *Networking) Size() (n int) {
	var l int
	_ = l
	l = len(m.PodSubnet)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.ServiceSubnet)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.DNSDomain)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.NetworkProvider)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.DNSServerIP)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.NonMasqueradeCIDR)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.MasterSubnet)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *Node) Size() (n int) {
	var l int
	_ = l
	l = m.ObjectMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *NodeGroup) Size() (n int) {
	var l int
	_ = l
	l = m.ObjectMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *NodeGroupCondition) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Status)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Reason)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Message)
	n += 1 + l + sovGenerated(uint64(l))
	l = m.LastUpdateTime.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.LastTransitionTime.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *NodeGroupSpec) Size() (n int) {
	var l int
	_ = l
	l = m.Template.Size()
	n += 1 + l + sovGenerated(uint64(l))
	n += 1 + sovGenerated(uint64(m.Nodes))
	return n
}

func (m *NodeGroupStatus) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovGenerated(uint64(m.Nodes))
	n += 1 + sovGenerated(uint64(m.FullyLabeledNodes))
	n += 1 + sovGenerated(uint64(m.ObservedGeneration))
	n += 1 + sovGenerated(uint64(m.ReadyNodes))
	n += 1 + sovGenerated(uint64(m.AvailableNodes))
	if len(m.Conditions) > 0 {
		for _, e := range m.Conditions {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *NodeSpec) Size() (n int) {
	var l int
	_ = l
	l = len(m.Role)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.SKU)
	n += 1 + l + sovGenerated(uint64(l))
	n += 2
	l = len(m.DiskType)
	n += 1 + l + sovGenerated(uint64(l))
	n += 1 + sovGenerated(uint64(m.DiskSize))
	l = len(m.ExternalIPType)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *NodeStatus) Size() (n int) {
	var l int
	_ = l
	l = len(m.Phase)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Name)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.ExternalID)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.PublicIP)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.PrivateIP)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.ExternalPhase)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.DiskId)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *NodeTemplateSpec) Size() (n int) {
	var l int
	_ = l
	l = m.Spec.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *PharmerConfig) Size() (n int) {
	var l int
	_ = l
	l = len(m.Context)
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Credentials) > 0 {
		for _, e := range m.Credentials {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	l = m.Store.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if m.DNS != nil {
		l = m.DNS.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *ReservedIP) Size() (n int) {
	var l int
	_ = l
	l = len(m.IP)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.ID)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Name)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *S3Spec) Size() (n int) {
	var l int
	_ = l
	l = len(m.Endpoint)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Bucket)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Prefix)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *SimpleNode) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.ExternalID)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.PublicIP)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.PrivateIP)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.DiskId)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *StorageBackend) Size() (n int) {
	var l int
	_ = l
	l = len(m.CredentialName)
	n += 1 + l + sovGenerated(uint64(l))
	if m.Local != nil {
		l = m.Local.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.S3 != nil {
		l = m.S3.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.GCS != nil {
		l = m.GCS.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Azure != nil {
		l = m.Azure.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Swift != nil {
		l = m.Swift.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *SwiftSpec) Size() (n int) {
	var l int
	_ = l
	l = len(m.Container)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Prefix)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *Upgrade) Size() (n int) {
	var l int
	_ = l
	l = len(m.Description)
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Before.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.After.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func sovGenerated(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGenerated(x uint64) (n int) {
	return sovGenerated(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *API) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&API{`,
		`AdvertiseAddress:` + fmt.Sprintf("%v", this.AdvertiseAddress) + `,`,
		`BindPort:` + fmt.Sprintf("%v", this.BindPort) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSSpec{`,
		`IAMProfileMaster:` + fmt.Sprintf("%v", this.IAMProfileMaster) + `,`,
		`IAMProfileNode:` + fmt.Sprintf("%v", this.IAMProfileNode) + `,`,
		`MasterSGName:` + fmt.Sprintf("%v", this.MasterSGName) + `,`,
		`NodeSGName:` + fmt.Sprintf("%v", this.NodeSGName) + `,`,
		`VpcCIDR:` + fmt.Sprintf("%v", this.VpcCIDR) + `,`,
		`VpcCIDRBase:` + fmt.Sprintf("%v", this.VpcCIDRBase) + `,`,
		`MasterIPSuffix:` + fmt.Sprintf("%v", this.MasterIPSuffix) + `,`,
		`SubnetCIDR:` + fmt.Sprintf("%v", this.SubnetCIDR) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AWSStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AWSStatus{`,
		`MasterSGId:` + fmt.Sprintf("%v", this.MasterSGId) + `,`,
		`NodeSGId:` + fmt.Sprintf("%v", this.NodeSGId) + `,`,
		`VpcId:` + fmt.Sprintf("%v", this.VpcId) + `,`,
		`SubnetId:` + fmt.Sprintf("%v", this.SubnetId) + `,`,
		`RouteTableId:` + fmt.Sprintf("%v", this.RouteTableId) + `,`,
		`IGWId:` + fmt.Sprintf("%v", this.IGWId) + `,`,
		`DHCPOptionsId:` + fmt.Sprintf("%v", this.DHCPOptionsId) + `,`,
		`VolumeId:` + fmt.Sprintf("%v", this.VolumeId) + `,`,
		`BucketName:` + fmt.Sprintf("%v", this.BucketName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Action) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Action{`,
		`Action:` + fmt.Sprintf("%v", this.Action) + `,`,
		`Resource:` + fmt.Sprintf("%v", this.Resource) + `,`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureCloudConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureCloudConfig{`,
		`TenantID:` + fmt.Sprintf("%v", this.TenantID) + `,`,
		`SubscriptionID:` + fmt.Sprintf("%v", this.SubscriptionID) + `,`,
		`AadClientID:` + fmt.Sprintf("%v", this.AadClientID) + `,`,
		`AadClientSecret:` + fmt.Sprintf("%v", this.AadClientSecret) + `,`,
		`ResourceGroup:` + fmt.Sprintf("%v", this.ResourceGroup) + `,`,
		`Location:` + fmt.Sprintf("%v", this.Location) + `,`,
		`SubnetName:` + fmt.Sprintf("%v", this.SubnetName) + `,`,
		`SecurityGroupName:` + fmt.Sprintf("%v", this.SecurityGroupName) + `,`,
		`VnetName:` + fmt.Sprintf("%v", this.VnetName) + `,`,
		`RouteTableName:` + fmt.Sprintf("%v", this.RouteTableName) + `,`,
		`StorageAccountName:` + fmt.Sprintf("%v", this.StorageAccountName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureSpec{`,
		`StorageAccountName:` + fmt.Sprintf("%v", this.StorageAccountName) + `,`,
		`InstanceImageVersion:` + fmt.Sprintf("%v", this.InstanceImageVersion) + `,`,
		`CloudConfig:` + strings.Replace(fmt.Sprintf("%v", this.CloudConfig), "AzureCloudConfig", "AzureCloudConfig", 1) + `,`,
		`InstanceRootPassword:` + fmt.Sprintf("%v", this.InstanceRootPassword) + `,`,
		`SubnetCIDR:` + fmt.Sprintf("%v", this.SubnetCIDR) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureStorageSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureStorageSpec{`,
		`Container:` + fmt.Sprintf("%v", this.Container) + `,`,
		`Prefix:` + fmt.Sprintf("%v", this.Prefix) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CloudSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CloudSpec{`,
		`CloudProvider:` + fmt.Sprintf("%v", this.CloudProvider) + `,`,
		`Project:` + fmt.Sprintf("%v", this.Project) + `,`,
		`Region:` + fmt.Sprintf("%v", this.Region) + `,`,
		`Zone:` + fmt.Sprintf("%v", this.Zone) + `,`,
		`OS:` + fmt.Sprintf("%v", this.OS) + `,`,
		`Kernel:` + fmt.Sprintf("%v", this.Kernel) + `,`,
		`CloudConfigPath:` + fmt.Sprintf("%v", this.CloudConfigPath) + `,`,
		`InstanceImage:` + fmt.Sprintf("%v", this.InstanceImage) + `,`,
		`InstanceImageProject:` + fmt.Sprintf("%v", this.InstanceImageProject) + `,`,
		`AWS:` + strings.Replace(fmt.Sprintf("%v", this.AWS), "AWSSpec", "AWSSpec", 1) + `,`,
		`GCE:` + strings.Replace(fmt.Sprintf("%v", this.GCE), "GoogleSpec", "GoogleSpec", 1) + `,`,
		`Azure:` + strings.Replace(fmt.Sprintf("%v", this.Azure), "AzureSpec", "AzureSpec", 1) + `,`,
		`Linode:` + strings.Replace(fmt.Sprintf("%v", this.Linode), "LinodeSpec", "LinodeSpec", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CloudStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CloudStatus{`,
		`AWS:` + strings.Replace(fmt.Sprintf("%v", this.AWS), "AWSStatus", "AWSStatus", 1) + `,`,
		`GCE:` + strings.Replace(fmt.Sprintf("%v", this.GCE), "GCEStatus", "GCEStatus", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Cluster) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Cluster{`,
		`ObjectMeta:` + strings.Replace(strings.Replace(this.ObjectMeta.String(), "ObjectMeta", "k8s_io_apimachinery_pkg_apis_meta_v1.ObjectMeta", 1), `&`, ``, 1) + `,`,
		`Spec:` + strings.Replace(strings.Replace(this.Spec.String(), "ClusterSpec", "ClusterSpec", 1), `&`, ``, 1) + `,`,
		`Status:` + strings.Replace(strings.Replace(this.Status.String(), "ClusterStatus", "ClusterStatus", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClusterSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ClusterSpec{`,
		`Cloud:` + strings.Replace(strings.Replace(this.Cloud.String(), "CloudSpec", "CloudSpec", 1), `&`, ``, 1) + `,`,
		`API:` + strings.Replace(strings.Replace(this.API.String(), "API", "API", 1), `&`, ``, 1) + `,`,
		`Networking:` + strings.Replace(strings.Replace(this.Networking.String(), "Networking", "Networking", 1), `&`, ``, 1) + `,`,
		`Multizone:` + fmt.Sprintf("%v", this.Multizone) + `,`,
		`KubernetesVersion:` + fmt.Sprintf("%v", this.KubernetesVersion) + `,`,
		`MasterKubeadmVersion:` + fmt.Sprintf("%v", this.MasterKubeadmVersion) + `,`,
		`DoNotDelete:` + fmt.Sprintf("%v", this.DoNotDelete) + `,`,
		`AuthorizationModes:` + fmt.Sprintf("%v", this.AuthorizationModes) + `,`,
		`Token:` + fmt.Sprintf("%v", this.Token) + `,`,
		`APIServerCertSANs:` + fmt.Sprintf("%v", this.APIServerCertSANs) + `,`,
		`ClusterExternalDomain:` + fmt.Sprintf("%v", this.ClusterExternalDomain) + `,`,
		`ClusterInternalDomain:` + fmt.Sprintf("%v", this.ClusterInternalDomain) + `,`,
		`CACertName:` + fmt.Sprintf("%v", this.CACertName) + `,`,
		`FrontProxyCACertName:` + fmt.Sprintf("%v", this.FrontProxyCACertName) + `,`,
		`CredentialName:` + fmt.Sprintf("%v", this.CredentialName) + `,`,
		`AllocateNodeCIDRs:` + fmt.Sprintf("%v", this.AllocateNodeCIDRs) + `,`,
		`LoggingDestination:` + fmt.Sprintf("%v", this.LoggingDestination) + `,`,
		`ElasticsearchLoggingReplicas:` + fmt.Sprintf("%v", this.ElasticsearchLoggingReplicas) + `,`,
		`AdmissionControl:` + fmt.Sprintf("%v", this.AdmissionControl) + `,`,
		`RuntimeConfig:` + fmt.Sprintf("%v", this.RuntimeConfig) + `,`,
		`AppscodeAuthnURL:` + fmt.Sprintf("%v", this.AppscodeAuthnURL) + `,`,
		`AppscodeAuthzURL:` + fmt.Sprintf("%v", this.AppscodeAuthzURL) + `,`,
		`AutoscalerMinNodes:` + fmt.Sprintf("%v", this.AutoscalerMinNodes) + `,`,
		`AutoscalerMaxNodes:` + fmt.Sprintf("%v", this.AutoscalerMaxNodes) + `,`,
		`TargetNodeUtilization:` + fmt.Sprintf("%v", this.TargetNodeUtilization) + `,`,
		`EnableClusterMonitoring:` + fmt.Sprintf("%v", this.EnableClusterMonitoring) + `,`,
		`EnableClusterLogging:` + fmt.Sprintf("%v", this.EnableClusterLogging) + `,`,
		`EnableNodeLogging:` + fmt.Sprintf("%v", this.EnableNodeLogging) + `,`,
		`EnableCustomMetrics:` + fmt.Sprintf("%v", this.EnableCustomMetrics) + `,`,
		`EnableAPIserverBasicAudit:` + fmt.Sprintf("%v", this.EnableAPIserverBasicAudit) + `,`,
		`EnableClusterAlert:` + fmt.Sprintf("%v", this.EnableClusterAlert) + `,`,
		`EnableNodeProblemDetector:` + fmt.Sprintf("%v", this.EnableNodeProblemDetector) + `,`,
		`EnableRescheduler:` + fmt.Sprintf("%v", this.EnableRescheduler) + `,`,
		`EnableWebhookTokenAuthentication:` + fmt.Sprintf("%v", this.EnableWebhookTokenAuthentication) + `,`,
		`EnableWebhookTokenAuthorization:` + fmt.Sprintf("%v", this.EnableWebhookTokenAuthorization) + `,`,
		`EnableRBACAuthorization:` + fmt.Sprintf("%v", this.EnableRBACAuthorization) + `,`,
		`EnableNodePublicIP:` + fmt.Sprintf("%v", this.EnableNodePublicIP) + `,`,
		`EnableNodeAutoscaler:` + fmt.Sprintf("%v", this.EnableNodeAutoscaler) + `,`,
		`KubernetesMasterName:` + fmt.Sprintf("%v", this.KubernetesMasterName) + `,`,
		`MasterInternalIP:` + fmt.Sprintf("%v", this.MasterInternalIP) + `,`,
		`MasterDiskId:` + fmt.Sprintf("%v", this.MasterDiskId) + `,`,
		`MasterDiskType:` + fmt.Sprintf("%v", this.MasterDiskType) + `,`,
		`MasterDiskSize:` + fmt.Sprintf("%v", this.MasterDiskSize) + `,`,
		`MasterSKU:` + fmt.Sprintf("%v", this.MasterSKU) + `,`,
		`MasterReservedIP:` + fmt.Sprintf("%v", this.MasterReservedIP) + `,`,
		`MasterExternalIP:` + fmt.Sprintf("%v", this.MasterExternalIP) + `,`,
		`NodeDiskType:` + fmt.Sprintf("%v", this.NodeDiskType) + `,`,
		`NodeDiskSize:` + fmt.Sprintf("%v", this.NodeDiskSize) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClusterState) String() string {
	if this == nil {
		return "nil"
	}
	keysForKubeletVersions := make([]string, 0, len(this.KubeletVersions))
	for k := range this.KubeletVersions {
		keysForKubeletVersions = append(keysForKubeletVersions, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForKubeletVersions)
	mapStringForKubeletVersions := "map[string]uint32{"
	for _, k := range keysForKubeletVersions {
		mapStringForKubeletVersions += fmt.Sprintf("%v: %v,", k, this.KubeletVersions[k])
	}
	mapStringForKubeletVersions += "}"
	s := strings.Join([]string{`&ClusterState{`,
		`KubeVersion:` + fmt.Sprintf("%v", this.KubeVersion) + `,`,
		`DNSVersion:` + fmt.Sprintf("%v", this.DNSVersion) + `,`,
		`KubeadmVersion:` + fmt.Sprintf("%v", this.KubeadmVersion) + `,`,
		`KubeletVersions:` + mapStringForKubeletVersions + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClusterStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ClusterStatus{`,
		`Phase:` + fmt.Sprintf("%v", this.Phase) + `,`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`SSHKeyExternalID:` + fmt.Sprintf("%v", this.SSHKeyExternalID) + `,`,
		`Cloud:` + strings.Replace(strings.Replace(this.Cloud.String(), "CloudStatus", "CloudStatus", 1), `&`, ``, 1) + `,`,
		`APIAddresses:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.APIAddresses), "NodeAddress", "k8s_io_api_core_v1.NodeAddress", 1), `&`, ``, 1) + `,`,
		`ReservedIPs:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ReservedIPs), "ReservedIP", "ReservedIP", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Credential) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Credential{`,
		`ObjectMeta:` + strings.Replace(strings.Replace(this.ObjectMeta.String(), "ObjectMeta", "k8s_io_apimachinery_pkg_apis_meta_v1.ObjectMeta", 1), `&`, ``, 1) + `,`,
		`Spec:` + strings.Replace(strings.Replace(this.Spec.String(), "CredentialSpec", "CredentialSpec", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CredentialSpec) String() string {
	if this == nil {
		return "nil"
	}
	keysForData := make([]string, 0, len(this.Data))
	for k := range this.Data {
		keysForData = append(keysForData, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForData)
	mapStringForData := "map[string]string{"
	for _, k := range keysForData {
		mapStringForData += fmt.Sprintf("%v: %v,", k, this.Data[k])
	}
	mapStringForData += "}"
	s := strings.Join([]string{`&CredentialSpec{`,
		`Provider:` + fmt.Sprintf("%v", this.Provider) + `,`,
		`Data:` + mapStringForData + `,`,
		`}`,
	}, "")
	return s
}
func (this *DNSProvider) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DNSProvider{`,
		`CredentialName:` + fmt.Sprintf("%v", this.CredentialName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GCECloudConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GCECloudConfig{`,
		`TokenURL:` + fmt.Sprintf("%v", this.TokenURL) + `,`,
		`TokenBody:` + fmt.Sprintf("%v", this.TokenBody) + `,`,
		`ProjectID:` + fmt.Sprintf("%v", this.ProjectID) + `,`,
		`NetworkName:` + fmt.Sprintf("%v", this.NetworkName) + `,`,
		`NodeTags:` + fmt.Sprintf("%v", this.NodeTags) + `,`,
		`NodeInstancePrefix:` + fmt.Sprintf("%v", this.NodeInstancePrefix) + `,`,
		`Multizone:` + fmt.Sprintf("%v", this.Multizone) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GCEStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GCEStatus{`,
		`BucketName:` + fmt.Sprintf("%v", this.BucketName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GCSSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GCSSpec{`,
		`Bucket:` + fmt.Sprintf("%v", this.Bucket) + `,`,
		`Prefix:` + fmt.Sprintf("%v", this.Prefix) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GoogleSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GoogleSpec{`,
		`NodeScopes:` + fmt.Sprintf("%v", this.NodeScopes) + `,`,
		`CloudConfig:` + strings.Replace(fmt.Sprintf("%v", this.CloudConfig), "GCECloudConfig", "GCECloudConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LinodeSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LinodeSpec{`,
		`InstanceRootPassword:` + fmt.Sprintf("%v", this.InstanceRootPassword) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LocalSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LocalSpec{`,
		`Path:` + fmt.Sprintf("%v", this.Path) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Networking) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Networking{`,
		`PodSubnet:` + fmt.Sprintf("%v", this.PodSubnet) + `,`,
		`ServiceSubnet:` + fmt.Sprintf("%v", this.ServiceSubnet) + `,`,
		`DNSDomain:` + fmt.Sprintf("%v", this.DNSDomain) + `,`,
		`NetworkProvider:` + fmt.Sprintf("%v", this.NetworkProvider) + `,`,
		`DNSServerIP:` + fmt.Sprintf("%v", this.DNSServerIP) + `,`,
		`NonMasqueradeCIDR:` + fmt.Sprintf("%v", this.NonMasqueradeCIDR) + `,`,
		`MasterSubnet:` + fmt.Sprintf("%v", this.MasterSubnet) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Node) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Node{`,
		`ObjectMeta:` + strings.Replace(strings.Replace(this.ObjectMeta.String(), "ObjectMeta", "k8s_io_apimachinery_pkg_apis_meta_v1.ObjectMeta", 1), `&`, ``, 1) + `,`,
		`Spec:` + strings.Replace(strings.Replace(this.Spec.String(), "NodeSpec", "NodeSpec", 1), `&`, ``, 1) + `,`,
		`Status:` + strings.Replace(strings.Replace(this.Status.String(), "NodeStatus", "NodeStatus", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodeGroup) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NodeGroup{`,
		`ObjectMeta:` + strings.Replace(strings.Replace(this.ObjectMeta.String(), "ObjectMeta", "k8s_io_apimachinery_pkg_apis_meta_v1.ObjectMeta", 1), `&`, ``, 1) + `,`,
		`Spec:` + strings.Replace(strings.Replace(this.Spec.String(), "NodeGroupSpec", "NodeGroupSpec", 1), `&`, ``, 1) + `,`,
		`Status:` + strings.Replace(strings.Replace(this.Status.String(), "NodeGroupStatus", "NodeGroupStatus", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodeGroupCondition) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NodeGroupCondition{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`LastUpdateTime:` + strings.Replace(strings.Replace(this.LastUpdateTime.String(), "Time", "k8s_io_apimachinery_pkg_apis_meta_v1.Time", 1), `&`, ``, 1) + `,`,
		`LastTransitionTime:` + strings.Replace(strings.Replace(this.LastTransitionTime.String(), "Time", "k8s_io_apimachinery_pkg_apis_meta_v1.Time", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodeGroupSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NodeGroupSpec{`,
		`Template:` + strings.Replace(strings.Replace(this.Template.String(), "NodeTemplateSpec", "NodeTemplateSpec", 1), `&`, ``, 1) + `,`,
		`Nodes:` + fmt.Sprintf("%v", this.Nodes) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodeGroupStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NodeGroupStatus{`,
		`Nodes:` + fmt.Sprintf("%v", this.Nodes) + `,`,
		`FullyLabeledNodes:` + fmt.Sprintf("%v", this.FullyLabeledNodes) + `,`,
		`ObservedGeneration:` + fmt.Sprintf("%v", this.ObservedGeneration) + `,`,
		`ReadyNodes:` + fmt.Sprintf("%v", this.ReadyNodes) + `,`,
		`AvailableNodes:` + fmt.Sprintf("%v", this.AvailableNodes) + `,`,
		`Conditions:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Conditions), "NodeGroupCondition", "NodeGroupCondition", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodeSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NodeSpec{`,
		`Role:` + fmt.Sprintf("%v", this.Role) + `,`,
		`SKU:` + fmt.Sprintf("%v", this.SKU) + `,`,
		`SpotInstances:` + fmt.Sprintf("%v", this.SpotInstances) + `,`,
		`DiskType:` + fmt.Sprintf("%v", this.DiskType) + `,`,
		`DiskSize:` + fmt.Sprintf("%v", this.DiskSize) + `,`,
		`ExternalIPType:` + fmt.Sprintf("%v", this.ExternalIPType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodeStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NodeStatus{`,
		`Phase:` + fmt.Sprintf("%v", this.Phase) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ExternalID:` + fmt.Sprintf("%v", this.ExternalID) + `,`,
		`PublicIP:` + fmt.Sprintf("%v", this.PublicIP) + `,`,
		`PrivateIP:` + fmt.Sprintf("%v", this.PrivateIP) + `,`,
		`ExternalPhase:` + fmt.Sprintf("%v", this.ExternalPhase) + `,`,
		`DiskId:` + fmt.Sprintf("%v", this.DiskId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodeTemplateSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NodeTemplateSpec{`,
		`Spec:` + strings.Replace(strings.Replace(this.Spec.String(), "NodeSpec", "NodeSpec", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PharmerConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PharmerConfig{`,
		`Context:` + fmt.Sprintf("%v", this.Context) + `,`,
		`Credentials:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Credentials), "Credential", "Credential", 1), `&`, ``, 1) + `,`,
		`Store:` + strings.Replace(strings.Replace(this.Store.String(), "StorageBackend", "StorageBackend", 1), `&`, ``, 1) + `,`,
		`DNS:` + strings.Replace(fmt.Sprintf("%v", this.DNS), "DNSProvider", "DNSProvider", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReservedIP) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReservedIP{`,
		`IP:` + fmt.Sprintf("%v", this.IP) + `,`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *S3Spec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&S3Spec{`,
		`Endpoint:` + fmt.Sprintf("%v", this.Endpoint) + `,`,
		`Bucket:` + fmt.Sprintf("%v", this.Bucket) + `,`,
		`Prefix:` + fmt.Sprintf("%v", this.Prefix) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SimpleNode) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SimpleNode{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ExternalID:` + fmt.Sprintf("%v", this.ExternalID) + `,`,
		`PublicIP:` + fmt.Sprintf("%v", this.PublicIP) + `,`,
		`PrivateIP:` + fmt.Sprintf("%v", this.PrivateIP) + `,`,
		`DiskId:` + fmt.Sprintf("%v", this.DiskId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StorageBackend) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StorageBackend{`,
		`CredentialName:` + fmt.Sprintf("%v", this.CredentialName) + `,`,
		`Local:` + strings.Replace(fmt.Sprintf("%v", this.Local), "LocalSpec", "LocalSpec", 1) + `,`,
		`S3:` + strings.Replace(fmt.Sprintf("%v", this.S3), "S3Spec", "S3Spec", 1) + `,`,
		`GCS:` + strings.Replace(fmt.Sprintf("%v", this.GCS), "GCSSpec", "GCSSpec", 1) + `,`,
		`Azure:` + strings.Replace(fmt.Sprintf("%v", this.Azure), "AzureStorageSpec", "AzureStorageSpec", 1) + `,`,
		`Swift:` + strings.Replace(fmt.Sprintf("%v", this.Swift), "SwiftSpec", "SwiftSpec", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SwiftSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SwiftSpec{`,
		`Container:` + fmt.Sprintf("%v", this.Container) + `,`,
		`Prefix:` + fmt.Sprintf("%v", this.Prefix) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Upgrade) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Upgrade{`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`Before:` + strings.Replace(strings.Replace(this.Before.String(), "ClusterState", "ClusterState", 1), `&`, ``, 1) + `,`,
		`After:` + strings.Replace(strings.Replace(this.After.String(), "ClusterState", "ClusterState", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringGenerated(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *API) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: API: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: API: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvertiseAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdvertiseAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BindPort", wireType)
			}
			m.BindPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BindPort |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AWSSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AWSSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AWSSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IAMProfileMaster", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IAMProfileMaster = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IAMProfileNode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IAMProfileNode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MasterSGName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MasterSGName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeSGName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeSGName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VpcCIDR", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VpcCIDR = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VpcCIDRBase", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VpcCIDRBase = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MasterIPSuffix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MasterIPSuffix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubnetCIDR", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubnetCIDR = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AWSStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AWSStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AWSStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MasterSGId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MasterSGId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeSGId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeSGId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VpcId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VpcId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubnetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubnetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteTableId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RouteTableId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IGWId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IGWId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DHCPOptionsId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DHCPOptionsId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolumeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VolumeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BucketName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BucketName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Action) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Action: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Action: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Action = ActionType(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resource", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Resource = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AzureCloudConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AzureCloudConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AzureCloudConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TenantID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TenantID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubscriptionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubscriptionID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AadClientID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AadClientID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AadClientSecret", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AadClientSecret = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceGroup", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceGroup = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Location = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubnetName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubnetName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityGroupName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityGroupName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VnetName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VnetName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteTableName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RouteTableName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageAccountName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StorageAccountName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AzureSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AzureSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AzureSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageAccountName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StorageAccountName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstanceImageVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InstanceImageVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloudConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CloudConfig == nil {
				m.CloudConfig = &AzureCloudConfig{}
			}
			if err := m.CloudConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstanceRootPassword", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InstanceRootPassword = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubnetCIDR", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubnetCIDR = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AzureStorageSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AzureStorageSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AzureStorageSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Container", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Container = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CloudSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloudSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloudSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloudProvider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CloudProvider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Project", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Project = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Region = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Zone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Zone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OS", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OS = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kernel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Kernel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloudConfigPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CloudConfigPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstanceImage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InstanceImage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstanceImageProject", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InstanceImageProject = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AWS", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AWS == nil {
				m.AWS = &AWSSpec{}
			}
			if err := m.AWS.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GCE", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GCE == nil {
				m.GCE = &GoogleSpec{}
			}
			if err := m.GCE.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Azure", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Azure == nil {
				m.Azure = &AzureSpec{}
			}
			if err := m.Azure.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Linode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Linode == nil {
				m.Linode = &LinodeSpec{}
			}
			if err := m.Linode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CloudStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloudStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloudStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AWS", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AWS == nil {
				m.AWS = &AWSStatus{}
			}
			if err := m.AWS.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GCE", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GCE == nil {
				m.GCE = &GCEStatus{}
			}
			if err := m.GCE.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Cluster) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Cluster: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Cluster: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cloud", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Cloud.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field API", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.API.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Networking", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Networking.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Multizone", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Multizone = github_com_appscode_go_encoding_json_types.StrToBool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KubernetesVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KubernetesVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MasterKubeadmVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MasterKubeadmVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoNotDelete", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DoNotDelete = bool(v != 0)
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorizationModes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthorizationModes = append(m.AuthorizationModes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field APIServerCertSANs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.APIServerCertSANs = append(m.APIServerCertSANs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterExternalDomain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterExternalDomain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterInternalDomain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterInternalDomain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CACertName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CACertName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FrontProxyCACertName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FrontProxyCACertName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CredentialName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CredentialName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllocateNodeCIDRs", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllocateNodeCIDRs = bool(v != 0)
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoggingDestination", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoggingDestination = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ElasticsearchLoggingReplicas", wireType)
			}
			m.ElasticsearchLoggingReplicas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ElasticsearchLoggingReplicas |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdmissionControl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdmissionControl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuntimeConfig", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RuntimeConfig = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppscodeAuthnURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppscodeAuthnURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppscodeAuthzURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppscodeAuthzURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoscalerMinNodes", wireType)
			}
			m.AutoscalerMinNodes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AutoscalerMinNodes |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoscalerMaxNodes", wireType)
			}
			m.AutoscalerMaxNodes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AutoscalerMaxNodes |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 26:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetNodeUtilization", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.TargetNodeUtilization = float64(math.Float64frombits(v))
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableClusterMonitoring", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EnableClusterMonitoring = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableClusterLogging", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableClusterLogging = bool(v != 0)
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableNodeLogging", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableNodeLogging = bool(v != 0)
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableCustomMetrics", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EnableCustomMetrics = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableAPIserverBasicAudit", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableAPIserverBasicAudit = bool(v != 0)
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableClusterAlert", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EnableClusterAlert = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 33:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableNodeProblemDetector", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableNodeProblemDetector = bool(v != 0)
		case 34:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableRescheduler", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableRescheduler = bool(v != 0)
		case 35:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableWebhookTokenAuthentication", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableWebhookTokenAuthentication = bool(v != 0)
		case 36:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableWebhookTokenAuthorization", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableWebhookTokenAuthorization = bool(v != 0)
		case 37:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableRBACAuthorization", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableRBACAuthorization = bool(v != 0)
		case 38:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableNodePublicIP", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableNodePublicIP = bool(v != 0)
		case 39:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableNodeAutoscaler", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableNodeAutoscaler = bool(v != 0)
		case 40:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KubernetesMasterName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KubernetesMasterName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 41:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MasterInternalIP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MasterInternalIP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 42:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MasterDiskId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MasterDiskId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 43:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MasterDiskType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MasterDiskType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 44:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MasterDiskSize", wireType)
			}
			m.MasterDiskSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MasterDiskSize |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 45:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MasterSKU", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MasterSKU = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 46:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MasterReservedIP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MasterReservedIP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 47:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MasterExternalIP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MasterExternalIP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 48:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeDiskType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeDiskType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 49:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeDiskSize", wireType)
			}
			m.NodeDiskSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeDiskSize |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KubeVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KubeVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DNSVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DNSVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KubeadmVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KubeadmVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KubeletVersions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KubeletVersions == nil {
				m.KubeletVersions = make(map[string]uint32)
			}
			var mapkey string
			var mapvalue uint32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGenerated(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthGenerated
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.KubeletVersions[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phase", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phase = ClusterPhase(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SSHKeyExternalID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SSHKeyExternalID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cloud", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Cloud.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field APIAddresses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.APIAddresses = append(m.APIAddresses, k8s_io_api_core_v1.NodeAddress{})
			if err := m.APIAddresses[len(m.APIAddresses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReservedIPs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReservedIPs = append(m.ReservedIPs, ReservedIP{})
			if err := m.ReservedIPs[len(m.ReservedIPs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Credential) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Credential: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Credential: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CredentialSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CredentialSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CredentialSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Provider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGenerated(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthGenerated
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Data[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DNSProvider) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DNSProvider: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DNSProvider: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CredentialName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CredentialName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GCECloudConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GCECloudConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GCECloudConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenBody", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenBody = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetworkName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeTags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeTags = append(m.NodeTags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeInstancePrefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeInstancePrefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Multizone", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Multizone = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GCEStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GCEStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GCEStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BucketName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BucketName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GCSSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GCSSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GCSSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bucket", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bucket = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GoogleSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GoogleSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GoogleSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeScopes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeScopes = append(m.NodeScopes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloudConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CloudConfig == nil {
				m.CloudConfig = &GCECloudConfig{}
			}
			if err := m.CloudConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LinodeSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LinodeSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LinodeSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstanceRootPassword", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InstanceRootPassword = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LocalSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LocalSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LocalSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Networking) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Networking: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Networking: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodSubnet", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PodSubnet = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceSubnet", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceSubnet = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DNSDomain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DNSDomain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkProvider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetworkProvider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DNSServerIP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DNSServerIP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NonMasqueradeCIDR", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NonMasqueradeCIDR = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MasterSubnet", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MasterSubnet = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Node) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Node: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Node: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeGroupCondition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeGroupCondition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeGroupCondition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = NodeGroupConditionType(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = ConditionStatus(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastUpdateTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LastUpdateTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastTransitionTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LastTransitionTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeGroupSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeGroupSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeGroupSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Template", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Template.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			m.Nodes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nodes |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeGroupStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeGroupStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeGroupStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			m.Nodes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nodes |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FullyLabeledNodes", wireType)
			}
			m.FullyLabeledNodes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FullyLabeledNodes |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObservedGeneration", wireType)
			}
			m.ObservedGeneration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ObservedGeneration |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadyNodes", wireType)
			}
			m.ReadyNodes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReadyNodes |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvailableNodes", wireType)
			}
			m.AvailableNodes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AvailableNodes |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conditions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Conditions = append(m.Conditions, NodeGroupCondition{})
			if err := m.Conditions[len(m.Conditions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Role = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SKU", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SKU = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpotInstances", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SpotInstances = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiskType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DiskType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiskSize", wireType)
			}
			m.DiskSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DiskSize |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalIPType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalIPType = IPType(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phase", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phase = NodePhase(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicIP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicIP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateIP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrivateIP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalPhase", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalPhase = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiskId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DiskId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeTemplateSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeTemplateSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeTemplateSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PharmerConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PharmerConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PharmerConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Context = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Credentials", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Credentials = append(m.Credentials, Credential{})
			if err := m.Credentials[len(m.Credentials)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Store", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Store.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DNS", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DNS == nil {
				m.DNS = &DNSProvider{}
			}
			if err := m.DNS.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReservedIP) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReservedIP: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReservedIP: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S3Spec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S3Spec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S3Spec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endpoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Endpoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bucket", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bucket = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SimpleNode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SimpleNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SimpleNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicIP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicIP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateIP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrivateIP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiskId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DiskId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StorageBackend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StorageBackend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StorageBackend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CredentialName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CredentialName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Local", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Local == nil {
				m.Local = &LocalSpec{}
			}
			if err := m.Local.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field S3", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.S3 == nil {
				m.S3 = &S3Spec{}
			}
			if err := m.S3.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GCS", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GCS == nil {
				m.GCS = &GCSSpec{}
			}
			if err := m.GCS.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Azure", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Azure == nil {
				m.Azure = &AzureStorageSpec{}
			}
			if err := m.Azure.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Swift", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Swift == nil {
				m.Swift = &SwiftSpec{}
			}
			if err := m.Swift.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SwiftSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SwiftSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SwiftSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Container", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Container = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Upgrade) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Upgrade: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Upgrade: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Before", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Before.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field After", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.After.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenerated(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthGenerated
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGenerated(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGenerated = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenerated   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/appscode/pharmer/apis/v1alpha1/generated.proto", fileDescriptorGenerated)
}

var fileDescriptorGenerated = []byte{
	// 4210 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x5b, 0xcd, 0x73, 0xdc, 0x46,
	0x76, 0xd7, 0xcc, 0x70, 0x48, 0x4e, 0x53, 0x24, 0xa5, 0xb6, 0xb4, 0x82, 0xb9, 0x32, 0x49, 0x8f,
	0x37, 0x5e, 0x79, 0x63, 0x0f, 0xad, 0x0f, 0x67, 0x65, 0xbb, 0x92, 0xd4, 0x7c, 0xd0, 0x34, 0x22,
	0x71, 0x34, 0x79, 0x43, 0xca, 0xb1, 0x37, 0xd9, 0xdd, 0x26, 0xd0, 0x1c, 0xc2, 0xc4, 0xa0, 0xb1,
	0x00, 0x86, 0x12, 0x75, 0xca, 0x29, 0xd7, 0xcd, 0x2d, 0x97, 0xd4, 0xe6, 0x98, 0x5c, 0x52, 0x49,
	0x25, 0xf7, 0x3d, 0xe4, 0xe4, 0x54, 0x2e, 0xae, 0xca, 0xc5, 0x55, 0xa9, 0x62, 0xc5, 0xca, 0x29,
	0xff, 0x40, 0x0e, 0x3a, 0x24, 0xa9, 0xfe, 0x40, 0x03, 0x8d, 0x01, 0xb5, 0x1a, 0xa6, 0x9c, 0xdb,
	0xa0, 0xdf, 0xef, 0xbd, 0x6e, 0xbc, 0x7e, 0xef, 0xe1, 0xbd, 0xd7, 0x3d, 0xe8, 0xc3, 0x91, 0x97,
	0x1c, 0x4d, 0x0e, 0x5a, 0x0e, 0x1b, 0x6f, 0x91, 0x30, 0x8c, 0x1d, 0xe6, 0xd2, 0xad, 0xf0, 0x88,
	0x44, 0x63, 0x1a, 0x6d, 0x91, 0xd0, 0x8b, 0xb7, 0x4e, 0x6e, 0x13, 0x3f, 0x3c, 0x22, 0xb7, 0xb7,
	0x46, 0x34, 0xa0, 0x11, 0x49, 0xa8, 0xdb, 0x0a, 0x23, 0x96, 0x30, 0xfc, 0x4e, 0xc6, 0xda, 0x4a,
	0x59, 0x5b, 0x8a, 0xb5, 0xc5, 0x59, 0x5b, 0x29, 0xeb, 0xda, 0x7b, 0xb9, 0x59, 0x46, 0x6c, 0xc4,
	0xb6, 0x84, 0x84, 0x83, 0xc9, 0xa1, 0x78, 0x12, 0x0f, 0xe2, 0x97, 0x94, 0xbc, 0xd6, 0x3c, 0xbe,
	0x1f, 0xb7, 0x3c, 0xc6, 0xe7, 0xdf, 0x72, 0x58, 0x44, 0xb7, 0x4e, 0xa6, 0x66, 0x5f, 0xbb, 0x97,
	0x61, 0xc6, 0xc4, 0x39, 0xf2, 0x02, 0x1a, 0x9d, 0x6e, 0x85, 0xc7, 0x23, 0xb9, 0xe8, 0x31, 0x4d,
	0x48, 0x09, 0x57, 0xf3, 0x14, 0xd5, 0xda, 0x03, 0x1b, 0xf7, 0xd0, 0x15, 0xe2, 0x9e, 0xd0, 0x28,
	0xf1, 0x62, 0xda, 0x76, 0xdd, 0x88, 0xc6, 0xb1, 0x55, 0xd9, 0xac, 0xdc, 0x6a, 0x74, 0xac, 0xaf,
	0xce, 0x36, 0x2e, 0x3d, 0x3f, 0xdb, 0xb8, 0xd2, 0x2e, 0xd0, 0x61, 0x8a, 0x03, 0xbf, 0x8b, 0x16,
	0x0f, 0xbc, 0xc0, 0x1d, 0xb0, 0x28, 0xb1, 0xaa, 0x9b, 0x95, 0x5b, 0xf5, 0xce, 0x15, 0xc5, 0xbd,
	0xd8, 0x51, 0xe3, 0xa0, 0x11, 0xcd, 0x7f, 0xad, 0xa1, 0x85, 0xf6, 0x67, 0xc3, 0x61, 0x48, 0x1d,
	0x3e, 0xbf, 0x47, 0xc6, 0x83, 0x88, 0x1d, 0x7a, 0x3e, 0xdd, 0x25, 0x71, 0x42, 0xa3, 0xe2, 0xfc,
	0x76, 0x7b, 0xd7, 0xa0, 0xc3, 0x14, 0x07, 0xfe, 0x3d, 0xb4, 0x92, 0x8d, 0xf5, 0x99, 0x4b, 0xc5,
	0x2a, 0x1a, 0x9d, 0xef, 0x29, 0x19, 0x2b, 0x99, 0x0c, 0x4e, 0x85, 0x02, 0x1a, 0xdf, 0x47, 0x97,
	0xc7, 0x42, 0xd2, 0x70, 0xa7, 0x4f, 0xc6, 0xd4, 0xaa, 0x09, 0xee, 0x6b, 0x8a, 0xfb, 0xf2, 0x6e,
	0x8e, 0x06, 0x06, 0x12, 0xdf, 0x41, 0x28, 0x60, 0x2e, 0x55, 0x7c, 0x73, 0x82, 0x0f, 0x2b, 0x3e,
	0xd4, 0xd7, 0x14, 0xc8, 0xa1, 0xf0, 0x3b, 0x68, 0xe1, 0x24, 0x74, 0xba, 0x76, 0x0f, 0xac, 0xba,
	0x60, 0x58, 0x55, 0x0c, 0x0b, 0x8f, 0xe5, 0x30, 0xa4, 0x74, 0xfc, 0x01, 0x5a, 0x52, 0x3f, 0x3b,
	0x24, 0xa6, 0xd6, 0xbc, 0x80, 0xbf, 0xa6, 0xe0, 0x4b, 0x8f, 0x33, 0x12, 0xe4, 0x71, 0x5c, 0x1f,
	0x72, 0x95, 0xf6, 0x60, 0x38, 0x39, 0x3c, 0xf4, 0x9e, 0x5a, 0x0b, 0xa6, 0x3e, 0x76, 0x0d, 0x2a,
	0x14, 0xd0, 0xfc, 0xad, 0xe2, 0xc9, 0x41, 0x40, 0x93, 0xae, 0xe7, 0x46, 0xd6, 0xa2, 0xf9, 0x56,
	0x43, 0x49, 0xe1, 0xeb, 0xcc, 0xa1, 0x9a, 0xbf, 0xae, 0xa1, 0x06, 0xdf, 0xd5, 0x84, 0x24, 0x93,
	0x98, 0x4b, 0x48, 0xf5, 0x64, 0xf7, 0xd4, 0x8e, 0x6a, 0x09, 0xa9, 0x3e, 0x6d, 0x17, 0x72, 0x28,
	0x6e, 0x45, 0x52, 0x4b, 0x76, 0x4f, 0xed, 0x9f, 0xb6, 0x22, 0xa9, 0x49, 0xdb, 0x05, 0x8d, 0xc0,
	0x6f, 0xa1, 0xfa, 0x49, 0xe8, 0xd8, 0x3d, 0xb5, 0x59, 0xcb, 0x0a, 0x5a, 0x7f, 0x1c, 0x3a, 0xb6,
	0x0b, 0x92, 0xc6, 0x45, 0xca, 0x25, 0xda, 0x3d, 0xb5, 0x39, 0x5a, 0xa4, 0x7c, 0x0d, 0x2e, 0x32,
	0x45, 0x70, 0x33, 0x88, 0xd8, 0x24, 0xa1, 0x7b, 0xe4, 0xc0, 0xa7, 0x76, 0x4f, 0xed, 0x8e, 0x36,
	0x03, 0xc8, 0x68, 0x2e, 0x18, 0x48, 0xbe, 0x18, 0x6f, 0xf4, 0xc4, 0xee, 0xa9, 0x1d, 0xd2, 0x8b,
	0xb1, 0x77, 0x3e, 0xe3, 0x8b, 0x11, 0x34, 0xfc, 0x31, 0x5a, 0x76, 0x8f, 0x9c, 0xf0, 0x51, 0x98,
	0x78, 0x2c, 0x88, 0xed, 0x9e, 0xda, 0x94, 0xeb, 0x0a, 0xbc, 0xdc, 0xfb, 0xb4, 0x3b, 0x48, 0x89,
	0x2e, 0x98, 0x58, 0xfe, 0x26, 0x27, 0xcc, 0x9f, 0x8c, 0xf9, 0xba, 0x16, 0xcd, 0x37, 0x79, 0x2c,
	0xc7, 0x5d, 0xd0, 0x08, 0xae, 0xfe, 0x83, 0x89, 0x73, 0x4c, 0x13, 0x61, 0x96, 0x0d, 0x53, 0xfd,
	0x1d, 0x4d, 0x81, 0x1c, 0xaa, 0xf9, 0x17, 0x15, 0x34, 0xdf, 0x76, 0xf8, 0x7c, 0xf8, 0x1e, 0x9a,
	0x27, 0xe2, 0x97, 0xda, 0xb9, 0x9b, 0x8a, 0x55, 0xd1, 0x5f, 0x9c, 0x6d, 0x20, 0xf9, 0x6b, 0xef,
	0x34, 0xa4, 0xa0, 0xb0, 0x7c, 0x89, 0x11, 0x8d, 0xd9, 0x24, 0x72, 0x68, 0x71, 0xff, 0x40, 0x8d,
	0x83, 0x46, 0x70, 0x2f, 0x18, 0xd3, 0x38, 0x26, 0xa3, 0xd4, 0xdd, 0xb4, 0x17, 0xec, 0xca, 0x61,
	0x48, 0xe9, 0xcd, 0xbf, 0xac, 0xa3, 0x2b, 0xed, 0x67, 0x93, 0x88, 0x76, 0x7d, 0x36, 0x71, 0xbb,
	0x2c, 0x38, 0xf4, 0x46, 0x7c, 0xb6, 0x84, 0x06, 0x24, 0x48, 0x6c, 0x57, 0xad, 0x52, 0xcf, 0xb6,
	0x27, 0xc7, 0x7b, 0xa0, 0x11, 0xdc, 0x23, 0xe2, 0xc9, 0x41, 0xec, 0x44, 0x9e, 0xd0, 0xa8, 0xed,
	0x16, 0x23, 0xc4, 0x30, 0x4f, 0xed, 0x41, 0x01, 0xcd, 0x1d, 0x91, 0x10, 0xb7, 0xeb, 0x7b, 0x54,
	0x4c, 0x58, 0x33, 0x1d, 0xb1, 0xad, 0x49, 0x3d, 0xc8, 0xe3, 0x70, 0x1b, 0xad, 0xea, 0xc7, 0x21,
	0x75, 0x22, 0x9a, 0x28, 0x33, 0xbc, 0xa1, 0x58, 0x57, 0xdb, 0x26, 0x19, 0x8a, 0x78, 0x6e, 0x35,
	0xa9, 0xce, 0x76, 0x22, 0x36, 0x09, 0x95, 0x55, 0x6a, 0xab, 0x81, 0x3c, 0x11, 0x4c, 0x2c, 0x57,
	0x92, 0xcf, 0x1c, 0x22, 0xb6, 0x72, 0xde, 0x54, 0xd2, 0x43, 0x35, 0x0e, 0x1a, 0x91, 0xb9, 0xbd,
	0xb0, 0x9a, 0x85, 0x32, 0xb7, 0x97, 0x56, 0x93, 0xa1, 0xf0, 0x0e, 0xba, 0x1a, 0x53, 0x67, 0x12,
	0x79, 0xc9, 0xa9, 0x98, 0x52, 0xb0, 0x4a, 0x03, 0x7d, 0x5d, 0xb1, 0x5e, 0x1d, 0x16, 0x01, 0x30,
	0xcd, 0x23, 0x0c, 0x3c, 0x30, 0x0c, 0x36, 0x33, 0xf0, 0x74, 0x62, 0x8d, 0xe0, 0xfb, 0x99, 0x39,
	0xa0, 0xe0, 0x41, 0xe6, 0x7e, 0x82, 0x41, 0x85, 0x02, 0x1a, 0xff, 0x01, 0xc2, 0x71, 0xc2, 0x22,
	0x32, 0xa2, 0x6d, 0xc7, 0x61, 0x93, 0x40, 0xce, 0xbb, 0x24, 0x64, 0xac, 0x29, 0x19, 0x78, 0x38,
	0x85, 0x80, 0x12, 0xae, 0xe6, 0x3f, 0xf2, 0xc8, 0xc7, 0xcd, 0x53, 0x7c, 0xd1, 0xf6, 0xd0, 0x0d,
	0x22, 0x1e, 0xa6, 0xc5, 0x57, 0x7e, 0xa3, 0xf8, 0xf3, 0x58, 0xf1, 0x00, 0x5d, 0xf3, 0x82, 0x38,
	0x21, 0x81, 0x43, 0xed, 0x31, 0x19, 0xd1, 0xc7, 0x34, 0x8a, 0xf9, 0xa6, 0x56, 0x0d, 0xff, 0xbc,
	0x66, 0x97, 0x60, 0xa0, 0x94, 0x13, 0x3f, 0x45, 0x57, 0x48, 0xc1, 0xa7, 0x84, 0x59, 0x2f, 0xdd,
	0xf9, 0xb8, 0xf5, 0xca, 0xf9, 0x4c, 0xab, 0xe8, 0x96, 0x9d, 0x55, 0xee, 0x0f, 0xb9, 0x01, 0x98,
	0x9a, 0x25, 0xff, 0x2e, 0xc0, 0x58, 0x32, 0x20, 0x71, 0xfc, 0x84, 0x45, 0xae, 0xf2, 0x8c, 0xa9,
	0x77, 0xc9, 0x63, 0xa0, 0x94, 0xb3, 0xf0, 0xbd, 0xaa, 0xbf, 0xd2, 0xf7, 0xea, 0x58, 0xc5, 0x14,
	0xa5, 0x6c, 0xb1, 0x77, 0x5b, 0xa8, 0xe1, 0xb0, 0x20, 0x21, 0x3c, 0x87, 0x52, 0xbb, 0x75, 0x55,
	0x89, 0x69, 0x74, 0x53, 0x02, 0x64, 0x18, 0xfc, 0x36, 0x9a, 0x0f, 0x23, 0xca, 0x3f, 0xb0, 0x72,
	0x23, 0x56, 0xd2, 0x40, 0x39, 0x10, 0xa3, 0xa0, 0xa8, 0xcd, 0x5f, 0xcd, 0xa3, 0x86, 0x50, 0x81,
	0x98, 0xe6, 0x63, 0xb4, 0xec, 0xf0, 0x87, 0x41, 0xc4, 0x4e, 0x3c, 0x57, 0x4f, 0xa5, 0x5d, 0xba,
	0x9b, 0x27, 0x82, 0x89, 0xe5, 0x71, 0x33, 0x8c, 0xd8, 0x97, 0xd4, 0x49, 0xd4, 0x9c, 0x3a, 0x6e,
	0x0e, 0xe4, 0x30, 0xa4, 0x74, 0xbe, 0xba, 0x88, 0x8e, 0xb8, 0x99, 0xd4, 0xcc, 0xd5, 0x81, 0x18,
	0x05, 0x45, 0xc5, 0x9b, 0x68, 0xee, 0x19, 0x0b, 0xd2, 0xf4, 0xe5, 0xb2, 0x42, 0xcd, 0x7d, 0xc1,
	0x02, 0x0a, 0x82, 0x82, 0xd7, 0x50, 0x95, 0xc5, 0x4a, 0xb1, 0x48, 0xd1, 0xab, 0x8f, 0x86, 0x50,
	0x65, 0x31, 0x9f, 0xe5, 0x98, 0x46, 0x01, 0xf5, 0x55, 0x84, 0xd1, 0xb3, 0x3c, 0x10, 0xa3, 0xa0,
	0xa8, 0xf8, 0x43, 0xb4, 0xe4, 0xe4, 0x6c, 0x6d, 0xc1, 0x8c, 0x83, 0x39, 0x03, 0x19, 0x90, 0xe4,
	0x08, 0xf2, 0x58, 0xae, 0x30, 0xc3, 0x86, 0x55, 0x80, 0xd1, 0x0a, 0x33, 0xcc, 0x1e, 0x4c, 0xec,
	0x94, 0xeb, 0x28, 0x35, 0xa9, 0x20, 0x53, 0xee, 0x3a, 0xa9, 0x2a, 0x4b, 0x39, 0xf1, 0x2e, 0xaa,
	0x91, 0x27, 0xb1, 0x88, 0x38, 0x4b, 0x77, 0xee, 0xcc, 0xe2, 0x2d, 0x32, 0xeb, 0xed, 0x2c, 0x3c,
	0x3f, 0xdb, 0xa8, 0xb5, 0x3f, 0x1b, 0x02, 0x97, 0x83, 0x07, 0xa8, 0x36, 0x72, 0x64, 0xf0, 0x59,
	0xba, 0xf3, 0xc1, 0x0c, 0xe2, 0x76, 0x18, 0x1b, 0xf9, 0x34, 0x93, 0xb8, 0xd3, 0xdd, 0x06, 0x2e,
	0x0a, 0xef, 0xa3, 0xba, 0xf0, 0x3a, 0xeb, 0xb2, 0x90, 0x79, 0x6f, 0x56, 0x87, 0x16, 0x22, 0x1b,
	0x3c, 0x81, 0x11, 0x8f, 0x20, 0xa5, 0xe1, 0xcf, 0xd1, 0xbc, 0xef, 0xf1, 0x04, 0xcc, 0x5a, 0x9e,
	0x79, 0xad, 0x0f, 0x05, 0xa3, 0x10, 0x8c, 0xb8, 0x71, 0xc8, 0x67, 0x50, 0x02, 0x9b, 0x7f, 0x57,
	0x41, 0x32, 0x6a, 0xa8, 0xfc, 0xf1, 0x91, 0x54, 0x71, 0x65, 0xf6, 0xf5, 0xa7, 0x29, 0x68, 0x41,
	0xc9, 0x8f, 0x50, 0x6d, 0xd4, 0xdd, 0x16, 0x2e, 0x33, 0x9b, 0xc0, 0x9d, 0xee, 0x76, 0x5e, 0xa0,
	0xd4, 0x71, 0x77, 0xbb, 0xf9, 0xd7, 0x55, 0xb4, 0xd0, 0xf5, 0x27, 0xa2, 0xfe, 0xf8, 0x39, 0x5a,
	0xe4, 0x75, 0x96, 0x4b, 0x12, 0xa2, 0x96, 0xfc, 0x7e, 0x4b, 0x56, 0x65, 0xad, 0x7c, 0x55, 0xd6,
	0x0a, 0x8f, 0x47, 0x52, 0x3a, 0x47, 0xb7, 0x4e, 0x6e, 0xb7, 0x1e, 0x1d, 0x70, 0x83, 0xda, 0xa5,
	0x09, 0xc9, 0xe2, 0x55, 0x36, 0x06, 0x5a, 0x2a, 0xfe, 0x23, 0x34, 0x17, 0x87, 0xd4, 0x51, 0xeb,
	0xff, 0x9d, 0x19, 0xd6, 0xaf, 0xd6, 0x28, 0x34, 0xaf, 0x5d, 0x9b, 0x3f, 0x81, 0x90, 0x88, 0x7f,
	0x8e, 0xe6, 0x63, 0xf1, 0x7e, 0x2a, 0xfa, 0xdf, 0xbf, 0x80, 0x6c, 0xa9, 0x1f, 0xed, 0xf8, 0xf2,
	0x19, 0x94, 0xdc, 0xe6, 0x3f, 0xdf, 0xe4, 0x7b, 0xab, 0x57, 0x81, 0x3f, 0x47, 0x75, 0xe1, 0xdc,
	0x17, 0xd8, 0x5d, 0x1d, 0x43, 0xb3, 0x14, 0x5b, 0x0c, 0x81, 0x94, 0x28, 0x3c, 0x33, 0xf4, 0x94,
	0x96, 0x5a, 0xb3, 0x98, 0xcd, 0xc0, 0xee, 0x2c, 0x29, 0x91, 0xbc, 0x30, 0x06, 0x2e, 0x07, 0x7b,
	0x08, 0x05, 0x34, 0x79, 0xc2, 0xa2, 0x63, 0x2f, 0x18, 0x89, 0xf0, 0x38, 0x9b, 0xd1, 0xf7, 0x35,
	0x73, 0xae, 0x28, 0xd4, 0x63, 0x90, 0x13, 0x8e, 0x47, 0xa8, 0x31, 0x9e, 0xf8, 0x89, 0x27, 0x02,
	0x31, 0x0f, 0xb4, 0x8b, 0x1d, 0x3b, 0xfd, 0xf4, 0xec, 0xa6, 0x84, 0x17, 0x67, 0x1b, 0xf7, 0xca,
	0xda, 0x14, 0x23, 0xb6, 0x45, 0x03, 0x87, 0xb9, 0x5e, 0x30, 0xda, 0xfa, 0x32, 0x66, 0xc1, 0x56,
	0x72, 0x1a, 0xd2, 0xb8, 0x35, 0x4c, 0xa2, 0x3d, 0xd6, 0x61, 0xcc, 0x87, 0x4c, 0x36, 0x4f, 0xd8,
	0x8e, 0x27, 0x07, 0x3c, 0x24, 0x27, 0x34, 0x4e, 0xd3, 0x88, 0x79, 0x33, 0x61, 0x7b, 0x50, 0x04,
	0xc0, 0x34, 0x0f, 0x8f, 0xab, 0xb2, 0x78, 0xe3, 0x68, 0xe2, 0x8e, 0x53, 0x59, 0x0b, 0x66, 0x5c,
	0xdd, 0x2d, 0xc1, 0x40, 0x29, 0x27, 0x4f, 0xb2, 0x5d, 0xd6, 0x67, 0x49, 0x8f, 0xfa, 0x34, 0x91,
	0x41, 0x7e, 0x31, 0x4b, 0xb2, 0x7b, 0x19, 0x09, 0xf2, 0x38, 0xfc, 0x09, 0xc2, 0x64, 0x92, 0x1c,
	0xb1, 0xc8, 0x7b, 0x26, 0xf2, 0xd8, 0x5d, 0xe6, 0xd2, 0xd8, 0x6a, 0x6c, 0xd6, 0x78, 0x3e, 0xc8,
	0x13, 0xad, 0xf6, 0x14, 0x15, 0x4a, 0x38, 0x78, 0x11, 0x97, 0xb0, 0x63, 0x1a, 0xa8, 0x54, 0x52,
	0x5b, 0xd8, 0x1e, 0x1f, 0x04, 0x49, 0xc3, 0x5d, 0x74, 0x95, 0x84, 0xde, 0x90, 0x46, 0x27, 0x34,
	0xea, 0xd2, 0x28, 0x19, 0xb6, 0xfb, 0xb1, 0xb5, 0x24, 0xe6, 0xba, 0xce, 0x55, 0xd7, 0x1e, 0xd8,
	0x26, 0x11, 0xa6, 0xf1, 0x78, 0x88, 0xae, 0x3b, 0xd2, 0x21, 0xb6, 0x9f, 0x26, 0x34, 0x0a, 0x88,
	0xdf, 0x63, 0x63, 0xe2, 0x05, 0x22, 0x5e, 0x37, 0x3a, 0x6f, 0xa8, 0x99, 0xaf, 0x77, 0xcb, 0x40,
	0x50, 0xce, 0x9b, 0x13, 0x6a, 0x07, 0x86, 0xd0, 0xe5, 0x52, 0xa1, 0x26, 0x08, 0xca, 0x79, 0x79,
	0x66, 0xe5, 0x10, 0xbe, 0xee, 0xc1, 0xa7, 0x76, 0xcf, 0x5a, 0x31, 0x33, 0xab, 0x6e, 0x9b, 0x53,
	0x64, 0x49, 0x90, 0xa1, 0xb8, 0x61, 0x1c, 0x46, 0x2c, 0x48, 0x06, 0x11, 0x7b, 0x7a, 0xda, 0xcd,
	0xb8, 0x57, 0x4d, 0xc3, 0xf8, 0x24, 0xc3, 0x64, 0x72, 0x4a, 0x39, 0x79, 0xb6, 0xef, 0x44, 0xd4,
	0xa5, 0x41, 0xe2, 0x11, 0x5f, 0xa4, 0xd2, 0x57, 0xcc, 0x6c, 0xbf, 0x6b, 0x50, 0xa1, 0x80, 0xe6,
	0x36, 0x4f, 0x7c, 0x51, 0xe6, 0x88, 0x7e, 0x0f, 0xcf, 0xff, 0x62, 0xeb, 0xaa, 0x30, 0x2f, 0x6d,
	0xf3, 0xed, 0x3c, 0xc0, 0xee, 0x01, 0xdf, 0xb8, 0x22, 0x0f, 0x2f, 0x1b, 0x7c, 0x36, 0x1a, 0x79,
	0xc1, 0xa8, 0x47, 0xe3, 0xc4, 0x0b, 0x64, 0x65, 0x85, 0xcd, 0xbc, 0xfe, 0xe1, 0x14, 0x02, 0x4a,
	0xb8, 0xf0, 0x11, 0xba, 0x49, 0x7d, 0x12, 0x27, 0x9e, 0x13, 0x53, 0x12, 0x39, 0x47, 0x8a, 0x0d,
	0x68, 0xe8, 0x7b, 0x0e, 0x89, 0xad, 0xd7, 0x36, 0x2b, 0xb7, 0x6a, 0x9d, 0x1f, 0x28, 0xa9, 0x37,
	0xb7, 0x5f, 0x82, 0x85, 0x97, 0x4a, 0x92, 0x4d, 0xbe, 0xb1, 0x17, 0x73, 0x27, 0xe3, 0x69, 0x6c,
	0xc4, 0x7c, 0xeb, 0x5a, 0xb1, 0xc9, 0x67, 0xd2, 0x61, 0x8a, 0x43, 0x14, 0xa2, 0x93, 0x20, 0xf1,
	0xc6, 0x54, 0x65, 0x70, 0xd7, 0x0b, 0x85, 0x68, 0x9e, 0x08, 0x26, 0x56, 0x2c, 0x41, 0x45, 0x2b,
	0xee, 0x8d, 0xc1, 0x3e, 0x3c, 0xb4, 0xbe, 0x57, 0x58, 0x42, 0x81, 0x0e, 0x53, 0x1c, 0x45, 0x29,
	0xcf, 0xb8, 0x94, 0x1b, 0xe7, 0x4b, 0x79, 0x36, 0x25, 0x85, 0x8f, 0xf0, 0x4d, 0x24, 0x93, 0x84,
	0xc5, 0x0e, 0xf1, 0x69, 0xb4, 0xeb, 0x05, 0x7d, 0x11, 0x2f, 0x2c, 0xa1, 0x6e, 0xbd, 0x89, 0xed,
	0x29, 0x04, 0x94, 0x70, 0x15, 0x64, 0x91, 0xa7, 0x52, 0xd6, 0xeb, 0xe7, 0xca, 0x52, 0x08, 0x28,
	0xe1, 0xe2, 0x0e, 0x9c, 0x90, 0x68, 0x44, 0x13, 0xfe, 0xb8, 0x9f, 0x78, 0xbe, 0x8a, 0x4e, 0xd6,
	0xda, 0x66, 0xe5, 0x56, 0x25, 0x73, 0xe0, 0xbd, 0x32, 0x10, 0x94, 0xf3, 0xe2, 0xcf, 0xd1, 0x0d,
	0x1a, 0xf0, 0xb2, 0x57, 0xb9, 0xfd, 0x2e, 0x0b, 0xbc, 0x84, 0x45, 0xfc, 0x7b, 0xf6, 0x7d, 0xa1,
	0xb9, 0x0d, 0x25, 0xf6, 0xc6, 0x76, 0x39, 0x0c, 0xce, 0xe3, 0xe7, 0x7e, 0x6e, 0x90, 0x94, 0xd9,
	0x59, 0x37, 0x85, 0x63, 0x69, 0x3f, 0xdf, 0x2e, 0xc1, 0x40, 0x29, 0x27, 0xf7, 0x53, 0x39, 0xce,
	0xdf, 0x22, 0x15, 0xf7, 0x86, 0xe9, 0xa7, 0xdb, 0x45, 0x00, 0x4c, 0xf3, 0xe0, 0x5d, 0xf4, 0x9a,
	0x9a, 0x60, 0x12, 0x27, 0x6c, 0xbc, 0x4b, 0x93, 0xc8, 0x73, 0x62, 0x6b, 0x5d, 0xbc, 0xf1, 0xf7,
	0x95, 0xa8, 0xd7, 0xb6, 0xa7, 0x21, 0x50, 0xc6, 0x87, 0x7f, 0x86, 0x5e, 0x97, 0xc3, 0xed, 0x81,
	0x1d, 0x8b, 0x50, 0xde, 0x21, 0xb1, 0xe7, 0xb4, 0x27, 0xae, 0x97, 0x58, 0x1b, 0x62, 0x7d, 0x6f,
	0x2a, 0xa1, 0xaf, 0x6f, 0x9f, 0x07, 0x84, 0xf3, 0x65, 0x70, 0x33, 0x32, 0x14, 0xd2, 0xf6, 0x69,
	0x94, 0x58, 0x9b, 0x66, 0x5c, 0xd9, 0x9e, 0x42, 0x40, 0x09, 0x57, 0xb6, 0x58, 0xae, 0x90, 0x41,
	0xc4, 0x0e, 0x7c, 0x3a, 0xee, 0xd1, 0x84, 0x3a, 0x09, 0x8b, 0xac, 0x37, 0xcb, 0x16, 0x5b, 0x02,
	0x84, 0xf3, 0x65, 0x64, 0xbb, 0x04, 0x34, 0x76, 0x8e, 0xa8, 0x3b, 0xf1, 0x69, 0x64, 0x35, 0xcb,
	0x76, 0x29, 0x07, 0x80, 0x69, 0x1e, 0x7c, 0x90, 0xda, 0xe6, 0x67, 0xf4, 0xe0, 0x88, 0xb1, 0x63,
	0xf1, 0xa1, 0x15, 0xce, 0x6e, 0xbd, 0x25, 0xc4, 0xdd, 0x52, 0xe2, 0x36, 0xb7, 0x4b, 0x61, 0x3c,
	0xc2, 0xab, 0x26, 0xd6, 0x79, 0x82, 0x30, 0x39, 0x6f, 0x8e, 0x67, 0xd6, 0x0f, 0xc4, 0x1c, 0x3f,
	0x54, 0x73, 0x6c, 0x94, 0xcf, 0xa1, 0x73, 0x84, 0xf3, 0xa6, 0x78, 0x86, 0x6d, 0xb4, 0xaa, 0xde,
	0xed, 0x80, 0x38, 0x52, 0xf4, 0x6f, 0x09, 0xd1, 0x05, 0xd7, 0x82, 0x4e, 0xbb, 0x6b, 0x8a, 0x2c,
	0xf2, 0x65, 0x76, 0x20, 0xf4, 0x3e, 0x39, 0xf0, 0x3d, 0xc7, 0x1e, 0x58, 0x6f, 0x0b, 0x69, 0x05,
	0x3b, 0xc8, 0x23, 0xa0, 0x84, 0x2b, 0x73, 0xcf, 0xbe, 0x0c, 0x7e, 0x2a, 0xdc, 0x58, 0x3f, 0x2c,
	0x73, 0x4f, 0x13, 0x03, 0xa5, 0x9c, 0x5c, 0x62, 0x96, 0x06, 0xca, 0xbc, 0x4e, 0x7c, 0x8c, 0x6f,
	0x99, 0x1f, 0xf6, 0x07, 0x25, 0x18, 0x28, 0xe5, 0xe4, 0x01, 0x5d, 0x1d, 0x3d, 0xa8, 0xb4, 0xc3,
	0x0e, 0xad, 0x77, 0xcc, 0x80, 0xbe, 0x6b, 0xd2, 0x07, 0x30, 0xc5, 0x91, 0x1d, 0xdf, 0xf4, 0xbc,
	0xf8, 0xd8, 0xee, 0x59, 0x3f, 0x2a, 0x3b, 0xbe, 0x11, 0x34, 0x17, 0x0c, 0x64, 0x76, 0x50, 0xc2,
	0x9f, 0xf7, 0x4e, 0x43, 0x6a, 0xfd, 0x76, 0xd9, 0x41, 0x49, 0x4a, 0x85, 0x02, 0xda, 0xe4, 0x1f,
	0x7a, 0xcf, 0xa8, 0xf5, 0xae, 0x08, 0xfd, 0x25, 0xfc, 0x9c, 0x0a, 0x05, 0x34, 0xde, 0x42, 0x0d,
	0x75, 0x00, 0x72, 0x3c, 0xb1, 0xde, 0x33, 0x1b, 0x4e, 0xea, 0x94, 0xe4, 0xc1, 0x3e, 0x64, 0x98,
	0x4c, 0x61, 0x40, 0x45, 0x10, 0x71, 0xed, 0xd0, 0x6a, 0x95, 0x29, 0x4c, 0xd3, 0xb5, 0xc2, 0x32,
	0x8e, 0x4c, 0x4a, 0x9a, 0x42, 0xda, 0xa1, 0xb5, 0x55, 0x26, 0x45, 0xd3, 0xb5, 0x94, 0x8c, 0x83,
	0xab, 0x9d, 0xd7, 0xee, 0x5a, 0x75, 0xef, 0x9b, 0x6a, 0xef, 0xe7, 0x68, 0x60, 0x20, 0xf3, 0x9c,
	0x42, 0x69, 0xb7, 0x85, 0xd2, 0xa6, 0x38, 0x85, 0xca, 0x0c, 0x64, 0xf3, 0x97, 0x35, 0x74, 0x39,
	0x57, 0x75, 0x52, 0x5e, 0x33, 0x70, 0xcb, 0x4a, 0x8b, 0x8f, 0x8a, 0xd9, 0x98, 0x7f, 0x90, 0x91,
	0x20, 0x8f, 0xe3, 0x79, 0xad, 0xdb, 0x1f, 0x9a, 0x5d, 0x54, 0x9d, 0xd7, 0xf6, 0x34, 0x05, 0x72,
	0x28, 0xbe, 0xd9, 0xc7, 0x66, 0xa9, 0x53, 0x33, 0x8d, 0xa5, 0x50, 0xe4, 0x14, 0xd0, 0xf8, 0x97,
	0x15, 0xb4, 0xca, 0x87, 0x7c, 0x9a, 0xa8, 0xa1, 0xd8, 0x9a, 0xdb, 0xac, 0xdd, 0x5a, 0xba, 0xf3,
	0xf0, 0x62, 0x35, 0x37, 0x6d, 0x3d, 0x30, 0xc5, 0x6d, 0x07, 0x49, 0x74, 0x9a, 0xf5, 0xd4, 0x0a,
	0x54, 0x28, 0xce, 0xbe, 0xd6, 0x41, 0xd7, 0xca, 0x24, 0xe0, 0x2b, 0xa8, 0x76, 0x4c, 0x4f, 0xa5,
	0x32, 0x81, 0xff, 0xc4, 0xd7, 0x50, 0xfd, 0x84, 0xf8, 0x13, 0x79, 0xb0, 0xb3, 0x0c, 0xf2, 0xe1,
	0xa3, 0xea, 0xfd, 0x4a, 0xf3, 0xeb, 0x1a, 0x5a, 0x36, 0xfa, 0x00, 0xf8, 0x2e, 0xaa, 0x87, 0x47,
	0x24, 0x4e, 0xfb, 0xdd, 0x69, 0xde, 0x52, 0x1f, 0xf0, 0xc1, 0x17, 0x67, 0x1b, 0xe9, 0x06, 0x8a,
	0x67, 0x90, 0x58, 0xd9, 0xab, 0x24, 0xb1, 0xde, 0x8c, 0x5c, 0xaf, 0x92, 0x8f, 0x82, 0xa2, 0x72,
	0xd3, 0x8d, 0xe3, 0xa3, 0x07, 0xf4, 0x54, 0x1b, 0x62, 0x7a, 0x02, 0xa8, 0x4d, 0x77, 0x38, 0xfc,
	0xd4, 0xa0, 0xc3, 0x14, 0x07, 0xfe, 0x49, 0xda, 0x82, 0x98, 0xbb, 0x40, 0x3f, 0x45, 0x77, 0xa9,
	0xce, 0x69, 0x42, 0x0c, 0x51, 0x43, 0x97, 0x7c, 0x56, 0x5d, 0x6c, 0xf0, 0x46, 0xae, 0x1d, 0xd4,
	0x72, 0x58, 0x44, 0x5b, 0x27, 0xb7, 0x5b, 0x22, 0xba, 0xca, 0x13, 0xf4, 0xcc, 0xf6, 0xdb, 0x03,
	0x5b, 0x8d, 0xd1, 0x18, 0x32, 0x39, 0xf8, 0x4b, 0x84, 0x22, 0xed, 0xd2, 0xd6, 0xbc, 0x90, 0x3a,
	0x4b, 0x2b, 0x22, 0x8b, 0x07, 0x99, 0x77, 0x64, 0x63, 0x31, 0xe4, 0xa4, 0x37, 0xff, 0xa5, 0x82,
	0x50, 0x56, 0x51, 0xfd, 0x3f, 0x74, 0xb7, 0x7e, 0x62, 0x74, 0xb7, 0x3e, 0x9c, 0x65, 0x37, 0xf4,
	0x32, 0xcf, 0x6b, 0x70, 0x35, 0xcf, 0x2a, 0x68, 0xc5, 0x84, 0xe1, 0x77, 0xd1, 0x62, 0x68, 0xf6,
	0xde, 0xf5, 0x59, 0x93, 0x6e, 0xbb, 0x6b, 0x04, 0xa6, 0x68, 0x4e, 0xbc, 0x7b, 0x55, 0x28, 0xbd,
	0x7b, 0xe1, 0xd5, 0xb5, 0x7a, 0x24, 0x21, 0xd2, 0x45, 0xf5, 0x3a, 0xf9, 0x10, 0x08, 0xf1, 0x6b,
	0x3f, 0x46, 0x0d, 0x0d, 0xf8, 0x4d, 0x1e, 0xd8, 0xc8, 0x7b, 0xe0, 0x2e, 0x5a, 0xea, 0xf5, 0x87,
	0xfa, 0x80, 0x60, 0xba, 0x58, 0xae, 0xcc, 0x52, 0x2c, 0x37, 0xff, 0xbb, 0x8a, 0x56, 0x76, 0xba,
	0xdb, 0xc5, 0xb3, 0x56, 0x9e, 0xef, 0xf0, 0x7a, 0xab, 0x78, 0xd6, 0xaa, 0xc6, 0x41, 0x23, 0xf8,
	0x47, 0x4d, 0xfc, 0xee, 0x30, 0xf7, 0x54, 0x79, 0xb3, 0xfe, 0xa8, 0xed, 0xa5, 0x04, 0xc8, 0x30,
	0x9c, 0x41, 0x1d, 0x59, 0x68, 0x67, 0xd6, 0x0c, 0x83, 0x94, 0x00, 0x19, 0x86, 0x07, 0x7d, 0xd5,
	0x3a, 0xcb, 0x5d, 0xbb, 0xd0, 0x66, 0xdd, 0xcf, 0x48, 0x90, 0xc7, 0xe1, 0x5b, 0xf2, 0x82, 0xc1,
	0x1e, 0x19, 0xc5, 0xc2, 0x2f, 0x1b, 0x9d, 0xcb, 0xe9, 0xe5, 0x02, 0x3e, 0x06, 0x9a, 0xca, 0xf3,
	0x30, 0xfe, 0x3b, 0x3d, 0x13, 0x90, 0xa7, 0x39, 0xaa, 0x4b, 0xa6, 0xf3, 0xb0, 0xfe, 0x14, 0x02,
	0x4a, 0xb8, 0xc4, 0x37, 0x5e, 0x77, 0xf6, 0x16, 0x44, 0xf2, 0x75, 0x75, 0xaa, 0xb3, 0x97, 0xeb,
	0xd0, 0x35, 0x7f, 0x1f, 0x35, 0x74, 0xd3, 0xb9, 0x70, 0x92, 0x5f, 0x79, 0xa5, 0x93, 0xfc, 0xcf,
	0xd1, 0xc2, 0x4e, 0x57, 0xde, 0xaf, 0x79, 0x1b, 0xcd, 0x4b, 0x82, 0x62, 0xd5, 0x61, 0x55, 0xb2,
	0x82, 0xa2, 0xbe, 0xf2, 0x41, 0xd6, 0xdf, 0x57, 0x10, 0xca, 0x8e, 0x1d, 0x70, 0x4b, 0x5d, 0x7f,
	0x71, 0x58, 0x48, 0x63, 0xab, 0x22, 0x74, 0xba, 0xa2, 0xaf, 0xbe, 0x88, 0x51, 0xc8, 0x21, 0x70,
	0x84, 0x56, 0x46, 0x8e, 0x71, 0xe4, 0x38, 0xbb, 0xcb, 0x9b, 0xb6, 0x39, 0x7d, 0xe0, 0x58, 0x98,
	0xa1, 0xf9, 0x53, 0x84, 0xb2, 0xc3, 0x87, 0x73, 0x0f, 0x1f, 0x2b, 0x17, 0x3d, 0x7c, 0x6c, 0xbe,
	0x87, 0x1a, 0x0f, 0x99, 0xa3, 0x22, 0xcb, 0x26, 0x9a, 0x0b, 0x49, 0x72, 0xa4, 0xc4, 0x69, 0x37,
	0x17, 0x47, 0x5a, 0x82, 0xd2, 0xfc, 0x9b, 0x1a, 0xca, 0xf5, 0x80, 0x85, 0xed, 0x33, 0x57, 0x9e,
	0x51, 0x16, 0x8f, 0x1c, 0x07, 0x29, 0x01, 0x32, 0x0c, 0xfe, 0x18, 0x2d, 0xf3, 0x40, 0xed, 0x39,
	0x54, 0x31, 0x55, 0xcd, 0x36, 0xcc, 0x30, 0x4f, 0x04, 0x13, 0xcb, 0x67, 0x73, 0x83, 0x58, 0xf5,
	0x05, 0x0b, 0x9e, 0xd6, 0xeb, 0x0f, 0x55, 0x2f, 0x30, 0xc3, 0xe0, 0x36, 0x5a, 0x55, 0x1e, 0xa4,
	0x0f, 0x2b, 0x0b, 0x17, 0x18, 0xfa, 0x26, 0x19, 0x8a, 0x78, 0xd1, 0xd5, 0x0d, 0x62, 0xf9, 0x19,
	0xb3, 0x07, 0xea, 0x10, 0x31, 0xeb, 0xea, 0xf6, 0x87, 0x29, 0x09, 0xf2, 0x38, 0x5e, 0x65, 0x06,
	0x2c, 0xd8, 0x25, 0xf1, 0x2f, 0x26, 0x34, 0x22, 0xb2, 0x27, 0x57, 0xec, 0x53, 0xf7, 0x8b, 0x00,
	0x98, 0xe6, 0xc9, 0x5d, 0xee, 0x92, 0xfa, 0x5a, 0x28, 0xbd, 0xdc, 0x25, 0xd5, 0x65, 0x20, 0x9b,
	0xbf, 0xaa, 0xa2, 0x39, 0x71, 0x3f, 0xec, 0xbb, 0xff, 0x02, 0xee, 0x1b, 0x5f, 0xc0, 0xbb, 0xb3,
	0x9c, 0x31, 0xa4, 0xc7, 0x6a, 0x65, 0x87, 0x3b, 0x7f, 0x52, 0x38, 0xdc, 0xf9, 0x60, 0x56, 0xc1,
	0x2f, 0x3f, 0xd9, 0xf9, 0xdb, 0x2a, 0x6a, 0x70, 0x98, 0xbc, 0x6c, 0xf2, 0xdd, 0x6b, 0xe9, 0x0b,
	0x43, 0x4b, 0xf7, 0x67, 0x7c, 0x19, 0xb1, 0xca, 0x73, 0x55, 0x75, 0x50, 0x50, 0xd5, 0x47, 0x17,
	0x92, 0xfe, 0x72, 0x7d, 0xfd, 0x53, 0x0d, 0x61, 0x8d, 0xed, 0xb2, 0xc0, 0xf5, 0x44, 0x8f, 0xee,
	0x23, 0x34, 0x97, 0xf0, 0x02, 0x4a, 0xba, 0xff, 0xdb, 0xe9, 0xe2, 0x78, 0xa9, 0xf4, 0xe2, 0x6c,
	0xe3, 0x7b, 0xd3, 0x1c, 0xa2, 0xa4, 0x12, 0x3c, 0xf8, 0x43, 0xbd, 0x6c, 0x19, 0x07, 0xde, 0x34,
	0xa7, 0x7e, 0x71, 0xb6, 0xb1, 0xaa, 0xd9, 0xcc, 0xd5, 0xe4, 0x52, 0xee, 0xb9, 0x97, 0xa6, 0xdc,
	0xb9, 0x9b, 0x5a, 0xf5, 0x97, 0xdf, 0xd4, 0xc2, 0x5f, 0xa2, 0x15, 0x9f, 0xc4, 0xc9, 0x7e, 0xe8,
	0x92, 0x84, 0xee, 0x79, 0x63, 0x79, 0x65, 0x71, 0xe9, 0xce, 0x8f, 0x5e, 0xcd, 0x10, 0x38, 0x47,
	0x96, 0xa7, 0x3c, 0x34, 0x24, 0x41, 0x41, 0x32, 0x3e, 0x41, 0x98, 0x8f, 0xec, 0x45, 0x24, 0x88,
	0xa5, 0x56, 0x3c, 0x75, 0x6b, 0x69, 0xb6, 0xf9, 0xb2, 0xbe, 0xfd, 0x94, 0x34, 0x28, 0x99, 0xa1,
	0xf9, 0x57, 0x15, 0xb4, 0x6c, 0x98, 0x13, 0xf6, 0xd0, 0x62, 0x42, 0xc7, 0xa1, 0x4f, 0x12, 0x7a,
	0x81, 0x2b, 0x34, 0x22, 0xfd, 0x50, 0xec, 0xc2, 0x3a, 0x73, 0xf7, 0xd8, 0xe4, 0x28, 0x68, 0xf1,
	0xf8, 0x2d, 0x54, 0x0f, 0x44, 0x8b, 0x79, 0x4e, 0x94, 0xcc, 0xba, 0x00, 0x91, 0x5d, 0x65, 0x49,
	0x6b, 0xfe, 0x43, 0x0d, 0xad, 0x16, 0x4c, 0x32, 0x63, 0xac, 0x9c, 0xcf, 0xc8, 0x63, 0xee, 0xe1,
	0xc4, 0xf7, 0x4f, 0x1f, 0x12, 0x5e, 0x14, 0xba, 0xb2, 0x99, 0x5d, 0x15, 0x0c, 0x3a, 0xe6, 0x7e,
	0x52, 0x04, 0xc0, 0x34, 0x0f, 0xcf, 0x9f, 0xd8, 0x81, 0xac, 0x27, 0x76, 0xe4, 0xc5, 0xe3, 0xb4,
	0x5c, 0xce, 0xb5, 0xc5, 0x1f, 0x4d, 0x21, 0xa0, 0x84, 0x8b, 0x67, 0x40, 0x11, 0x25, 0xee, 0x69,
	0x3f, 0xf7, 0xde, 0x3a, 0x4c, 0x80, 0xa6, 0x40, 0x0e, 0xc5, 0x73, 0x60, 0x72, 0x42, 0x3c, 0x3f,
	0x6d, 0x62, 0xc9, 0xbb, 0x2b, 0xb9, 0xbe, 0x4c, 0xdb, 0xa0, 0x42, 0x01, 0x8d, 0x7f, 0x81, 0x90,
	0x93, 0x7a, 0x4d, 0xac, 0xaa, 0xad, 0xdf, 0xbd, 0x48, 0x40, 0xd0, 0xbe, 0x97, 0x3b, 0x35, 0xd3,
	0x82, 0x21, 0x37, 0x49, 0xf3, 0xd7, 0x55, 0xb4, 0x98, 0xc6, 0x72, 0x9e, 0x46, 0x44, 0xcc, 0xa7,
	0xc5, 0x34, 0x02, 0x98, 0x4f, 0x41, 0x50, 0xf0, 0x1b, 0xa8, 0x16, 0x1f, 0x4f, 0x94, 0xd3, 0xeb,
	0x93, 0xeb, 0xe1, 0x83, 0x7d, 0xe0, 0xe3, 0x22, 0x4b, 0x08, 0x59, 0x92, 0xa6, 0x31, 0x32, 0xa8,
	0x2d, 0xe6, 0xb2, 0x84, 0x3c, 0x11, 0x4c, 0x2c, 0xbe, 0x57, 0x68, 0xec, 0x14, 0x6e, 0xce, 0x9e,
	0xd3, 0xd4, 0xb9, 0x57, 0x68, 0xea, 0x48, 0x8d, 0x1b, 0x5c, 0xd3, 0x0d, 0x1d, 0xfc, 0x29, 0x5a,
	0xa1, 0xba, 0xc9, 0x24, 0x66, 0x93, 0xdf, 0xf8, 0xcd, 0x74, 0xa7, 0xb6, 0x0d, 0xea, 0x8b, 0xb3,
	0x8d, 0x79, 0xf9, 0x0b, 0x0a, 0x7c, 0xcd, 0x6f, 0xaa, 0x08, 0x65, 0xdf, 0x2c, 0xfc, 0xbe, 0xd9,
	0x85, 0x58, 0x2b, 0x76, 0x21, 0xc4, 0x87, 0xcb, 0x68, 0x41, 0x6c, 0xa2, 0xb9, 0x80, 0x27, 0xd9,
	0x55, 0x53, 0xe9, 0x22, 0xbd, 0x16, 0x14, 0x6e, 0x8a, 0xb4, 0xd8, 0x76, 0xd0, 0xfb, 0x9a, 0x6b,
	0x38, 0xe4, 0x50, 0xa2, 0xd6, 0x4c, 0x1b, 0xb9, 0x05, 0x45, 0xea, 0xf6, 0xad, 0x46, 0xc8, 0x52,
	0xc8, 0x3b, 0x21, 0x09, 0xd5, 0xa9, 0x52, 0xae, 0x14, 0x52, 0x04, 0xc8, 0x30, 0x7c, 0xa3, 0xd3,
	0xc9, 0xc4, 0xcb, 0x28, 0xf5, 0xe9, 0x8d, 0xde, 0xce, 0x13, 0xc1, 0xc4, 0xf2, 0x2f, 0x80, 0x2b,
	0x5b, 0xa6, 0x0b, 0xe6, 0x17, 0x40, 0x35, 0x4b, 0x15, 0xb5, 0xe9, 0xa1, 0x2b, 0xc5, 0x28, 0xf5,
	0x1d, 0x65, 0x2c, 0xcd, 0x7f, 0xab, 0xa2, 0xe5, 0x81, 0x64, 0x53, 0xc5, 0xe7, 0x3b, 0x68, 0xc1,
	0x61, 0x41, 0x42, 0x9f, 0xa6, 0xf9, 0xb1, 0xfe, 0xfc, 0x74, 0xe5, 0x30, 0xa4, 0x74, 0xec, 0xa3,
	0xa5, 0xac, 0x98, 0x8d, 0x55, 0xc1, 0xfe, 0xc1, 0x85, 0x0a, 0xf6, 0x2c, 0x43, 0xcd, 0xc6, 0x62,
	0xc8, 0x8b, 0xc7, 0x3f, 0x45, 0xf5, 0x38, 0x61, 0x51, 0x1a, 0xf3, 0x67, 0xa9, 0x61, 0xd4, 0xa5,
	0xc3, 0x0e, 0x71, 0x8e, 0x69, 0xe0, 0x66, 0xd1, 0x98, 0x8f, 0x53, 0x90, 0x62, 0xf1, 0x1f, 0xa2,
	0x9a, 0x1b, 0xc4, 0x17, 0x68, 0x51, 0xe5, 0xba, 0x01, 0xf2, 0xd2, 0x52, 0xaf, 0x3f, 0x04, 0x2e,
	0xab, 0x79, 0x88, 0x50, 0xd6, 0xf4, 0xc1, 0x6b, 0xa8, 0xea, 0x85, 0x4a, 0xa9, 0xfa, 0x56, 0x9f,
	0x3d, 0x80, 0xaa, 0x17, 0x0a, 0x5a, 0x7a, 0x49, 0x3a, 0xa3, 0xf5, 0xa0, 0xea, 0xb9, 0xda, 0x51,
	0x6a, 0xe7, 0x39, 0x4a, 0xf3, 0xcf, 0x2a, 0x68, 0x7e, 0x78, 0x37, 0xed, 0xb5, 0xd0, 0xc0, 0x0d,
	0x99, 0x17, 0x24, 0xc5, 0xde, 0xc1, 0xb6, 0x1a, 0x07, 0x8d, 0xc8, 0xd5, 0xab, 0xd5, 0x57, 0xac,
	0x57, 0x6b, 0x2f, 0xad, 0x57, 0xff, 0xb3, 0x82, 0xd0, 0xd0, 0x1b, 0x87, 0xea, 0x8f, 0x1e, 0xe9,
	0xca, 0x2b, 0xaf, 0xe8, 0xe2, 0xd5, 0x99, 0x5d, 0xbc, 0x36, 0x9b, 0x8b, 0xcf, 0xbd, 0x82, 0x8b,
	0x67, 0x5e, 0x5a, 0x7f, 0xa9, 0x97, 0xfe, 0x57, 0x0d, 0xad, 0x98, 0x86, 0xf5, 0x7f, 0xed, 0x05,
	0xe1, 0x7d, 0x54, 0xf7, 0x79, 0x6d, 0x7b, 0x81, 0x7b, 0x73, 0xba, 0x26, 0x96, 0x17, 0x09, 0xc5,
	0x23, 0x48, 0x69, 0xd8, 0x46, 0xd5, 0xf8, 0xae, 0x72, 0x9b, 0xdb, 0xb3, 0xb8, 0x8d, 0x30, 0xa9,
	0xce, 0x3c, 0xb7, 0xc5, 0xe1, 0x5d, 0xa8, 0xc6, 0x77, 0xf1, 0x2e, 0xaa, 0x8d, 0x9c, 0xd4, 0x49,
	0xee, 0xcc, 0xd4, 0x46, 0x18, 0xe6, 0x6f, 0x4e, 0x0e, 0x81, 0xcb, 0xc1, 0x7f, 0x9c, 0xde, 0x9c,
	0xac, 0x5f, 0xec, 0x2a, 0x74, 0xee, 0x36, 0x71, 0xc9, 0x05, 0xca, 0x7d, 0x54, 0x8f, 0x9f, 0x78,
	0x87, 0x89, 0xca, 0x8a, 0x67, 0x51, 0xe7, 0x90, 0xf3, 0x65, 0x62, 0xc5, 0x23, 0x48, 0x69, 0x4d,
	0x17, 0x35, 0x34, 0xf9, 0xbb, 0xbb, 0xc3, 0xfc, 0x3f, 0x15, 0xb4, 0xb0, 0x1f, 0x8e, 0x78, 0x5d,
	0x2d, 0x6a, 0x7a, 0xaa, 0xff, 0x1f, 0x51, 0x3c, 0x75, 0xe9, 0x65, 0x24, 0xc8, 0xe3, 0xf0, 0xcf,
	0xd0, 0xfc, 0x01, 0x3d, 0xe4, 0x21, 0x53, 0xda, 0xd3, 0x8f, 0x2f, 0x78, 0xee, 0x91, 0x0b, 0x0b,
	0x42, 0x1c, 0x28, 0xb1, 0x62, 0xfb, 0x0e, 0x13, 0x1a, 0x29, 0xdb, 0xba, 0xb0, 0x7c, 0x1d, 0x90,
	0xdb, 0x5c, 0x1a, 0x48, 0xa1, 0x9d, 0xd6, 0x57, 0xdf, 0xae, 0x5f, 0xfa, 0xfa, 0xdb, 0xf5, 0x4b,
	0xdf, 0x7c, 0xbb, 0x7e, 0xe9, 0x4f, 0x9f, 0xaf, 0x57, 0xbe, 0x7a, 0xbe, 0x5e, 0xf9, 0xfa, 0xf9,
	0x7a, 0xe5, 0x9b, 0xe7, 0xeb, 0x95, 0x7f, 0x7f, 0xbe, 0x5e, 0xf9, 0xf3, 0xff, 0x58, 0xbf, 0xf4,
	0xc5, 0x62, 0x2a, 0xf2, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x8e, 0x93, 0x50, 0xea, 0x53, 0x38,
	0x00, 0x00,
}
